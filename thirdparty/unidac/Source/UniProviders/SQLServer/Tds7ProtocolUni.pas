//////////////////////////////////////////////////
//  SQL Server Data Access Components
//  Copyright © 1998-2021 Devart. All right reserved.
//  Access in Direct mode
//////////////////////////////////////////////////
{$I Sdac.inc}
unit Tds7ProtocolUni;
{$IFDEF MSWINDOWS}
{$DEFINE SSPI}
{$ENDIF}
interface
uses
{$IFDEF MSWINDOWS}
Windows,
{$ENDIF}
{$IFDEF MACOS}
{$IFDEF FPC}
CFBase,CFLocale,
{$ELSE}
Macapi.CoreFoundation,
{$ENDIF}
{$ENDIF}
Classes,SysUtils,TypInfo,SyncObjs,DateUtils,Variants,FmtBcd,
{$IFNDEF FPC}
StrUtils,SqlTimSt,
{$ENDIF}
{$IFDEF LOG_PACKETS}
LogHandler,
{$ENDIF}
CRTypes,CRFunctions,CRNumeric,CRTimeStamp,CRAccess,CRVio,CLRClasses,CRParser,
MemData,
{$IFNDEF UNIDACPRO}
{$IFDEF USE_SSL}
TdsSSLTypes,TdsLayers,TdsCipherSuites,TdsBridge,TdsUtils,
TdsClientHandshakeLayer,TdsSSLExtensions,
{$IFDEF SSPI}Tds7WinAuth,{$ENDIF}
{$ENDIF}
MSParser,TdsTypes,TdsConsts,Tds7Consts,TdsPackets,Tds7Packets,
TdsNet,Tds7Net,TdsProtocol,TdsSMPProtocol,SqlClasses;
{$ELSE}
{$IFDEF USE_SSL}
TdsSSLTypesUni,TdsLayersUni,TdsCipherSuitesUni,TdsBridgeUni,TdsUtilsUni,
TdsClientHandshakeLayerUni,TdsSSLExtensionsUni,
{$IFDEF SSPI}Tds7WinAuthUni,{$ENDIF}
{$ENDIF}
MSParserUni,TdsTypesUni,TdsConstsUni,Tds7ConstsUni,TdsPacketsUni,Tds7PacketsUni,
TdsNetUni,Tds7NetUni,TdsProtocolUni,TdsSMPProtocolUni,SqlClassesUni;
{$ENDIF}
type
OOCOQCQCQ0=(OQQOQCQCQ0,OCQOQCQCQ0,O0COQCQCQ0);
OQCOQCQCQ0=class
private
OCCOQCQCQ0:Integer;
O00QOQQCQ0:Boolean;
public
constructor Create(OQ0QOQQCQ0:Integer);
property OC0QOQQCQ0:integer read OCCOQCQCQ0 write OCCOQCQCQ0;
property O0OQOQQCQ0:boolean read O00QOQQCQ0 write O00QOQQCQ0;
end;
OOOQOQQCQ0=class(OOQQ0QQOQ0)
private
OQOQOQQCQ0:OQCOQCQCQ0;
OCOQOQQCQ0:Integer;
O0QQOQQCQ0:Integer;
OOQQOQQCQ0:Boolean;
OQQQOQQCQ0:boolean;
OCQQOQQCQ0:string;
O0CQOQQCQ0:string;
OOCQOQQCQ0:integer;
procedure OQCQOQQCQ0(OCCQOQQCQ0:OCO0QQCOQ0;O00COQQCQ0:Integer;OO0COQQCQ0:Boolean=False);
procedure OC0COQQCQ0(var O0OCOQQCQ0:OCOQQCQOQ0;OOOCOQQCQ0:O0QCQQCOQ0;
OQOCOQQCQ0:Byte;OCOCOQQCQ0:Cardinal=0;O0QCOQQCQ0:Byte=0);
function OOQCOQQCQ0(const OQQCOQQCQ0:OCOQQCQOQ0;const OCQCOQQCQ0:Variant):string;
procedure OCCCOQQCQ0(O000OQQCQ0:Boolean;const OO00OQQCQ0:Variant);
procedure OO0OOQQCQ0(const OQ0OOQQCQ0:OCOQQCQOQ0;const OC0OOQQCQ0:Variant);
procedure O0COOQQCQ0(OOCOOQQCQ0:Boolean;OQCOOQQCQ0:Integer=0;OCCOOQQCQ0:Integer=MaxInt);
procedure OC0Q0QQCQ0;
procedure OOQQ0QQCQ0(const OQQQ0QQCQ0:Variant;OCQQ0QQCQ0:Boolean;O0CQ0QQCQ0:Boolean);
procedure OQ0C0QQCQ0(const OC0C0QQCQ0:Variant;O0OC0QQCQ0:Boolean);
procedure OQQC0QQCQ0;
procedure OO000QQCQ0(OQ000QQCQ0:integer);
procedure OCO00QQCQ0(O0Q00QQCQ0:integer);
procedure OCQ00QQCQ0;
procedure O0OO0QQCQ0(OOOO0QQCQ0:Word=0);
procedure OQQOCQQOQ0;overload;
procedure OOCO0QQCQ0;
procedure OCCO0QQCQ0;
function O00QCQQCQ0:integer;
procedure OO0QCQQCQ0;
protected
function OQC00QQOQ0:OQQOO0COQ0;override;
procedure OCQ00QQOQ0(OQ0QCQQCQ0:OQOCQCQOQ0);override;
function O0OO0QQOQ0(const OC0QCQQCQ0:O00CQQCOQ0):Encoding;override;
function OQOO0QQOQ0(const OQOQCQQCQ0:O00CQQCOQ0):Encoding;override;
function O0QO0QQOQ0:Encoding;override;
class procedure OCOQCQQCQ0(const O0QQCQQCQ0:TSQLTimeStamp;OOQQCQQCQ0:Byte;OQQQCQQCQ0:Pointer);
class procedure OCCQCQQCQ0(const O00CCQQCQ0:TSQLTimeStampOffset;OO0CCQQCQ0:Byte;OQ0CCQQCQ0:Pointer);
function O0QQCQQOQ0(const O0QCCQQCQ0:O0Q0QQCOQ0;OOQCCQQCQ0:Pointer;OQQCCQQCQ0:Integer):Variant;override;
procedure OQ0CCQQOQ0(OO00CQQCQ0:OCO0QQCOQ0);override;
procedure O0OCCQQOQ0(OC00CQQCQ0:OCO0QQCOQ0);override;
procedure O0QCCQQOQ0(const O0O0CQQCQ0:O0Q0QQCOQ0;var OOO0CQQCQ0:OQ00QQCOQ0;OQO0CQQCQ0:Boolean);override;
procedure O000CQQOQ0(OOQ0CQQCQ0:OC0OCCQOQ0;OQQ0CQQCQ0:OCOOCCQOQ0;OCQ0CQQCQ0:O00QQCQOQ0;
const O0C0CQQCQ0:OCOQQCQOQ0;const OOC0CQQCQ0:O0Q0QQCOQ0;const OQC0CQQCQ0:OQ00QQCOQ0);override;
procedure OQC0CQQOQ0(out OC0OCQQCQ0:boolean);override;
function OQCOCQQOQ0(OOQOCQQCQ0,OQQOCQQCQ0:Word):Boolean;override;
procedure OOCCQQQOQ0(OOOQQQQCQ0:Byte;OQOQQQQCQ0:Byte=0);override;
public
constructor Create(O0QQQQQCQ0:OQOCQCQOQ0);override;
function OOQQQQQCQ0:boolean;
procedure OCO0QQQOQ0(out OQQQQQQCQ0:Integer;out OCQQQQQCQ0:Boolean);override;
procedure O0Q0QQQOQ0(OOCQQQQCQ0:IntPtr;OQCQQQQCQ0:Integer;OCCQQQQCQ0:Boolean);override;
class function O0QOQQQOQ0(OO0CQQQCQ0:Byte;OQ0CQQQCQ0:Word;OC0CQQQCQ0:Pointer;O0OCQQQCQ0:Integer):TDateTime;override;
class procedure OCOCOOQOQ0(OCOCQQQCQ0:Byte;O0QCQQQCQ0:Word;OOQCQQQCQ0:Integer;OQQCQQQCQ0,OCQCQQQCQ0:Pointer);override;
function OCO0OOQOQ0(var OQCCQQQCQ0:OQ00QQCOQ0):Variant;override;
procedure OOQC0OQOQ0(OQO0QQQCQ0:Boolean);override;
procedure OOCC0OQOQ0(OOQ0QQQCQ0:Integer;var OQQ0QQQCQ0:Integer);override;
procedure OCQC0OQOQ0(const OQC0QQQCQ0:string);override;
procedure OCC0QQQCQ0(const O00OQQQCQ0,OO0OQQQCQ0:string;OQ0OQQQCQ0:Integer);
function OOOOQQQCQ0(OQOOQQQCQ0:Integer;OCOOQQQCQ0:Word;O0QOQQQCQ0:Integer=-1):Integer;
procedure OOQOQQQCQ0(OQQOQQQCQ0:Byte;OCQOQQQCQ0:Cardinal;O0COQQQCQ0:integer;const OOCOQQQCQ0:Variant);
procedure O00COOQCQ0(OO0COOQCQ0:Byte;OQ0COOQCQ0:Boolean;const OC0COOQCQ0:Variant);
procedure OCOCOOQCQ0(O0QCOOQCQ0:Byte;OOQCOOQCQ0:Boolean;const OQQCOOQCQ0:Variant);
procedure O0CCOOQCQ0(OOCCOOQCQ0:Boolean;OQCCOOQCQ0,OCCCOOQCQ0:Word;O000OOQCQ0:Byte;
OO00OOQCQ0:O00CCQCOQ0;const OQ00OOQCQ0:O00CQQCOQ0;const OC00OOQCQ0:string;O0O0OOQCQ0,OOO0OOQCQ0:Word;OQO0OOQCQ0:Integer);
procedure O0Q0OOQCQ0(OOQ0OOQCQ0:OQOCQCQOQ0;OQQ0OOQCQ0:Integer;OCQ0OOQCQ0:TCRIsolationLevel;
const O0C0OOQCQ0:string;const OOC0OOQCQ0:TBytes);
property OCC0OOQCQ0:boolean read OQQQOQQCQ0 write OQQQOQQCQ0;
property O00OOOQCQ0:string read OCQQOQQCQ0 write OCQQOQQCQ0;
property OO0OOOQCQ0:string read O0CQOQQCQ0 write O0CQOQQCQ0;
property OQ0OOOQCQ0:integer read OOCQOQQCQ0 write OOCQOQQCQ0;
end;
OC0OOOQCQ0=class
O0OOOOQCQ0:Int64;
OOOOOOQCQ0:Integer;
end;
OQOOOOQCQ0=class(OQOCQCQOQ0)
private
OCOOOOQCQ0:OOCOQCQCQ0;
{$IFDEF USE_SSL}
O0QOOOQCQ0:OCQCOQ00Q0;
OOQOOOQCQ0:OCQOC0Q0Q0;
OQQOOOQCQ0:OCQOC0Q0Q0;
{$IFDEF SSPI}
OCQOOOQCQ0:OQQ0Q0CCQ0;
{$ENDIF}
{$ENDIF}
O0COOOQCQ0:TCRObjectList;
OOCOOOQCQ0:OOOQOQQCQ0;
OQCOOOQCQ0:O00CQQCOQ0;
OCCOOOQCQ0:Byte;
O00Q0OQCQ0:string;
OO0Q0OQCQ0:OC0OOOQCQ0;
OQ0Q0OQCQ0:Boolean;
OC0Q0OQCQ0:string;
O0OQ0OQCQ0:Int64;
OOOQ0OQCQ0:Boolean;
OQOQ0OQCQ0:Boolean;
function OCOQ0OQCQ0:OQCOQCQCQ0;
procedure OQQQ0OQCQ0(OCQQ0OQCQ0:OC0OOOQCQ0);
protected
function O00OQCQOQ0(O0CQ0OQCQ0:pointer;OOCQ0OQCQ0,OQCQ0OQCQ0:Integer):Integer;override;
function O0OOQCQOQ0(OCCQ0OQCQ0:pointer;O00C0OQCQ0,OO0C0OQCQ0:Integer):Integer;override;
{$IFDEF USE_SSL}
procedure OC0C0OQCQ0(const O0OC0OQCQ0:TValueArr;OOOC0OQCQ0,OQOC0OQCQ0:integer);
function O0QC0OQCQ0(const OOQC0OQCQ0:TValueArr;OQQC0OQCQ0,OCQC0OQCQ0:integer):integer;
procedure O0CC0OQCQ0;
procedure OO000OQCQ0;
{$IFDEF SSPI}
procedure OQ000OQCQ0;
procedure OCO00OQCQ0;
{$ENDIF}
procedure O0Q00OQCQ0(OOQ00OQCQ0:TObject;OQQ00OQCQ0:TScCertificate;
OCQ00OQCQ0:TCRList;var O0C00OQCQ0:TScCertificateStatusSet);
procedure OOC00OQCQ0(out OQC00OQCQ0:boolean);
procedure OCC00OQCQ0(O00O0OQCQ0:TObject);
{$ENDIF}
procedure OO0O0OQCQ0(OQ0O0OQCQ0:OCQOO0COQ0;OC0O0OQCQ0:Integer);
procedure OCOO0OQCQ0(O0QO0OQCQ0:OCQOO0COQ0);
procedure OQCO0OQCQ0(OCCO0OQCQ0:OCQOO0COQ0);
procedure OCQQCOQCQ0(O0CQCOQCQ0:boolean);
procedure OO0CCOQCQ0(OQ0CCOQCQ0:OCQOO0COQ0);
procedure OCOCCOQCQ0(const O0QCCOQCQ0:O00QCOQOQ0);
public
constructor Create;override;
destructor Destroy;override;
procedure OCO0OQQOQ0(const OQ0OCOQCQ0:O00QCOQOQ0;OC0OCOQCQ0:boolean;
O0OOCOQCQ0:OOQ0CCQOQ0;OOOOCOQCQ0:OOC0CCQOQ0;OQOOCOQCQ0:O00OCCQOQ0);override;
procedure O0O0OQQOQ0;override;
function OQOOOQQOQ0:boolean;override;
property OCOOCOQCQ0:string read O00Q0OQCQ0 write O00Q0OQCQ0;
property O0QOCOQCQ0:OC0OOOQCQ0 read OO0Q0OQCQ0 write OQQQ0OQCQ0;
property OOQOCOQCQ0:Boolean read OQOQ0OQCQ0 write OQOQ0OQCQ0;
end;
implementation
{$UNDEF USE_CRYPTOAPI_STORAGE}
{$IFNDEF LINUX}
{$IFNDEF LINUX_BSD}
{$IFNDEF ANDROID}
{$DEFINE USE_CRYPTOAPI_STORAGE}
{$ENDIF}
{$ENDIF}
{$ENDIF}
const
OQQOCOQCQ0:Integer=MSecsPerDay;
OCQOCOQCQ0:Single=MSecsPerDay;
O0COCOQCQ0=MinsPerHour*SecsPerMin;
OOCOCOQCQ0=O0COCOQCQ0*MSecsPerSec;
OQCOCOQCQ0=SecsPerMin*MSecsPerSec;
OCCOCOQCQ0=SecsPerDay*300;
var
O00QQOQCQ0:array[0..OOCQO0CCQ0-1]of Encoding;
OO0QQOQCQ0:O00CQQCOQ0;
procedure OQ0QQOQCQ0;
const
OC0QQOQCQ0=OQC0QOCCQ0 or O00OQOCCQ0 or OO0OQOCCQ0;
var
O0OQQOQCQ0:Cardinal;
{$IFNDEF MSWINDOWS}
{$IFNDEF MACOS}
OOQ0OC0CQ0:string;
{$ENDIF}
{$ENDIF}
{$IFDEF MACOS}
{$IFDEF FPC}
OOOOOC0CQ0:CFLocaleRef;
{$ENDIF}
{$ENDIF}
begin
OO0QQOQCQ0.OC0CQQCOQ0:=0;
{$IFDEF MSWINDOWS}
O0OQQOQCQ0:=SysLocale.DefaultLCID;
{$ELSE}{$IFDEF ANDROID}
OOQ0OC0CQ0:=string(AnsiString(PAnsiChar(SysLocale.DefaultLCID)));
OOQ0OC0CQ0:=LeftStr(OOQ0OC0CQ0,2);
if not OQC0C0CCQ0.TryGetValue(OOQ0OC0CQ0,integer(O0OQQOQCQ0))then
O0OQQOQCQ0:=0;
{$ELSE}{$IFDEF MACOS}
{$IFNDEF FPC}
O0OQQOQCQ0:=CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(CFLocaleGetIdentifier(SysLocale.DefaultLCID));
{$ELSE}
OOOOOC0CQ0:=CFLocaleCopyCurrent;
try
O0OQQOQCQ0:=CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(CFLocaleGetIdentifier(OOOOOC0CQ0));
finally
CFRelease(OOOOOC0CQ0);
end;
{$ENDIF}
{$ELSE}
OOQ0OC0CQ0:=GetEnvironmentVariable('LC_ADDRESS');
OOQ0OC0CQ0:=LeftStr(OOQ0OC0CQ0,2);
if not OQC0C0CCQ0.TryGetValue(OOQ0OC0CQ0,integer(O0OQQOQCQ0))then
O0OQQOQCQ0:=0;
{$ENDIF MACOS}
{$ENDIF ANDROID}
{$ENDIF MSWINDOWS}
if O0OQQOQCQ0=0 then
O0OQQOQCQ0:=$409;
if(O0OQQOQCQ0 and$FF00)=0 then
O0OQQOQCQ0:=O0OQQOQCQ0 or$400;
OO0QQOQCQ0.OO0CQQCOQ0:=Word(O0OQQOQCQ0);
OO0QQOQCQ0.OQ0CQQCOQ0:=OC0QQOQCQ0 or((O0OQQOQCQ0 and$F0000)shr 16);
end;
constructor OQCOQCQCQ0.Create(OQ0QOQQCQ0:integer);
begin
inherited Create;
OCCOQCQCQ0:=OQ0QOQQCQ0;
O00QOQQCQ0:=True;
end;
constructor OOOQOQQCQ0.Create(O0QQQQQCQ0:OQOCQCQOQ0);
begin
inherited;
OQOQOQQCQ0:=nil;
OQ0C0QQOQ0:=@O0C0C0CCQ0;
OCOQOQQCQ0:=-1;
end;
function OOOQOQQCQ0.OQC00QQOQ0:OQQOO0COQ0;
begin
Result:=OQOOC0CCQ0;
end;
procedure OOOQOQQCQ0.OCQ00QQOQ0(OQ0QCQQCQ0:OQOCQCQOQ0);
begin
inherited;
OQOQOQQCQ0:=nil;
end;
function OOOQOQQCQ0.O0OO0QQOQ0(const OC0QCQQCQ0:O00CQQCOQ0):Encoding;
var
O0OQCQQCQ0,OOOQCQQCQ0:Integer;
begin
Result:=Encoding.Default;
OOOQCQQCQ0:=OCO0C0CCQ0[OC0QCQQCQ0.OC0CQQCOQ0];
if OOOQCQQCQ0<>0 then
O0OQCQQCQ0:=OOOQCQQCQ0
else begin
O0OQCQQCQ0:=OC0QCQQCQ0.OO0CQQCOQ0;
OOOQCQQCQ0:=OOC0C0CCQ0[O0OQCQQCQ0];
if OOOQCQQCQ0=0 then
Exit;
end;
Result:=O00QQOQCQ0[O0OQCQQCQ0];
if Result=nil then begin
O00QQOQCQ0[O0OQCQQCQ0]:={$IFDEF NEXTGEN}Encoding{$ENDIF}(Encoding.GetEncoding(OOOQCQQCQ0));
Result:=O00QQOQCQ0[O0OQCQQCQ0];
end;
end;
function OOOQOQQCQ0.OQOO0QQOQ0(const OQOQCQQCQ0:O00CQQCOQ0):Encoding;
begin
Result:=O0OO0QQOQ0(OQOQCQQCQ0);
end;
function OOOQOQQCQ0.O0QO0QQOQ0:Encoding;
begin
Result:=Encoding.Default;
end;
function OOOQOQQCQ0.OOQQQQQCQ0:Boolean;
begin
Result:=O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0;
end;
class function OOOQOQQCQ0.O0QOQQQOQ0(OO0CQQQCQ0:Byte;OQ0CQQQCQ0:Word;OC0CQQQCQ0:Pointer;O0OCQQQCQ0:Integer):TDateTime;
var
OOOCQQQCQ0,OQOCQQQCQ0:Int64;
begin
case OO0CQQQCQ0 of
OQ0OQCCOQ0:begin
OOOCQQQCQ0:=0;
Move(OC0CQQQCQ0^,OOOCQQQCQ0,3);
Dec(OOOCQQQCQ0,DateDelta-1);
Result:=OOOCQQQCQ0;
end;
OC0OQCCOQ0:begin
Assert((O0OCQQQCQ0>=3)and(O0OCQQQCQ0<=5));
Assert(OQ0CQQQCQ0<=7);
OQOCQQQCQ0:=0;
Move(OC0CQQQCQ0^,OQOCQQQCQ0,O0OCQQQCQ0);
OQOCQQQCQ0:=OQOCQQQCQ0*O0CQ0QCOQ0[OQ0CQQQCQ0];
OQOCQQQCQ0:=(OQOCQQQCQ0+5000)div OCCQ0QCOQ0;
if OQOCQQQCQ0>=OQQOCOQCQ0 then
Result:=(OQQOCOQCQ0-1)/OCQOCOQCQ0
else
Result:=(OQOCQQQCQ0 mod OQQOCOQCQ0)/OCQOCOQCQ0;
end;
O0OOQCCOQ0:begin
Assert((O0OCQQQCQ0>=6)and(O0OCQQQCQ0<=8));
Assert(OQ0CQQQCQ0<=7);
OQOCQQQCQ0:=0;
Move(OC0CQQQCQ0^,OQOCQQQCQ0,O0OCQQQCQ0-3);
OQOCQQQCQ0:=OQOCQQQCQ0*O0CQ0QCOQ0[OQ0CQQQCQ0];
Result:=(((OQOCQQQCQ0+5000)div OCCQ0QCOQ0)mod OQQOCOQCQ0)/OCQOCOQCQ0;
OOOCQQQCQ0:=0;
Move(PtrOffset(OC0CQQQCQ0,O0OCQQQCQ0-3)^,OOOCQQQCQ0,3);
Dec(OOOCQQQCQ0,DateDelta-1);
if OOOCQQQCQ0>=0 then
Result:=OOOCQQQCQ0+Result
else
Result:=OOOCQQQCQ0-Result;
end;
OOOOQCCOQ0:begin
Assert((O0OCQQQCQ0>=8)and(O0OCQQQCQ0<=10));
Assert(OQ0CQQQCQ0<=7);
OQOCQQQCQ0:=0;
Move(OC0CQQQCQ0^,OQOCQQQCQ0,O0OCQQQCQ0-5);
OQOCQQQCQ0:=OQOCQQQCQ0*O0CQ0QCOQ0[OQ0CQQQCQ0];
Result:=(((OQOCQQQCQ0+5000)div OCCQ0QCOQ0)mod OQQOCOQCQ0)/OCQOCOQCQ0;
OOOCQQQCQ0:=0;
Move(PtrOffset(OC0CQQQCQ0,O0OCQQQCQ0-5)^,OOOCQQQCQ0,3);
Dec(OOOCQQQCQ0,DateDelta-1);
if OOOCQQQCQ0>=0 then
Result:=OOOCQQQCQ0+Result
else
Result:=OOOCQQQCQ0-Result;
end;
else
Result:=inherited O0QOQQQOQ0(OO0CQQQCQ0,OQ0CQQQCQ0,OC0CQQQCQ0,O0OCQQQCQ0);
end;
end;
class procedure OOOQOQQCQ0.OCOCOOQOQ0(OCOCQQQCQ0:Byte;O0QCQQQCQ0:Word;OOQCQQQCQ0:Integer;OQQCQQQCQ0,OCQCQQQCQ0:Pointer);
var
O0CCQQQCQ0,OOCCQQQCQ0:Int64;
begin
case OCOCQQQCQ0 of
OQ0OQCCOQ0:begin
PSQLTimeStamp(OCQCQQQCQ0).Hour:=0;
PSQLTimeStamp(OCQCQQQCQ0).Minute:=0;
PSQLTimeStamp(OCQCQQQCQ0).Second:=0;
PSQLTimeStamp(OCQCQQQCQ0).Fractions:=0;
O0CCQQQCQ0:=0;
Move(OQQCQQQCQ0^,O0CCQQQCQ0,3);
Dec(O0CCQQQCQ0,DateDelta-1);
DecodeDate(O0CCQQQCQ0,Word(PSQLTimeStamp(OCQCQQQCQ0).Year),PSQLTimeStamp(OCQCQQQCQ0).Month,PSQLTimeStamp(OCQCQQQCQ0).Day);
end;
OC0OQCCOQ0:begin
Assert((OOQCQQQCQ0>=3)and(OOQCQQQCQ0<=5));
Assert(O0QCQQQCQ0<=7);
OOCCQQQCQ0:=0;
Move(OQQCQQQCQ0^,OOCCQQQCQ0,OOQCQQQCQ0);
OQCO0QQOQ0(OOCCQQQCQ0,OCQCQQQCQ0,O0QCQQQCQ0,True);
DecodeDate(0,Word(PSQLTimeStamp(OCQCQQQCQ0).Year),PSQLTimeStamp(OCQCQQQCQ0).Month,PSQLTimeStamp(OCQCQQQCQ0).Day);
end;
O0OOQCCOQ0:begin
Assert((OOQCQQQCQ0>=6)and(OOQCQQQCQ0<=8));
Assert(O0QCQQQCQ0<=7);
O0CCQQQCQ0:=0;
Move(PtrOffset(OQQCQQQCQ0,OOQCQQQCQ0-3)^,O0CCQQQCQ0,3);
Dec(O0CCQQQCQ0,DateDelta-1);
OOCCQQQCQ0:=0;
Move(OQQCQQQCQ0^,OOCCQQQCQ0,OOQCQQQCQ0-3);
O0CCQQQCQ0:=O0CCQQQCQ0+OQCO0QQOQ0(OOCCQQQCQ0,OCQCQQQCQ0,O0QCQQQCQ0,O0CCQQQCQ0=2958465);
DecodeDate(O0CCQQQCQ0,Word(PSQLTimeStamp(OCQCQQQCQ0).Year),PSQLTimeStamp(OCQCQQQCQ0).Month,PSQLTimeStamp(OCQCQQQCQ0).Day);
end;
OOOOQCCOQ0:begin
Assert((OOQCQQQCQ0>=8)and(OOQCQQQCQ0<=10));
Assert(O0QCQQQCQ0<=7);
O0CCQQQCQ0:=0;
Move(PtrOffset(OQQCQQQCQ0,OOQCQQQCQ0-5)^,O0CCQQQCQ0,3);
Dec(O0CCQQQCQ0,DateDelta-1);
OOCCQQQCQ0:=0;
Move(OQQCQQQCQ0^,OOCCQQQCQ0,OOQCQQQCQ0-5);
O0CCQQQCQ0:=O0CCQQQCQ0+OQCO0QQOQ0(OOCCQQQCQ0,OCQCQQQCQ0,O0QCQQQCQ0,O0CCQQQCQ0=2958465);
DecodeDate(O0CCQQQCQ0,Word(PSQLTimeStamp(OCQCQQQCQ0).Year),PSQLTimeStamp(OCQCQQQCQ0).Month,PSQLTimeStamp(OCQCQQQCQ0).Day);
end;
else
inherited;
end;
end;
class procedure OOOQOQQCQ0.OCOQCQQCQ0(const O0QQCQQCQ0:TSQLTimeStamp;OOQQCQQCQ0:Byte;OQQQCQQCQ0:Pointer);
var
OCQQCQQCQ0,O0CQCQQCQ0:Integer;
OOCQCQQCQ0,OQCQCQQCQ0:Int64;
begin
OOCQCQQCQ0:=O0QQCQQCQ0.Fractions;
if OOQQCQQCQ0<=0 then begin
O0CQCQQCQ0:=0;
OOCQCQQCQ0:=0;
end
else begin
if OOQQCQQCQ0>3 then
OOCQCQQCQ0:=OOCQCQQCQ0*OOCQ0QCOQ0[OOQQCQQCQ0-3];
while OOCQCQQCQ0>=OOCQ0QCOQ0[OOQQCQQCQ0+1]do
OOCQCQQCQ0:=OOCQCQQCQ0 div 10;
if OOCQCQQCQ0>=OOCQ0QCOQ0[OOQQCQQCQ0]then
OOCQCQQCQ0:=(OOCQCQQCQ0+5)div 10;
if OOCQCQQCQ0>=OOCQ0QCOQ0[OOQQCQQCQ0]then begin
O0CQCQQCQ0:=1;
OOCQCQQCQ0:=0;
end
else
O0CQCQQCQ0:=0;
end;
O0CQCQQCQ0:=O0CQCQQCQ0+O0QQCQQCQ0.Hour*O0COCOQCQ0+O0QQCQQCQ0.Minute*SecsPerMin+O0QQCQQCQ0.Second;
if O0CQCQQCQ0>=SecsPerDay then begin
OCQQCQQCQ0:=1;
O0CQCQQCQ0:=0;
end
else
OCQQCQQCQ0:=0;
OQCQCQQCQ0:=O0CQCQQCQ0*OOCQ0QCOQ0[OOQQCQQCQ0]+OOCQCQQCQ0;
Move(OQCQCQQCQ0,OQQQCQQCQ0^,OOQ0C0CCQ0[OOQQCQQCQ0]);
OCQQCQQCQ0:=OCQQCQQCQ0+Trunc(EncodeDate(Word(O0QQCQQCQ0.Year),O0QQCQQCQ0.Month,O0QQCQQCQ0.Day));
Inc(OCQQCQQCQ0,DateDelta-1);
Move(OCQQCQQCQ0,PtrOffset(OQQQCQQCQ0,OOQ0C0CCQ0[OOQQCQQCQ0]-3)^,3);
end;
class procedure OOOQOQQCQ0.OCCQCQQCQ0(const O00CCQQCQ0:TSQLTimeStampOffset;OO0CCQQCQ0:Byte;OQ0CCQQCQ0:Pointer);
var
OC0CCQQCQ0,O0OCCQQCQ0,OOOCCQQCQ0:Integer;
OQOCCQQCQ0:Int64;
OCOCCQQCQ0:SmallInt;
begin
OOOCCQQCQ0:=O00CCQQCQ0.Fractions;
if OO0CCQQCQ0<=0 then begin
O0OCCQQCQ0:=0;
OOOCCQQCQ0:=0;
end
else begin
if OO0CCQQCQ0>3 then
OOOCCQQCQ0:=OOOCCQQCQ0*OOCQ0QCOQ0[OO0CCQQCQ0-3];
while OOOCCQQCQ0>=OOCQ0QCOQ0[OO0CCQQCQ0+1]do
OOOCCQQCQ0:=OOOCCQQCQ0 div 10;
if OOOCCQQCQ0>=OOCQ0QCOQ0[OO0CCQQCQ0]then
OOOCCQQCQ0:=(OOOCCQQCQ0+5)div 10;
if OOOCCQQCQ0>=OOCQ0QCOQ0[OO0CCQQCQ0]then begin
O0OCCQQCQ0:=1;
OOOCCQQCQ0:=0;
end
else
O0OCCQQCQ0:=0;
end;
O0OCCQQCQ0:=O0OCCQQCQ0+O00CCQQCQ0.Hour*O0COCOQCQ0+O00CCQQCQ0.Minute*SecsPerMin+O00CCQQCQ0.Second;
if O0OCCQQCQ0>=SecsPerDay then begin
OC0CCQQCQ0:=1;
O0OCCQQCQ0:=0;
end
else
OC0CCQQCQ0:=0;
OQOCCQQCQ0:=O0OCCQQCQ0*OOCQ0QCOQ0[OO0CCQQCQ0]+OOOCCQQCQ0;
Move(OQOCCQQCQ0,OQ0CCQQCQ0^,OOQ0C0CCQ0[OO0CCQQCQ0]);
OC0CCQQCQ0:=OC0CCQQCQ0+Trunc(EncodeDate(Word(O00CCQQCQ0.Year),O00CCQQCQ0.Month,O00CCQQCQ0.Day));
Inc(OC0CCQQCQ0,DateDelta-1);
Move(OC0CCQQCQ0,PtrOffset(OQ0CCQQCQ0,OQQ0C0CCQ0[OO0CCQQCQ0]-5)^,3);
OCOCCQQCQ0:=O00CCQQCQ0.TimeZoneHour*60+O00CCQQCQ0.TimeZoneMinute;
Move(OCOCCQQCQ0,PtrOffset(OQ0CCQQCQ0,OQQ0C0CCQ0[OO0CCQQCQ0]-2)^,2);
end;
function OOOQOQQCQ0.O0QQCQQOQ0(const O0QCCQQCQ0:O0Q0QQCOQ0;OOQCCQQCQ0:Pointer;OQQCCQQCQ0:Integer):Variant;
var
OCQCCQQCQ0:AnsiString;
O0CCCQQCQ0:WideString;
OOCCCQQCQ0,OQCCCQQCQ0:TBytes;
OCCCCQQCQ0,O000CQQCQ0:Encoding;
begin
{$IFNDEF VER9P}
OQCCCQQCQ0:=nil;
{$ENDIF}
if O0QCCQQCQ0.OOOOQQCOQ0.OQQCCQCOQ0 then begin
if OQQCCQQCQ0>0 then begin
if OC0C0QQOQ0 then begin
OCCCCQQCQ0:=O0OO0QQOQ0(O0QCCQQCQ0.OQCOQQCOQ0);
O000CQQCQ0:=Encoding.Default;
end
else begin
OCCCCQQCQ0:=nil;
O000CQQCQ0:=nil;
end;
if OCCCCQQCQ0<>O000CQQCQ0 then begin
SetLength(OOCCCQQCQ0,OQQCCQQCQ0);
Move(OOQCCQQCQ0^,OOCCCQQCQ0[0],OQQCCQQCQ0);
OQCCCQQCQ0:=Encoding.Convert(OCCCCQQCQ0,O000CQQCQ0,OOCCCQQCQ0);
SetLengthA(OCQCCQQCQ0,Length(OQCCCQQCQ0));
if Length(OQCCCQQCQ0)>0 then
Move(OQCCCQQCQ0[0],PAnsiChar(OCQCCQQCQ0)^,Length(OQCCCQQCQ0));
end
else begin
SetLengthA(OCQCCQQCQ0,OQQCCQQCQ0);
Move(OOQCCQQCQ0^,PAnsiChar(OCQCCQQCQ0)^,OQQCCQQCQ0);
end;
Result:=OCQCCQQCQ0;
end
else
Result:=AnsiString('');
end
else begin
SetLength(O0CCCQQCQ0,OQQCCQQCQ0 shr 1);
if OQQCCQQCQ0>0 then
Move(OOQCCQQCQ0^,PWideChar(O0CCCQQCQ0)^,OQQCCQQCQ0);
Result:=O0CCCQQCQ0;
end;
end;
function OOOQOQQCQ0.OCO0OOQOQ0(var OQCCQQQCQ0:OQ00QQCOQ0):Variant;
var
OCCCQQQCQ0:integer;
O000QQQCQ0:Pointer;
OO00QQQCQ0:O0Q0QQCOQ0;
OQ00QQQCQ0:Byte;
OC00QQQCQ0:Int64;
O0O0QQQCQ0:Int64;
{$IFNDEF VER14P}
OQQ000OCQ0:TSQLTimeStamp;
{$ENDIF}
OOO0QQQCQ0:TSQLTimeStampOffset;
begin
OCCCQQQCQ0:=Length(OQCCQQQCQ0.OOO0QQCOQ0);
if OCCCQQQCQ0>0 then
O000QQQCQ0:=@OQCCQQQCQ0.OOO0QQCOQ0[0]
else
O000QQQCQ0:=nil;
if OCCCQQQCQ0>0 then begin
OO00QQQCQ0.OC0OQQCOQ0:=PByte(O000QQQCQ0)^;
OO00QQQCQ0.OOOOQQCOQ0:=@O0C0C0CCQ0[OO00QQQCQ0.OC0OQQCOQ0];
Assert(OO00QQQCQ0.OOOOQQCOQ0.OQ0CCQCOQ0<>'');
OQ00QQQCQ0:=PByte(PtrOffset(O000QQQCQ0,1))^;
Assert(OQ00QQQCQ0=OO00QQQCQ0.OOOOQQCOQ0.OOQ0CQCOQ0);
OC00QQQCQ0:=OCCCQQQCQ0-(2+Int64(OQ00QQQCQ0));
O000QQQCQ0:=PtrOffset(O000QQQCQ0,2);
OO00QQQCQ0.OCQ0QQCOQ0:=OQ0CO0CCQ0;
if OO00QQQCQ0.OOOOQQCOQ0.OOQCCQCOQ0 then begin
O000QQQCQ0:=PtrOffset(O000QQQCQ0,5);
end
else
if OO00QQQCQ0.OOOOQQCOQ0.OC00CQCOQ0 then begin
OO00QQQCQ0.O0C0QQCOQ0:=PByte(O000QQQCQ0)^;
OO00QQQCQ0.OOC0QQCOQ0:=PByte(PtrOffset(O000QQQCQ0,1))^;
O000QQQCQ0:=PtrOffset(O000QQQCQ0,2);
end;
case OO00QQQCQ0.OOOOQQCOQ0.OOOCCQCOQ0 of
OC0Q0QCOQ0:begin
OCCCQQQCQ0:=OC00QQQCQ0;
Assert((OCCCQQQCQ0>0)and(OCCCQQQCQ0<=8));
OQCCQQQCQ0.OC00QQCOQ0:=(OCCCQQQCQ0=0);
end;
OOOQ0QCOQ0:begin
OCCCQQQCQ0:=PWord(O000QQQCQ0)^;
O000QQQCQ0:=PtrOffset(O000QQQCQ0,2);
if OC00QQQCQ0<OCCCQQQCQ0 then
OCCCQQQCQ0:=OC00QQQCQ0;
OQCCQQQCQ0.OC00QQCOQ0:=(SmallInt(OCCCQQQCQ0)=O0QCO0CCQ0);
end;
else
raise Exception.CreateFmt('Unknown LengthType %d for dtVariant',[OO00QQQCQ0.OOOOQQCOQ0.OOOCCQCOQ0]);
end;
end
else
OQCCQQQCQ0.OC00QQCOQ0:=True;
Result:=Unassigned;
if OQCCQQQCQ0.OC00QQCOQ0 then
Exit;
if OCCCQQQCQ0>Integer(OO00QQQCQ0.OCQ0QQCOQ0)then
raise Exception.CreateFmt('Broken packet, data length %d exceeds field length %d',[OCCCQQQCQ0,OO00QQQCQ0.OCQ0QQCOQ0]);
if OCCCQQQCQ0>0 then begin
case OO00QQQCQ0.OC0OQQCOQ0 of
O0QOQCCOQ0:begin
Assert(OCCCQQQCQ0>=SizeOf(ShortInt));
Result:=PShortInt(O000QQQCQ0)^;
end;
O0COQCCOQ0:begin
Assert(OCCCQQQCQ0>=SizeOf(SmallInt));
Result:=PSmallInt(O000QQQCQ0)^;
end;
OOCOQCCOQ0:begin
Assert(OCCCQQQCQ0>=SizeOf(Integer));
Result:=PInteger(O000QQQCQ0)^;
end;
OCQQOQCOQ0:begin
Assert(OCCCQQQCQ0>=SizeOf(Int64));
Result:=PInt64(O000QQQCQ0)^;
end;
O00OQCCOQ0:begin
case OCCCQQQCQ0 of
1:begin
Assert(OCCCQQQCQ0>=SizeOf(ShortInt));
Result:=PShortInt(O000QQQCQ0)^;
end;
2:begin
Assert(OCCCQQQCQ0>=SizeOf(SmallInt));
Result:=PSmallInt(O000QQQCQ0)^;
end;
4:begin
Assert(OCCCQQQCQ0>=SizeOf(Integer));
Result:=PInteger(O000QQQCQ0)^;
end;
8:begin
Assert(OCCCQQQCQ0>=SizeOf(Int64));
Result:=PInt64(O000QQQCQ0)^;
end;
else
raise Exception.CreateFmt('TDS_INTNTYPE: unknown DataLen %d',[OCCCQQQCQ0]);
end;
end;
OCCOQCCOQ0:begin
Assert(OCCCQQQCQ0>=SizeOf(Single));
Result:=PSingle(O000QQQCQ0)^;
end;
OQ0QOQCOQ0:begin
Assert(OCCCQQQCQ0>=SizeOf(Double));
Result:=PDouble(O000QQQCQ0)^;
end;
OQOQOQCOQ0:
case OCCCQQQCQ0 of
4:
Result:=PSingle(O000QQQCQ0)^;
8:
Result:=PDouble(O000QQQCQ0)^;
else
raise Exception.CreateFmt('TDS_FLTNTYPE: unknown DataLen %d',[OCCCQQQCQ0]);
end;
O00QOQCOQ0,OCOQOQCOQ0,OOQQOQCOQ0:
Result:=OQC0QQQOQ0(O000QQQCQ0,OCCCQQQCQ0);
OQ0OQCCOQ0,OC0OQCCOQ0,OQCOQCCOQ0,OO0QOQCOQ0,O0QQOQCOQ0:begin
Result:=O0QOQQQOQ0(OO00QQQCQ0.OC0OQQCOQ0,OO00QQQCQ0.OOC0QQCOQ0,O000QQQCQ0,OCCCQQQCQ0);
end;
OOOOQCCOQ0:begin
OCCCOOQOQ0(OO00QQQCQ0.OOC0QQCOQ0,OCCCQQQCQ0,O000QQQCQ0,@OOO0QQQCQ0);
{$IFDEF VER14P}
Result:=VarSQLTimeStampOffsetCreate(OOO0QQQCQ0);
{$ELSE}
OQQ000OCQ0:=ConvertFromUTC(OOO0QQQCQ0);
Result:=VarSQLTimeStampCreate(OQQ000OCQ0);
{$ENDIF}
end;
OCQOQCCOQ0,OC0QOQCOQ0:begin
Assert(OCCCQQQCQ0>=SizeOf(Byte));
Result:=Boolean(PByte(O000QQQCQ0)^);
end;
OQC0QCCOQ0:begin
Assert(OCCCQQQCQ0>=SizeOf(TGUID));
Result:=AnsiString(ConvertGuidToString(PGUID(O000QQQCQ0)^,OQOOOOQCQ0(OCC00OQOQ0).OOQOCOQCQ0));
end;
OC0O0OCCQ0,OQOO0OCCQ0:
Result:=O0QQCQQOQ0(OO00QQQCQ0,O000QQQCQ0,OCCCQQQCQ0);
OQOOQCCOQ0,O0OO0OCCQ0,OQ0O0OCCQ0:begin
Result:=VarArrayCreate([0,OCCCQQQCQ0-1],varByte);
Move(O000QQQCQ0^,TVarData(Result).VArray.Data^,OCCCQQQCQ0);
end;
O0OQOQCOQ0,OOOQOQCOQ0:begin
O0O0QQQCQ0:=OQCOQQQOQ0(OO00QQQCQ0.O0C0QQCOQ0,OO00QQQCQ0.OOC0QQCOQ0,O000QQQCQ0,OCCCQQQCQ0);
Result:=PCurrency(@O0O0QQQCQ0)^;
end;
else
raise Exception.CreateFmt('Unknown VarFieldInfo.TdsFieldType %d',[OO00QQQCQ0.OC0OQQCOQ0]);
end;
end
else
case OO00QQQCQ0.OC0OQQCOQ0 of
O0OOQCCOQ0:
{$IFNDEF FPC}
Result:=VarSQLTimeStampCreate(NullSQLTimeStamp);
{$ELSE}
Result:=0;
{$ENDIF}
OOOOQCCOQ0:
{$IFDEF VER14P}
Result:=VarSQLTimeStampOffsetCreate(NullSQLTimeStampOffset);
{$ELSE}
{$IFNDEF FPC}
Result:=VarSQLTimeStampCreate(NullSQLTimeStamp);
{$ELSE}
Result:=0;
{$ENDIF}
{$ENDIF}
OC0QOQCOQ0:
Result:=False;
OQC0QCCOQ0:
Result.Value:={$IFNDEF NEXTGEN}AnsiString{$ENDIF}(EMPTY_GUID);
OC0O0OCCQ0:
Result:=AnsiString('');
OQOO0OCCQ0:
Result:=WideString('');
OQOOQCCOQ0,O0OO0OCCQ0,OQ0O0OCCQ0:
Result:=VarArrayCreate([0,0],varByte);
else
Result:=0;
end;
end;
procedure OOOQOQQCQ0.OQ0CCQQOQ0(OO00CQQCQ0:OCO0QQCOQ0);
var
OQ00CQQCQ0:byte;
begin
if(OO00CQQCQ0.OC0OQQCOQ0=O0QO0OCCQ0)and(O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0)then begin
OO00CQQCQ0.OCQ0QQCOQ0:=OQQQ0QQOQ0.OQOO00COQ0;
OO00CQQCQ0.O0COQQCOQ0.OQQCQQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0;
OO00CQQCQ0.O0COQQCOQ0.OCQCQQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0;
OO00CQQCQ0.O0COQQCOQ0.O0CCQQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0;
OO00CQQCQ0.O0COQQCOQ0.OOCCQQCOQ0:=OQQQ0QQOQ0.O0OQC0COQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('UDTMetaData: Length %d, DatabaseName %s, SchemaName %s, TypeName %s, AssemblyQualifiedName %s',
[OO00CQQCQ0.OCQ0QQCOQ0,OO00CQQCQ0.O0COQQCOQ0.OQQCQQCOQ0,OO00CQQCQ0.O0COQQCOQ0.OCQCQQCOQ0,OO00CQQCQ0.O0COQQCOQ0.O0CCQQCOQ0,OO00CQQCQ0.O0COQQCOQ0.OOCCQQCOQ0]));
{$ENDIF}
end
else
if OO00CQQCQ0.OC0OQQCOQ0=OQQO0OCCQ0 then begin
OQ00CQQCQ0:=OQQQ0QQOQ0.O0OO00COQ0;
if OQ00CQQCQ0<>0 then begin
OO00CQQCQ0.OOCOQQCOQ0.OCCCQQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0;
OO00CQQCQ0.OOCOQQCOQ0.O000QQCOQ0:=OQQQ0QQOQ0.O0OQC0COQ0;
OO00CQQCQ0.OOCOQQCOQ0.OO00QQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0;
end;
end;
end;
procedure OOOQOQQCQ0.O0OCCQQOQ0(OC00CQQCQ0:OCO0QQCOQ0);
begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then begin
OQQQ0QQOQ0.OCC000COQ0(@OC00CQQCQ0.OQCOQQCOQ0,5);
{$IFDEF LOG_PACKETS}
AddToLog(Format('collation: LCID %d, flags %.4X, charset_id %d',[OC00CQQCQ0.OQCOQQCOQ0.OO0CQQCOQ0,
OC00CQQCQ0.OQCOQQCOQ0.OQ0CQQCOQ0,OC00CQQCQ0.OQCOQQCOQ0.OC0CQQCOQ0]));
{$ENDIF}
end;
end;
procedure OOOQOQQCQ0.O0QCCQQOQ0(const O0O0CQQCQ0:O0Q0QQCOQ0;var OOO0CQQCQ0:OQ00QQCOQ0;
OQO0CQQCQ0:Boolean);
var
OCO0CQQCQ0,O0Q0CQQCQ0:Int64;
begin
if O0O0CQQCQ0.OOOOQQCOQ0.OQ00CQCOQ0 then begin
OCO0CQQCQ0:=OQQQ0QQOQ0.O0OO00COQ0;
if OCO0CQQCQ0=0 then begin
OOO0CQQCQ0.OC00QQCOQ0:=True;
Exit;
end;
OQQQ0QQOQ0.O0C000COQ0(SizeOf(OCQQQQCOQ0)+OCO0CQQCQ0);
end;
OOO0CQQCQ0.O0O0QQCOQ0:=OOQQQQQCQ0 and O0O0CQQCQ0.OOOOQQCOQ0.OCCCCQCOQ0 and
((O0O0CQQCQ0.OCQ0QQCOQ0=O0CCO0CCQ0)or O0O0CQQCQ0.OOOOQQCOQ0.OOCCCQCOQ0 or O0O0CQQCQ0.OOOOQQCOQ0.OQCCCQCOQ0);
if OOO0CQQCQ0.O0O0QQCOQ0 then begin
OCO0CQQCQ0:=OQQQ0QQOQ0.OOQO00COQ0;
OOO0CQQCQ0.OC00QQCOQ0:=(OCO0CQQCQ0=Int64(OOQCO0CCQ0));
if(OCO0CQQCQ0=Int64(OQQCO0CCQ0))or(OCO0CQQCQ0>=0)then begin
if OCO0CQQCQ0>MaxInt then
raise Exception.CreateFmt('Data length %d exceeds MaxInt',[OCO0CQQCQ0]);
if OQO0CQQCQ0 then begin
repeat
OCO0CQQCQ0:=OQQQ0QQOQ0.O0QO00COQ0;
OQQQ0QQOQ0.O0C000COQ0(OCO0CQQCQ0);
until OCO0CQQCQ0=OCQCO0CCQ0;
end
else begin
if OCO0CQQCQ0>=0 then
SetLength(OOO0CQQCQ0.OOO0QQCOQ0,OCO0CQQCQ0)
else
SetLength(OOO0CQQCQ0.OOO0QQCOQ0,0);
O0Q0CQQCQ0:=0;
repeat
OCO0CQQCQ0:=OQQQ0QQOQ0.O0QO00COQ0;
if OCO0CQQCQ0>0 then begin
if(O0Q0CQQCQ0+OCO0CQQCQ0)>Length(OOO0CQQCQ0.OOO0QQCOQ0)then
SetLength(OOO0CQQCQ0.OOO0QQCOQ0,O0Q0CQQCQ0+OCO0CQQCQ0);
OQQQ0QQOQ0.OCC000COQ0(@OOO0CQQCQ0.OOO0QQCOQ0[O0Q0CQQCQ0],OCO0CQQCQ0);
Inc(O0Q0CQQCQ0,OCO0CQQCQ0);
end;
until OCO0CQQCQ0=OCQCO0CCQ0;
end;
end;
end
else begin
case O0O0CQQCQ0.OOOOQQCOQ0.OOOCCQCOQ0 of
O0OQ0QCOQ0:begin
OCO0CQQCQ0:=OQQQ0QQOQ0.O0OO00COQ0;
OOO0CQQCQ0.OC00QQCOQ0:=(ShortInt(OCO0CQQCQ0)=O0QCO0CCQ0)or(OCO0CQQCQ0=0);
end;
OOOQ0QCOQ0:begin
OCO0CQQCQ0:=OQQQ0QQOQ0.OQOO00COQ0;
OOO0CQQCQ0.OC00QQCOQ0:=SmallInt(OCO0CQQCQ0)=O0QCO0CCQ0;
end;
OQOQ0QCOQ0:begin
OCO0CQQCQ0:=OQQQ0QQOQ0.OCOO00COQ0;
OOO0CQQCQ0.OC00QQCOQ0:=OCO0CQQCQ0=O0QCO0CCQ0;
end;
else
OCO0CQQCQ0:=O0O0CQQCQ0.OCQ0QQCOQ0;
OOO0CQQCQ0.OC00QQCOQ0:=False;
end;
if not OOO0CQQCQ0.OC00QQCOQ0 then begin
if OCO0CQQCQ0>Integer(O0O0CQQCQ0.OCQ0QQCOQ0)then
raise Exception.CreateFmt('Broken packet, data length %d exceeds field length %d',[OCO0CQQCQ0,O0O0CQQCQ0.OCQ0QQCOQ0]);
if OQO0CQQCQ0 then
OQQQ0QQOQ0.O0C000COQ0(OCO0CQQCQ0)
else begin
SetLength(OOO0CQQCQ0.OOO0QQCOQ0,OCO0CQQCQ0);
if OCO0CQQCQ0>0 then
OQQQ0QQOQ0.OCC000COQ0(@OOO0CQQCQ0.OOO0QQCOQ0[0],OCO0CQQCQ0);
end;
end;
end;
end;
procedure OOOQOQQCQ0.OQCQOQQCQ0(OCCQOQQCQ0:OCO0QQCOQ0;O00COQQCQ0:Integer;OO0COQQCQ0:Boolean=False);
var
OQ0COQQCQ0:Byte;
begin
OCCQOQQCQ0.OQC0QQCOQ0:=O00COQQCQ0;
OCCQOQQCQ0.O00OQQCOQ0:=O00COQQCQ0;
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then
OCCQOQQCQ0.O0OOQQCOQ0:=OQQQ0QQOQ0.O0QO00COQ0
else
OCCQOQQCQ0.O0OOQQCOQ0:=OQQQ0QQOQ0.OQOO00COQ0;
OCCQOQQCQ0.OQOOQQCOQ0:=OQQQ0QQOQ0.OQOO00COQ0;
OCCQOQQCQ0.OQ0OQQCOQ0:=fdkData;
OQ0COQQCQ0:=OQQQ0QQOQ0.O0OO00COQ0;
OCCQOQQCQ0.OC0OQQCOQ0:=OQ0COQQCQ0;
OCCQOQQCQ0.OOOOQQCOQ0:=@OQ0C0QQOQ0[OQ0COQQCQ0];
if OCCQOQQCQ0.OOOOQQCOQ0.OQ0CCQCOQ0='' then
raise Exception.CreateFmt('Unknown Sql type %X',[OQ0COQQCQ0]);
OQOCCQQOQ0(OCCQOQQCQ0);
end;
procedure OOOQOQQCQ0.OQC0CQQOQ0(out OC0OCQQCQ0:boolean);
const
O0OOCQQCQ0='Token %.2X Not implemented yet';
OOOOCQQCQ0='Unknown Token %.2X';
var
OQOOCQQCQ0,OCOOCQQCQ0:byte;
O0QOCQQCQ0:NativeInt;
begin
OC0OCQQCQ0:=False;
if OOQC0QQOQ0<OQC0CCCOQ0 then
raise Exception.CreateFmt('Token %.2X below minimal',[OOQC0QQOQ0]);
OQOOCQQCQ0:=(OOQC0QQOQ0 shr 4)and 3;
{$IFDEF LOG_PACKETS}
AddToLog(Format('ProcessCurrentToken: marker %X %s, size_type %d',[OOQC0QQOQ0,O0QQC0OCQ0[OOQC0QQOQ0],OQOOCQQCQ0]));
{$ENDIF}
O0CC0QQOQ0:=(OOQC0QQOQ0=O0OQQCCOQ0)or(OOQC0QQOQ0=OOOQQCCOQ0);
OOCC0QQOQ0:=OOCC0QQOQ0 or O0CC0QQOQ0;
OQCC0QQOQ0:=OQCC0QQOQ0 or O0CC0QQOQ0;
if(O0CC0QQOQ0 or O0000QQOQ0)and not OCCC0QQOQ0 then begin
OC0OCQQCQ0:=True;
Exit;
end;
case OQOOCQQCQ0 of
O0OCQCCOQ0:begin
case OOQC0QQOQ0 of
O0OOCCCOQ0:
OQQC0QQCQ0();
OOOOCCCOQ0:
raise Exception.CreateFmt(O0OOCQQCQ0,[OOQC0QQOQ0]);
else
raise Exception.CreateFmt(OOOOCQQCQ0,[OOQC0QQOQ0]);
end;
end;
OOOCQCCOQ0:begin
case OOQC0QQOQ0 of
O0OQQCCOQ0,OOOQQCCOQ0:begin
SetLength(OO0C0QQOQ0,Length(OO00QQQOQ0));
O00OCQQOQ0(OO0C0QQOQ0,True);
end;
OQOQQCCOQ0:
raise Exception.CreateFmt(O0OOCQQCQ0,[OOQC0QQOQ0]);
else
raise Exception.CreateFmt(OOOOCQQCQ0,[OOQC0QQOQ0]);
end;
end;
OQOCQCCOQ0:begin
O0QOCQQCQ0:=OQQQ0QQOQ0.OQOO00COQ0;
OQQQ0QQOQ0.O0OCC0COQ0(OQQQ0QQOQ0.O0QCC0COQ0+O0QOCQQCQ0);
case OOQC0QQOQ0 of
OOQOCCCOQ0:
OO000QQCQ0(O0QOCQQCQ0);
OQQOCCCOQ0:
OCQ00QQCQ0();
OQCOCCCOQ0:
OCO00QQCQ0(O0QOCQQCQ0);
OCCOCCCOQ0:
OCOOCQQOQ0();
O00QQCCOQ0:
OCOOCQQOQ0();
OO0QQCCOQ0:begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then begin
OQQQ0QQOQ0.O0OCC0COQ0(OQQQ0QQOQ0.O0QCC0COQ0);
O0OO0QQCQ0(O0QOCQQCQ0);
end
else
O0OO0QQCQ0();
end;
OQ0QQCCOQ0:
OQOOOOQCQ0(O0CQ0QQOQ0).OCOO0OQCQ0(OQQQ0QQOQ0);
OOQQQCCOQ0:
OQOOOOQCQ0(O0CQ0QQOQ0).OQCO0OQCQ0(OQQQ0QQOQ0);
OQCQQCCOQ0:
OQOOOOQCQ0(O0CQ0QQOQ0).OO0O0OQCQ0(OQQQ0QQOQ0,O0QOCQQCQ0);
OQC0CCCOQ0,
OCQOCCCOQ0,
O0COCCCOQ0,
OOCOCCCOQ0,
O0QQQCCOQ0:
raise Exception.CreateFmt(O0OOCQQCQ0,[OOQC0QQOQ0]);
else
raise Exception.CreateFmt(OOOOCQQCQ0,[OOQC0QQOQ0]);
end;
OQQQ0QQOQ0.OQOCC0COQ0;
end;
OCOCQCCOQ0:begin
case OOQC0QQOQ0 of
OQ0OCCCOQ0:begin
OQ000QQOQ0:=OQQQ0QQOQ0.OCOO00COQ0;
O00O0QQOQ0;
if(Length(OC00QQQOQ0)>0)and(OC00QQQOQ0[0].OCQQQCQOQ0=pdResult)
and not OOO00QQOQ0 then
Dec(O0QQOQQCQ0);
{$IFDEF LOG_PACKETS}
AddToLog(Format('Status: %d',[OQ000QQOQ0]));
{$ENDIF}
end;
O00CQCCOQ0,
OO0CQCCOQ0:begin
OQQOCQQOQ0();
if OCQC0QQOQ0 and(OO00QQQOQ0<>nil)then begin
OC0OCQQCQ0:=True;
if OO000QQOQ0 then begin
OCOOCQQCQ0:=OQQQ0QQOQ0.OCCQC0COQ0;
if OCOOCQQCQ0 in[OOQQQCCOQ0,O00CQCCOQ0,OO0CQCCOQ0,OQ0CQCCOQ0]then begin
O0000QQOQ0:=False;
OC0OCQQCQ0:=False;
end;
end;
end;
end;
OQ0CQCCOQ0:begin
OQQOCQQOQ0();
OCOOCQQCQ0:=OQQQ0QQOQ0.OCCQC0COQ0;
if(OCOOCQQCQ0=O0OOCCCOQ0)and OCQC0QQOQ0 and(OO00QQQOQ0<>nil)then
OC0OCQQCQ0:=True;
end;
else
raise Exception.CreateFmt(OOOOCQQCQ0,[OOQC0QQOQ0]);
end;
end;
end;
end;
procedure OOOQOQQCQ0.OQQC0QQCQ0;
var
OCQC0QQCQ0,O0CC0QQCQ0,OOCC0QQCQ0:Integer;
OQCC0QQCQ0:Byte;
OCCC0QQCQ0:OCO0QQCOQ0;
O0000QQCQ0:Byte;
begin
OOCC0QQOQ0:=False;
OOCC0QQCQ0:=OQQQ0QQOQ0.OQOO00COQ0;
if SmallInt(OOCC0QQCQ0)=O0QCO0CCQ0 then
Exit;
OCQC0QQOQ0:=OCQC0QQOQ0 or(OOCC0QQCQ0>0);
OO00QQQOQ0:=nil;
SetLength(OO00QQQOQ0,OOCC0QQCQ0);
for OCQC0QQCQ0:=0 to OOCC0QQCQ0-1 do begin
OCCC0QQCQ0:=@OO00QQQOQ0[OCQC0QQCQ0];
OQCQOQQCQ0(OCCC0QQCQ0,OCQC0QQCQ0);
if OCCC0QQCQ0.OOOOQQCOQ0.O000CQCOQ0 then begin
if(O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0)then
OQCC0QQCQ0:=OQQQ0QQOQ0.O0OO00COQ0
else
OQCC0QQCQ0:=1;
OCCC0QQCQ0.OO0OQQCOQ0:='';
for O0CC0QQCQ0:=0 to OQCC0QQCQ0-1 do begin
if O0CC0QQCQ0>0 then
OCCC0QQCQ0.OO0OQQCOQ0:=OCCC0QQCQ0.OO0OQQCOQ0+'.';
OCCC0QQCQ0.OO0OQQCOQ0:=OCCC0QQCQ0.OO0OQQCOQ0+OQQQ0QQOQ0.O0OQC0COQ0;
end;
end
else if OCCC0QQCQ0.OOOOQQCOQ0.OO00CQCOQ0 and(O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0)then begin
O0000QQCQ0:=OQQQ0QQOQ0.O0OO00COQ0;
if O0000QQCQ0<>0 then begin
OQQQ0QQOQ0.OO0QC0COQ0;
OQQQ0QQOQ0.OO0QC0COQ0;
OQQQ0QQOQ0.O0OQC0COQ0;
end;
end;
OCCC0QQCQ0.OOQ0QQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0;
OCCC0QQCQ0.OQQOQQCOQ0:=OCCC0QQCQ0.O0OOQQCOQ0=OQ0Q0QCOQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('Field %d name %s, type %s, UserType %.4X, flag %.2X, len %d, precision %d, scale %d',
[OCQC0QQCQ0,OCCC0QQCQ0.OOQ0QQCOQ0,OCCC0QQCQ0.OOOOQQCOQ0.OQ0CCQCOQ0,OCCC0QQCQ0.O0OOQQCOQ0,OCCC0QQCQ0.OQOOQQCOQ0,OCCC0QQCQ0.OCQ0QQCOQ0,OCCC0QQCQ0.O0C0QQCOQ0,OCCC0QQCQ0.OOC0QQCOQ0]));
{$ENDIF}
end;
{$IFDEF LOG_PACKETS}
AddToLog('');
{$ENDIF}
end;
procedure OOOQOQQCQ0.OO000QQCQ0(OQ000QQCQ0:integer);
var
OC000QQCQ0,O0O00QQCQ0:Integer;
OOO00QQCQ0:Byte;
OQO00QQCQ0:string;
begin
O0O00QQCQ0:=OQQQ0QQOQ0.O0QCC0COQ0+OQ000QQCQ0;
while OQQQ0QQOQ0.O0QCC0COQ0<O0O00QQCQ0 do begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then
OOO00QQCQ0:=OQQQ0QQOQ0.O0OO00COQ0
else
OOO00QQCQ0:=1;
OQO00QQCQ0:='';
for OC000QQCQ0:=0 to OOO00QQCQ0-1 do begin
if OQO00QQCQ0<>'' then
OQO00QQCQ0:=OQO00QQCQ0+'.';
OQO00QQCQ0:=OQO00QQCQ0+OQQQ0QQOQ0.O0OQC0COQ0;
end;
SetLength(OQ00QQQOQ0,Length(OQ00QQQOQ0)+1);
OQ00QQQOQ0[High(OQ00QQQOQ0)]:=OQO00QQCQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('TableName %s',[OQO00QQCQ0]));
{$ENDIF}
end;
end;
procedure OOOQOQQCQ0.OCO00QQCQ0(O0Q00QQCQ0:integer);
var
OOQ00QQCQ0:integer;
OQQ00QQCQ0:Word;
begin
for OOQ00QQCQ0:=0 to(O0Q00QQCQ0 shr 1)-1 do begin
OQQ00QQCQ0:=OQQQ0QQOQ0.OQOO00COQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('ColNum %d',[OQQ00QQCQ0]));
{$ENDIF}
if OQQ00QQCQ0=0 then
Continue;
OQQ00QQCQ0:=OQQ00QQCQ0-1;
if OQQ00QQCQ0<=High(OO00QQQOQ0)then
OO00QQQOQ0[OQQ00QQCQ0].OCQOQQCOQ0:=True;
end;
end;
procedure OOOQOQQCQ0.OCQ00QQCQ0;
var
O0C00QQCQ0:Integer;
OOC00QQCQ0,OQC00QQCQ0:Byte;
OCC00QQCQ0:OCO0QQCOQ0;
const
O00O0QQCQ0=$4;
OO0O0QQCQ0=$8;
OQ0O0QQCQ0=$10;
OC0O0QQCQ0=$20;
begin
for O0C00QQCQ0:=0 to High(OO00QQQOQ0)do begin
OOC00QQCQ0:=OQQQ0QQOQ0.O0OO00COQ0-1;
Assert((O0C00QQCQ0 and$FF)=OOC00QQCQ0);
OCC00QQCQ0:=@OO00QQQOQ0[O0C00QQCQ0];
OCC00QQCQ0.OCC0QQCOQ0:=OQQQ0QQOQ0.O0OO00COQ0;
OQC00QQCQ0:=OQQQ0QQOQ0.O0OO00COQ0;
OCC00QQCQ0.OOQOQQCOQ0:=(OQC00QQCQ0 and O00O0QQCQ0)<>0;
OCC00QQCQ0.O0QOQQCOQ0:=(OQC00QQCQ0 and OO0O0QQCQ0)<>0;
OCC00QQCQ0.OCOOQQCOQ0:=(OQC00QQCQ0 and OQ0O0QQCQ0)<>0;
if(OQC00QQCQ0 and OC0O0QQCQ0)<>0 then
OCC00QQCQ0.OQQ0QQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('Colinfo: %d, ColNum %d, TableNum %d, Status %.2X, ActualName %s',
[O0C00QQCQ0,OOC00QQCQ0,OCC00QQCQ0.OCC0QQCOQ0,OQC00QQCQ0,OCC00QQCQ0.OQQ0QQCOQ0]));
{$ENDIF}
end;
end;
procedure OOOQOQQCQ0.O0OO0QQCQ0(OOOO0QQCQ0:Word=0);
var
OQOO0QQCQ0:O0Q0QQCOQ0;
OCOO0QQCQ0:OQ00QQCOQ0;
O0QO0QQCQ0:string;
OOQO0QQCQ0:Integer;
OQQO0QQCQ0:OCOQQCQOQ0;
begin
O0QO0QQCQ0:=OQQQ0QQOQ0.OO0QC0COQ0;
OQQQ0QQOQ0.O0OO00COQ0;
OQCQOQQCQ0(@OQOO0QQCQ0,0);
if O0QO0QQCQ0<>'' then begin
{$IFDEF LOG_PACKETS}
AddToLog(Format('ParamName: %s',[O0QO0QQCQ0]));
{$ENDIF}
while Pos('@',O0QO0QQCQ0)>0 do
O0QO0QQCQ0:=Copy(O0QO0QQCQ0,2,Length(O0QO0QQCQ0)-1);
if O0QO0QQCQ0=OCO00OCCQ0 then begin
Assert(OQOO0QQCQ0.OC0OQQCOQ0=OOCOQCCOQ0);
O0QCCQQOQ0(OQOO0QQCQ0,OCOO0QQCQ0,False);
if OCOO0QQCQ0.OC00QQCOQ0 then
OCOQOQQCQ0:=-1
else
OCOQOQQCQ0:=PInteger(@OCOO0QQCQ0.OOO0QQCOQ0[0])^;
end
else begin
Assert(OC00QQQOQ0<>nil);
OOQO0QQCQ0:=OO0O0QQOQ0(O0QO0QQCQ0);
if(OOQO0QQCQ0>=0)and(OC00QQQOQ0[OOQO0QQCQ0].OCQQQCQOQ0<>pdInput)then begin
O0QCCQQOQ0(OQOO0QQCQ0,OCOO0QQCQ0,False);
OQQO0QQCQ0:=OC00QQQOQ0[OOQO0QQCQ0];
O000CQQOQ0(OCO00QQOQ0,O0Q00QQOQ0,OQQ00QQOQ0,OQQO0QQCQ0,OQOO0QQCQ0,OCOO0QQCQ0);
end
else
raise Exception.CreateFmt('ParamIdx %d param is pdInput or wrong index',[OOQO0QQCQ0]);
end;
end
else if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then begin
{$IFDEF LOG_PACKETS}
AddToLog(Format('ParamOrdinal: %d, FReturnParamBase %d',[OOOO0QQCQ0,O0QQOQQCQ0]));
{$ENDIF}
if(OOOO0QQCQ0=0)and OOQQOQQCQ0 then begin
Assert(OQOO0QQCQ0.OC0OQQCOQ0=OOCOQCCOQ0);
O0QCCQQOQ0(OQOO0QQCQ0,OCOO0QQCQ0,False);
OCOQOQQCQ0:=PInteger(@OCOO0QQCQ0.OOO0QQCOQ0[0])^;
end
else if OC00QQQOQ0<>nil then begin
OOQO0QQCQ0:=OOOO0QQCQ0-O0QQOQQCQ0;
if(OOQO0QQCQ0>=0)and(OC00QQQOQ0[OOQO0QQCQ0].OCQQQCQOQ0<>pdInput)then begin
O0QCCQQOQ0(OQOO0QQCQ0,OCOO0QQCQ0,False);
OQQO0QQCQ0:=OC00QQQOQ0[OOQO0QQCQ0];
O000CQQOQ0(OCO00QQOQ0,O0Q00QQOQ0,OQQ00QQOQ0,OQQO0QQCQ0,OQOO0QQCQ0,OCOO0QQCQ0);
end
else
raise Exception.CreateFmt('ParamIdx %d param is pdInput or wrong index',[OOQO0QQCQ0]);
end;
end
else if OC00QQQOQ0<>nil then begin
raise Exception.Create('Param is not handled');
end;
end;
procedure OOOQOQQCQ0.OQQOCQQOQ0;
var
OCQO0QQCQ0:OCOOQCQCQ0;
O0CO0QQCQ0:Int64;
begin
OQQQ0QQOQ0.OCC000COQ0(@OCQO0QQCQ0,SizeOf(OCOOQCQCQ0));
{$IFDEF LOG_PACKETS}
AddToLog(Format('Status: %.4X, CurCmd: %.4X',[OCQO0QQCQ0.O0QOQCQCQ0,OCQO0QQCQ0.OOQOQCQCQ0]));
{$ENDIF}
if not OQOOOOQCQ0(O0CQ0QQOQ0).OOOQ0OQCQ0 then begin
O0CO0QQCQ0:=OQQQ0QQOQ0.O0QO00COQ0;
if OQQQ0QQOQ0.OQCC00COQ0 then
O0CO0QQCQ0:=(O0CO0QQCQ0 shl 4)+OQQQ0QQOQ0.O0QO00COQ0;
end
else
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then
O0CO0QQCQ0:=OQQQ0QQOQ0.OOQO00COQ0
else
O0CO0QQCQ0:=OQQQ0QQOQ0.O0QO00COQ0;
OCQC0QQOQ0:=OCQC0QQOQ0 or OQCOCQQOQ0(OCQO0QQCQ0.OOQOQCQCQ0,OCQO0QQCQ0.O0QOQCQCQ0);
OQQOCQQOQ0(OCQO0QQCQ0.O0QOQCQCQ0,OCQO0QQCQ0.OOQOQCQCQ0,O0CO0QQCQ0);
end;
function OOOQOQQCQ0.OQCOCQQOQ0(OOQOCQQCQ0,OQQOCQQCQ0:Word):Boolean;
const
OCQOCQQCQ0=$C1;
O0COCQQCQ0=$C3;
OOCOCQQCQ0=$C4;
OQCOCQQCQ0=$C5;
OCCOCQQCQ0=$D2;
O00QQQQCQ0=$D4;
OO0QQQQCQ0=$D5;
OQ0QQQQCQ0=$F0;
OC0QQQQCQ0=$20;
O0OQQQQCQ0=$117;
begin
Result:=((OQQOCQQCQ0=OCQOCQQCQ0)and((OOQOCQQCQ0 and OO00OOCOQ0)<>0));
end;
procedure OOOQOQQCQ0.OC0COQQCQ0(var O0OCOQQCQ0:OCOQQCQOQ0;
OOOCOQQCQ0:O0QCQQCOQ0;OQOCOQQCQ0:Byte;OCOCOQQCQ0:Cardinal=0;O0QCOQQCQ0:Byte=0);
begin
O0OCOQQCQ0.O0QQQCQOQ0:='';
FillChar(O0OCOQQCQ0,SizeOf(OCOQQCQOQ0),0);
O0OCOQQCQ0.OC0CQCQOQ0:=OOOCOQQCQ0;
O0OCOQQCQ0.O00CQCQOQ0:=OQOCOQQCQ0;
O0OCOQQCQ0.OO0CQCQOQ0:=OCOCOQQCQ0;
O0OCOQQCQ0.OQ0CQCQOQ0:=O0QCOQQCQ0;
end;
function OOOQOQQCQ0.OOQCOQQCQ0(const OQQCOQQCQ0:OCOQQCQOQ0;const OCQCOQQCQ0:Variant):string;
var
O0CCOQQCQ0:O00CCQCOQ0;
OOCCOQQCQ0:TBcd;
OQCCOQQCQ0:TDBNumeric;
begin
O0CCOQQCQ0:=@OQ0C0QQOQ0[OQQCOQQCQ0.O00CQCQOQ0];
if O0CCOQQCQ0.O0OCCQCOQ0<>'' then begin
if O0CCOQQCQ0.OC00CQCOQ0 then begin
if VarIsEmpty(OCQCOQQCQ0)or VarIsNull(OCQCOQQCQ0)then begin
if OQQCOQQCQ0.O0CQQCQOQ0=0 then begin
OQCCOQQCQ0.Precision:=8;
OQCCOQQCQ0.Scale:=2;
end
else begin
OQCCOQQCQ0.Precision:=OQQCOQQCQ0.O0CQQCQOQ0;
OQCCOQQCQ0.Scale:=OQQCOQQCQ0.OOCQQCQOQ0;
end;
end
else begin
OOCCOQQCQ0:=VarToBcd(OCQCOQQCQ0);
{$IFDEF FPC}
if OOCCOQQCQ0.Precision=0 then begin
OOCCOQQCQ0.Precision:=8;
OOCCOQQCQ0.SignSpecialPlaces:=2;
end;
{$ENDIF}
OQCCOQQCQ0:=BcdToDBNumeric(OOCCOQQCQ0);
end;
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[OQCCOQQCQ0.Precision,OQCCOQQCQ0.Scale]);
end
else if O0CCOQQCQ0.O0Q0CQCOQ0 then begin
if OQQCOQQCQ0.O00CQCQOQ0 in[OC0OQCCOQ0,O0OOQCCOQ0,OOOOQCCOQ0]then
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[IntToStr(OQQCOQQCQ0.OOCQQCQOQ0)])
else
if VarIsEmpty(OCQCOQQCQ0)or VarIsNull(OCQCOQQCQ0)then begin
if(OQQCOQQCQ0.O0CQQCQOQ0>0)and(OQQCOQQCQ0.O0CQQCQOQ0<=O00CO0CCQ0)then
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[IntToStr(OQQCOQQCQ0.O0CQQCQOQ0)])
else
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,['MAX'])
else
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,['1']);
end
else
case OQQCOQQCQ0.O00CQCQOQ0 of
OCC0QCCOQ0,
OQOOQCCOQ0,
OQ0O0OCCQ0:begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,['MAX'])
else
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[IntToStr(OO0CO0CCQ0)]);
end;
O0OO0OCCQ0:
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[IntToStr(OO0CO0CCQ0)]);
O0C0QCCOQ0:
Result:=O0CCOQQCQ0.O0OCCQCOQ0;
OO0OQCCOQ0,
OCOOQCCOQ0,
OC0O0OCCQ0,
OOOO0OCCQ0:begin
if(OQQCOQQCQ0.O0CQQCQOQ0>0)and(OQQCOQQCQ0.O0CQQCQOQ0<O00CO0CCQ0)then
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[IntToStr(O00CO0CCQ0)])
else
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,['MAX'])
else
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[IntToStr(O00CO0CCQ0)]);
end;
OQOO0OCCQ0,
OCOO0OCCQ0:begin
if(OQQCOQQCQ0.O0CQQCQOQ0>0)and(OQQCOQQCQ0.O0CQQCQOQ0<OCCQO0CCQ0)then
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[IntToStr(OCCQO0CCQ0)])
else
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,['MAX'])
else
Result:=Format(O0CCOQQCQ0.O0OCCQCOQ0,[IntToStr(OCCQO0CCQ0)]);
end;
else
raise Exception.CreateFmt('Unknown TdsFieldType %.2X',[OQQCOQQCQ0.O00CQCQOQ0]);
end;
end
else if(OQQCOQQCQ0.O00CQCQOQ0=O0QQOQCOQ0)and(OQQCOQQCQ0.OO0CQCQOQ0=OC00OQCOQ0)then
Result:='SMALLDATETIME'
else if OQQCOQQCQ0.O00CQCQOQ0=O00OQCCOQ0 then begin
case OQQCOQQCQ0.OO0CQCQOQ0 of
OC0COQCOQ0:Result:='TINYINT';
O0OCOQCOQ0:Result:='SMALLINT';
OOOCOQCOQ0:Result:='INT';
OQ0OOQCOQ0:Result:='BIGINT';
else
raise Exception.CreateFmt('GetParamDeclaration: Unknown UserType %d',[OQQCOQQCQ0.OO0CQCQOQ0]);
end;
end
else if OQQCOQQCQ0.OO0CQCQOQ0=O0O0OQCOQ0 then
Result:='REAL'
else
Result:=O0CCOQQCQ0.O0OCCQCOQ0;
end
else
Result:='SQL_VARIANT';
if(OQQCOQQCQ0.OCQQQCQOQ0<>pdInput)and(OQQCOQQCQ0.O00CQCQOQ0<>OCQ0QCCOQ0)then
Result:=Result+' OUTPUT';
end;
procedure OOOQOQQCQ0.OCCCOQQCQ0(O000OQQCQ0:Boolean;const OO00OQQCQ0:Variant);
var
OQ00OQQCQ0:Word;
OC00OQQCQ0:Byte;
O0O0OQQCQ0:Word;
OOO0OQQCQ0:OQOOC0CCQ0;
OQO0OQQCQ0:Integer;
OCO0OQQCQ0:OQQOCQCOQ0;
O0Q0OQQCQ0:TDateTime;
OOQ0OQQCQ0,OQQ0OQQCQ0,OCQ0OQQCQ0,O0C0OQQCQ0:Word;
OOC0OQQCQ0:AnsiString;
OQC0OQQCQ0:WideString;
OCC0OQQCQ0:TBlob;
O00OOQQCQ0:O00CCQCOQ0;
begin
if VarIsEmpty(OO00OQQCQ0)or VarIsNull(OO00OQQCQ0)then begin
if O000OQQCQ0 then
OCQQ0QQOQ0.OCQ0C0COQ0(0);
OCQQ0QQOQ0.OCQ0C0COQ0(0);
end
else begin
OQ00OQQCQ0:=VarType(OO00OQQCQ0);
O0O0OQQCQ0:=OQ00OQQCQ0 and varTypeMask;
if((OQ00OQQCQ0 and varArray)<>0)or((OQ00OQQCQ0 and varByRef)<>0)then
OC00OQQCQ0:=OQ0O0OCCQ0
else begin
if O0O0OQQCQ0>High(OCQ0C0CCQ0)then
raise Exception.CreateFmt('Variant type %d out of VariantTypeToTdsParamType size',[O0O0OQQCQ0]);
OC00OQQCQ0:=OCQ0C0CCQ0[O0O0OQQCQ0];
end;
if OC00OQQCQ0=0 then
raise Exception.CreateFmt('Unknown VariantTypeToTdsParamType %d',[O0O0OQQCQ0]);
O00OOQQCQ0:=@OQ0C0QQOQ0[OC00OQQCQ0];
Assert(O00OOQQCQ0.OQ0CCQCOQ0<>'');
OOO0OQQCQ0:=OQOOC0CCQ0.Create;
try
OOO0OQQCQ0.OC00C0COQ0(OC00OQQCQ0);
OOO0OQQCQ0.OC00C0COQ0(O00OOQQCQ0.OOQ0CQCOQ0);
if O00OOQQCQ0.OOQCCQCOQ0 then begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then begin
if O00OOQQCQ0.OQQCCQCOQ0 and OC0C0QQOQ0 then
OOO0OQQCQ0.OOOOC0COQ0(@OO0QQOQCQ0,SizeOf(OO0QQOQCQ0))
else
OOO0OQQCQ0.OOOOC0COQ0(@OQOOOOQCQ0(O0CQ0QQOQ0).OQCOOOQCQ0,SizeOf(OQOOOOQCQ0(O0CQ0QQOQ0).OQCOOOQCQ0));
end;
end
else if O00OOQQCQ0.OC00CQCOQ0 then begin
OOO0OQQCQ0.OC00C0COQ0(O00OOQQCQ0.OCOCCQCOQ0);
OOO0OQQCQ0.OC00C0COQ0(O00OOQQCQ0.O0QCCQCOQ0);
end;
case OC00OQQCQ0 of
OCQOQCCOQ0:
if Boolean(OO00OQQCQ0)then
OOO0OQQCQ0.OC00C0COQ0(1)
else
OOO0OQQCQ0.OC00C0COQ0(0);
O0QOQCCOQ0:
OOO0OQQCQ0.OC00C0COQ0(OO00OQQCQ0);
O0COQCCOQ0:
OOO0OQQCQ0.OCO0C0COQ0(OO00OQQCQ0);
OOCOQCCOQ0:
OOO0OQQCQ0.OCQ0C0COQ0(OO00OQQCQ0);
OCQQOQCOQ0:
OOO0OQQCQ0.OOC0C0COQ0(OO00OQQCQ0);
OCCOQCCOQ0:
OOO0OQQCQ0.OO0OC0COQ0(OO00OQQCQ0);
OQ0QOQCOQ0:
OOO0OQQCQ0.OC0OC0COQ0(OO00OQQCQ0);
OO0QOQCOQ0:begin
O0Q0OQQCQ0:=TDateTime(OO00OQQCQ0);
OCO0OQQCQ0.OCQOCQCOQ0:=Trunc(O0Q0OQQCQ0)-2;
DecodeTime(O0Q0OQQCQ0,OOQ0OQQCQ0,OQQ0OQQCQ0,OCQ0OQQCQ0,O0C0OQQCQ0);
OCO0OQQCQ0.O0COCQCOQ0:=(((OOQ0OQQCQ0*60+OQQ0OQQCQ0)*60)+OCQ0OQQCQ0)*300;
OOO0OQQCQ0.OOQ0C0COQ0(OCO0OQQCQ0.OCQOCQCOQ0);
OOO0OQQCQ0.OOQ0C0COQ0(OCO0OQQCQ0.O0COCQCOQ0);
end;
OO0OQCCOQ0,OC0O0OCCQ0:begin
OOC0OQQCQ0:=AnsiString(OO00OQQCQ0);
OQO0OQQCQ0:=LengthA(OOC0OQQCQ0);
Assert(OQO0OQQCQ0<=O00CO0CCQ0);
OOO0OQQCQ0.OOO0C0COQ0(OQO0OQQCQ0);
if OQO0OQQCQ0>0 then
OOO0OQQCQ0.OOOOC0COQ0(PAnsiChar(OOC0OQQCQ0),OQO0OQQCQ0);
end;
OQOO0OCCQ0:begin
OQC0OQQCQ0:=WideString(OO00OQQCQ0);
OQO0OQQCQ0:=Length(OQC0OQQCQ0);
Assert(OQO0OQQCQ0<=OCCQO0CCQ0);
OQO0OQQCQ0:=OQO0OQQCQ0 shl 1;
OOO0OQQCQ0.OOO0C0COQ0(OQO0OQQCQ0);
if OQO0OQQCQ0>0 then
OOO0OQQCQ0.OOOOC0COQ0(@OQC0OQQCQ0[1],OQO0OQQCQ0);
end;
OQ0O0OCCQ0:begin
if((OQ00OQQCQ0 and varArray)<>0)then begin
if(VarArrayDimCount(OO00OQQCQ0)>0)then begin
OQO0OQQCQ0:=VarArrayHighBound(OO00OQQCQ0,1)-VarArrayLowBound(OO00OQQCQ0,1)+1;
Assert(OQO0OQQCQ0<=OO0CO0CCQ0);
OOO0OQQCQ0.OCCQQ0COQ0(TVarData(OO00OQQCQ0).VArray.Data,OQO0OQQCQ0,False);
end
else
OOO0OQQCQ0.OCO0C0COQ0(0);
end
else if((OQ00OQQCQ0 and varByRef)<>0)then begin
OCC0OQQCQ0:=TVarData(OO00OQQCQ0).VPointer;
Assert(OCC0OQQCQ0.Size<=OO0CO0CCQ0);
OOO0OQQCQ0.OC0CQ0COQ0(OCC0OQQCQ0,OOQQQQQCQ0 and O00OOQQCQ0.OCCCCQCOQ0);
end;
end;
else
raise Exception.CreateFmt('AddVariantParam %.2X not implemented yet',[OC00OQQCQ0]);
end;
finally
if O000OQQCQ0 then
OCQQ0QQOQ0.OCQ0C0COQ0(OOO0OQQCQ0.OOQOO0COQ0);
OCQQ0QQOQ0.OCQ0C0COQ0(OOO0OQQCQ0.OOQOO0COQ0);
OCQQ0QQOQ0.OOOOC0COQ0(OOO0OQQCQ0.OCOOO0COQ0,OOO0OQQCQ0.OOQOO0COQ0);
OOO0OQQCQ0.Free;
end;
end;
end;
procedure OOOQOQQCQ0.OO0OOQQCQ0(const OQ0OOQQCQ0:OCOQQCQOQ0;const OC0OOQQCQ0:Variant);
var
O0OOOQQCQ0:O00CCQCOQ0;
function OOOOOQQCQ0:Byte;
begin
if O0OOOQQCQ0.O0O0CQCOQ0 then begin
case OQ0OOQQCQ0.O00CQCQOQ0 of
O00OQCCOQ0:begin
case OQ0OOQQCQ0.OO0CQCQOQ0 of
OC0COQCOQ0:
Result:=1;
O0OCOQCOQ0:
Result:=2;
OOOCOQCOQ0:
Result:=4;
OQ0OOQCOQ0:
Result:=8;
else
raise Exception.CreateFmt('GetVarlenSize wrong UserType %d',[OQ0OOQQCQ0.OO0CQCQOQ0]);
end;
end;
OC0QOQCOQ0:
Result:=1;
OQOQOQCOQ0,OCOQOQCOQ0:begin
case OQ0OOQQCQ0.OO0CQCQOQ0 of
O0O0OQCOQ0:
Result:=4
else
Result:=8;
end;
end;
O0QQOQCOQ0:begin
if OQ0OOQQCQ0.OO0CQCQOQ0=OC00OQCOQ0 then
Result:=4
else
Result:=8;
end;
else
raise Exception.CreateFmt('GetVarlenSize unknown param type %X',[OQ0OOQQCQ0.O00CQCQOQ0]);
end;
end
else
case OQ0OOQQCQ0.O00CQCQOQ0 of
OOOQOQCOQ0,O0OQOQCOQ0:
Result:=OQ0C0QCOQ0;
else
Result:=1;
end;
end;
function OQOOOQQCQ0(OCOOOQQCQ0:Variant):Cardinal;
var
O0QOOQQCQ0:TBlob;
OOQOOQQCQ0:string;
begin
if(TVarData(OC0OOQQCQ0).VType and varByRef)<>0 then begin
Assert(TVarData(OC0OOQQCQ0).VPointer<>nil);
O0QOOQQCQ0:=TVarData(OC0OOQQCQ0).VPointer;
Result:=O0QOOQQCQ0.Size;
if not O0QOOQQCQ0.IsUnicode and O0OOOQQCQ0.OCQCCQCOQ0 then
Result:=Result*2;
end
else if((VarType(OC0OOQQCQ0)and varArray)<>0)and(VarArrayDimCount(OC0OOQQCQ0)>0)then begin
Result:=VarArrayHighBound(OC0OOQQCQ0,1)+1;
end
else
if VarIsEmpty(OCOOOQQCQ0)or VarIsNull(OCOOOQQCQ0)then
Result:=0
else begin
OOQOOQQCQ0:=string(OC0OOQQCQ0);
Result:=Length(OOQOOQQCQ0);
if O0OOOQQCQ0.OCQCCQCOQ0 then
Result:=Result*2;
end;
end;
var
OQQOOQQCQ0:Cardinal;
OCQOOQQCQ0:Boolean;
begin
OCQQ0QQOQ0.OC00C0COQ0(Length(OQ0OOQQCQ0.O0QQQCQOQ0));
OCQQ0QQOQ0.OOQOC0COQ0(WideString(OQ0OOQQCQ0.O0QQQCQOQ0));
OCQQ0QQOQ0.OC00C0COQ0(OQ0OOQQCQ0.OQ0CQCQOQ0);
OCQQ0QQOQ0.OC00C0COQ0(OQ0OOQQCQ0.O00CQCQOQ0);
if OQ0OOQQCQ0.O00CQCQOQ0=OCQ0QCCOQ0 then
Exit;
O0OOOQQCQ0:=@OQ0C0QQOQ0[OQ0OOQQCQ0.O00CQCQOQ0];
Assert(O0OOOQQCQ0.OQ0CCQCOQ0<>'');
if O0OOOQQCQ0.OQ00CQCOQ0 or(OQ0OOQQCQ0.O00CQCQOQ0=O0OO0OCCQ0)then begin
OQQOOQQCQ0:=OQOOOQQCQ0(OC0OOQQCQ0);
OCQQ0QQOQ0.OCQ0C0COQ0(OQQOOQQCQ0);
end;
OCQOOQQCQ0:=OOQQQQQCQ0;
if(OQ0OOQQCQ0.OC0CQCQOQ0=OCOCQQCOQ0)and O0OOOQQCQ0.OOO0CQCOQ0 then begin
if OCQOOQQCQ0 then
OCQQ0QQOQ0.OCO0C0COQ0(O0CCO0CCQ0)
else begin
OQQOOQQCQ0:=O0OOOQQCQ0.OQOCCQCOQ0;
case O0OOOQQCQ0.OOOCCQCOQ0 of
O0OQ0QCOQ0:
OCQQ0QQOQ0.OC00C0COQ0(OQQOOQQCQ0);
OOOQ0QCOQ0:
OCQQ0QQOQ0.OCO0C0COQ0(OQQOOQQCQ0);
OQOQ0QCOQ0:
OCQQ0QQOQ0.OCQ0C0COQ0(OQQOOQQCQ0);
end;
end;
end;
if O0OOOQQCQ0.OOQCCQCOQ0 then begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then begin
if O0OOOQQCQ0.OQQCCQCOQ0 and OC0C0QQOQ0 then
OCQQ0QQOQ0.OOOOC0COQ0(@OO0QQOQCQ0,SizeOf(OO0QQOQCQ0))
else
OCQQ0QQOQ0.OOOOC0COQ0(@OQOOOOQCQ0(O0CQ0QQOQ0).OQCOOOQCQ0,SizeOf(OQOOOOQCQ0(O0CQ0QQOQ0).OQCOOOQCQ0));
end;
end;
case O0OOOQQCQ0.OOOCCQCOQ0 of
O0OQ0QCOQ0:begin
case OQ0OOQQCQ0.O00CQCQOQ0 of
OC0OQCCOQ0:begin
OCQQ0QQOQ0.OC00C0COQ0(OQ0OOQQCQ0.OOCQQCQOQ0);
if VarIsEmpty(OC0OOQQCQ0)or VarIsNull(OC0OOQQCQ0)then begin
OCQQ0QQOQ0.OC00C0COQ0(0);
Exit;
end
else
OCQQ0QQOQ0.OC00C0COQ0(O0Q0C0CCQ0[OQ0OOQQCQ0.OOCQQCQOQ0]);
end;
OQ0OQCCOQ0:begin
if VarIsEmpty(OC0OOQQCQ0)or VarIsNull(OC0OOQQCQ0)then begin
OCQQ0QQOQ0.OC00C0COQ0(0);
Exit;
end
else
OCQQ0QQOQ0.OC00C0COQ0(3);
end;
O0OOQCCOQ0:begin
OCQQ0QQOQ0.OC00C0COQ0(OQ0OOQQCQ0.OOCQQCQOQ0);
if VarIsEmpty(OC0OOQQCQ0)or VarIsNull(OC0OOQQCQ0)then begin
OCQQ0QQOQ0.OC00C0COQ0(0);
Exit;
end
else
OCQQ0QQOQ0.OC00C0COQ0(OOQ0C0CCQ0[OQ0OOQQCQ0.OOCQQCQOQ0]);
end;
OOOOQCCOQ0:begin
OCQQ0QQOQ0.OC00C0COQ0(OQ0OOQQCQ0.OOCQQCQOQ0);
if VarIsEmpty(OC0OOQQCQ0)or VarIsNull(OC0OOQQCQ0)then begin
OCQQ0QQOQ0.OC00C0COQ0(0);
Exit;
end
else
OCQQ0QQOQ0.OC00C0COQ0(OQQ0C0CCQ0[OQ0OOQQCQ0.OOCQQCQOQ0]);
end;
else
OCQQ0QQOQ0.OC00C0COQ0(OOOOOQQCQ0);
end;
OOQOQQQCQ0(OQ0OOQQCQ0.O00CQCQOQ0,OQ0OOQQCQ0.OO0CQCQOQ0,OQ0OOQQCQ0.OOCQQCQOQ0,OC0OOQQCQ0);
end;
OOOQ0QCOQ0:
O00COOQCQ0(OQ0OOQQCQ0.O00CQCQOQ0,OCQOOQQCQ0,OC0OOQQCQ0);
OQOQ0QCOQ0:begin
if(OQ0OOQQCQ0.O00CQCQOQ0=OCQO0OCCQ0)and(Assigned(OQ0OOQQCQ0.O0OCQCQOQ0))then
OQ0OOQQCQ0.O0OCQCQOQ0(OQ0OOQQCQ0.OOQQQCQOQ0,OCQQ0QQOQ0)
else
OCOCOOQCQ0(OQ0OOQQCQ0.O00CQCQOQ0,True,OC0OOQQCQ0);
end
else
raise Exception.CreateFmt('Unknown lengthType %d',[O0OOOQQCQ0.OOOCCQCOQ0]);
end;
end;
procedure OOOQOQQCQ0.O0COOQQCQ0(
OOCOOQQCQ0:Boolean;OQCOOQQCQ0:Integer=0;OCCOOQQCQ0:Integer=MaxInt);
var
O00Q0QQCQ0:Integer;
OO0Q0QQCQ0:OCOQQCQOQ0;
OQ0Q0QQCQ0:PVariant;
begin
if OCCOOQQCQ0>High(OC00QQQOQ0)then
OCCOOQQCQ0:=High(OC00QQQOQ0);
for O00Q0QQCQ0:=OQCOOQQCQ0 to OCCOOQQCQ0 do begin
OO0Q0QQCQ0:=OC00QQQOQ0[O00Q0QQCQ0];
if OO0Q0QQCQ0.OCCQQCQOQ0 or((OO0Q0QQCQ0.OCQQQCQOQ0=pdResult)and not OOO00QQOQ0)then
Continue;
if OOCOOQQCQ0 and(OO0Q0QQCQ0.O0QQQCQOQ0<>'')then
OO0Q0QQCQ0.O0QQQCQOQ0:='@'+OO0Q0QQCQ0.O0QQQCQOQ0
else
OO0Q0QQCQ0.O0QQQCQOQ0:='';
Assert(Assigned(OOQ00QQOQ0));
OQ0Q0QQCQ0:=OOQ00QQOQ0(OO0Q0QQCQ0.OOQQQCQOQ0,OO0Q0QQCQ0.OQQQQCQOQ0);
OO0Q0QQCQ0.OC0CQCQOQ0:=OCOCQQCOQ0;
if OO0Q0QQCQ0.OCQQQCQOQ0 in[pdInput,pdUnknown]then begin
if OO0Q0QQCQ0.OQCQQCQOQ0 then begin
OO0Q0QQCQ0.OQ0CQCQOQ0:=OQQ0QOCCQ0;
OO0OOQQCQ0(OO0Q0QQCQ0,OQ0Q0QQCQ0^);
end
else begin
OO0Q0QQCQ0.OQ0CQCQOQ0:=O0C0QOCCQ0;
OO0Q0QQCQ0.OO0CQCQOQ0:=0;
OO0Q0QQCQ0.O00CQCQOQ0:=OCQ0QCCOQ0;
OO0OOQQCQ0(OO0Q0QQCQ0,Unassigned);
end
end
else begin
if OO0Q0QQCQ0.OQCQQCQOQ0 then
OO0Q0QQCQ0.OQ0CQCQOQ0:=OCQ0QOCCQ0
else
OO0Q0QQCQ0.OQ0CQCQOQ0:=OCQ0QOCCQ0 or O0C0QOCCQ0;
OO0OOQQCQ0(OO0Q0QQCQ0,OQ0Q0QQCQ0^);
end;
end;
end;
procedure OOOQOQQCQ0.OC0Q0QQCQ0;
var
O0OQ0QQCQ0,OOOQ0QQCQ0:OCOQQCQOQ0;
OQOQ0QQCQ0:string;
OCOQ0QQCQ0:PVariant;
O0QQ0QQCQ0:Integer;
begin
OQOQ0QQCQ0:='';
for O0QQ0QQCQ0:=0 to High(OC00QQQOQ0)do begin
O0OQ0QQCQ0:=OC00QQQOQ0[O0QQ0QQCQ0];
if O0OQ0QQCQ0.OCCQQCQOQ0 or((O0OQ0QQCQ0.OCQQQCQOQ0=pdResult)and not OOO00QQOQ0)then
Continue;
if Length(OQOQ0QQCQ0)>0 then
OQOQ0QQCQ0:=OQOQ0QQCQ0+',';
Assert(Length(O0OQ0QQCQ0.O0QQQCQOQ0)<=O0OOQOCCQ0);
OQOQ0QQCQ0:=OQOQ0QQCQ0+'@'+O0OQ0QQCQ0.O0QQQCQOQ0;
Assert(Assigned(OOQ00QQOQ0));
OCOQ0QQCQ0:=OOQ00QQOQ0(O0OQ0QQCQ0.OOQQQCQOQ0,O0OQ0QQCQ0.OQQQQCQOQ0);
OQOQ0QQCQ0:=OQOQ0QQCQ0+' '+OOQCOQQCQ0(O0OQ0QQCQ0,OCOQ0QQCQ0^);
end;
OC0COQQCQ0(OOOQ0QQCQ0,OQOCQQCOQ0,OO0O0OCCQ0);
OO0OOQQCQ0(OOOQ0QQCQ0,OQOQ0QQCQ0);
Inc(O0QQOQQCQ0);
end;
procedure OOOQOQQCQ0.O000CQQOQ0(OOQ0CQQCQ0:OC0OCCQOQ0;OQQ0CQQCQ0:OCOOCCQOQ0;OCQ0CQQCQ0:O00QQCQOQ0;
const O0C0CQQCQ0:OCOQQCQOQ0;const OOC0CQQCQ0:O0Q0QQCOQ0;const OQC0CQQCQ0:OQ00QQCOQ0);
var
OCC0CQQCQ0:integer;
O00OCQQCQ0:Pointer;
OO0OCQQCQ0:Variant;
OQ0OCQQCQ0:TDateTime;
begin
if Assigned(OOQ0CQQCQ0)then
OOQ0CQQCQ0(O0C0CQQCQ0.OOQQQCQOQ0,O0C0CQQCQ0.OQQQQCQOQ0,OQC0CQQCQ0.OC00QQCOQ0);
if OQC0CQQCQ0.OC00QQCOQ0 or not Assigned(OQQ0CQQCQ0)then
Exit;
OCC0CQQCQ0:=Length(OQC0CQQCQ0.OOO0QQCOQ0);
if OCC0CQQCQ0>0 then
O00OCQQCQ0:=@OQC0CQQCQ0.OOO0QQCOQ0[0]
else
O00OCQQCQ0:=nil;
case OOC0CQQCQ0.OC0OQQCOQ0 of
OCQQOQCOQ0:
OQQ0CQQCQ0(O0C0CQQCQ0.OOQQQCQOQ0,O0C0CQQCQ0.OQQQQCQOQ0,PInt64(O00OCQQCQ0)^);
OQ0OQCCOQ0,OC0OQCCOQ0,O0OOQCCOQ0,OOOOQCCOQ0:begin
OQ0OCQQCQ0:=O0QOQQQOQ0(OOC0CQQCQ0.OC0OQQCOQ0,OOC0CQQCQ0.OOC0QQCOQ0,O00OCQQCQ0,OCC0CQQCQ0);
OQQ0CQQCQ0(O0C0CQQCQ0.OOQQQCQOQ0,O0C0CQQCQ0.OQQQQCQOQ0,OQ0OCQQCQ0);
end;
OQOO0OCCQ0:begin
OO0OCQQCQ0:=O0QQCQQOQ0(OOC0CQQCQ0,O00OCQQCQ0,OCC0CQQCQ0);
OQQ0CQQCQ0(O0C0CQQCQ0.OOQQQCQOQ0,O0C0CQQCQ0.OQQQQCQOQ0,OO0OCQQCQ0);
end;
OQC0QCCOQ0:
OQQ0CQQCQ0(O0C0CQQCQ0.OOQQQCQOQ0,O0C0CQQCQ0.OQQQQCQOQ0,GUIDToString(PGUID(O00OCQQCQ0)^));
OQ0O0OCCQ0:
if OCC0CQQCQ0>0 then begin
OO0OCQQCQ0:=VarArrayCreate([0,OCC0CQQCQ0-1],varByte);
Move(O00OCQQCQ0^,TVarData(OO0OCQQCQ0).VArray.Data^,OCC0CQQCQ0);
OQQ0CQQCQ0(O0C0CQQCQ0.OOQQQCQOQ0,O0C0CQQCQ0.OQQQQCQOQ0,OO0OCQQCQ0);
end;
OC0O0OCCQ0:begin
OO0OCQQCQ0:=O0QQCQQOQ0(OOC0CQQCQ0,O00OCQQCQ0,OCC0CQQCQ0);
OQQ0CQQCQ0(O0C0CQQCQ0.OOQQQCQOQ0,O0C0CQQCQ0.OQQQQCQOQ0,OO0OCQQCQ0);
end;
else
inherited;
end;
end;
procedure OOOQOQQCQ0.OOQOQQQCQ0(OQQOQQQCQ0:Byte;OCQOQQQCQ0:Cardinal;O0COQQQCQ0:integer;const OOCOQQQCQ0:Variant);
var
OQCOQQQCQ0:OQQOCQCOQ0;
OCCOQQQCQ0:OQ0QQQCOQ0;
O00QOOQCQ0:TDateTime;
OO0QOOQCQ0:Single;
OQ0QOOQCQ0:Double;
OC0QOOQCQ0:Currency;
O0OQOOQCQ0:TGuid;
OOOQOOQCQ0,OQOQOOQCQ0:Int64;
OCOQOOQCQ0:OC0OCQCOQ0;
O0QQOOQCQ0:Integer;
OOQQOOQCQ0:OOCOCQCOQ0;
OQQQOOQCQ0:OCCOCQCOQ0;
OCQQOOQCQ0:TBcd;
O0CQOOQCQ0:TDBNumeric;
OOCQOOQCQ0:Byte;
OQCQOOQCQ0:TSQLTimeStamp;
OCCQOOQCQ0:TSQLTimeStampOffset;
begin
if(VarIsEmpty(OOCOQQQCQ0)or VarIsNull(OOCOQQQCQ0))and not(OQQOQQQCQ0 in[O0OQOQCOQ0,OOOQOQCOQ0])then
OCQQ0QQOQ0.OC00C0COQ0(0)
else
case OQQOQQQCQ0 of
O00OQCCOQ0:
case OCQOQQQCQ0 of
OC0COQCOQ0:begin
OOOQOOQCQ0:=Byte(OOCOQQQCQ0);
OCQQ0QQOQ0.OCCOC0COQ0(@OOOQOOQCQ0,1);
end;
O0OCOQCOQ0,OC0OOQCOQ0:begin
OOOQOOQCQ0:=Smallint(OOCOQQQCQ0);
OCQQ0QQOQ0.OCCOC0COQ0(@OOOQOOQCQ0,2);
end;
OOOCOQCOQ0,OQQOOQCOQ0:begin
OOOQOOQCQ0:=Integer(OOCOQQQCQ0);
OCQQ0QQOQ0.OCCOC0COQ0(@OOOQOOQCQ0,4);
end;
OQ0OOQCOQ0,OOOOOQCOQ0:begin
OOOQOOQCQ0:=OOCOQQQCQ0;
OCQQ0QQOQ0.OCCOC0COQ0(@OOOQOOQCQ0,8);
end;
else
raise Exception.CreateFmt('Unknown UserType %d',[OCQOQQQCQ0]);
end;
OC0QOQCOQ0:begin
OOOQOOQCQ0:=0;
if OOCOQQQCQ0 then
OOOQOOQCQ0:=1;
OCQQ0QQOQ0.OCCOC0COQ0(@OOOQOOQCQ0,1);
end;
OQOQOQCOQ0:
if OCQOQQQCQ0=O0O0OQCOQ0 then begin
OO0QOOQCQ0:=Single(OOCOQQQCQ0);
OCQQ0QQOQ0.OCCOC0COQ0(@OO0QOOQCQ0,4);
end
else
if OCQOQQQCQ0=OCO0OQCOQ0 then begin
OQ0QOOQCQ0:=Currency(OOCOQQQCQ0);
OCQQ0QQOQ0.OCCOC0COQ0(@OQ0QOOQCQ0,8);
end
else begin
OQ0QOOQCQ0:=Double(OOCOQQQCQ0);
OCQQ0QQOQ0.OCCOC0COQ0(@OQ0QOOQCQ0,8);
end;
OQC0QCCOQ0:begin
O0OQOOQCQ0:=StrToGUID(string(OOCOQQQCQ0));
OCQQ0QQOQ0.OCCOC0COQ0(@O0OQOOQCQ0,16);
end;
OQ0OQCCOQ0:begin
O00QOOQCQ0:={$IFNDEF FPC}TDateTime{$ELSE}Double{$ENDIF}(OOCOQQQCQ0);
OQCOQQQCQ0.OCQOCQCOQ0:=Trunc(O00QOOQCQ0);
Inc(OQCOQQQCQ0.OCQOCQCOQ0,DateDelta-1);
OCQQ0QQOQ0.OOOOC0COQ0(@OQCOQQQCQ0.OCQOCQCOQ0,3);
end;
OC0OQCCOQ0:begin
O00QOOQCQ0:={$IFNDEF FPC}TDateTime{$ELSE}Double{$ENDIF}(OOCOQQQCQ0);
OQOQOOQCQ0:=Round(Frac(O00QOOQCQ0)*OCQOCOQCQ0*OCCQ0QCOQ0);
OQOQOOQCQ0:=OQOQOOQCQ0 div O0CQ0QCOQ0[O0COQQQCQ0];
OCQQ0QQOQ0.OOOOC0COQ0(@OQOQOOQCQ0,O0Q0C0CCQ0[O0COQQQCQ0]);
end;
O0QQOQCOQ0:begin
O00QOOQCQ0:={$IFNDEF FPC}TDateTime{$ELSE}Double{$ENDIF}(OOCOQQQCQ0);
if OCQOQQQCQ0=OC00OQCOQ0 then begin
OCCOQQQCQ0.OC0QQQCOQ0:=Trunc(O00QOOQCQ0)-2;
OCCOQQQCQ0.O0OQQQCOQ0:=Round(Abs(Frac(O00QOOQCQ0))*SecsPerDay/SecsPerMin);
OCQQ0QQOQ0.OCCOC0COQ0(@OCCOQQQCQ0,SizeOf(OCCOQQQCQ0));
end
else begin
OQCOQQQCQ0.OCQOCQCOQ0:=Trunc(O00QOOQCQ0)-2;
Assert(OQCOQQQCQ0.OCQOCQCOQ0>=-53690);
O0QQOOQCQ0:=Round(Abs(Frac(O00QOOQCQ0))*OCCOCOQCQ0);
if O0QQOOQCQ0>=OCCOCOQCQ0 then
O0QQOOQCQ0:=OCCOCOQCQ0-1;
OQCOQQQCQ0.O0COCQCOQ0:=O0QQOOQCQ0;
OCQQ0QQOQ0.OCCOC0COQ0(@OQCOQQQCQ0,SizeOf(OQCOQQQCQ0));
end;
end;
O0OOQCCOQ0:begin
OQCQOOQCQ0:=VarToSQLTimeStamp(OOCOQQQCQ0);
OCOQCQQCQ0(OQCQOOQCQ0,O0COQQQCQ0,@OOQQOOQCQ0);
OCQQ0QQOQ0.OOOOC0COQ0(@OOQQOOQCQ0,OOQ0C0CCQ0[O0COQQQCQ0]);
end;
OOOOQCCOQ0:begin
{$IFDEF VER14P}
OCCQOOQCQ0:=VarToSQLTimeStampOffset(OOCOQQQCQ0);
{$ELSE}
OQCQOOQCQ0:=VarToSQLTimeStamp(OOCOQQQCQ0);
Move(OQCQOOQCQ0,OCCQOOQCQ0,SizeOf(TSQLTimeStamp));
OCCQOOQCQ0.TimeZoneHour:=0;
OCCQOOQCQ0.TimeZoneMinute:=0;
{$ENDIF}
OCCQCQQCQ0(OCCQOOQCQ0,O0COQQQCQ0,@OQQQOOQCQ0);
OCQQ0QQOQ0.OOOOC0COQ0(@OQQQOOQCQ0,OQQ0C0CCQ0[O0COQQQCQ0]);
end;
OCOQOQCOQ0:begin
OC0QOOQCQ0:=Currency(OOCOQQQCQ0);
Move(OC0QOOQCQ0,OOOQOOQCQ0,8);
OCOQOOQCQ0.O0OOCQCOQ0:=Int64Rec(OOOQOOQCQ0).Hi;
OCOQOOQCQ0.OOOOCQCOQ0:=Int64Rec(OOOQOOQCQ0).Lo;
OCQQ0QQOQ0.OCCOC0COQ0(@OCOQOOQCQ0,8);
end;
O0OQOQCOQ0,OOOQOQCOQ0:begin
if VarIsEmpty(OOCOQQQCQ0)or VarIsNull(OOCOQQQCQ0)then begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then
OOCQOOQCQ0:=OC0C0QCOQ0
else
OOCQOOQCQ0:=O0OC0QCOQ0;
OCQQ0QQOQ0.OC00C0COQ0(OOCQOOQCQ0);
OCQQ0QQOQ0.OC00C0COQ0(0);
OCQQ0QQOQ0.OC00C0COQ0(0);
end
else begin
OCQQOOQCQ0:=VarToBcd(OOCOQQQCQ0);
O0CQOOQCQ0:=BcdToDBNumeric(OCQQOOQCQ0);
OOCQOOQCQ0:=O0CQOOQCQ0.Precision;
Assert(OOCQOOQCQ0<=OOOC0QCOQ0);
if OOCQOOQCQ0=0 then begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then
OOCQOOQCQ0:=OC0C0QCOQ0
else
OOCQOOQCQ0:=O0OC0QCOQ0;
end;
OCQQ0QQOQ0.OC00C0COQ0(OOCQOOQCQ0);
OCQQ0QQOQ0.OC00C0COQ0(O0CQOOQCQ0.scale);
OCQQ0QQOQ0.OC00C0COQ0(OQ0C0QCOQ0);
OCQQ0QQOQ0.OOOOC0COQ0(@O0CQOOQCQ0.sign,OQ0C0QCOQ0);
end;
end;
else
raise Exception.CreateFmt('LENGTH_TYPE_BYTE: TdsFieldType %d not implemented yet',[OQQOQQQCQ0]);
end;
end;
procedure OOOQOQQCQ0.O00COOQCQ0(OO0COOQCQ0:Byte;OQ0COOQCQ0:Boolean;const OC0COOQCQ0:Variant);
var
O0OCOOQCQ0:TBlob;
OOOCOOQCQ0:IntPtr;
OQOCOOQCQ0:Cardinal;
begin
if VarIsEmpty(OC0COOQCQ0)or VarIsNull(OC0COOQCQ0)then
OCQQ0QQOQ0.OCCQQ0COQ0(nil,0,OQ0COOQCQ0)
else
case OO0COOQCQ0 of
OC0O0OCCQ0,OQOO0OCCQ0,OQQO0OCCQ0:begin
if((VarType(OC0COOQCQ0)and varArray)<>0)and(VarArrayDimCount(OC0COOQCQ0)>0)then
OCQQ0QQOQ0.OCCQQ0COQ0(TVarData(OC0COOQCQ0).VArray.Data,VarArrayHighBound(OC0COOQCQ0,1)+1,OQ0COOQCQ0)
else
OOQQ0QQCQ0(OC0COOQCQ0,OQ0C0QQOQ0[OO0COOQCQ0].OCQCCQCOQ0,OQ0COOQCQ0);
end;
OQ0O0OCCQ0:begin
if((VarType(OC0COOQCQ0)and varArray)<>0)and(VarArrayDimCount(OC0COOQCQ0)>0)then
OCQQ0QQOQ0.OCCQQ0COQ0(TVarData(OC0COOQCQ0).VArray.Data,VarArrayHighBound(OC0COOQCQ0,1)+1,OQ0COOQCQ0)
else
if(TVarData(OC0COOQCQ0).VType and varByRef)<>0 then begin
O0OCOOQCQ0:=TVarData(OC0COOQCQ0).VPointer;
OCQQ0QQOQ0.OC0CQ0COQ0(O0OCOOQCQ0,OQ0COOQCQ0);
end
else begin
OOOCOOQCQ0:=TVarData(OC0COOQCQ0).VPointer;
if(OOOCOOQCQ0=nil)and(VarIsEmpty(OC0COOQCQ0)or(OC0COOQCQ0=''))then
if(TVarData(OC0COOQCQ0).VType=varOleStr){$IFDEF VER12P} or(TVarData(OC0COOQCQ0).VType=varUString){$ENDIF} then
OOOCOOQCQ0:=PWideChar(EmptyWString)
else
OOOCOOQCQ0:=PAnsiChar(EmptyString);
if OOOCOOQCQ0<>nil then begin
if(TVarData(OC0COOQCQ0).VType=varOleStr){$IFDEF VER12P} or(TVarData(OC0COOQCQ0).VType=varUString){$ENDIF} then
OQOCOOQCQ0:=Length(WideString(OC0COOQCQ0))*SizeOf(WideChar)
else
OQOCOOQCQ0:=LengthA(AnsiString(OC0COOQCQ0));
end
else
OQOCOOQCQ0:=0;
OCQQ0QQOQ0.OCCQQ0COQ0(OOOCOOQCQ0,OQOCOOQCQ0,OQ0COOQCQ0);
end;
end;
else
raise Exception.CreateFmt('LENGTH_TYPE_USHORT: TdsFieldType %d not implemented yet',[OO0COOQCQ0]);
end;
end;
procedure OOOQOQQCQ0.OCOCOOQCQ0(O0QCOOQCQ0:Byte;OOQCOOQCQ0:Boolean;const OQQCOOQCQ0:Variant);
var
OCQCOOQCQ0:TBlob;
begin
case O0QCOOQCQ0 of
OOC0QCCOQ0,
OO0O0OCCQ0:begin
if VarIsEmpty(OQQCOOQCQ0)or VarIsNull(OQQCOOQCQ0)then
OCQQ0QQOQ0.OCQ0C0COQ0(Cardinal(-1))
else
OQ0C0QQCQ0(OQQCOOQCQ0,OQ0C0QQOQ0[O0QCOOQCQ0].OCQCCQCOQ0);
end;
O0C0QCCOQ0:begin
if VarIsEmpty(OQQCOOQCQ0)or VarIsNull(OQQCOOQCQ0)then
OCQQ0QQOQ0.OCQ0C0COQ0(Cardinal(-1))
else
if VarType(OQQCOOQCQ0)=varArray+varByte then begin
OCQQ0QQOQ0.OCQ0C0COQ0(TVarData(OQQCOOQCQ0).VArray.Bounds[0].ElementCount);
OCQQ0QQOQ0.OOOOC0COQ0(TVarData(OQQCOOQCQ0).VArray.Data,TVarData(OQQCOOQCQ0).VArray.Bounds[0].ElementCount);
end
else
if(VarType(OQQCOOQCQ0)and varByRef)<>0 then begin
Assert(TVarData(OQQCOOQCQ0).VPointer<>nil);
OCQCOOQCQ0:=TVarData(OQQCOOQCQ0).VPointer;
OCQQ0QQOQ0.OCOQQ0COQ0(OCQCOOQCQ0);
end
else
raise Exception.Create('Not an array or Blob');
end;
OOQO0OCCQ0:
OCCCOQQCQ0(OOQCOOQCQ0,OQQCOOQCQ0);
else
raise Exception.CreateFmt('LENGTH_TYPE_LONG: TdsFieldType %d not implemented yet',[O0QCOOQCQ0]);
end;
end;
procedure OOOQOQQCQ0.OOQQ0QQCQ0(const OQQQ0QQCQ0:Variant;OCQQ0QQCQ0:Boolean;O0CQ0QQCQ0:Boolean);
var
OOCQ0QQCQ0:TBlob;
OQCQ0QQCQ0:Word;
OCCQ0QQCQ0:TBytes;
O00C0QQCQ0,OO0C0QQCQ0:Encoding;
begin
OQCQ0QQCQ0:=TVarData(OQQQ0QQCQ0).VType;
if(OQCQ0QQCQ0 and varByRef)<>0 then begin
OOCQ0QQCQ0:=TVarData(OQQQ0QQCQ0).VPointer;
if OCQQ0QQCQ0 then
OCQQ0QQOQ0.O0CCQ0COQ0(OOCQ0QQCQ0.AsWideString,O0CQ0QQCQ0)
else if OOCQ0QQCQ0.IsUnicode then
OCQQ0QQOQ0.OQOCQ0COQ0(Encoding.Default.GetBytes(OOCQ0QQCQ0.AsWideString),O0CQ0QQCQ0)
else
{$IFDEF IS_UTF8}
OCQQ0QQOQ0.OQOCQ0COQ0(Encoding.ASCII.GetBytes({$IFNDEF NEXTGEN}OOCQ0QQCQ0.AsAnsiString{$ELSE}OOCQ0QQCQ0.AsString{$ENDIF}),O0CQ0QQCQ0);
{$ELSE}
OCQQ0QQOQ0.OQOCQ0COQ0(OOCQ0QQCQ0.AsBytes,O0CQ0QQCQ0);
{$ENDIF}
end
else
if OQCQ0QQCQ0=varArray+varByte then begin
OCQQ0QQOQ0.OCO0C0COQ0(Word(TVarData(OQQQ0QQCQ0).VArray.Bounds[0].ElementCount));
OCQQ0QQOQ0.OOOOC0COQ0(TVarData(OQQQ0QQCQ0).VArray.Data,TVarData(OQQQ0QQCQ0).VArray.Bounds[0].ElementCount and$FFFF);
end
else
if OCQQ0QQCQ0 then
OCQQ0QQOQ0.O0CCQ0COQ0(WideString(OQQQ0QQCQ0),O0CQ0QQCQ0)
else begin
O00C0QQCQ0:=O0QO0QQOQ0;
if OC0C0QQOQ0 then
OO0C0QQCQ0:=O0CQ0QQOQ0.O00OOQQOQ0
else
OO0C0QQCQ0:=O00C0QQCQ0;
{$IFNDEF VER10P}
SetLength(OCCQ0QQCQ0,0);
{$ENDIF}
OCCQ0QQCQ0:=O00C0QQCQ0.GetBytes(AnsiString(OQQQ0QQCQ0));
if O00C0QQCQ0<>OO0C0QQCQ0 then
OCCQ0QQCQ0:=Encoding.Convert(O00C0QQCQ0,OO0C0QQCQ0,OCCQ0QQCQ0);
OCQQ0QQOQ0.OQOCQ0COQ0(OCCQ0QQCQ0,O0CQ0QQCQ0);
end;
end;
procedure OOOQOQQCQ0.OQ0C0QQCQ0(const OC0C0QQCQ0:Variant;O0OC0QQCQ0:Boolean);
var
OOOC0QQCQ0:TBlob;
OQOC0QQCQ0:Word;
OCOC0QQCQ0:TBytes;
O0QC0QQCQ0,OOQC0QQCQ0:Encoding;
begin
OQOC0QQCQ0:=TVarData(OC0C0QQCQ0).VType;
if(OQOC0QQCQ0 and varByRef)<>0 then begin
OOOC0QQCQ0:=TVarData(OC0C0QQCQ0).VPointer;
if O0OC0QQCQ0 then
OCQQ0QQOQ0.OOO0Q0COQ0(OOOC0QQCQ0.AsWideString)
else
if OOOC0QQCQ0.IsUnicode then
OCQQ0QQOQ0.O000Q0COQ0(Encoding.Default.GetBytes(OOOC0QQCQ0.AsWideString))
else
OCQQ0QQOQ0.O000Q0COQ0(OOOC0QQCQ0.AsBytes);
end
else
if OQOC0QQCQ0=varArray+varByte then begin
OCQQ0QQOQ0.OCQ0C0COQ0(TVarData(OC0C0QQCQ0).VArray.Bounds[0].ElementCount);
OCQQ0QQOQ0.OOOOC0COQ0(TVarData(OC0C0QQCQ0).VArray.Data,TVarData(OC0C0QQCQ0).VArray.Bounds[0].ElementCount);
end
else
if O0OC0QQCQ0 then
OCQQ0QQOQ0.OOO0Q0COQ0(WideString(OC0C0QQCQ0))
else begin
O0QC0QQCQ0:=O0QO0QQOQ0;
if OC0C0QQOQ0 then
OOQC0QQCQ0:=O0CQ0QQOQ0.O00OOQQOQ0
else
OOQC0QQCQ0:=O0QC0QQCQ0;
{$IFNDEF VER10P}
SetLength(OCOC0QQCQ0,0);
{$ENDIF}
OCOC0QQCQ0:=O0QC0QQCQ0.GetBytes(AnsiString(OC0C0QQCQ0));
if O0QC0QQCQ0<>OOQC0QQCQ0 then
OCOC0QQCQ0:=Encoding.Convert(O0QC0QQCQ0,OOQC0QQCQ0,OCOC0QQCQ0);
OCQQ0QQOQ0.O000Q0COQ0(OCOC0QQCQ0);
end;
end;
procedure OOOQOQQCQ0.O0CCOOQCQ0(OOCCOOQCQ0:Boolean;OQCCOOQCQ0,OCCCOOQCQ0:Word;O000OOQCQ0:Byte;
OO00OOQCQ0:O00CCQCOQ0;const OQ00OOQCQ0:O00CQQCOQ0;const OC00OOQCQ0:string;O0O0OOQCQ0,OOO0OOQCQ0:Word;OQO0OOQCQ0:Integer);
var
OCO0OOQCQ0:Integer;
begin
if OOCCOOQCQ0 then begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then
OCQQ0QQOQ0.OCQ0C0COQ0($50)
else
OCQQ0QQOQ0.OCO0C0COQ0($50);
end
else begin
if O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0 then
OCQQ0QQOQ0.OCQ0C0COQ0(0)
else
OCQQ0QQOQ0.OCO0C0COQ0(0);
end;
OCQQ0QQOQ0.OCO0C0COQ0(OQCCOOQCQ0);
OCQQ0QQOQ0.OC00C0COQ0(O000OOQCQ0);
case OO00OOQCQ0.OOOCCQCOQ0 of
O0OQ0QCOQ0:begin
case OCCCOOQCQ0 of
dtBoolean:
OCQQ0QQOQ0.OC00C0COQ0(1);
dtBcd,dtFMTBCD:begin
OCQQ0QQOQ0.OC00C0COQ0(OQO0OOQCQ0);
OCQQ0QQOQ0.OC00C0COQ0(Byte(O0O0OOQCQ0));
OCQQ0QQOQ0.OC00C0COQ0(Byte(OOO0OOQCQ0));
end;
dtGuid:
OCQQ0QQOQ0.OC00C0COQ0($10);
else
OCQQ0QQOQ0.OC00C0COQ0(Byte(OQO0OOQCQ0));
end;
end;
OOOQ0QCOQ0:begin
if O0O0OOQCQ0>0 then begin
if OO00OOQCQ0.OCQCCQCOQ0 then
OCQQ0QQOQ0.OCO0C0COQ0(Word(O0O0OOQCQ0*2))
else
OCQQ0QQOQ0.OCO0C0COQ0(Word(O0O0OOQCQ0));
end
else
OCQQ0QQOQ0.OCO0C0COQ0($FFFF);
end;
OQOQ0QCOQ0:begin
if O0O0OOQCQ0>0 then
OCQQ0QQOQ0.OCQ0C0COQ0(Cardinal(O0O0OOQCQ0))
else
OCQQ0QQOQ0.OCQ0C0COQ0($7FFFFFFF);
end;
end;
if OO00OOQCQ0.OOQCCQCOQ0 and(O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0)then
OCQQ0QQOQ0.OOOOC0COQ0(@OQ00OOQCQ0,SizeOf(OQ00OOQCQ0));
OCO0OOQCQ0:=System.Length(OC00OOQCQ0);
OCQQ0QQOQ0.OC00C0COQ0(OCO0OOQCQ0);
OCQQ0QQOQ0.OOQOC0COQ0(WideString(OC00OOQCQ0));
end;
procedure OOOQOQQCQ0.OOQC0OQOQ0(OQO0QQQCQ0:Boolean);
var
OCO0QQQCQ0:OCOQQCQOQ0;
O0Q0QQQCQ0:string;
begin
if O00C0QQOQ0='' then
raise Exception.Create('Command text was not set for the command object');
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCO0QQCQ0;
if OC00QQQOQ0=nil then begin
O0Q0QQQCQ0:=OOOCQQQOQ0(O00C0QQOQ0);
if OQO0QQQCQ0 then
if not OCOQQQQOQ0(O0Q0QQQCQ0,[lxTOP])then
O0Q0QQQCQ0:=OO0QQQQOQ0(O0Q0QQQCQ0);
OCQQ0QQOQ0.OOQOC0COQ0(WideString(O0Q0QQQCQ0));
OOCCQQQOQ0(OQOCCCCOQ0);
end
else begin
O0QQOQQCQ0:=0;
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then begin
OCQQ0QQOQ0.OCO0C0COQ0(Word(O0QCO0CCQ0));
OCQQ0QQOQ0.OCO0C0COQ0(OQ0OCOCCQ0);
end
else begin
OCQQ0QQOQ0.OCO0C0COQ0(Length(O0QOCOCCQ0[OQ0OCOCCQ0]));
OCQQ0QQOQ0.OOQOC0COQ0(WideString(O0QOCOCCQ0[OQ0OCOCCQ0]));
end;
OCQQ0QQOQ0.OCO0C0COQ0(OOQOCOCCQ0);
O0Q0QQQCQ0:=OOOCQQQOQ0(O00C0QQOQ0);
O0Q0QQQCQ0:=O0000OQOQ0(O0Q0QQQCQ0);
OC0COQQCQ0(OCO0QQQCQ0,OOOCQQCOQ0,OO0O0OCCQ0);
OO0OOQQCQ0(OCO0QQQCQ0,O0Q0QQQCQ0);
Inc(O0QQOQQCQ0);
OC0Q0QQCQ0;
O0COOQQCQ0(O0CQ0QQOQ0.O0QQ0QQOQ0<O0Q0CCCOQ0);
OOCCQQQOQ0(O0QCCCCOQ0);
end;
OCCCQQQOQ0;
end;
procedure OOOQOQQCQ0.OOCC0OQOQ0(OOQ0QQQCQ0:Integer;var OQQ0QQQCQ0:Integer);
var
OCQ0QQQCQ0:OCOQQCQOQ0;
O0C0QQQCQ0:string;
OOC0QQQCQ0:OO0QOOCOQ0;
begin
try
O0QQOQQCQ0:=0;
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCO0QQCQ0;
Assert((OOQ0QQQCQ0>=OOQ0COCCQ0)and(OOQ0QQQCQ0<=OCOOCOCCQ0));
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then begin
OCQQ0QQOQ0.OCO0C0COQ0(Word(O0QCO0CCQ0));
OCQQ0QQOQ0.OCO0C0COQ0(OOQ0QQQCQ0);
end
else begin
OCQQ0QQOQ0.OCO0C0COQ0(Length(O0QOCOCCQ0[OOQ0QQQCQ0]));
OCQQ0QQOQ0.OOQOC0COQ0(WideString(O0QOCOCCQ0[OOQ0QQQCQ0]));
end;
OCQQ0QQOQ0.OCO0C0COQ0(OOQOCOCCQ0);
OC0COQQCQ0(OCQ0QQQCQ0,OCOCQQCOQ0,O00OQCCOQ0,OOOCOQCOQ0,OCQ0QOCCQ0);
if OOQ0QQQCQ0<>O0OOCOCCQ0 then
OCQ0QQQCQ0.O0QQQCQOQ0:=OCO00OCCQ0;
OO0OOQQCQ0(OCQ0QQQCQ0,OQQ0QQQCQ0);
Inc(O0QQOQQCQ0);
case OOQ0QQQCQ0 of
OC0OCOCCQ0,
OOOOCOCCQ0,
OQOOCOCCQ0:begin
OCOQOQQCQ0:=OQQ0QQQCQ0;
if OOQ0QQQCQ0=OC0OCOCCQ0 then begin
O0C0QQQCQ0:=OOOCQQQOQ0(O00C0QQOQ0);
O0C0QQQCQ0:=O0000OQOQ0(O0C0QQQCQ0);
OC0Q0QQCQ0;
OC0COQQCQ0(OCQ0QQQCQ0,OOOCQQCOQ0,OO0O0OCCQ0);
OO0OOQQCQ0(OCQ0QQQCQ0,O0C0QQQCQ0);
Inc(O0QQOQQCQ0);
end
else begin
OC0Q0QQCQ0;
O0COOQQCQ0(O0CQ0QQOQ0.O0QQ0QQOQ0<O0Q0CCCOQ0);
end;
OC0COQQCQ0(OCQ0QQQCQ0,OCOCQQCOQ0,O00OQCCOQ0,OOOCOQCOQ0);
OO0OOQQCQ0(OCQ0QQQCQ0,Integer(1));
end;
O0OOCOCCQ0:begin
O0COOQQCQ0(O0CQ0QQOQ0.O0QQ0QQOQ0<O0Q0CCCOQ0);
end;
OCOOCOCCQ0:begin
OCOQOQQCQ0:=-1;
end;
end;
OOQQOQQCQ0:=True;
OC000QQOQ0:=False;
OOCCQQQOQ0(O0QCCCCOQ0);
OCCCQQQOQ0;
case OOQ0QQQCQ0 of
OC0OCOCCQ0,
OOOOCOCCQ0,
OQOOCOCCQ0:begin
{$IFNDEF VER9P}
SetLength(OOC0QQQCQ0,0);
{$ENDIF}
OOC0QQQCQ0:=OO00QQQOQ0;
try
OO00QQQOQ0:=nil;
O000QQQOQ0;
finally
OO00QQQOQ0:=OOC0QQQCQ0;
end;
OQQ0QQQCQ0:=OCOQOQQCQ0;
end;
end;
OOQQOQQCQ0:=False;
except
OOQQOQQCQ0:=False;
case OOQ0QQQCQ0 of
OC0OCOCCQ0,
OOOOCOCCQ0,
OQOOCOCCQ0:
OQQ0QQQCQ0:=-1;
end;
raise;
end;
end;
procedure OOOQOQQCQ0.OCQC0OQOQ0(const OQC0QQQCQ0:string);
begin
O0QQOQQCQ0:=0;
OQ000QQOQ0:=0;
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCO0QQCQ0;
OCQQ0QQOQ0.OCO0C0COQ0(Length(OQC0QQQCQ0));
OCQQ0QQOQ0.OOQOC0COQ0(WideString(OQC0QQQCQ0));
OCQQ0QQOQ0.OCO0C0COQ0(OOQOCOCCQ0);
O0COOQQCQ0(False);
OOCCQQQOQ0(O0QCCCCOQ0);
OCCCQQQOQ0;
end;
procedure OOOQOQQCQ0.OCC0QQQCQ0(const O00OQQQCQ0,OO0OQQQCQ0:string;OQ0OQQQCQ0:Integer);
var
OC0OQQQCQ0:OCOQQCQOQ0;
O0OOQQQCQ0:string;
begin
O0QQOQQCQ0:=0;
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCO0QQCQ0;
O0OOQQQCQ0:=OOOCQQQOQ0(O00C0QQOQ0);
O0OOQQQCQ0:=O0000OQOQ0(O0OOQQQCQ0);
OCQQ0QQOQ0.OCO0C0COQ0(Length(O0OOQQQCQ0));
OCQQ0QQOQ0.OOQOC0COQ0(WideString(O0OOQQQCQ0));
OCQQ0QQOQ0.OCO0C0COQ0(OOQOCOCCQ0);
OC0COQQCQ0(OC0OQQQCQ0,OCOCQQCOQ0,OQOO0OCCQ0);
OO0OOQQCQ0(OC0OQQQCQ0,OO0OQQQCQ0);
OC0COQQCQ0(OC0OQQQCQ0,OCOCQQCOQ0,O00OQCCOQ0,OOOCOQCOQ0);
OO0OOQQCQ0(OC0OQQQCQ0,OQ0OQQQCQ0);
OC0COQQCQ0(OC0OQQQCQ0,OCOCQQCOQ0,OQOO0OCCQ0);
if O00OQQQCQ0<>'' then
OO0OOQQCQ0(OC0OQQQCQ0,O00OQQQCQ0)
else
OO0OOQQCQ0(OC0OQQQCQ0,Null);
OO0OOQQCQ0(OC0OQQQCQ0,Null);
OOCCQQQOQ0(O0QCCCCOQ0);
OCCCQQQOQ0;
end;
function OOOQOQQCQ0.OOOOQQQCQ0(OQOOQQQCQ0:Integer;OCOOQQQCQ0:Word;O0QOQQQCQ0:Integer):Integer;
begin
O0QQOQQCQ0:=0;
OQ000QQOQ0:=0;
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCO0QQCQ0;
if O0CQ0QQOQ0.O0QQ0QQOQ0>=OCO0CCCOQ0 then begin
OCQQ0QQOQ0.OCO0C0COQ0(Word(O0QCO0CCQ0));
OCQQ0QQOQ0.OCO0C0COQ0(OQOOQQQCQ0);
end
else begin
OCQQ0QQOQ0.OCO0C0COQ0(Length(O0QOCOCCQ0[OQOOQQQCQ0]));
OCQQ0QQOQ0.OOQOC0COQ0(WideString(O0QOCOCCQ0[OQOOQQQCQ0]));
end;
OCQQ0QQOQ0.OCO0C0COQ0(OCOOQQQCQ0);
if O0QOQQQCQ0>0 then begin
O0COOQQCQ0(O0CQ0QQOQ0.O0QQ0QQOQ0<O0Q0CCCOQ0,0,O0QOQQQCQ0-1);
if O0QOQQQCQ0<High(OC00QQQOQ0)then
O0COOQQCQ0(True,O0QOQQQCQ0,High(OC00QQQOQ0));
end
else
O0COOQQCQ0(O0CQ0QQOQ0.O0QQ0QQOQ0<O0Q0CCCOQ0);
OOCCQQQOQ0(O0QCCCCOQ0);
OQCCQQQOQ0;
Result:=OQ000QQOQ0;
end;
procedure OOOQOQQCQ0.OOCO0QQCQ0;
var
OQCO0QQCQ0:Integer;
begin
if O0CQ0QQOQ0.O0QQ0QQOQ0<O0Q0CCCOQ0 then
Exit;
OQCO0QQCQ0:=4+18;
if OQQQOQQCQ0 then
Inc(OQCO0QQCQ0,O00QCQQCQ0);
OCQQ0QQOQ0.OOQ0C0COQ0(OQCO0QQCQ0);
OCCO0QQCQ0;
if OQQQOQQCQ0 then
OO0QCQQCQ0;
end;
procedure OOOQOQQCQ0.OCCO0QQCQ0;
begin
OCQQ0QQOQ0.OOQ0C0COQ0(18);
OCQQ0QQOQ0.OCO0C0COQ0(OQ00COCCQ0);
if(OQOOOOQCQ0(O0CQ0QQOQ0).O0QOCOQCQ0<>nil)then begin
OCQQ0QQOQ0.OOC0C0COQ0(OQOOOOQCQ0(O0CQ0QQOQ0).O0QOCOQCQ0.O0OOOOQCQ0);
end
else begin
OCQQ0QQOQ0.OOC0C0COQ0(OQOOOOQCQ0(O0CQ0QQOQ0).O0OQ0OQCQ0);
end;
OCQQ0QQOQ0.OOQ0C0COQ0(1);
end;
function OOOQOQQCQ0.O00QCQQCQ0:integer;
begin
Result:=10+(Length(OCQQOQQCQ0)+Length(O0CQOQQCQ0))*2;
if OOCQOQQCQ0>0 then
Inc(Result,4);
end;
procedure OOOQOQQCQ0.OO0QCQQCQ0;
begin
OCQQ0QQOQ0.OOQ0C0COQ0(O00QCQQCQ0);
OCQQ0QQOQ0.OCO0C0COQ0(OO00COCCQ0);
OCQQ0QQOQ0.O0CCQ0COQ0(WideString(OCQQOQQCQ0),False);
OCQQ0QQOQ0.O0CCQ0COQ0(WideString(O0CQOQQCQ0),False);
if OOCQOQQCQ0>0 then
OCQQ0QQOQ0.OOQ0C0COQ0(OOCQOQQCQ0);
end;
procedure OOOQOQQCQ0.O0Q0OOQCQ0(OOQ0OOQCQ0:OQOCQCQOQ0;OQQ0OOQCQ0:Integer;OCQ0OOQCQ0:TCRIsolationLevel;
const O0C0OOQCQ0:string;const OOC0OOQCQ0:TBytes);
const
OQC0OOQCQ0:array[ilReadCommitted..ilCustom]of Byte=(
OOCCCOCCQ0,
O0CCCOCCQ0,
OQCCCOCCQ0,
OCCCCOCCQ0,
O000COCCQ0,
OCQCCOCCQ0
);
begin
Assert((OQQ0OOQCQ0>=OC0CCOCCQ0)and(OQQ0OOQCQ0<=OOQCCOCCQ0));
{$IFDEF LOG_PACKETS}
AddToLog(OQQCCOCCQ0[OQQ0OOQCQ0]);
{$ENDIF}
OOQ0OOQCQ0.OOO0OQQOQ0;
try
if not OOQ0OOQCQ0.OQOQ0QQOQ0 then
raise Exception.Create(SConnectionIsBusy);
O0CQ0QQOQ0:=OOQ0OOQCQ0;
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCO0QQCQ0;
OCQQ0QQOQ0.OCO0C0COQ0(OQQ0OOQCQ0);
case OQQ0OOQCQ0 of
OC0CCOCCQ0:begin
OCQQ0QQOQ0.OCO0C0COQ0(0);
end;
O0OCCOCCQ0:begin
if Length(OOC0OOQCQ0)>0 then
OCQQ0QQOQ0.OCCQQ0COQ0(@OOC0OOQCQ0[0],Length(OOC0OOQCQ0),False)
else
OCQQ0QQOQ0.OCO0C0COQ0(0);
end;
OOOCCOCCQ0:begin
Assert(O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0);
OCQQ0QQOQ0.OC00C0COQ0(OQC0OOQCQ0[OCQ0OOQCQ0]);
OCQQ0QQOQ0.OC00C0COQ0(Length(O0C0OOQCQ0)*2);
if Length(O0C0OOQCQ0)>0 then
OCQQ0QQOQ0.OOQOC0COQ0(WideString(O0C0OOQCQ0));
end;
OQOCCOCCQ0:begin
Assert(O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0);
end;
OCOCCOCCQ0:begin
Assert(O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0);
OCQQ0QQOQ0.OC00C0COQ0(0);
OCQQ0QQOQ0.OC00C0COQ0(0);
end;
O0QCCOCCQ0:begin
Assert(O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0);
OCQQ0QQOQ0.OC00C0COQ0(Length(O0C0OOQCQ0)*2);
if Length(O0C0OOQCQ0)>0 then
OCQQ0QQOQ0.OOQOC0COQ0(WideString(O0C0OOQCQ0));
OCQQ0QQOQ0.OC00C0COQ0(0);
end;
OOQCCOCCQ0:begin
Assert(O0CQ0QQOQ0.O0QQ0QQOQ0>=O0Q0CCCOQ0);
OCQQ0QQOQ0.OC00C0COQ0(Length(O0C0OOQCQ0)*2);
if Length(O0C0OOQCQ0)>0 then
OCQQ0QQOQ0.OOQOC0COQ0(WideString(O0C0OOQCQ0));
end;
else
Assert(False);
end;
OOCCQQQOQ0(O0CCCCCOQ0);
OQCCQQQOQ0;
finally
OOQ0OOQCQ0.OQO0OQQOQ0;
end;
end;
procedure OOOQOQQCQ0.OCO0QQQOQ0(out OQQQQQQCQ0:Integer;out OCQQQQQCQ0:Boolean);
var
O0CQQQQCQ0:integer;
begin
try
if OQOQOQQCQ0=nil then
O0CQQQQCQ0:=-1
else
O0CQQQQCQ0:=OQOQOQQCQ0.OC0QOQQCQ0;
OQOOOOQCQ0(O0CQ0QQOQ0).OCCOQCQOQ0(OQOC0QQOQ0,OQQQQQQCQ0,OCQQQQQCQ0,O0CQQQQCQ0);
except
O0QC0QQOQ0:=True;
raise;
end;
end;
procedure OOOQOQQCQ0.O0Q0QQQOQ0(OOCQQQQCQ0:IntPtr;OQCQQQQCQ0:Integer;OCCQQQQCQ0:Boolean);
var
O00CQQQCQ0:integer;
begin
try
if OQOQOQQCQ0=nil then
O00CQQQCQ0:=-1
else
O00CQQQCQ0:=OQOQOQQCQ0.OC0QOQQCQ0;
OQOOOOQCQ0(O0CQ0QQOQ0).OQQQOQQOQ0(OOCQQQQCQ0,OQCQQQQCQ0,OCCQQQQCQ0,O00CQQQCQ0);
O0QC0QQOQ0:=OCCQQQQCQ0;
if OQOQOQQCQ0<>nil then
OQOQOQQCQ0.O0OQOQQCQ0:=O0QC0QQOQ0;
except
O0QC0QQOQ0:=True;
raise;
end;
end;
procedure OOOQOQQCQ0.OOCCQQQOQ0(OOOQQQQCQ0:Byte;OQOQQQQCQ0:Byte=0);
var
OCOQQQQCQ0:integer;
begin
OOOC0QQOQ0:=OOOQQQQCQ0;
if OQOOOOQCQ0(O0CQ0QQOQ0).OO00QCQOQ0.O0CQCOQOQ0 and
not(OOOC0QQOQ0 in[O000CCCOQ0,OQCCCCCOQ0,OCCCCCCOQ0])then
if OQOQOQQCQ0=nil then
OQOQOQQCQ0:=OQOOOOQCQ0(O0CQ0QQOQ0).OCOQ0OQCQ0;
if OQOQOQQCQ0=nil then
OCOQQQQCQ0:=-1
else
OCOQQQQCQ0:=OQOQOQQCQ0.OC0QOQQCQ0;
try
OQOOOOQCQ0(O0CQ0QQOQ0).OO0COQQOQ0(OOOC0QQOQ0,OQOQQQQCQ0,OCQQ0QQOQ0,OCOQQQQCQ0);
except
on E:SocketException do
OCC00OQOQ0.OOCOOQQOQ0(E.ErrorCode,E.Message,OOCQ0QQOQ0);
on E:Exception do
raise;
end;
O0QC0QQOQ0:=OQOOOOQCQ0(O0CQ0QQOQ0).OQ00QCQOQ0;
if OQOQOQQCQ0<>nil then
OQOQOQQCQ0.O0OQOQQCQ0:=O0QC0QQOQ0;
end;
constructor OQOOOOQCQ0.Create;
begin
inherited;
OCOOOOQCQ0:=OQQOQCQCQ0;
OOOQ0OQCQ0:=False;
OOO0QCQOQ0:=OCQ0CCCOQ0;
OQ0Q0OQCQ0:=True;
OC0Q0OQCQ0:='';
O0OQ0OQCQ0:=0;
O0COOOQCQ0:=TCRObjectList.Create;
OOCOOOQCQ0:=OOOQOQQCQ0.Create(Self);
end;
destructor OQOOOOQCQ0.Destroy;
begin
inherited;
O0COOOQCQ0.Free;
OOCOOOQCQ0.Free;
end;
function OQOOOOQCQ0.OQOOOQQOQ0:boolean;
begin
Result:=True;
end;
function OQOOOOQCQ0.OCOQ0OQCQ0:OQCOQCQCQ0;
var
O0QQ0OQCQ0:integer;
OOQQ0OQCQ0:integer;
begin
if O000QCQOQ0=nil then
O000QCQOQ0:=OO0OOCQOQ0.Create(O0OOQCQOQ0,O00OQCQOQ0);
for OOQQ0OQCQ0:=0 to O0COOOQCQ0.Count-1 do begin
Result:=OQCOQCQCQ0(O0COOOQCQ0[OOQQ0OQCQ0]);
if Result.O0OQOQQCQ0 then
Exit;
end;
O0QQ0OQCQ0:=O000QCQOQ0.OQQQ0CQOQ0;
Result:=OQCOQCQCQ0.Create(O0QQ0OQCQ0);
O0COOOQCQ0.Add(Result);
end;
procedure OQOOOOQCQ0.O0O0OQQOQ0;
begin
try
if O000QCQOQ0<>nil then begin
O0COOOQCQ0.Clear;
O000QCQOQ0.OQCQ0CQOQ0;
end;
{$IFDEF USE_SSL}
case OCOOOOQCQ0 of
{$IFDEF SSPI}
O0COQCQCQ0:
OCO00OQCQ0;
{$ENDIF}
OCQOQCQCQ0:
OO000OQCQ0;
end;
{$ENDIF}
finally
inherited;
FreeAndNil(O000QCQOQ0);
end;
end;
procedure OQOOOOQCQ0.OCO0OQQOQ0(const OQ0OCOQCQ0:O00QCOQOQ0;OC0OCOQCQ0:boolean;
O0OOCOQCQ0:OOQ0CCQOQ0;OOOOCOQCQ0:OOC0CCQOQ0;OQOOCOQCQ0:O00OCCQOQ0);
begin
inherited;
if OOO0QCQOQ0>=OCO0CCCOQ0 then begin
OCCOOOQCQ0:=O00O0OCCQ0;
OCQQCOQCQ0(OC0OCOQCQ0);
OOCOOOQCQ0.OCQ00OQOQ0.O0O000COQ0;
OOCOOOQCQ0.OCQ00OQOQ0.O0Q000COQ0;
OO0CCOQCQ0(OOCOOOQCQ0.OCQ00OQOQ0);
if OC0OCOQCQ0 and(OCCOOOQCQ0<>OCC00OCCQ0)then
raise Exception.Create('SQL Server does not support encryption');
end;
OCOCCOQCQ0(OQ0OCOQCQ0);
OOCOOOQCQ0.OQCCQQQOQ0;
end;
function OQOOOOQCQ0.O00OQCQOQ0(O0CQ0OQCQ0:pointer;OOCQ0OQCQ0,OQCQ0OQCQ0:Integer):Integer;
begin
{$IFDEF USE_SSL}
if OCOOOOQCQ0 in[O0COQCQCQ0,OCQOQCQCQ0]then begin
Result:=0;
try
{$IFDEF SSPI}
if OCOOOOQCQ0=O0COQCQCQ0 then
Result:=OCQOOOQCQ0.O0QOOCQCQ0(PtrOffset(O0CQ0OQCQ0,OOCQ0OQCQ0),OQCQ0OQCQ0)
else
{$ENDIF}
Result:=O0QOOOQCQ0.O0OQ0Q00Q0(O0CQ0OQCQ0,OOCQ0OQCQ0,OQCQ0OQCQ0);
except
OCO0QCQOQ0(-1,'Socket error on reading',nil);
end;
end
else
{$ENDIF}
Result:=inherited O00OQCQOQ0(O0CQ0OQCQ0,OOCQ0OQCQ0,OQCQ0OQCQ0);
end;
function OQOOOOQCQ0.O0OOQCQOQ0(OCCQ0OQCQ0:pointer;O00C0OQCQ0,OO0C0OQCQ0:Integer):Integer;
{$IFDEF USE_SSL}
{$IFDEF SSPI}
var
OQ0C0OQCQ0:TBytes;
{$ENDIF}
{$ENDIF}
begin
case OCOOOOQCQ0 of
{$IFDEF USE_SSL}
{$IFDEF SSPI}
O0COQCQCQ0:begin
{$IFNDEF VER10P}
SetLength(OQ0C0OQCQ0,0);
{$ENDIF}
OQ0C0OQCQ0:=OCQOOOQCQ0.OQO0OCQCQ0(OCCQ0OQCQ0,O00C0OQCQ0,OO0C0OQCQ0);
OC0C0OQCQ0(TValueArr(OQ0C0OQCQ0),0,Length(OQ0C0OQCQ0));
Result:=OO0C0OQCQ0;
end;
{$ENDIF}
OCQOQCQCQ0:
Result:=O0QOOOQCQ0.O00Q0Q00Q0(OCCQ0OQCQ0,O00C0OQCQ0,OO0C0OQCQ0);
{$ENDIF}
OQQOQCQCQ0:
Result:=inherited O0OOQCQOQ0(OCCQ0OQCQ0,O00C0OQCQ0,OO0C0OQCQ0);
else
Result:=0;
end;
end;
{$IFDEF USE_SSL}
procedure OQOOOOQCQ0.OC0C0OQCQ0(const O0OC0OQCQ0:TValueArr;OOOC0OQCQ0,OQOC0OQCQ0:integer);
var
OCOC0OQCQ0:integer;
begin
if OCOOOOQCQ0 in[OCQOQCQCQ0,O0COQCQCQ0]then begin
if OO0Q0QQOQ0=nil then
OCO0QCQOQ0(-1,'Socket error on writing',nil);
OCOC0OQCQ0:=OO0Q0QQOQ0.Write(O0OC0OQCQ0,OOOC0OQCQ0,OQOC0OQCQ0);
if OCOC0OQCQ0<>OQOC0OQCQ0 then
OCO0QCQOQ0(OO0Q0QQOQ0.LastErrorCode,OO0Q0QQOQ0.LastError,nil);
end
else begin
OOCOOOQCQ0.OCQQ0QQOQ0.OQ0OO0COQ0;
OOCOOOQCQ0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(PtrOffset(O0OC0OQCQ0,OOOC0OQCQ0),OQOC0OQCQ0);
OOCOOOQCQ0.OOCCQQQOQ0(O000CCCOQ0);
end;
end;
function OQOOOOQCQ0.O0QC0OQCQ0(const OOQC0OQCQ0:TValueArr;OQQC0OQCQ0,OCQC0OQCQ0:integer):integer;
begin
if OCOOOOQCQ0 in[OCQOQCQCQ0,O0COQCQCQ0]then begin
Result:=OO0Q0QQOQ0.Read(OOQC0OQCQ0,OQQC0OQCQ0,OCQC0OQCQ0);
end
else begin
if OOCOOOQCQ0.OQQQ0QQOQ0.O0QCC0COQ0>=OOCOOOQCQ0.OQQQ0QQOQ0.OOQCC0COQ0 then begin
OOCOOOQCQ0.OQQQ0QQOQ0.O0O000COQ0;
OOCOOOQCQ0.OCQ00OQOQ0.O0Q000COQ0;
end;
Result:=OOCOOOQCQ0.OQQQ0QQOQ0.OOQCC0COQ0-OOCOOOQCQ0.OQQQ0QQOQ0.O0QCC0COQ0;
if Result>OCQC0OQCQ0 then
Result:=OCQC0OQCQ0;
OOCOOOQCQ0.OQQQ0QQOQ0.OCC000COQ0(@OOQC0OQCQ0[OQQC0OQCQ0],Result);
end;
end;
procedure OQOOOOQCQ0.O0CC0OQCQ0;
const
OOCC0OQCQ0:array[0..27]of OC0QQQQ0Q0=(
OQ00CQQ0Q0,
OC00CQQ0Q0,
O0O0CQQ0Q0,
OOO0CQQ0Q0,
OQO0CQQ0Q0,
OCO0CQQ0Q0,
O0Q0CQQ0Q0,
OQQ0CQQ0Q0,
OCQ0CQQ0Q0,
O0C0CQQ0Q0,
OOC0CQQ0Q0,
OQC0CQQ0Q0,
OCC0CQQ0Q0,
O00OCQQ0Q0,
OQ0OCQQ0Q0,
OC0OCQQ0Q0,
O0OOCQQ0Q0,
OOOOCQQ0Q0,
OQOOCQQ0Q0,
OCOOCQQ0Q0,
O0QOCQQ0Q0,
OQQOCQQ0Q0,
OCQOCQQ0Q0,
O0COCQQ0Q0,
OOCOCQQ0Q0,
OQCOCQQ0Q0,
OCCOCQQ0Q0,
O00QQQQ0Q0
);
var
OQCC0OQCQ0:O0QOQ0Q0Q0;
OCCC0OQCQ0:O0OQQQQ0Q0;
O0000OQCQ0:integer;
begin
{$IFDEF LOG_PACKETS}
AddToLog('InitSsl');
{$ENDIF}
OOCOOOQCQ0.OQQQ0QQOQ0.O0O000COQ0;
OQCC0OQCQ0:=O0QOQ0Q0Q0.Create;
try
OQCC0OQCQ0.OCO0OCO0Q0:=[O0QCCQQ0Q0,OOQCCQQ0Q0,OQQCCQQ0Q0,O0CCCQQ0Q0];
SetLength(OCCC0OQCQ0,Length(OOCC0OQCQ0));
for O0000OQCQ0:=0 to Length(OCCC0OQCQ0)-1 do
OCCC0OQCQ0[O0000OQCQ0]:=OOCC0OQCQ0[O0000OQCQ0];
OQCC0OQCQ0.OOO0OCO0Q0:=OCCC0OQCQ0;
OQCC0OQCQ0.OQO0OCO0Q0:=OQCOQOQOQ0;
OQCC0OQCQ0.OCQOOCO0Q0:=True;
OQCC0OQCQ0.OOQOOCO0Q0:=True;
OQCC0OQCQ0.OOQ0OCO0Q0:=O0Q00OQCQ0;
OQCC0OQCQ0.OCQ0OCO0Q0:=OOC00OQCQ0;
OQCC0OQCQ0.OOOOOCO0Q0:=OO0Q0QQOQ0.Timeout*1000;
OOQOOOQCQ0:=OCQOC0Q0Q0.Create;
OQQOOOQCQ0:=OCQOC0Q0Q0.Create;
OQCC0OQCQ0.OQOOOCO0Q0:=OOQOOOQCQ0;
OQCC0OQCQ0.OCOOOCO0Q0:=OQQOOOQCQ0;
OOQOOOQCQ0.OO0QQ0Q0Q0(OO00CCO0Q0.OOQ0CCO0Q0);
OOQOOOQCQ0.OO0QQ0Q0Q0(O00O0CO0Q0.Create);
OOQOOOQCQ0.OO0QQ0Q0Q0(OOCCCCO0Q0.Create);
O0QOOOQCQ0:=OCQCOQ00Q0.Create(OQCC0OQCQ0,O0QC0CQCQ0);
try
O0QOOOQCQ0.OC0C0Q00Q0:=OC0C0OQCQ0;
O0QOOOQCQ0.O0OC0Q00Q0:=O0QC0OQCQ0;
O0QOOOQCQ0.OOOC0Q00Q0:=OCC00OQCQ0;
O0QOOOQCQ0.OOCOOQ00Q0;
OCOOOOQCQ0:=OCQOQCQCQ0;
except
FreeAndNil(O0QOOOQCQ0);
FreeAndNil(OOQOOOQCQ0);
FreeAndNil(OQQOOOQCQ0);
raise;
end;
finally
OQCC0OQCQ0.Free;
end;
end;
procedure OQOOOOQCQ0.OO000OQCQ0;
begin
{$IFDEF LOG_PACKETS}
AddToLog('DeInitSsl');
{$ENDIF}
OCOOOOQCQ0:=OQQOQCQCQ0;
FreeAndNil(O0QOOOQCQ0);
FreeAndNil(OOQOOOQCQ0);
FreeAndNil(OQQOOOQCQ0);
end;
{$IFDEF SSPI}
procedure OQOOOOQCQ0.OQ000OQCQ0;
var
OC000OQCQ0,
O0O00OQCQ0:TBytes;
OOO00OQCQ0:integer;
OQO00OQCQ0:TBytes;
begin
{$IFDEF LOG_PACKETS}
AddToLog('InitSspi');
{$ENDIF}
OOCOOOQCQ0.OQQQ0QQOQ0.O0O000COQ0;
OCQOOOQCQ0:=OQQ0Q0CCQ0.Create([]);
try
OCQOOOQCQ0.OQQOQ0CCQ0:=O0QC0OQCQ0;
OOO00OQCQ0:=OCQOOOQCQ0.Initialize;
if OOO00OQCQ0<>0 then
raise Exception.Create(SysErrorMessage(cardinal(OOO00OQCQ0)));
OOO00OQCQ0:=OCQOOOQCQ0.O0OQOCQCQ0(OC000OQCQ0);
if OOO00OQCQ0<>OOQQQ0CCQ0 then
raise Exception.Create(SysErrorMessage(cardinal(OOO00OQCQ0)));
OOCOOOQCQ0.OCQQ0QQOQ0.OQ0OO0COQ0;
OOCOOOQCQ0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(OC000OQCQ0,0,Length(OC000OQCQ0));
OOCOOOQCQ0.OOCCQQQOQ0(O000CCCOQ0);
while(OOO00OQCQ0=OOQQQ0CCQ0)or
(OOO00OQCQ0=O0CQQ0CCQ0)or
(OOO00OQCQ0=OOCQQ0CCQ0)do
begin
OOCOOOQCQ0.OQQQ0QQOQ0.O0O000COQ0;
OOCOOOQCQ0.OCQ00OQOQ0.O0Q000COQ0;
if(OOO00OQCQ0=O0CQQ0CCQ0)or
(OOO00OQCQ0=OOCQQ0CCQ0)then
raise Exception.Create(SysErrorMessage(cardinal(OOO00OQCQ0)));
SetLength(OQO00OQCQ0,OOCOOOQCQ0.OQQQ0QQOQ0.OOQCC0COQ0);
OOCOOOQCQ0.OQQQ0QQOQ0.OCOQC0COQ0(@OQO00OQCQ0[0],Length(OQO00OQCQ0));
OOO00OQCQ0:=OCQOOOQCQ0.OC0COCQCQ0(@OQO00OQCQ0[0],Length(OQO00OQCQ0),O0O00OQCQ0);
if OOO00OQCQ0=OOQQQ0CCQ0 then begin
OOCOOOQCQ0.OCQQ0QQOQ0.OQ0OO0COQ0;
OOCOOOQCQ0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(O0O00OQCQ0,0,Length(O0O00OQCQ0));
OOCOOOQCQ0.OOCCQQQOQ0(O000CCCOQ0);
end;
end;
OCOOOOQCQ0:=O0COQCQCQ0;
except
FreeAndNil(OCQOOOQCQ0);
raise;
end;
end;
procedure OQOOOOQCQ0.OCO00OQCQ0;
begin
{$IFDEF LOG_PACKETS}
AddToLog('DeInitSspi');
{$ENDIF}
OCOOOOQCQ0:=OQQOQCQCQ0;
FreeAndNil(OCQOOOQCQ0);
end;
{$ENDIF}
procedure OQOOOOQCQ0.O0Q00OQCQ0(OOQ00OQCQ0:TObject;OQQ00OQCQ0:TScCertificate;
OCQ00OQCQ0:TCRList;var O0C00OQCQ0:TScCertificateStatusSet);
begin
{$IFNDEF USE_CRYPTOAPI_STORAGE}
if csUntrustedRoot in O0C00OQCQ0 then
Exclude(O0C00OQCQ0,csUntrustedRoot);
{$ENDIF}
end;
procedure OQOOOOQCQ0.OOC00OQCQ0(out OQC00OQCQ0:boolean);
begin
if OO00QCQOQ0.OCQQCOQOQ0 or(OCCOOOQCQ0=OQC00OCCQ0)then
OQC00OQCQ0:=False
else
OQC00OQCQ0:=True;
end;
procedure OQOOOOQCQ0.OCC00OQCQ0(O00O0OQCQ0:TObject);
begin
OO0Q0QQOQ0.Close;
raise Exception.Create('Connection terminated due to SSL error');
end;
{$ENDIF}
procedure OQOOOOQCQ0.OQQQ0OQCQ0(OCQQ0OQCQ0:OC0OOOQCQ0);
begin
if((OO0Q0OQCQ0=nil)and(OCQQ0OQCQ0<>nil))
or((OO0Q0OQCQ0<>nil)and(OCQQ0OQCQ0=nil))then
OO0Q0OQCQ0:=OCQQ0OQCQ0;
end;
procedure OQOOOOQCQ0.OCQQCOQCQ0(O0CQCOQCQ0:boolean);
var
OOCQCOQCQ0:O0QQQCQCQ0;
OQCQCOQCQ0,OCCQCOQCQ0:Word;
O00CCOQCQ0:OOCQQCQCQ0;
begin
OOCOOOQCQ0.OCQQ0QQOQ0.OQ0OO0COQ0;
OOCOOOQCQ0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
if OOO0QCQOQ0>=O0Q0CCCOQ0 then
OQCQCOQCQ0:=5*(1+SizeOf(O0QQQCQCQ0))+1
else
OQCQCOQCQ0:=4*(1+SizeOf(O0QQQCQCQ0))+1;
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(OOOCOOCOQ0);
OOCQCOQCQ0.OOQQQCQCQ0:=OCQCOCQOQ0(OQCQCOQCQ0);
OOCQCOQCQ0.OQQQQCQCQ0:=OCQCOCQOQ0(Word(SizeOf(OOCQQCQCQ0)));
Inc(OQCQCOQCQ0,SizeOf(OOCQQCQCQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@OOCQCOQCQ0,SizeOf(OOCQCOQCQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(OQOCOOCOQ0);
OOCQCOQCQ0.OOQQQCQCQ0:=OCQCOCQOQ0(OQCQCOQCQ0);
OOCQCOQCQ0.OQQQQCQCQ0:=OCQCOCQOQ0(Word(1));
Inc(OQCQCOQCQ0,1);
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@OOCQCOQCQ0,SizeOf(OOCQCOQCQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(OCOCOOCOQ0);
OOCQCOQCQ0.OOQQQCQCQ0:=OCQCOCQOQ0(OQCQCOQCQ0);
OCCQCOQCQ0:=Length(OO00QCQOQ0.O0OQCOQOQ0)+1;
OOCQCOQCQ0.OQQQQCQCQ0:=OCQCOCQOQ0(OCCQCOQCQ0);
Inc(OQCQCOQCQ0,OCCQCOQCQ0);
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@OOCQCOQCQ0,SizeOf(OOCQCOQCQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(O0QCOOCOQ0);
OOCQCOQCQ0.OOQQQCQCQ0:=OCQCOCQOQ0(OQCQCOQCQ0);
OOCQCOQCQ0.OQQQQCQCQ0:=OCQCOCQOQ0(Word(SizeOf(Cardinal)));
Inc(OQCQCOQCQ0,SizeOf(Cardinal));
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@OOCQCOQCQ0,SizeOf(OOCQCOQCQ0));
if OOO0QCQOQ0>=O0Q0CCCOQ0 then begin
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(OOQCOOCOQ0);
OOCQCOQCQ0.OOQQQCQCQ0:=OCQCOCQOQ0(OQCQCOQCQ0);
OOCQCOQCQ0.OQQQQCQCQ0:=OCQCOCQOQ0(Word(1));
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@OOCQCOQCQ0,SizeOf(OOCQCOQCQ0));
end;
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(OCQCOOCOQ0);
if OOO0QCQOQ0>=O0Q0CCCOQ0 then
O00CCOQCQ0.OQCQQCQCQ0:=OCQCOCQOQ0(OOQ00OCCQ0)
else
O00CCOQCQ0.OQCQQCQCQ0:=OCQCOCQOQ0(O0Q00OCCQ0);
O00CCOQCQ0.OCCQQCQCQ0:=0;
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@O00CCOQCQ0,SizeOf(O00CCOQCQ0));
{$IFDEF USE_SSL}
if O0CQCOQCQ0 then
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(OCQ00OCCQ0)
else
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(OQQ00OCCQ0);
{$ELSE}
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(O0C00OCCQ0);
{$ENDIF}
if OO00QCQOQ0.O0OQCOQOQ0<>'' then
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(PAnsiChar(AnsiString(OO00QCQOQ0.O0OQCOQOQ0)),Length(OO00QCQOQ0.O0OQCOQOQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(0);
{$IFDEF MSWINDOWS}
OOCOOOQCQ0.OCQQ0QQOQ0.OCQ0C0COQ0(GetCurrentProcessID);
{$ELSE}
OOCOOOQCQ0.OCQQ0QQOQ0.OCQ0C0COQ0(0);
{$ENDIF}
if OOO0QCQOQ0>=O0Q0CCCOQ0 then
if OO00QCQOQ0.O0CQCOQOQ0 then
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(1)
else
OOCOOOQCQ0.OCQQ0QQOQ0.OC00C0COQ0(0);
OOCOOOQCQ0.OOCCQQQOQ0(O000CCCOQ0);
end;
procedure OQOOOOQCQ0.OO0CCOQCQ0(OQ0CCOQCQ0:OCQOO0COQ0);
var
OC0CCOQCQ0:Byte;
O0OCCOQCQ0:O0QQQCQCQ0;
OOOCCOQCQ0:TBytes;
OQOCCOQCQ0:Word;
begin
while OQ0CCOQCQ0.O0QCC0COQ0<OQ0CCOQCQ0.OOQCC0COQ0 do begin
OC0CCOQCQ0:=OQ0CCOQCQ0.O0OO00COQ0;
if OC0CCOQCQ0=OCQCOOCOQ0 then
Break;
OQ0CCOQCQ0.OCC000COQ0(@O0OCCOQCQ0,SizeOf(O0OCCOQCQ0));
OQOCCOQCQ0:=OCQCOCQOQ0(O0OCCOQCQ0.OQQQQCQCQ0);
if OQOCCOQCQ0<=0 then
Continue;
SetLength(OOOCCOQCQ0,OQOCCOQCQ0);
OQ0CCOQCQ0.OCOQC0COQ0(@OOOCCOQCQ0[0],OQOCCOQCQ0,OCQCOCQOQ0(O0OCCOQCQ0.OOQQQCQCQ0)-OQ0CCOQCQ0.O0QCC0COQ0);
case OC0CCOQCQ0 of
OOOCOOCOQ0:begin
end;
OQOCOOCOQ0:begin
Assert(OQOCCOQCQ0>0);
case OOOCCOQCQ0[0]of
OQQ00OCCQ0:OCCOOOQCQ0:=OQC00OCCQ0;
OCQ00OCCQ0:OCCOOOQCQ0:=OCC00OCCQ0;
O0C00OCCQ0:OCCOOOQCQ0:=O00O0OCCQ0;
OOC00OCCQ0:OCCOOOQCQ0:=OCC00OCCQ0;
end;
end;
OCOCOOCOQ0:begin
Assert(Length(OOOCCOQCQ0)>0);
{$IFDEF LOG_PACKETS}
AddToLog(Format('PL_OPTION_TOKEN_INSTOPT %d',[OOOCCOQCQ0[0]]));
{$ENDIF}
if OOOCCOQCQ0[0]=1 then begin
OO0Q0QQOQ0.Close;
raise Exception.Create('Connection terminated due to INSTOPT: Server reported instance name mismatch for '+OO00QCQOQ0.O0OQCOQOQ0);
end;
end;
O0QCOOCOQ0:begin
end;
OOQCOOCOQ0:begin
end;
OQQCOOCOQ0:begin
end;
else
Break;
end;
OOOCCOQCQ0:=nil;
end;
end;
procedure OQOOOOQCQ0.OCOCCOQCQ0(const O0QCCOQCQ0:O00QCOQOQ0);
procedure OOQCCOQCQ0(const OQQCCOQCQ0:string;var OCQCCOQCQ0:OC0CQCQCQ0;var O0CCCOQCQ0:Word);
var
OOCCCOQCQ0:Integer;
OQCCCOQCQ0:WideString;
begin
OCQCCOQCQ0.O0OCQCQCQ0:=O0CCCOQCQ0;
OQCCCOQCQ0:=WideString(OQQCCOQCQ0);
OCQCCOQCQ0.OOOCQCQCQ0:=Length(OQCCCOQCQ0);
OOCCCOQCQ0:=OCQCCOQCQ0.OOOCQCQCQ0*2;
if OOCCCOQCQ0>0 then begin
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@OQCCCOQCQ0[1],OOCCCOQCQ0);
Inc(O0CCCOQCQ0,OOCCCOQCQ0);
end;
end;
procedure OCCCCOQCQ0(const O000COQCQ0:TBytes;var OO00COQCQ0:OC0CQCQCQ0;var OQ00COQCQ0:Word);
begin
OO00COQCQ0.O0OCQCQCQ0:=OQ00COQCQ0;
OO00COQCQ0.OOOCQCQCQ0:=Length(O000COQCQ0);
if Length(O000COQCQ0)>0 then begin
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@O000COQCQ0[0],Length(O000COQCQ0));
Inc(OQ00COQCQ0,Length(O000COQCQ0));
end;
end;
procedure OC00COQCQ0(const O0O0COQCQ0:string;var OOO0COQCQ0:OC0CQCQCQ0;var OQO0COQCQ0:Word);
var
OCO0COQCQ0,O0Q0COQCQ0:Integer;
OOQ0COQCQ0:PByte;
OQQ0COQCQ0:TBytes;
OCQ0COQCQ0:WideString;
begin
OOO0COQCQ0.O0OCQCQCQ0:=OQO0COQCQ0;
OCQ0COQCQ0:=WideString(O0O0COQCQ0);
OOO0COQCQ0.OOOCQCQCQ0:=Length(OCQ0COQCQ0);
O0Q0COQCQ0:=OOO0COQCQ0.OOOCQCQCQ0*2;
if O0Q0COQCQ0>0 then begin
SetLength(OQQ0COQCQ0,O0Q0COQCQ0);
OOQ0COQCQ0:=PByte(OCQ0COQCQ0);
for OCO0COQCQ0:=0 to O0Q0COQCQ0-1 do begin
OQQ0COQCQ0[OCO0COQCQ0]:=(((OOQ0COQCQ0^shl 4)or(OOQ0COQCQ0^shr 4))xor$A5)and$FF;
Inc(OOQ0COQCQ0);
end;
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(@OQQ0COQCQ0[0],O0Q0COQCQ0);
Inc(OQO0COQCQ0,O0Q0COQCQ0);
end;
end;
var
O0C0COQCQ0:Word;
OOC0COQCQ0:OCQCQCQCQ0;
OQC0COQCQ0:TBytes;
OCC0COQCQ0:Integer;
O00OCOQCQ0:string;
{$IFDEF USE_SSL}
{$IFDEF SSPI}
OO0OCOQCQ0:Integer;
{$ENDIF}
{$ENDIF}
begin
O00OCOQCQ0:=O0QCCOQCQ0.OOOQCOQOQ0;
if O0QCCOQCQ0.O0OQCOQOQ0<>'' then
O00OCOQCQ0:=O00OCOQCQ0+'\'+O0QCCOQCQ0.O0OQCOQOQ0;
if Length(O0QCCOQCQ0.OO0QCOQOQ0)>OCOOQOCCQ0 then
raise Exception.CreateFmt('UserName %s length exceeds maxlength %d',[O0QCCOQCQ0.OO0QCOQOQ0,OCOOQOCCQ0]);
if Length(O0QCCOQCQ0.OQ0QCOQOQ0)>O0QOQOCCQ0 then
raise Exception.CreateFmt('Password %s length exceeds maxlength %d',[O0QCCOQCQ0.OQ0QCOQOQ0,O0QOQOCCQ0]);
if Length(O0QCCOQCQ0.OC0QCOQOQ0)>OOQOQOCCQ0 then
raise Exception.CreateFmt('AppName %s length exceeds maxlength %d',[O0QCCOQCQ0.OC0QCOQOQ0,OOQOQOCCQ0]);
if Length(O00OCOQCQ0)>OQQOQOCCQ0 then
raise Exception.CreateFmt('ServerName %s length exceeds maxlength %d',[O00OCOQCQ0,OQQOQOCCQ0]);
if Length(O00Q0OQCQ0)>OCQOQOCCQ0 then
raise Exception.CreateFmt('CltIntName %s length exceeds maxlength %d',[O00Q0OQCQ0,OCQOQOCCQ0]);
if Length(O0QCCOQCQ0.OQOQCOQOQ0)>O0COQOCCQ0 then
raise Exception.CreateFmt('Language %s length exceeds maxlength %d',[O0QCCOQCQ0.OQOQCOQOQ0,O0COQOCCQ0]);
if Length(O0QCCOQCQ0.OCOQCOQOQ0)>OOCOQOCCQ0 then
raise Exception.CreateFmt('Database %s length exceeds maxlength %d',[O0QCCOQCQ0.OCOQCOQOQ0,OOCOQOCCQ0]);
{$IFDEF USE_SSL}
case OCCOOOQCQ0 of
OQC00OCCQ0,OCC00OCCQ0:
{$IFDEF SSPI}
if O0QCCOQCQ0.O0QQCOQOQ0 then
OQ000OQCQ0
else
{$ENDIF}
O0CC0OQCQ0;
end;
{$ENDIF}
FillChar(OOC0COQCQ0,SizeOf(OOC0COQCQ0),0);
OOC0COQCQ0.OOCCQCQCQ0:=OOO0QCQOQ0;
OOC0COQCQ0.OQCCQCQCQ0:=OCOQ0QQOQ0;
OOC0COQCQ0.OCCCQCQCQ0:=$0683F2F8;
{$IFDEF MSWINDOWS}
OOC0COQCQ0.O000QCQCQ0:=GetCurrentProcessID;
{$ELSE}
OOC0COQCQ0.O000QCQCQ0:=0;
{$ENDIF}
OOC0COQCQ0.OO00QCQCQ0:=0;
OOC0COQCQ0.OQ00QCQCQ0:=OQ0QCOCCQ0 or OC0QCOCCQ0 or O0OQCOCCQ0;
OOC0COQCQ0.OC00QCQCQ0:=OOOQCOCCQ0;
if OO00QCQOQ0.O0QQCOQOQ0 then
OOC0COQCQ0.OC00QCQCQ0:=OOC0COQCQ0.OC00QCQCQ0 or O0CQCOCCQ0;
if OQ0Q0OQCQ0 then
OOC0COQCQ0.OC00QCQCQ0:=OOC0COQCQ0.OC00QCQCQ0 or OQOQCOCCQ0;
OOC0COQCQ0.O0O0QCQCQ0:=0;
if(OO00QCQOQ0.OOCQCOQOQ0)and(O0QQ0QQOQ0>=OCQ0CCCOQ0)then
OOC0COQCQ0.O0O0QCQCQ0:=OOC0COQCQ0.O0O0QCQCQ0 or OOCQCOCCQ0;
OOC0COQCQ0.OOO0QCQCQ0:=0;
OOC0COQCQ0.OQO0QCQCQ0:=0;
OOC0COQCQ0.OCO0QCQCQ0:=0;
OOCOOOQCQ0.OCQQ0QQOQ0.OQ0OO0COQ0;
OOCOOOQCQ0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OCQCQCQCQ0));
O0C0COQCQ0:=SizeOf(OCQCQCQCQ0);
SetLength(OQC0COQCQ0,0);
OOQCCOQCQ0(GetEnvironmentVariable('COMPUTERNAME'),OOC0COQCQ0.O0Q0QCQCQ0,O0C0COQCQ0);
if not O0QCCOQCQ0.O0QQCOQOQ0 then begin
OOQCCOQCQ0(O0QCCOQCQ0.OO0QCOQOQ0,OOC0COQCQ0.OOQ0QCQCQ0,O0C0COQCQ0);
OC00COQCQ0(O0QCCOQCQ0.OQ0QCOQOQ0,OOC0COQCQ0.OQQ0QCQCQ0,O0C0COQCQ0);
end
else begin
OOQCCOQCQ0('',OOC0COQCQ0.OOQ0QCQCQ0,O0C0COQCQ0);
OOQCCOQCQ0('',OOC0COQCQ0.OQQ0QCQCQ0,O0C0COQCQ0);
{$IFDEF USE_SSL}
{$IFDEF SSPI}
OO0OCOQCQ0:=OCQOOOQCQ0.OCQQOCQCQ0(OQC0COQCQ0);
if OO0OCOQCQ0<>OOQQQ0CCQ0 then
raise Exception.Create(SysErrorMessage(OO0OCOQCQ0));
{$ELSE}
raise Exception.Create('Windows Authentication is not supported');
{$ENDIF}
{$ENDIF}
end;
OOQCCOQCQ0(O0QCCOQCQ0.OC0QCOQOQ0,OOC0COQCQ0.OCQ0QCQCQ0,O0C0COQCQ0);
OOQCCOQCQ0(O00OCOQCQ0,OOC0COQCQ0.O0C0QCQCQ0,O0C0COQCQ0);
OOQCCOQCQ0('',OOC0COQCQ0.OOC0QCQCQ0,O0C0COQCQ0);
OCC0COQCQ0:=Length(ExtractFileExt(O0QCCOQCQ0.OC0QCOQOQ0));
if OCC0COQCQ0>0 then
OOQCCOQCQ0(Copy(O0QCCOQCQ0.OC0QCOQOQ0,1,Length(O0QCCOQCQ0.OC0QCOQOQ0)-OCC0COQCQ0),OOC0COQCQ0.OQC0QCQCQ0,O0C0COQCQ0)
else
OOQCCOQCQ0(O0QCCOQCQ0.OC0QCOQOQ0,OOC0COQCQ0.OQC0QCQCQ0,O0C0COQCQ0);
OOQCCOQCQ0(O0QCCOQCQ0.OQOQCOQOQ0,OOC0COQCQ0.OCC0QCQCQ0,O0C0COQCQ0);
OOQCCOQCQ0(O0QCCOQCQ0.OCOQCOQOQ0,OOC0COQCQ0.O00OQCQCQ0,O0C0COQCQ0);
FillChar(OOC0COQCQ0.OO0OQCQCQ0,SizeOf(OOC0COQCQ0.OO0OQCQCQ0),0);
if not O0QCCOQCQ0.O0QQCOQOQ0 then
OCCCCOQCQ0(nil,OOC0COQCQ0.OQ0OQCQCQ0,O0C0COQCQ0)
else
OCCCCOQCQ0(OQC0COQCQ0,OOC0COQCQ0.OQ0OQCQCQ0,O0C0COQCQ0);
OOQCCOQCQ0('',OOC0COQCQ0.OC0OQCQCQ0,O0C0COQCQ0);
if OOO0QCQOQ0>=O0Q0CCCOQ0 then begin
if Length(OC0Q0OQCQ0)>OCCOQOCCQ0 then
raise Exception.CreateFmt('NewPassword %s length exceeds maxlength %d',[OC0Q0OQCQ0,OCCOQOCCQ0]);
OOQCCOQCQ0(OC0Q0OQCQ0,OOC0COQCQ0.O0OOQCQCQ0,O0C0COQCQ0);
OOC0COQCQ0.OOOOQCQCQ0:=0;
end;
OOC0COQCQ0.O0CCQCQCQ0:=O0C0COQCQ0;
OOCOOOQCQ0.OCQQ0QQOQ0.O0Q0Q0COQ0(@OOC0COQCQ0,SizeOf(OOC0COQCQ0),SizeOf(OC0QOOCOQ0));
try
OOCOOOQCQ0.OOCCQQQOQ0(OQCCCCCOQ0);
finally
{$IFDEF USE_SSL}
if OCCOOOQCQ0=OQC00OCCQ0 then
case OCOOOOQCQ0 of
{$IFDEF SSPI}
O0COQCQCQ0:
OCOOOOQCQ0:=OQQOQCQCQ0;
{$ENDIF}
OCQOQCQCQ0:
OO000OQCQ0;
end;
{$ENDIF}
end;
end;
procedure OQOOOOQCQ0.OO0O0OQCQ0(OQ0O0OQCQ0:OCQOO0COQ0;OC0O0OQCQ0:Integer);
{$IFDEF USE_SSL}
{$IFDEF SSPI}
var
O0OO0OQCQ0,OOOO0OQCQ0:TBytes;
OQOO0OQCQ0:integer;
{$ENDIF}
{$ENDIF}
begin
{$IFDEF USE_SSL}
{$IFDEF SSPI}
Assert(OC0O0OQCQ0>0);
SetLength(O0OO0OQCQ0,OC0O0OQCQ0);
OQ0O0OQCQ0.OCC000COQ0(@O0OO0OQCQ0[0],OC0O0OQCQ0);
OQOO0OQCQ0:=OCQOOOQCQ0.OOCCOCQCQ0(O0OO0OQCQ0,OOOO0OQCQ0);
if OQOO0OQCQ0<>0 then
raise Exception.Create(SysErrorMessage(OQOO0OQCQ0));
if OOOO0OQCQ0<>nil then begin
OOCOOOQCQ0.OCQQ0QQOQ0.OQ0OO0COQ0;
OOCOOOQCQ0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OOCOOOQCQ0.OCQQ0QQOQ0.OOOOC0COQ0(OOOO0OQCQ0,0,Length(OOOO0OQCQ0));
try
OOCOOOQCQ0.OOCCQQQOQ0(OCCCCCCOQ0);
finally
if OCCOOOQCQ0=OQC00OCCQ0 then
OCO00OQCQ0;
end;
end;
{$ENDIF}
{$ENDIF}
end;
procedure OQOOOOQCQ0.OCOO0OQCQ0(O0QO0OQCQ0:OCQOO0COQ0);
var
{$IFDEF LOG_PACKETS}O0CQC0OCQ0:Byte;{$ENDIF}
OOQO0OQCQ0,OQQO0OQCQ0,OCQO0OQCQ0,O0CO0OQCQ0:Byte;
OOCO0OQCQ0:string;
begin
{$IFDEF LOG_PACKETS}O0CQC0OCQ0:={$ENDIF} O0QO0OQCQ0.O0OO00COQ0;
OOO0QCQOQ0:=OCQCOCQOQ0(O0QO0OQCQ0.O0QO00COQ0);
case OOO0QCQOQ0 of
OC00CCCOQ0,O0O0CCCOQ0:
OOO0QCQOQ0:=OOO0CCCOQ0;
OOO0CCCOQ0,
OCO0CCCOQ0,
O0Q0CCCOQ0,
OOQ0CCCOQ0,
OQQ0CCCOQ0,
OCQ0CCCOQ0:;
else
raise Exception.CreateFmt('Unknown server protocol version %X',[OOO0QCQOQ0]);
end;
OOOQ0OQCQ0:=True;
OOCO0OQCQ0:=O0QO0OQCQ0.OO0QC0COQ0;
OOQO0OQCQ0:=O0QO0OQCQ0.O0OO00COQ0;
OQQO0OQCQ0:=O0QO0OQCQ0.O0OO00COQ0;
OCQO0OQCQ0:=O0QO0OQCQ0.O0OO00COQ0;
O0CO0OQCQ0:=O0QO0OQCQ0.O0OO00COQ0;
if Assigned(OCC0QCQOQ0)then
OCC0QCQOQ0([OOCO0OQCQ0,Format('%d.%d.%d',[OOQO0OQCQ0,OQQO0OQCQ0,(OCQO0OQCQ0 shl 8)or O0CO0OQCQ0]),OOQO0OQCQ0,OQQO0OQCQ0]);
{$IFDEF LOG_PACKETS}
AddToLog(Format('Interface %X, TDSVersion %X, ProgName "%s", Ver %.2X%.2X%.2X%.2X',
[O0CQC0OCQ0,OOO0QCQOQ0,OOCO0OQCQ0,OOQO0OQCQ0,OQQO0OQCQ0,OCQO0OQCQ0,O0CO0OQCQ0]));
{$ENDIF}
end;
procedure OQOOOOQCQ0.OQCO0OQCQ0(OCCO0OQCQ0:OCQOO0COQ0);
var
O00QCOQCQ0:Byte;
OO0QCOQCQ0,OQ0QCOQCQ0:string;
OC0QCOQCQ0{$IFNDEF FPC},O0OQCOQCQ0{$ENDIF}:TBytes;
OOOQCOQCQ0{$IFNDEF FPC},OQOQCOQCQ0{$ENDIF}:Int64;
OCOQCOQCQ0,O0QQCOQCQ0:Integer;
procedure OOQQCOQCQ0;
var
OQQQCOQCQ0:Byte;
begin
OQQQCOQCQ0:=OCCO0OQCQ0.O0OO00COQ0;
if OQQQCOQCQ0=0 then
OOOQCOQCQ0:=0
else begin
Assert(OQQQCOQCQ0=8);
OOOQCOQCQ0:=OCCO0OQCQ0.OOQO00COQ0;
end;
OQQQCOQCQ0:=OCCO0OQCQ0.O0OO00COQ0;
{$IFNDEF FPC}
if OQQQCOQCQ0=0 then
OQOQCOQCQ0:=0
else begin
Assert(OQQQCOQCQ0=8);
OQOQCOQCQ0:=OCCO0OQCQ0.OOQO00COQ0;
end;
{$ELSE}
if OQQQCOQCQ0=8 then
OCCO0OQCQ0.OOQO00COQ0;
{$ENDIF}
{$IFDEF LOG_PACKETS}
{$IFNDEF FPC}
AddToLog(Format('new value "%.8X", old value "%.8X"',[OOOQCOQCQ0,OQOQCOQCQ0]));
{$ELSE}
AddToLog(Format('new value "%.8X""',[NewLongValue]));
{$ENDIF}
{$ENDIF}
end;
begin
{$IFNDEF VER9P}
OC0QCOQCQ0:=nil;
{$IFNDEF FPC}
O0OQCOQCQ0:=nil;
{$ENDIF}
{$ENDIF}
O00QCOQCQ0:=OCCO0OQCQ0.O0OO00COQ0;
{$IFDEF LOG_PACKETS}
Assert((O00QCOQCQ0>=Low(OQQ0QCCOQ0))and(O00QCOQCQ0<=High(OQQ0QCCOQ0)));
AddToLog(OQQ0QCCOQ0[O00QCOQCQ0]);
{$ENDIF}
case O00QCOQCQ0 of
O0QCQCCOQ0:begin
OO0QCOQCQ0:=OCCO0OQCQ0.OO0QC0COQ0;
OQ0QCOQCQ0:=OCCO0OQCQ0.OO0QC0COQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('new value "%s", old value "%s"',[OO0QCOQCQ0,OQ0QCOQCQ0]));
{$ENDIF}
if Assigned(OCQ0QCQOQ0)then
OCQ0QCQOQ0([OO0QCOQCQ0,OQ0QCOQCQ0]);
end;
OOQCQCCOQ0:begin
OO0QCOQCQ0:=OCCO0OQCQ0.OO0QC0COQ0;
OQ0QCOQCQ0:=OCCO0OQCQ0.OO0QC0COQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('new value "%s", old value "%s"',[OO0QCOQCQ0,OQ0QCOQCQ0]));
{$ENDIF}
if Assigned(O0C0QCQOQ0)then
O0C0QCQOQ0([OO0QCOQCQ0,OQ0QCOQCQ0]);
end;
OQQCQCCOQ0:begin
OO0QCOQCQ0:=OCCO0OQCQ0.OO0QC0COQ0;
OQ0QCOQCQ0:=OCCO0OQCQ0.OO0QC0COQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('new value "%s", old value "%s"',[OO0QCOQCQ0,OQ0QCOQCQ0]));
{$ENDIF}
if Assigned(OOC0QCQOQ0)then
OOC0QCQOQ0([OO0QCOQCQ0,OQ0QCOQCQ0]);
end;
OCQCQCCOQ0:begin
OO0QCOQCQ0:=OCCO0OQCQ0.OO0QC0COQ0;
OQ0QCOQCQ0:=OCCO0OQCQ0.OO0QC0COQ0;
OCOQCOQCQ0:=StrToInt64Def(OO0QCOQCQ0,0);
if OCOQCOQCQ0>0 then
OCOQ0QQOQ0:=OCOQCOQCQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('new value "%s", old value "%s"',[OO0QCOQCQ0,OQ0QCOQCQ0]));
{$ENDIF}
if Assigned(OQC0QCQOQ0)then
OQC0QCQOQ0([OO0QCOQCQ0,OQ0QCOQCQ0]);
end;
O0CCQCCOQ0:begin
end;
OOCCQCCOQ0:begin
OC0QCOQCQ0:=OCCO0OQCQ0.OOCO00COQ0;
{$IFNDEF FPC}O0OQCOQCQ0:={$ENDIF}OCCO0OQCQ0.OOCO00COQ0;
Assert(Length(OC0QCOQCQ0)>=SizeOf(Cardinal));
{$IFDEF LOG_PACKETS}
if Length(OC0QCOQCQ0)>0 then
AddDump(@OC0QCOQCQ0[0],Length(OC0QCOQCQ0),'NewArrValue');
if Length(O0OQCOQCQ0)>0 then
AddDump(@O0OQCOQCQ0[0],Length(O0OQCOQCQ0),'OldArrValue');
{$ENDIF}
O0QQCOQCQ0:=0;
Move(OC0QCOQCQ0[0],O0QQCOQCQ0,3);
OQCOOOQCQ0.OO0CQQCOQ0:=Word(O0QQCOQCQ0);
OQCOOOQCQ0.OQ0CQQCOQ0:=(OQC0QOCCQ0 or O00OQOCCQ0 or OO0OQOCCQ0)or((LongWord(O0QQCOQCQ0)and$F0000)shr 16);
OQCOOOQCQ0.OC0CQQCOQ0:=0;
O0QQCOQCQ0:=O0QQCOQCQ0 and O0CQO0CCQ0;
OOC0OQQOQ0(OOC0C0CCQ0[O0QQCOQCQ0]);
if Assigned(OQQ0QCQOQ0)then
{$IFNDEF FPC}
OQQ0QCQOQ0([OC0QCOQCQ0,O0OQCOQCQ0]);
{$ELSE}
OQQ0QCQOQ0([PCardinal(@OC0QCOQCQ0[0])^]);
{$ENDIF}
end;
OQCCQCCOQ0,
OO00QCCOQ0:begin
OOQQCOQCQ0;
if(OO0Q0OQCQ0<>nil)then begin
OO0Q0OQCQ0.O0OOOOQCQ0:=OOOQCOQCQ0;
O0OQ0OQCQ0:=0;
end
else begin
O0OQ0OQCQ0:=OOOQCOQCQ0;
end;
end;
OQ00QCCOQ0,
OQO0QCCOQ0,
OCCCQCCOQ0:begin
OOQQCOQCQ0;
O0OQ0OQCQ0:=0;
if(OO0Q0OQCQ0<>nil)then begin
{$IFDEF DEBUG}
if(OO0Q0OQCQ0.O0OOOOQCQ0<>0)then
Assert(OO0Q0OQCQ0.O0OOOOQCQ0<>OOOQCOQCQ0,'transaction id''s are not equal!');
{$ENDIF}
OO0Q0OQCQ0.O0OOOOQCQ0:=0;
OO0Q0OQCQ0.OOOOOOQCQ0:=0;
OO0Q0OQCQ0:=nil;
end;
end;
O000QCCOQ0:begin
OOQQCOQCQ0;
O0OQ0OQCQ0:=0;
if(OO0Q0OQCQ0<>nil)then begin
{$IFDEF DEBUG}
if(OO0Q0OQCQ0.O0OOOOQCQ0<>0)then
Assert(OO0Q0OQCQ0.O0OOOOQCQ0<>OOOQCOQCQ0,'transaction id''s are not equal!');
{$ENDIF}
OO0Q0OQCQ0.O0OOOOQCQ0:=0;
OO0Q0OQCQ0.OOOOOOQCQ0:=0;
OO0Q0OQCQ0:=nil;
end;
end;
OC00QCCOQ0,
O0O0QCCOQ0,
OOO0QCCOQ0,
OCO0QCCOQ0,
O0Q0QCCOQ0,
OOQ0QCCOQ0:;
end;
end;
initialization
OQ0QQOQCQ0;
end.
