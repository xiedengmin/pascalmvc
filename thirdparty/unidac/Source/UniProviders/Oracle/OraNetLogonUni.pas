//////////////////////////////////////////////////
//  Oracle Data Access Components Net
//  Copyright (c) 1998-2019 Devart. All right reserved.
//  OraNetCrypt (OCI Lite)
//////////////////////////////////////////////////
{$I Odac.inc}
unit OraNetLogonUni;
interface
uses
{$IFDEF UNIX}
cwstring,
{$ENDIF}
{$IFDEF MSWINDOWS}
Windows,
{$ENDIF}
Classes,Types,SysUtils,
CRTypes,CLRClasses,
{$IFNDEF UNIDACPRO}
OraCall,OraNetClasses;
{$ELSE}
OraCallUni,OraNetClassesUni;
{$ENDIF}
type
OOCC0C0OQ0=class
private
OQCC0C0OQ0:string;
OCCC0C0OQ0:string;
O0000C0OQ0:string;
OO000C0OQ0:string;
OQ000C0OQ0:string;
OC000C0OQ0:string;
function O0O00C0OQ0:string;
function OQC00C0OQ0:string;
function OO0O0C0OQ0:string;
function O0OO0C0OQ0:string;
public
constructor Create;
property OCOO0C0OQ0:string read OCCC0C0OQ0;
property O0QO0C0OQ0:string read O0000C0OQ0;
property OOQO0C0OQ0:string read OO000C0OQ0;
property OQQO0C0OQ0:string read OQ000C0OQ0;
property OCQO0C0OQ0:string read OC000C0OQ0;
end;
O0CO0C0OQ0=class
private
OOCO0C0OQ0:OOO0CQQOQ0;
OQCO0C0OQ0:OO00OQCOQ0;
protected
OCCO0C0OQ0:TBytes;
function O00QCC0OQ0(const OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;O0OQCC0OQ0:boolean):TBytes;virtual;abstract;
procedure OOOQCC0OQ0(OQOQCC0OQ0:Byte;OCOQCC0OQ0,O0QQCC0OQ0,OOQQCC0OQ0:string;OQQQCC0OQ0:Cardinal);virtual;abstract;
function OCQQCC0OQ0(O0CQCC0OQ0:Byte;OOCQCC0OQ0:pOCIError):Integer;virtual;abstract;
function OQCQCC0OQ0(OCCQCC0OQ0:pOCIError):sword;
function O00CCC0OQ0(OO0CCC0OQ0:pOCIError):sword;
public
constructor Create(OC0CCC0OQ0:OOO0CQQOQ0);
procedure O0OCCC0OQ0;virtual;
procedure OOOCCC0OQ0(const OQOCCC0OQ0:string;OCOCCC0OQ0:Integer);virtual;abstract;
function O0QCCC0OQ0(OOQCCC0OQ0:pOCIError):Integer;virtual;abstract;
procedure OQQCCC0OQ0(const OCQCCC0OQ0,O0CCCC0OQ0:string;OOCCCC0OQ0:Integer);virtual;abstract;
function OQCCCC0OQ0(OCCCCC0OQ0:pOCIError):Integer;virtual;abstract;
end;
O000CC0OQ0=class(O0CO0C0OQ0)
protected
function O00QCC0OQ0(const OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;O0OQCC0OQ0:boolean):TBytes;override;
procedure OOOQCC0OQ0(OQOQCC0OQ0:Byte;OCOQCC0OQ0,O0QQCC0OQ0,OOQQCC0OQ0:string;OQQQCC0OQ0:Cardinal);override;
function OCQQCC0OQ0(O0CQCC0OQ0:Byte;OOCQCC0OQ0:pOCIError):Integer;override;
public
procedure OOOCCC0OQ0(const OQOCCC0OQ0:string;OCOCCC0OQ0:Integer);override;
function O0QCCC0OQ0(OOQCCC0OQ0:pOCIError):Integer;override;
procedure OQQCCC0OQ0(const OCQCCC0OQ0,O0CCCC0OQ0:string;OOCCCC0OQ0:Integer);override;
function OQCCCC0OQ0(OCCCCC0OQ0:pOCIError):Integer;override;
end;
O0Q0CC0OQ0=class(O0CO0C0OQ0)
protected
OOQ0CC0OQ0:TBytes;
OQQ0CC0OQ0:TBytes;
OCQ0CC0OQ0:TBytes;
O0C0CC0OQ0:TBytes;
OOC0CC0OQ0:TBytes;
OQC0CC0OQ0:Cardinal;
OCC0CC0OQ0:TBytes;
O00OCC0OQ0:Integer;
OO0OCC0OQ0:Integer;
OQ0OCC0OQ0:TBytes;
OC0OCC0OQ0:boolean;
function O00QCC0OQ0(const OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;O0OQCC0OQ0:boolean):TBytes;override;
procedure OOOQCC0OQ0(OQOQCC0OQ0:Byte;OCOQCC0OQ0,O0QQCC0OQ0,OOQQCC0OQ0:string;OQQQCC0OQ0:Cardinal);override;
function OCQQCC0OQ0(O0CQCC0OQ0:Byte;OOCQCC0OQ0:pOCIError):Integer;override;
public
procedure O0OCCC0OQ0;override;
procedure OOOCCC0OQ0(const OQOCCC0OQ0:string;OCOCCC0OQ0:Integer);override;
function O0QCCC0OQ0(OOQCCC0OQ0:pOCIError):Integer;override;
procedure OQQCCC0OQ0(const OCQCCC0OQ0,O0CCCC0OQ0:string;OOCCCC0OQ0:Integer);override;
function OQCCCC0OQ0(OCCCCC0OQ0:pOCIError):Integer;override;
procedure OOQOCC0OQ0(const OQQOCC0OQ0,OCQOCC0OQ0,O0COCC0OQ0:string;OOCOCC0OQ0:Integer);virtual;
function OQCOCC0OQ0(OCCOCC0OQ0:pOCIError):Integer;virtual;
procedure O00QQC0OQ0;virtual;
function OO0QQC0OQ0(OQ0QQC0OQ0:pOCIError):Integer;virtual;
property OC0QQC0OQ0:TBytes read OCQ0CC0OQ0;
end;
OQOQQC0OQ0=(O0OQQC0OQ0,OOOQQC0OQ0);
OCOQQC0OQ0=class
private
class function O0QQQC0OQ0:TBytes;
protected
class function OQQQQC0OQ0(const OCQQQC0OQ0:string):string;
class function OOCQQC0OQ0(const OQCQQC0OQ0:string;const OCCQQC0OQ0:string;O00CQC0OQ0:boolean):TBytes;
class function OCOCQC0OQ0(const O0QCQC0OQ0:TBytes):TBytes;
class function OQQCQC0OQ0(const OCQCQC0OQ0:WideString;O0CCQC0OQ0:boolean):TBytes;
class function OOCCQC0OQ0(const OQCCQC0OQ0:WideString;var OCCCQC0OQ0:TBytes;O000QC0OQ0:integer;OO00QC0OQ0:boolean):Integer;
public
class function OOO0QC0OQ0(OQO0QC0OQ0:Byte):Byte;
class function OCO0QC0OQ0(O0Q0QC0OQ0:Byte):Byte;
class function OOQ0QC0OQ0(const OQQ0QC0OQ0:TBytes):TBytes;
class function OOC0QC0OQ0(const OQC0QC0OQ0:TBytes):TBytes;
class function O00OQC0OQ0(const OO0OQC0OQ0:string;const OQ0OQC0OQ0:string;OC0OQC0OQ0:boolean):TBytes;
end;
OOOOQC0OQ0=class(OCOQQC0OQ0)
protected
class function OQOOQC0OQ0(const OCOOQC0OQ0:TBytes;const O0QOQC0OQ0:TBytes):TBytes;
class function OQQOQC0OQ0(const OCQOQC0OQ0:TBytes;const O0COQC0OQ0:TBytes):TBytes;
public
class function OQCOQC0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;const OCCOQC0OQ0:TBytes;O0OQCC0OQ0:boolean):TBytes;
end;
OQOQOQ0OQ0=class(OCOQQC0OQ0)
private
class function OCOQOQ0OQ0:TBytes;
protected
class function OOQQOQ0OQ0(const OQQQOQ0OQ0:TBytes;const OCQQOQ0OQ0:TBytes;O0CQOQ0OQ0:Integer):TBytes;
class function O00COQ0OQ0(const OO0COQ0OQ0:TBytes;const OQ0COQ0OQ0:TBytes;OC0COQ0OQ0:Integer):TBytes;
class function OCQCOQ0OQ0(const O0CCOQ0OQ0:TBytes;const OOCCOQ0OQ0:TBytes):TBytes;
class function OCCCOQ0OQ0(const O000OQ0OQ0:TBytes;const OO00OQ0OQ0:TBytes):TBytes;
public
class function OC00OQ0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;const OCCOQC0OQ0:TBytes;O0OQCC0OQ0:boolean):TBytes;
end;
O0Q0OQ0OQ0=class(OCOQQC0OQ0)
protected
class function OOQ0OQ0OQ0(OQQ0OQ0OQ0:OQOQQC0OQ0;const OCQ0OQ0OQ0:TBytes;const O0C0OQ0OQ0:TBytes):TBytes;
class function OQC0OQ0OQ0(OCC0OQ0OQ0:OQOQQC0OQ0;const O00OOQ0OQ0:TBytes;const OO0OOQ0OQ0:TBytes):TBytes;
class function O0OOOQ0OQ0(OOOOOQ0OQ0:integer;const OQOOOQ0OQ0:TBytes;const OCOOOQ0OQ0:TBytes;const O0QOOQ0OQ0:TBytes;OOQOOQ0OQ0:Integer):TBytes;
public
class procedure OCCOOQ0OQ0(const O00Q0Q0OQ0,OO0Q0Q0OQ0:string;OQ0Q0Q0OQ0:byte;OC0Q0Q0OQ0:integer;const O0OQ0Q0OQ0,OOOQ0Q0OQ0,OQOQ0Q0OQ0:TBytes;OCOQ0Q0OQ0,O0QQ0Q0OQ0:Integer;
out OOQQ0Q0OQ0:TBytes;out OQQQ0Q0OQ0:TBytes;out OCQQ0Q0OQ0:TBytes;out O0CQ0Q0OQ0:TBytes);
class function OCQC0Q0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;O0CC0Q0OQ0:byte;OOCC0Q0OQ0:integer;const OQCC0Q0OQ0,OCCC0Q0OQ0,O0000Q0OQ0:TBytes;OO000Q0OQ0,OQ000Q0OQ0:Integer;
var OC000Q0OQ0:TBytes;var O0O00Q0OQ0:TBytes;var OOO00Q0OQ0:TBytes;var OQO00Q0OQ0:TBytes;out OCO00Q0OQ0:TBytes;O0OQCC0OQ0:boolean):TBytes;
end;
implementation
uses
CRFunctions,CRHash,MemUtils,
{$IFNDEF UNIDACPRO}
OraNetCrypt;
{$ELSE}
OraNetCryptUni;
{$ENDIF}
{$IFDEF MSWINDOWS}
var
OCQ00Q0OQ0:HMODULE;
{$ENDIF}
const
O0C00Q0OQ0:array[0..223]of Word=(
160,32,161,33,163,35,165,89,166,124,
171,60,173,45,180,39,187,62,192,65,
193,65,194,65,196,65,199,67,200,69,
201,69,202,69,203,69,204,73,205,73,
206,73,207,73,210,79,211,79,212,79,
214,79,217,85,218,85,219,85,220,85,
221,89,224,97,225,97,226,97,228,97,
231,99,232,101,233,101,234,101,235,101,
236,105,237,105,238,105,239,105,242,111,
243,111,244,111,246,111,249,117,250,117,
251,117,252,117,253,121,255,121,258,65,
259,97,260,65,261,97,262,67,263,99,
268,67,269,99,270,68,271,100,272,68,
273,100,280,69,281,101,282,69,283,101,
313,76,314,108,317,76,318,108,321,76,
322,108,323,78,324,110,327,78,328,110,
336,79,337,111,340,82,341,114,344,82,
345,114,346,83,347,115,350,83,351,115,
352,83,353,115,354,84,355,116,356,84,
357,116,366,85,367,117,368,85,369,117,
377,90,378,122,379,90,380,122,381,90,
382,122,8213,45,8216,96,8248,94,8356,76,
8764,126,63741,102);
OOC00Q0OQ0:array[0..2299]of Word=(
160,155,161,130,162,212,163,213,164,211,
165,214,166,157,167,136,168,195,169,138,
170,141,171,131,172,222,173,156,174,139,
175,154,176,151,177,221,178,172,179,173,
180,192,181,148,182,137,183,150,184,202,
185,171,186,142,187,132,188,179,189,176,
190,180,191,129,192,300,193,301,194,302,
195,303,196,304,197,306,198,309,199,314,
200,318,201,319,202,320,203,321,204,332,
205,333,206,334,207,336,208,316,209,349,
210,353,211,354,212,355,213,356,214,357,
215,226,216,361,217,373,218,374,219,375,
220,377,221,384,222,372,223,492,224,400,
225,401,226,402,227,403,228,404,229,406,
230,409,231,414,232,418,233,419,234,420,
235,421,236,432,237,433,238,434,239,436,
240,416,241,449,242,453,243,454,244,455,
245,456,246,457,247,227,248,461,249,473,
250,474,251,475,252,477,253,484,254,472,
255,486,256,307,257,407,258,305,259,405,
260,308,261,408,262,310,263,410,264,311,
265,411,266,313,267,413,268,312,269,412,
270,315,271,415,272,317,273,417,274,324,
275,424,276,392,277,499,278,323,279,423,
280,325,281,425,282,322,283,422,284,326,
285,426,286,327,287,427,288,328,289,428,
290,390,292,329,293,429,294,330,295,430,
296,335,297,435,298,338,299,438,300,393,
301,250,302,339,303,439,304,337,305,431,
306,340,307,440,308,341,309,441,310,342,
311,442,312,493,313,343,314,443,315,345,
316,445,317,344,318,444,319,347,320,447,
321,346,322,446,323,348,324,448,325,351,
326,451,327,350,328,450,329,244,330,352,
331,452,332,359,333,459,334,394,335,251,
336,358,337,458,338,360,339,460,340,362,
341,462,342,364,343,464,344,363,345,463,
346,365,347,465,348,366,349,466,350,368,
351,468,352,367,353,467,354,370,355,470,
356,369,357,469,358,371,359,471,360,376,
361,476,362,381,363,481,364,378,365,478,
366,380,367,480,368,379,369,479,370,382,
371,482,372,383,373,483,374,385,375,485,
376,386,377,387,378,487,379,389,380,489,
381,388,382,488,402,494,416,395,417,252,
431,396,432,253,501,490,710,293,711,196,
713,201,728,197,729,200,730,199,731,203,
732,294,733,198,768,296,818,295,819,158,
900,590,901,591,902,560,904,561,905,562,
906,563,908,564,910,565,911,566,912,579,
913,500,914,501,915,502,916,503,917,504,
918,505,919,506,920,507,921,508,922,509,
923,510,924,511,925,512,926,513,927,514,
928,515,929,516,931,517,932,518,933,519,
934,520,935,521,936,522,937,523,938,567,
939,568,940,570,941,571,942,572,943,573,
944,580,945,525,946,526,947,527,948,528,
949,529,950,530,951,531,952,532,953,533,
954,534,955,535,956,536,957,537,958,538,
959,539,960,540,961,541,962,549,963,542,
964,543,965,544,966,545,967,546,968,547,
969,548,970,577,971,578,972,574,973,575,
974,576,1025,733,1026,734,1027,735,1028,736,
1029,737,1030,738,1031,739,1032,740,1033,741,
1034,742,1035,743,1036,744,1038,745,1039,746,
1040,700,1041,701,1042,702,1043,703,1044,704,
1045,705,1046,706,1047,707,1048,708,1049,709,
1050,710,1051,711,1052,712,1053,713,1054,714,
1055,715,1056,716,1057,717,1058,718,1059,719,
1060,720,1061,721,1062,722,1063,723,1064,724,
1065,725,1066,726,1067,727,1068,728,1069,729,
1070,730,1071,731,1072,750,1073,751,1074,752,
1075,753,1076,754,1077,755,1078,756,1079,757,
1080,758,1081,759,1082,760,1083,761,1084,762,
1085,763,1086,764,1087,765,1088,766,1089,767,
1090,768,1091,769,1092,770,1093,771,1094,772,
1095,773,1096,774,1097,775,1098,776,1099,777,
1100,778,1101,779,1102,780,1103,781,1105,783,
1106,784,1107,785,1108,786,1109,787,1110,788,
1111,789,1112,790,1113,791,1114,792,1115,793,
1116,794,1118,795,1119,796,1456,927,1457,928,
1458,929,1459,930,1460,931,1461,932,1462,933,
1463,934,1464,935,1465,936,1467,937,1468,938,
1469,939,1470,940,1471,941,1472,942,1473,943,
1474,944,1475,945,1488,900,1489,901,1490,902,
1491,903,1492,904,1493,905,1494,906,1495,907,
1496,908,1497,909,1498,910,1499,911,1500,912,
1501,913,1502,914,1503,915,1504,916,1505,917,
1506,918,1507,919,1508,920,1509,921,1510,922,
1511,923,1512,924,1513,925,1514,926,1520,946,
1521,947,1522,948,1523,949,1524,950,1548,650,
1563,651,1567,652,1569,600,1570,601,1571,602,
1572,603,1573,604,1574,605,1575,606,1576,607,
1577,608,1578,609,1579,610,1580,611,1581,612,
1582,613,1583,614,1584,615,1585,616,1586,617,
1587,618,1588,619,1589,620,1590,621,1591,622,
1592,623,1593,624,1594,625,1600,626,1601,627,
1602,628,1603,629,1604,630,1605,631,1606,632,
1607,633,1608,634,1609,635,1610,636,1611,637,
1612,638,1613,639,1614,640,1615,641,1616,642,
1617,643,1618,644,1632,670,1633,671,1634,672,
1635,673,1636,674,1637,675,1638,676,1639,677,
1640,678,1641,679,1642,653,1643,654,1644,655,
1645,656,1648,680,1649,681,1657,686,1662,682,
1670,683,1672,692,1681,687,1688,684,1700,688,
1711,685,1722,693,1723,689,1746,690,1749,691,
2305,1300,2306,1301,2307,1302,2309,1303,2310,1304,
2311,1305,2312,1306,2313,1307,2314,1308,2315,1309,
2316,1310,2317,1311,2318,1312,2319,1313,2320,1314,
2321,1315,2322,1316,2323,1317,2324,1318,2325,1319,
2326,1320,2327,1321,2328,1322,2329,1323,2330,1324,
2331,1325,2332,1326,2333,1327,2334,1328,2335,1329,
2336,1330,2337,1331,2338,1332,2339,1333,2340,1334,
2341,1335,2342,1336,2343,1337,2344,1338,2345,1339,
2346,1340,2347,1341,2348,1342,2349,1343,2350,1344,
2351,1345,2352,1346,2353,1347,2354,1348,2355,1349,
2356,1350,2357,1351,2358,1352,2359,1353,2360,1354,
2361,1355,2364,1356,2365,1357,2366,1358,2367,1359,
2368,1360,2369,1361,2370,1362,2371,1363,2372,1364,
2373,1365,2374,1366,2375,1367,2376,1368,2377,1369,
2378,1370,2379,1371,2380,1372,2381,1373,2384,1374,
2385,1375,2386,1376,2387,1377,2388,1378,2392,1379,
2393,1380,2394,1381,2395,1382,2396,1383,2397,1384,
2398,1385,2399,1386,2400,1387,2401,1388,2402,1389,
2403,1390,2404,1391,2405,1392,2406,1393,2407,1394,
2408,1395,2409,1396,2410,1397,2411,1398,2412,1399,
2413,1400,2414,1401,2415,1402,2416,1403,2433,1474,
2434,1472,2435,1473,2437,1461,2438,1462,2439,1463,
2440,1464,2441,1465,2442,1466,2443,1467,2447,1468,
2448,1469,2451,1470,2452,1471,2453,1475,2454,1476,
2455,1477,2456,1478,2457,1479,2458,1480,2459,1481,
2460,1482,2461,1483,2462,1484,2463,1485,2464,1486,
2465,1487,2466,1489,2467,1491,2468,1492,2469,1493,
2470,1494,2471,1495,2472,1496,2474,1497,2475,1498,
2476,1499,2477,1500,2478,1501,2479,1502,2480,1504,
2482,1505,2486,1506,2487,1507,2488,1508,2489,1509,
2494,1510,2495,1511,2496,1512,2497,1513,2498,1514,
2499,1515,2503,1516,2504,1517,2507,1518,2508,1519,
2524,1488,2525,1490,2527,1503,2534,1451,2535,1452,
2536,1453,2537,1454,2538,1455,2539,1456,2540,1457,
2541,1458,2542,1459,2543,1460,2547,1450,3585,801,
3586,802,3587,803,3588,804,3589,805,3590,806,
3591,807,3592,808,3593,809,3594,810,3595,811,
3596,812,3597,813,3598,814,3599,815,3600,816,
3601,817,3602,818,3603,819,3604,820,3605,821,
3606,822,3607,823,3608,824,3609,825,3610,826,
3611,827,3612,828,3613,829,3614,830,3615,831,
3616,832,3617,833,3618,834,3619,835,3620,836,
3621,837,3622,838,3623,839,3624,840,3625,841,
3626,842,3627,843,3628,844,3629,845,3630,846,
3631,847,3632,848,3633,849,3634,850,3635,851,
3636,852,3637,853,3638,854,3639,855,3640,856,
3641,857,3642,858,3647,863,3648,864,3649,865,
3650,866,3651,867,3652,868,3653,869,3654,870,
3655,871,3656,872,3657,873,3658,874,3659,875,
3660,876,3661,877,3662,878,3663,879,3664,880,
3665,881,3666,882,3667,883,3668,884,3669,885,
3670,886,3671,887,3672,888,3673,889,3674,890,
3675,891,7841,254,7843,266,7845,1604,7847,1601,
7849,1602,7851,1603,7853,256,7855,269,7857,267,
7859,268,7861,1600,7863,255,7865,257,7867,1605,
7869,1606,7871,1610,7873,1607,7875,1608,7877,1609,
7879,258,7881,1611,7883,259,7885,260,7887,1612,
7889,1616,7891,1613,7893,1614,7895,1615,7897,261,
7899,1620,7901,1617,7903,1618,7905,1619,7907,262,
7909,263,7911,1621,7913,1625,7915,1622,7917,1623,
7919,1624,7921,264,7923,1626,7925,265,7927,1627,
7929,1628,8199,290,8201,291,8203,280,8204,282,
8205,283,8206,284,8207,285,8211,292,8213,153,
8216,146,8217,147,8218,174,8220,133,8221,134,
8222,175,8223,135,8224,185,8225,186,8226,187,
8230,188,8234,286,8235,287,8237,288,8238,289,
8240,189,8242,190,8243,191,8244,204,8248,193,
8249,205,8250,206,8260,238,8319,170,8355,217,
8356,216,8359,218,8362,219,8364,1999,8453,144,
8470,143,8482,140,8486,149,8531,177,8532,178,
8539,181,8540,182,8541,183,8542,184,8592,161,
8593,163,8594,162,8595,164,8706,239,8710,242,
8718,152,8719,241,8721,240,8730,229,8734,230,
8744,228,8745,231,8747,232,8764,194,8776,233,
8800,223,8801,234,8804,225,8805,224,8901,235,
8976,243,8992,236,8993,237,9472,1000,9474,1001,
9484,1002,9488,1003,9492,1004,9496,1005,9500,1006,
9508,1007,9516,1008,9524,1009,9532,1010,9552,1011,
9553,1012,9554,1013,9555,1014,9556,1015,9557,1016,
9558,1017,9559,1018,9560,1019,9561,1020,9562,1021,
9563,1022,9564,1023,9565,1024,9566,1025,9567,1026,
9568,1027,9569,1028,9570,1029,9571,1030,9572,1031,
9573,1032,9574,1033,9575,1034,9576,1035,9577,1036,
9578,1037,9579,1038,9580,1039,9600,1040,9604,1041,
9608,1042,9612,1043,9616,1044,9617,1045,9618,1046,
9619,1047,9670,270,9671,271,9674,272,9834,145,
63638,1553,63639,1552,63640,1551,63641,1550,63642,1549,
63643,1548,63644,1547,63645,1546,63646,1545,63647,1544,
63648,1543,63649,1542,63650,1541,63651,1540,63652,1539,
63653,1538,63654,1537,63655,1536,63656,1535,63657,1534,
63658,1533,63659,1532,63660,1531,63661,1530,63662,1529,
63663,1528,63664,1527,63665,1526,63666,1525,63667,1524,
63668,1523,63669,1522,63670,1521,63671,1520,63672,1141,
63673,1140,63674,1139,63675,1138,63676,1137,63677,1136,
63678,1135,63679,1134,63680,1133,63681,1132,63682,1131,
63683,1130,63684,1129,63685,1128,63686,1127,63687,1126,
63688,1125,63689,1124,63690,1123,63691,1122,63692,1121,
63693,1120,63694,1119,63695,1118,63696,1117,63697,1116,
63698,1115,63699,1114,63700,1113,63701,1112,63702,1111,
63703,1110,63704,1109,63705,1108,63706,1107,63707,1106,
63708,1105,63709,1104,63710,1103,63711,1102,63712,1101,
63713,1100,63714,995,63715,994,63716,993,63717,992,
63718,991,63719,990,63720,989,63721,988,63722,987,
63723,986,63724,985,63725,984,63726,983,63727,982,
63728,981,63729,980,63730,957,63731,664,63732,658,
63733,657,63734,498,63735,491,63736,437,63737,391,
63738,331,63739,274,63740,273,63741,215,63742,160,
63743,159,64256,495,64257,496,64258,497,64287,956,
64298,951,64299,952,64309,953,64316,954,64331,955,
64606,665,64607,666,64608,667,64609,668,64610,669,
65269,660,65271,661,65273,662,65275,663,65279,281,
65377,1200,65378,1201,65379,1202,65380,1203,65381,1204,
65382,1205,65383,1206,65384,1207,65385,1208,65386,1209,
65387,1210,65388,1211,65389,1212,65390,1213,65391,1214,
65392,1215,65393,1216,65394,1217,65395,1218,65396,1219,
65397,1220,65398,1221,65399,1222,65400,1223,65401,1224,
65402,1225,65403,1226,65404,1227,65405,1228,65406,1229,
65407,1230,65408,1231,65409,1232,65410,1233,65411,1234,
65412,1235,65413,1236,65414,1237,65415,1238,65416,1239,
65417,1240,65418,1241,65419,1242,65420,1243,65421,1244,
65422,1245,65423,1246,65424,1247,65425,1248,65426,1249,
65427,1250,65428,1251,65429,1252,65430,1253,65431,1254,
65432,1255,65433,1256,65434,1257,65435,1258,65436,1259,
65437,1260,65438,1261,65439,1262,65440,1263,65533,128);
function OQC00Q0OQ0(OCC00Q0OQ0:Word):Word;
var
O00O0Q0OQ0:Word;
OO0O0Q0OQ0:Integer;
begin
OO0O0Q0OQ0:=sizeof(O0C00Q0OQ0)div sizeof(Word);
for O00O0Q0OQ0:=0 to OO0O0Q0OQ0 div 2-1 do
if OCC00Q0OQ0=O0C00Q0OQ0[O00O0Q0OQ0*2]then
begin
Result:=O0C00Q0OQ0[O00O0Q0OQ0*2+1];
exit;
end;
Result:=63;
end;
function OQ0O0Q0OQ0(OC0O0Q0OQ0:Word):Word;
var
O0OO0Q0OQ0:Word;
OOOO0Q0OQ0:Integer;
begin
OOOO0Q0OQ0:=sizeof(OOC00Q0OQ0)div sizeof(Word);
for O0OO0Q0OQ0:=0 to OOOO0Q0OQ0 div 2-1 do
if OC0O0Q0OQ0=OOC00Q0OQ0[O0OO0Q0OQ0*2]then
begin
Result:=OOC00Q0OQ0[O0OO0Q0OQ0*2+1];
exit;
end;
Result:=63;
end;
constructor OOCC0C0OQ0.Create;
begin
inherited Create;
OQCC0C0OQ0:=O0O00C0OQ0;
OCCC0C0OQ0:=OQC00C0OQ0;
O0000C0OQ0:=OCCC0C0OQ0;
if OQCC0C0OQ0<>'' then
O0000C0OQ0:=OQCC0C0OQ0+'\'+OCCC0C0OQ0;
OO000C0OQ0:=OO0O0C0OQ0;
OC000C0OQ0:=O0OO0C0OQ0;
{$IFDEF MSWINDOWS}
OQ000C0OQ0:=IntToStr(GetCurrentProcessID)+':'+IntToStr(GetCurrentThreadID);
{$ELSE}
OQ000C0OQ0:='';
{$ENDIF}
OC000C0OQ0:=StringReplace(OC000C0OQ0,'(','?',[rfReplaceAll]);
OC000C0OQ0:=StringReplace(OC000C0OQ0,')','?',[rfReplaceAll]);
end;
function OOCC0C0OQ0.O0O00C0OQ0:string;
{$IFDEF MSWINDOWS}
type
OOO00C0OQ0=function(OQO00C0OQ0:PAChar;OCO00C0OQ0:DWORD;var O0Q00C0OQ0:Pointer):DWORD;stdcall;
OOQ00C0OQ0=function(OQQ00C0OQ0:Pointer):DWORD;stdcall;
var
OCQ00C0OQ0:OOO00C0OQ0;
O0C00C0OQ0:OOQ00C0OQ0;
OOC00C0OQ0:IntPtr;
{$ENDIF}
begin
Result:='';
{$IFDEF MSWINDOWS}
if OCQ00Q0OQ0=0 then
OCQ00Q0OQ0:=LoadLibraryEx('Netapi32.dll',0,LOAD_WITH_ALTERED_SEARCH_PATH);
if OCQ00Q0OQ0<>0 then begin
OCQ00C0OQ0:=GetProcAddress(OCQ00Q0OQ0,'NetWkstaGetInfo');
O0C00C0OQ0:=GetProcAddress(OCQ00Q0OQ0,'NetApiBufferFree');
if(@OCQ00C0OQ0<>nil)and(@O0C00C0OQ0<>nil)then begin
OOC00C0OQ0:=nil;
if OCQ00C0OQ0(nil,100,OOC00C0OQ0)=0 then begin
Result:=string(WideCharToString(PWideChar(PtrOffset(OOC00C0OQ0,8)^)));
if OOC00C0OQ0<>nil then
O0C00C0OQ0(OOC00C0OQ0);
end;
end;
end;
{$ENDIF}
end;
function OOCC0C0OQ0.OQC00C0OQ0:string;
{$IFDEF MSWINDOWS}
var
OCC00C0OQ0:DWORD;
O00O0C0OQ0:array[0..255]of Char;
{$ENDIF}
begin
{$IFDEF MSWINDOWS}
OCC00C0OQ0:=sizeof(O00O0C0OQ0);
if GetComputerName(O00O0C0OQ0,OCC00C0OQ0)then
Result:=string(O00O0C0OQ0)
else
Result:='UNKNOWN';
{$ELSE}
Result:='UNKNOWN';
{$ENDIF}
end;
function OOCC0C0OQ0.OO0O0C0OQ0:string;
{$IFDEF MSWINDOWS}
var
OQ0O0C0OQ0:DWORD;
OC0O0C0OQ0:array[0..255]of Char;
{$ENDIF}
begin
{$IFDEF MSWINDOWS}
OQ0O0C0OQ0:=sizeof(OC0O0C0OQ0);
if GetUserName(OC0O0C0OQ0,OQ0O0C0OQ0)then
Result:=string(OC0O0C0OQ0)
else
Result:='Unknown';
{$ELSE}
Result:='Unknown';
{$ENDIF}
end;
function OOCC0C0OQ0.O0OO0C0OQ0:string;
{$IFDEF MSWINDOWS}
var
OOOO0C0OQ0:array[0..255]of Char;
{$ENDIF}
begin
{$IFDEF MSWINDOWS}
GetModuleFileName(0,OOOO0C0OQ0,sizeof(OOOO0C0OQ0));
Result:=ExtractFileName(OOOO0C0OQ0);
{$ELSE}
Result:='ODAC Direct';
{$ENDIF}
end;
constructor O0CO0C0OQ0.Create(OC0CCC0OQ0:OOO0CQQOQ0);
begin
inherited Create;
O0OCCC0OQ0;
OOCO0C0OQ0:=OC0CCC0OQ0;
OQCO0C0OQ0:=OOCO0C0OQ0.O0COQOQOQ0;
end;
function O0CO0C0OQ0.OQCQCC0OQ0(OCCQCC0OQ0:pOCIError):sword;
begin
Result:=OOCO0C0OQ0.OCO0COQOQ0(OCCQCC0OQ0,nil);
end;
function O0CO0C0OQ0.O00CCC0OQ0(OO0CCC0OQ0:pOCIError):sword;
begin
Result:=OOCO0C0OQ0.OQCOCOQOQ0(OO0CCC0OQ0,nil);
end;
procedure O0CO0C0OQ0.O0OCCC0OQ0;
begin
SetLength(OCCO0C0OQ0,0);
end;
function O000CC0OQ0.O00QCC0OQ0(const OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;O0OQCC0OQ0:boolean):TBytes;
begin
Result:=OOOOQC0OQ0.OQCOQC0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,'',OCCO0C0OQ0,O0OQCC0OQ0);
end;
procedure O000CC0OQ0.OOOQCC0OQ0(OQOQCC0OQ0:Byte;OCOQCC0OQ0,O0QQCC0OQ0,OOQQCC0OQ0:string;OQQQCC0OQ0:Cardinal);
var
OO00CC0OQ0:OOCC0C0OQ0;
OQ00CC0OQ0:TBytes;
OC00CC0OQ0:Integer;
O0O0CC0OQ0:boolean;
OOO0CC0OQ0:TBytes;
begin
OO00CC0OQ0:=OOCC0C0OQ0(OQCO0C0OQ0.OOCQ0OCOQ0);
O0O0CC0OQ0:=O0OQCQOOQ0(OOCO0C0OQ0.OOQQO0QOQ0);
OCOQCC0OQ0:=Trim(OCOQCC0OQ0);
O0QQCC0OQ0:=Trim(O0QQCC0OQ0);
OOQQCC0OQ0:=Trim(OOQQCC0OQ0);
SetLength(OQ00CC0OQ0,0);
if OQOQCC0OQ0=OC0O0OCOQ0 then
OQ00CC0OQ0:=O00QCC0OQ0(OCOQCC0OQ0,O0QQCC0OQ0,'',O0O0CC0OQ0);
if O0O0CC0OQ0 then
OOO0CC0OQ0:=Encoding.UTF8.GetBytes(OCOQCC0OQ0)
else
OOO0CC0OQ0:=Encoding.Default.GetBytes(OCOQCC0OQ0);
OQCO0C0OQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQCO0C0OQ0.OOCOCQCOQ0(OQOQCC0OQ0);
OQCO0C0OQ0.OOCOCQCOQ0(0);
if Length(OOO0CC0OQ0)=0 then
OQCO0C0OQ0.OQO0QQCOQ0
else
OQCO0C0OQ0.OOO0QQCOQ0;
OQCO0C0OQ0.OC0QQQCOQ0(Length(OOO0CC0OQ0));
if Length(OQ00CC0OQ0)=0 then
OQCO0C0OQ0.OQO0QQCOQ0
else
OQCO0C0OQ0.OOO0QQCOQ0;
OQCO0C0OQ0.OC0QQQCOQ0(Length(OQ00CC0OQ0));
OQCO0C0OQ0.OC0QQQCOQ0(0);
case OQQQCC0OQ0 of
OCI_SYSDBA:
OC00CC0OQ0:=8;
OCI_SYSOPER:
OC00CC0OQ0:=16;
else
OC00CC0OQ0:=0;
end;
OQCO0C0OQ0.OOOQQQCOQ0(OC00CC0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
OQCO0C0OQ0.O0QQQQCOQ0(False);
if Length(OO00CC0OQ0.OCOO0C0OQ0)=0 then
OQCO0C0OQ0.OQO0QQCOQ0
else
OQCO0C0OQ0.OOO0QQCOQ0;
OQCO0C0OQ0.OC0QQQCOQ0(Length(OO00CC0OQ0.OCOO0C0OQ0));
if Length(OO00CC0OQ0.O0QO0C0OQ0)=0 then
OQCO0C0OQ0.OQO0QQCOQ0
else
OQCO0C0OQ0.OOO0QQCOQ0;
OQCO0C0OQ0.OC0QQQCOQ0(Length(OO00CC0OQ0.O0QO0C0OQ0));
if Length(OO00CC0OQ0.OOQO0C0OQ0)=0 then
OQCO0C0OQ0.OQO0QQCOQ0
else
OQCO0C0OQ0.OOO0QQCOQ0;
OQCO0C0OQ0.OC0QQQCOQ0(Length(OO00CC0OQ0.OOQO0C0OQ0));
OQCO0C0OQ0.OC0QQQCOQ0(4096);
if Length(OO00CC0OQ0.OQQO0C0OQ0)=0 then
OQCO0C0OQ0.OQO0QQCOQ0
else
OQCO0C0OQ0.OOO0QQCOQ0;
OQCO0C0OQ0.OC0QQQCOQ0(Length(OO00CC0OQ0.OQQO0C0OQ0));
if Length(OO00CC0OQ0.OCQO0C0OQ0)=0 then
OQCO0C0OQ0.OQO0QQCOQ0
else
OQCO0C0OQ0.OOO0QQCOQ0;
OQCO0C0OQ0.OC0QQQCOQ0(Length(OO00CC0OQ0.OCQO0C0OQ0));
OQCO0C0OQ0.OCCOCQCOQ0(0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
OQCO0C0OQ0.O0QQQQCOQ0(False);
OQCO0C0OQ0.OC0QQQCOQ0(0);
OQCO0C0OQ0.O0QQQQCOQ0(OQOQCC0OQ0=O0OO0OCOQ0);
OQCO0C0OQ0.OC0QQQCOQ0(16);
OQCO0C0OQ0.O0QQQQCOQ0(OQOQCC0OQ0=O0OO0OCOQ0);
OQCO0C0OQ0.OQQQQQCOQ0(OOO0CC0OQ0);
OQCO0C0OQ0.OQQQQQCOQ0(OQ00CC0OQ0);
OQCO0C0OQ0.OOCQQQCOQ0(OO00CC0OQ0.OCOO0C0OQ0);
OQCO0C0OQ0.OOCQQQCOQ0(OO00CC0OQ0.O0QO0C0OQ0);
OQCO0C0OQ0.OOCQQQCOQ0(OO00CC0OQ0.OOQO0C0OQ0);
OQCO0C0OQ0.OOCQQQCOQ0(OO00CC0OQ0.OQQO0C0OQ0);
OQCO0C0OQ0.OOCQQQCOQ0(OO00CC0OQ0.OCQO0C0OQ0);
end;
function O000CC0OQ0.OCQQCC0OQ0(O0CQCC0OQ0:Byte;OOCQCC0OQ0:pOCIError):Integer;
var
OQO0CC0OQ0:byte;
OCO0CC0OQ0:integer;
begin
OCO0CC0OQ0:=1;
while True do begin
OQO0CC0OQ0:=OQCO0C0OQ0.OOC0QQCOQ0;
case OQO0CC0OQ0 of
OOOC0OCOQ0:begin
if O0CQCC0OQ0=O0OO0OCOQ0 then begin
if OCO0CC0OQ0=0 then
OQ0QCQOOQ0(1);
OCCO0C0OQ0:=OQCO0C0OQ0.O0CQOOCOQ0;
if Length(OCCO0C0OQ0)=0 then
OQ0QCQOOQ0(210);
Dec(OCO0CC0OQ0);
end
else
OQ0QCQOOQ0(1);
end;
OQ0C0OCOQ0:begin
Result:=OQCQCC0OQ0(OOCQCC0OQ0);
Exit;
end;
OCQC0OCOQ0:begin
Result:=O00CCC0OQ0(OOCQCC0OQ0);
Exit;
end;
else
OQ0QCQOOQ0(1);
end;
end;
end;
procedure O000CC0OQ0.OOOCCC0OQ0(const OQOCCC0OQ0:string;OCOCCC0OQ0:Integer);
begin
OOOQCC0OQ0(O0OO0OCOQ0,OQOCCC0OQ0,'','',OCOCCC0OQ0);
end;
function O000CC0OQ0.O0QCCC0OQ0(OOQCCC0OQ0:pOCIError):Integer;
begin
Result:=OCQQCC0OQ0(O0OO0OCOQ0,OOQCCC0OQ0);
end;
procedure O000CC0OQ0.OQQCCC0OQ0(const OCQCCC0OQ0,O0CCCC0OQ0:string;OOCCCC0OQ0:Integer);
begin
OOOQCC0OQ0(OC0O0OCOQ0,OCQCCC0OQ0,O0CCCC0OQ0,'',OOCCCC0OQ0);
end;
function O000CC0OQ0.OQCCCC0OQ0(OCCCCC0OQ0:pOCIError):Integer;
begin
Result:=OCQQCC0OQ0(OC0O0OCOQ0,OCCCCC0OQ0);
end;
function O0Q0CC0OQ0.O00QCC0OQ0(const OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;O0OQCC0OQ0:boolean):TBytes;
begin
if Length(OCCO0C0OQ0)>32 then
Result:=O0Q0OQ0OQ0.OCQC0Q0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0,OOCO0C0OQ0.OCOQO0QOQ0[4],OQC0CC0OQ0,OCCO0C0OQ0,OOC0CC0OQ0,OCC0CC0OQ0,O00OCC0OQ0,OO0OCC0OQ0,
OOQ0CC0OQ0,OQQ0CC0OQ0,OCQ0CC0OQ0,O0C0CC0OQ0,OQ0OCC0OQ0,O0OQCC0OQ0)
else if Length(OCCO0C0OQ0)>16 then
Result:=OQOQOQ0OQ0.OC00OQ0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0,OCCO0C0OQ0,O0OQCC0OQ0)
else
Result:=OOOOQC0OQ0.OQCOQC0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0,OCCO0C0OQ0,O0OQCC0OQ0);
end;
procedure O0Q0CC0OQ0.OOOQCC0OQ0(OQOQCC0OQ0:Byte;OCOQCC0OQ0,O0QQCC0OQ0,OOQQCC0OQ0:string;OQQQCC0OQ0:Cardinal);
var
OO00CC0OQ0:OOCC0C0OQ0;
OQ00CC0OQ0:TBytes;
O0OOCC0OQ0:TBytes;
OC00CC0OQ0:Integer;
OOOOCC0OQ0:Cardinal;
O0O0CC0OQ0:boolean;
OOO0CC0OQ0:TBytes;
begin
OO00CC0OQ0:=OOCC0C0OQ0(OQCO0C0OQ0.OOCQ0OCOQ0);
O0O0CC0OQ0:=O0OQCQOOQ0(OOCO0C0OQ0.OOQQO0QOQ0);
OCOQCC0OQ0:=Trim(OCOQCC0OQ0);
O0QQCC0OQ0:=Trim(O0QQCC0OQ0);
OOQQCC0OQ0:=Trim(OOQQCC0OQ0);
SetLength(OQ00CC0OQ0,0);
SetLength(O0OOCC0OQ0,0);
if(OQOQCC0OQ0=OOCO0OCOQ0)and(OCOQCC0OQ0<>'')then begin
OQ00CC0OQ0:=O00QCC0OQ0(OCOQCC0OQ0,O0QQCC0OQ0,'',O0O0CC0OQ0);
if OOQQCC0OQ0<>'' then
O0OOCC0OQ0:=O00QCC0OQ0(OCOQCC0OQ0,O0QQCC0OQ0,OOQQCC0OQ0,O0O0CC0OQ0);
end;
if O0O0CC0OQ0 then
OOO0CC0OQ0:=Encoding.UTF8.GetBytes(OCOQCC0OQ0)
else
OOO0CC0OQ0:=Encoding.Default.GetBytes(OCOQCC0OQ0);
OQCO0C0OQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQCO0C0OQ0.OOCOCQCOQ0(OQOQCC0OQ0);
OQCO0C0OQ0.OOCOCQCOQ0(0);
if Length(OOO0CC0OQ0)=0 then
OQCO0C0OQ0.OQO0QQCOQ0
else
OQCO0C0OQ0.OOO0QQCOQ0;
OQCO0C0OQ0.OC0QQQCOQ0(Length(OOO0CC0OQ0));
case OQQQCC0OQ0 of
OCI_SYSDBA:
OC00CC0OQ0:=$20;
OCI_SYSOPER:
OC00CC0OQ0:=$40;
OCI_SYSASM:
OC00CC0OQ0:=$400000;
OCI_SYSBKP:
OC00CC0OQ0:=$1000000;
OCI_SYSDGD:
OC00CC0OQ0:=$2000000;
OCI_SYSKMT:
OC00CC0OQ0:=$4000000;
else
OC00CC0OQ0:=0;
end;
if(OQOQCC0OQ0=OQCO0OCOQ0)or(Length(OOO0CC0OQ0)=0)then
OC00CC0OQ0:=OC00CC0OQ0 or$01
else if OQOQCC0OQ0=OOCO0OCOQ0 then
if Length(O0OOCC0OQ0)=0 then
OC00CC0OQ0:=OC00CC0OQ0 or$101
else
OC00CC0OQ0:=OC00CC0OQ0 or$102;
OQCO0C0OQ0.OOOQQQCOQ0(OC00CC0OQ0);
OQCO0C0OQ0.O0QQQQCOQ0(True);
OOOOCC0OQ0:=0;
if OO00CC0OQ0.OCOO0C0OQ0<>'' then
Inc(OOOOCC0OQ0);
if OO00CC0OQ0.OCQO0C0OQ0<>'' then
Inc(OOOOCC0OQ0);
if OO00CC0OQ0.O0QO0C0OQ0<>'' then
Inc(OOOOCC0OQ0);
if OO00CC0OQ0.OOQO0C0OQ0<>'' then
Inc(OOOOCC0OQ0);
if OO00CC0OQ0.OQQO0C0OQ0<>''then
Inc(OOOOCC0OQ0);
if Length(OQ00CC0OQ0)<>0 then
Inc(OOOOCC0OQ0);
if Length(O0OOCC0OQ0)<>0 then
Inc(OOOOCC0OQ0);
if Length(OQQ0CC0OQ0)>0 then
Inc(OOOOCC0OQ0);
if Length(OCCO0C0OQ0)>16 then
Inc(OOOOCC0OQ0);
if Length(OQ0OCC0OQ0)>0 then
Inc(OOOOCC0OQ0);
OQCO0C0OQ0.OOOQQQCOQ0(OOOOCC0OQ0);
OQCO0C0OQ0.O0QQQQCOQ0(True);
OQCO0C0OQ0.O0QQQQCOQ0(True);
OQCO0C0OQ0.OQQQQQCOQ0(OOO0CC0OQ0);
if OQOQCC0OQ0=OOCO0OCOQ0 then begin
if Length(OQ00CC0OQ0)<>0 then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_PASSWORD');
OQCO0C0OQ0.OCCQQQCOQ0(OQ00CC0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
end;
if Length(O0OOCC0OQ0)<>0 then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_NEWPASSWORD');
OQCO0C0OQ0.OCCQQQCOQ0(O0OOCC0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
end;
if Length(OQQ0CC0OQ0)>0 then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_SESSKEY');
OQCO0C0OQ0.OCCQQQCOQ0(OQQ0CC0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(1);
end;
if Length(OQ0OCC0OQ0)>0 then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_PBKDF2_SPEEDY_KEY');
OQCO0C0OQ0.OCCQQQCOQ0(OQ0OCC0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(1);
end;
if Length(OCCO0C0OQ0)>16 then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_ACL');
OQCO0C0OQ0.OQ0CQQCOQ0('4400');
OQCO0C0OQ0.OC0QQQCOQ0(1);
end;
end;
if OO00CC0OQ0.OCOO0C0OQ0<>'' then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_TERMINAL');
OQCO0C0OQ0.OQ0CQQCOQ0(OO00CC0OQ0.OCOO0C0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
end;
if OO00CC0OQ0.OCQO0C0OQ0<>'' then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_PROGRAM_NM');
OQCO0C0OQ0.OQ0CQQCOQ0(OO00CC0OQ0.OCQO0C0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
end;
if OO00CC0OQ0.O0QO0C0OQ0<>'' then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_MACHINE');
OQCO0C0OQ0.OQ0CQQCOQ0(OO00CC0OQ0.O0QO0C0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
end;
if OO00CC0OQ0.OQQO0C0OQ0<>'' then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_PID');
OQCO0C0OQ0.OQ0CQQCOQ0(OO00CC0OQ0.OQQO0C0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
end;
if OO00CC0OQ0.OOQO0C0OQ0<>'' then begin
OQCO0C0OQ0.OQ0CQQCOQ0('AUTH_SID');
OQCO0C0OQ0.OQ0CQQCOQ0(OO00CC0OQ0.OOQO0C0OQ0);
OQCO0C0OQ0.OC0QQQCOQ0(0);
end;
end;
function O0Q0CC0OQ0.OCQQCC0OQ0(O0CQCC0OQ0:Byte;OOCQCC0OQ0:pOCIError):Integer;
var
OQO0CC0OQ0:byte;
OCO0CC0OQ0:integer;
OQOOCC0OQ0:string;
OCOOCC0OQ0:TBytes;
O0QOCC0OQ0:Cardinal;
begin
while True do begin
OQO0CC0OQ0:=OQCO0C0OQ0.OOC0QQCOQ0;
case OQO0CC0OQ0 of
OOOC0OCOQ0:begin
SetLength(OQOOCC0OQ0,0);
SetLength(OCOOCC0OQ0,0);
OCO0CC0OQ0:=OQCO0C0OQ0.OO0OQQCOQ0;
while OCO0CC0OQ0<>0 do begin
OQOOCC0OQ0:=OQCO0C0OQ0.O00QOOCOQ0(Encoding.Default);
OCOOCC0OQ0:=OQCO0C0OQ0.O0CQOOCOQ0;
O0QOCC0OQ0:=OQCO0C0OQ0.OC0OQQCOQ0;
if OQOOCC0OQ0='AUTH_SESSKEY' then
OCCO0C0OQ0:=OCOOCC0OQ0
else if OQOOCC0OQ0='AUTH_VFR_DATA' then begin
OOC0CC0OQ0:=OCOOCC0OQ0;
OQC0CC0OQ0:=O0QOCC0OQ0;
end
else if OQOOCC0OQ0='AUTH_PBKDF2_CSK_SALT' then
OCC0CC0OQ0:=OCOOCC0OQ0
else if OQOOCC0OQ0='AUTH_PBKDF2_VGEN_COUNT' then begin
if not TryStrToInt(Encoding.Default.GetString(OCOOCC0OQ0),O00OCC0OQ0)then
O00OCC0OQ0:=4096
else if(O00OCC0OQ0<4096)or(O00OCC0OQ0>100000000)then
O00OCC0OQ0:=4096;
end
else if OQOOCC0OQ0='AUTH_PBKDF2_SDER_COUNT' then begin
if not TryStrToInt(Encoding.Default.GetString(OCOOCC0OQ0),OO0OCC0OQ0)then
OO0OCC0OQ0:=3
else if(O00OCC0OQ0<3)or(O00OCC0OQ0>100000000)then
OO0OCC0OQ0:=3;
end;
Dec(OCO0CC0OQ0);
end;
if not OC0OCC0OQ0 and(Length(OCCO0C0OQ0)=0)then
OQ0QCQOOQ0(210);
end;
OQ0C0OCOQ0:begin
Result:=OQCQCC0OQ0(OOCQCC0OQ0);
Exit;
end;
OCQC0OCOQ0:begin
Result:=O00CCC0OQ0(OOCQCC0OQ0);
Exit;
end;
else
OQ0QCQOOQ0(1);
end;
end;
end;
procedure O0Q0CC0OQ0.O0OCCC0OQ0;
begin
SetLength(OOQ0CC0OQ0,0);
SetLength(OQQ0CC0OQ0,0);
SetLength(OOC0CC0OQ0,0);
OQC0CC0OQ0:=0;
end;
procedure O0Q0CC0OQ0.OOOCCC0OQ0(const OQOCCC0OQ0:string;OCOCCC0OQ0:Integer);
begin
OOOQCC0OQ0(OQCO0OCOQ0,OQOCCC0OQ0,'','',OCOCCC0OQ0);
end;
function O0Q0CC0OQ0.O0QCCC0OQ0(OOQCCC0OQ0:pOCIError):Integer;
begin
Result:=OCQQCC0OQ0(OQCO0OCOQ0,OOQCCC0OQ0);
end;
procedure O0Q0CC0OQ0.OQQCCC0OQ0(const OCQCCC0OQ0,O0CCCC0OQ0:string;OOCCCC0OQ0:Integer);
begin
OOOQCC0OQ0(OOCO0OCOQ0,OCQCCC0OQ0,O0CCCC0OQ0,'',OOCCCC0OQ0);
end;
function O0Q0CC0OQ0.OQCCCC0OQ0(OCCCCC0OQ0:pOCIError):Integer;
begin
Result:=OCQQCC0OQ0(OOCO0OCOQ0,OCCCCC0OQ0);
end;
procedure O0Q0CC0OQ0.OOQOCC0OQ0(const OQQOCC0OQ0,OCQOCC0OQ0,O0COCC0OQ0:string;OOCOCC0OQ0:Integer);
begin
OOOQCC0OQ0(OOCO0OCOQ0,OQQOCC0OQ0,OCQOCC0OQ0,O0COCC0OQ0,OOCOCC0OQ0);
end;
function O0Q0CC0OQ0.OQCOCC0OQ0(OCCOCC0OQ0:pOCIError):Integer;
begin
Result:=OCQQCC0OQ0(OOCO0OCOQ0,OCCOCC0OQ0);
end;
procedure O0Q0CC0OQ0.O00QQC0OQ0;
begin
OC0OCC0OQ0:=true;
OOOQCC0OQ0(OOCO0OCOQ0,'','','',OCI_DEFAULT);
end;
function O0Q0CC0OQ0.OO0QQC0OQ0(OQ0QQC0OQ0:pOCIError):Integer;
begin
Result:=OCQQCC0OQ0(OOCO0OCOQ0,OQ0QQC0OQ0);
end;
class function OCOQQC0OQ0.O0QQQC0OQ0:TBytes;
const
OOQQQC0OQ0:array[0..7]of byte=(
1,35,69,103,137,171,205,239
);
begin
SetLength(Result,High(OOQQQC0OQ0)+1);
Move(OOQQQC0OQ0[0],Result[0],High(OOQQQC0OQ0)+1);
end;
class function OCOQQC0OQ0.OQQQQC0OQ0(const OCQQQC0OQ0:string):string;
var
O0CQQC0OQ0:integer;
begin
O0CQQC0OQ0:=Length(OCQQQC0OQ0);
if(O0CQQC0OQ0>=2)and(OCQQQC0OQ0[1]='"')and(OCQQQC0OQ0[O0CQQC0OQ0]='"')then
Result:=copy(OCQQQC0OQ0,2,O0CQQC0OQ0-2)
else
Result:=OCQQQC0OQ0;
end;
class function OCOQQC0OQ0.OOCQQC0OQ0(const OQCQQC0OQ0:string;const OCCQQC0OQ0:string;O00CQC0OQ0:boolean):TBytes;
var
OO0CQC0OQ0,OQ0CQC0OQ0,OC0CQC0OQ0:Integer;
O0OCQC0OQ0:Integer;
OOOCQC0OQ0,OQOCQC0OQ0:WideString;
begin
{$IFDEF IS_UNICODE}
OOOCQC0OQ0:=OQCQQC0OQ0;
OQOCQC0OQ0:=OCCQQC0OQ0;
{$ELSE}
OOOCQC0OQ0:=UTF8Decode(OQCQQC0OQ0);
OQOCQC0OQ0:=UTF8Decode(OCCQQC0OQ0);
{$ENDIF}
OO0CQC0OQ0:=Length(OOOCQC0OQ0);
OQ0CQC0OQ0:=Length(OQOCQC0OQ0);
OC0CQC0OQ0:=(OO0CQC0OQ0+OQ0CQC0OQ0)*2;
if OC0CQC0OQ0 mod 8<=0 then
SetLength(Result,(OC0CQC0OQ0 div 8)*8)
else
SetLength(Result,(OC0CQC0OQ0 div 8+1)*8);
O0OCQC0OQ0:=OOCCQC0OQ0(OOOCQC0OQ0,Result,0,O00CQC0OQ0);
OOCCQC0OQ0(OQOCQC0OQ0,Result,O0OCQC0OQ0,O00CQC0OQ0);
end;
class function OCOQQC0OQ0.OCOCQC0OQ0(const O0QCQC0OQ0:TBytes):TBytes;
var
OOQCQC0OQ0:OOCC0CCOQ0;
begin
SetLength(Result,8);
OOQCQC0OQ0:=OOCC0CCOQ0.Create(8);
try
OOQCQC0OQ0.Key:=O0QQQC0OQ0;
Result:=OOQCQC0OQ0.O0Q00CCOQ0(@O0QCQC0OQ0[0],Length(O0QCQC0OQ0));
OOQCQC0OQ0.Key:=Result;
Result:=OOQCQC0OQ0.O0Q00CCOQ0(@O0QCQC0OQ0[0],Length(O0QCQC0OQ0));
finally
OOQCQC0OQ0.Free;
end;
end;
class function OCOQQC0OQ0.OOO0QC0OQ0(OQO0QC0OQ0:Byte):Byte;
begin
if(OQO0QC0OQ0>=97)and(OQO0QC0OQ0<=102)then
Result:=(OQO0QC0OQ0-97)+10
else
if(OQO0QC0OQ0>=65)and(OQO0QC0OQ0<=70)then
Result:=(OQO0QC0OQ0-65)+10
else
if(OQO0QC0OQ0>=48)and(OQO0QC0OQ0<=57)then
Result:=OQO0QC0OQ0-48
else
Result:=OQO0QC0OQ0;
end;
class function OCOQQC0OQ0.OCO0QC0OQ0(O0Q0QC0OQ0:Byte):Byte;
begin
O0Q0QC0OQ0:=O0Q0QC0OQ0 and$f;
if O0Q0QC0OQ0>=10 then
Result:=O0Q0QC0OQ0-10+65
else
Result:=O0Q0QC0OQ0+48;
end;
class function OCOQQC0OQ0.OOQ0QC0OQ0(const OQQ0QC0OQ0:TBytes):TBytes;
var
OCQ0QC0OQ0:integer;
O0C0QC0OQ0:byte;
begin
SetLength(Result,Length(OQQ0QC0OQ0)*2);
for OCQ0QC0OQ0:=0 to Length(OQQ0QC0OQ0)-1 do begin
O0C0QC0OQ0:=(OQQ0QC0OQ0[OCQ0QC0OQ0]and$f0)shr 4;
O0C0QC0OQ0:=O0C0QC0OQ0 and$f;
if O0C0QC0OQ0>=10 then
Result[OCQ0QC0OQ0*2]:=(O0C0QC0OQ0-10)+65
else
Result[OCQ0QC0OQ0*2]:=O0C0QC0OQ0+48;
O0C0QC0OQ0:=OQQ0QC0OQ0[OCQ0QC0OQ0]and$f;
O0C0QC0OQ0:=O0C0QC0OQ0 and$f;
if O0C0QC0OQ0>=10 then
Result[OCQ0QC0OQ0*2+1]:=(O0C0QC0OQ0-10)+65
else
Result[OCQ0QC0OQ0*2+1]:=O0C0QC0OQ0+48;
end;
end;
class function OCOQQC0OQ0.OOC0QC0OQ0(const OQC0QC0OQ0:TBytes):TBytes;
var
OCC0QC0OQ0:integer;
begin
SetLength(Result,Length(OQC0QC0OQ0)div 2);
for OCC0QC0OQ0:=0 to Length(Result)-1 do begin
Result[OCC0QC0OQ0]:=OOO0QC0OQ0(OQC0QC0OQ0[OCC0QC0OQ0*2])shl 4;
Result[OCC0QC0OQ0]:=Result[OCC0QC0OQ0]or OOO0QC0OQ0(OQC0QC0OQ0[OCC0QC0OQ0*2+1]);
end;
end;
class function OCOQQC0OQ0.OQQCQC0OQ0(const OCQCQC0OQ0:WideString;O0CCQC0OQ0:boolean):TBytes;
begin
SetLength(Result,Length(OCQCQC0OQ0)*2);
OOCCQC0OQ0(OCQCQC0OQ0,Result,0,O0CCQC0OQ0);
end;
class function OCOQQC0OQ0.OOCCQC0OQ0(const OQCCQC0OQ0:WideString;var OCCCQC0OQ0:TBytes;O000QC0OQ0:integer;OO00QC0OQ0:boolean):Integer;
var
OQ00QC0OQ0:integer;
OC00QC0OQ0:WideChar;
O0O0QC0OQ0:Word;
begin
for OQ00QC0OQ0:=1 to Length(OQCCQC0OQ0)do begin
OC00QC0OQ0:=OQCCQC0OQ0[OQ00QC0OQ0];
if OO00QC0OQ0 and(Word(OC00QC0OQ0)<200)then
OC00QC0OQ0:=WideUpperCase(OC00QC0OQ0)[1]
else if OO00QC0OQ0 then begin
O0O0QC0OQ0:=OQC00Q0OQ0(Word(OC00QC0OQ0));
OC00QC0OQ0:=WideUpperCase(WideChar(O0O0QC0OQ0))[1];
end
else if Word(OC00QC0OQ0)<2000 then
{$IFDEF MSWINDOWS}
if Win32Platform<>VER_PLATFORM_WIN32_NT then
OC00QC0OQ0:=WideString(AnsiUpperCase(string(OC00QC0OQ0)))[1]
else
{$ENDIF}
OC00QC0OQ0:=WideUpperCase(OC00QC0OQ0)[1]
else
OC00QC0OQ0:='?';
O0O0QC0OQ0:=Word(OC00QC0OQ0);
if O0O0QC0OQ0>=128 then
O0O0QC0OQ0:=OQ0O0Q0OQ0(O0O0QC0OQ0);
OCCCQC0OQ0[O000QC0OQ0+(OQ00QC0OQ0-1)*2]:=Byte(O0O0QC0OQ0 shr 8);
OCCCQC0OQ0[O000QC0OQ0+(OQ00QC0OQ0-1)*2+1]:=Byte(O0O0QC0OQ0);
end;
Result:=O000QC0OQ0+Length(OQCCQC0OQ0)*2;
end;
class function OCOQQC0OQ0.O00OQC0OQ0(const OO0OQC0OQ0:string;const OQ0OQC0OQ0:string;OC0OQC0OQ0:boolean):TBytes;
var
O0OOQC0OQ0:TBytes;
begin
O0OOQC0OQ0:=OOCQQC0OQ0(OO0OQC0OQ0,OQ0OQC0OQ0,OC0OQC0OQ0);
Result:=OCOCQC0OQ0(O0OOQC0OQ0);
end;
class function OOOOQC0OQ0.OQOOQC0OQ0(const OCOOQC0OQ0:TBytes;const O0QOQC0OQ0:TBytes):TBytes;
var
OOQOQC0OQ0:OOCC0CCOQ0;
begin
SetLength(Result,Length(O0QOQC0OQ0));
OOQOQC0OQ0:=OOCC0CCOQ0.Create(8);
try
OOQOQC0OQ0.Key:=OCOOQC0OQ0;
OOQOQC0OQ0.EncodeBuffer(@O0QOQC0OQ0[0],@Result[0],Length(O0QOQC0OQ0));
finally
OOQOQC0OQ0.Free;
end;
end;
class function OOOOQC0OQ0.OQQOQC0OQ0(const OCQOQC0OQ0:TBytes;const O0COQC0OQ0:TBytes):TBytes;
var
OOCOQC0OQ0:OOCC0CCOQ0;
begin
SetLength(Result,Length(O0COQC0OQ0));
OOCOQC0OQ0:=OOCC0CCOQ0.Create(8);
try
OOCOQC0OQ0.Key:=OCQOQC0OQ0;
OOCOQC0OQ0.DecodeBuffer(@O0COQC0OQ0[0],@Result[0],Length(O0COQC0OQ0));
finally
OOCOQC0OQ0.Free;
end;
end;
class function OOOOQC0OQ0.OQCOQC0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;const OCCOQC0OQ0:TBytes;O0OQCC0OQ0:boolean):TBytes;
var
O00QOQ0OQ0:TBytes;
OO0QOQ0OQ0:TBytes;
OQ0QOQ0OQ0:TBytes;
OC0QOQ0OQ0:TBytes;
O0OQOQ0OQ0:TBytes;
OOOQOQ0OQ0:byte;
begin
if Length(OCCOQC0OQ0)<>16 then
O00QCQOOQ0(106);
if OC0QCC0OQ0='' then
OC0QCC0OQ0:=OQ0QCC0OQ0;
OO0QCC0OQ0:=OQQQQC0OQ0(OO0QCC0OQ0);
OQ0QCC0OQ0:=OQQQQC0OQ0(OQ0QCC0OQ0);
OC0QCC0OQ0:=OQQQQC0OQ0(OC0QCC0OQ0);
O00QOQ0OQ0:=O00OQC0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,False);
OO0QOQ0OQ0:=OQQOQC0OQ0(O00QOQ0OQ0,OOC0QC0OQ0(OCCOQC0OQ0));
if O0OQCC0OQ0 then
OQ0QOQ0OQ0:=Encoding.UTF8.GetBytes(OC0QCC0OQ0)
else
OQ0QOQ0OQ0:=Encoding.Default.GetBytes(OC0QCC0OQ0);
OOOQOQ0OQ0:=Length(OQ0QOQ0OQ0);
if OOOQOQ0OQ0 mod 8>0 then
OOOQOQ0OQ0:=OOOQOQ0OQ0+(8-OOOQOQ0OQ0 mod 8);
OOOQOQ0OQ0:=OOOQOQ0OQ0-Length(OQ0QOQ0OQ0);
SetLength(OC0QOQ0OQ0,Length(OQ0QOQ0OQ0)+OOOQOQ0OQ0);
FillChar(OC0QOQ0OQ0,Length(OC0QOQ0OQ0),0);
Buffer.BlockCopy(OQ0QOQ0OQ0,0,OC0QOQ0OQ0,0,Length(OQ0QOQ0OQ0));
O0OQOQ0OQ0:=OQOOQC0OQ0(OO0QOQ0OQ0,OC0QOQ0OQ0);
Result:=OOQ0QC0OQ0(O0OQOQ0OQ0);
SetLength(Result,Length(Result)+1);
Result[Length(Result)-1]:=OCO0QC0OQ0(OOOQOQ0OQ0);
end;
class function OQOQOQ0OQ0.OCOQOQ0OQ0:TBytes;
const
O0QQOQ0OQ0:array[0..7]of byte=(
$80,$20,$40,$04,$08,$02,$10,$01
);
begin
SetLength(Result,High(O0QQOQ0OQ0)+1);
Move(O0QQOQ0OQ0[0],Result[0],High(O0QQOQ0OQ0)+1);
end;
class function OQOQOQ0OQ0.OOQQOQ0OQ0(const OQQQOQ0OQ0:TBytes;const OCQQOQ0OQ0:TBytes;O0CQOQ0OQ0:Integer):TBytes;
var
OOCQOQ0OQ0:integer;
OQCQOQ0OQ0:TBytes;
OCCQOQ0OQ0:THash_SHA1;
begin
OCCQOQ0OQ0:=THash_SHA1.Create;
try
SetLength(Result,O0CQOQ0OQ0);
SetLength(OQCQOQ0OQ0,20);
OOCQOQ0OQ0:=0;
while OOCQOQ0OQ0<O0CQOQ0OQ0 do begin
OCCQOQ0OQ0.Initialize;
OCCQOQ0OQ0.TransformBlock(OQQQOQ0OQ0,0,Length(OQQQOQ0OQ0));
if OOCQOQ0OQ0<>0 then begin
OQCQOQ0OQ0[0]:=2;
OCCQOQ0OQ0.TransformBlock(OQCQOQ0OQ0,0,Length(OQCQOQ0OQ0));
end;
OCCQOQ0OQ0.TransformFinalBlock(OCQQOQ0OQ0,0,Length(OCQQOQ0OQ0));
OQCQOQ0OQ0:=OCCQOQ0OQ0.Hash;
if O0CQOQ0OQ0-OOCQOQ0OQ0>20 then
Buffer.BlockCopy(OQCQOQ0OQ0,0,Result,OOCQOQ0OQ0,20)
else
Buffer.BlockCopy(OQCQOQ0OQ0,0,Result,OOCQOQ0OQ0,O0CQOQ0OQ0-OOCQOQ0OQ0);
OOCQOQ0OQ0:=OOCQOQ0OQ0+20;
end;
finally
OCCQOQ0OQ0.Free;
end;
end;
class function OQOQOQ0OQ0.O00COQ0OQ0(const OO0COQ0OQ0:TBytes;const OQ0COQ0OQ0:TBytes;OC0COQ0OQ0:Integer):TBytes;
const
O0OCOQ0OQ0:array[0..63]of byte=(
0,0,0,0,
1,0,0,0,
1,0,0,0,
0,0,0,0,
1,0,0,0,
0,0,0,0,
0,0,0,0,
1,0,0,0,
1,0,0,0,
0,0,0,0,
0,0,0,0,
1,0,0,0,
0,0,0,0,
1,0,0,0,
1,0,0,0,
0,0,0,0
);
var
OOOCOQ0OQ0:integer;
OQOCOQ0OQ0:Integer;
OCOCOQ0OQ0:byte;
O0QCOQ0OQ0:byte;
OOQCOQ0OQ0:byte;
OQQCOQ0OQ0:byte;
begin
OQOCOQ0OQ0:=Length(OQ0COQ0OQ0);
Assert(OQOCOQ0OQ0<OC0COQ0OQ0);
SetLength(Result,OC0COQ0OQ0);
FillChar(Result,OC0COQ0OQ0,0);
Buffer.BlockCopy(OQ0COQ0OQ0,0,Result,0,OQOCOQ0OQ0);
for OOOCOQ0OQ0:=OC0COQ0OQ0-1 downto OQOCOQ0OQ0 do begin
if OOOCOQ0OQ0=OQOCOQ0OQ0 then
OCOCOQ0OQ0:=1
else
OCOCOQ0OQ0:=0;
O0QCOQ0OQ0:=OQOCQCCOQ0;
OOQCOQ0OQ0:=O0QCOQ0OQ0 xor OO0COQ0OQ0[24+OC0COQ0OQ0-1-OOOCOQ0OQ0];
if O0OCOQ0OQ0[OOQCOQ0OQ0 and$0F*4]xor O0OCOQ0OQ0[OOQCOQ0OQ0 shr 4*4]<>OCOCOQ0OQ0 then
O0QCOQ0OQ0:=O0QCOQ0OQ0 xor 1;
Result[OOOCOQ0OQ0]:=O0QCOQ0OQ0;
end;
OQQCOQ0OQ0:=Result[0];
Result[0]:=Result[OC0COQ0OQ0-4];
Result[OC0COQ0OQ0-4]:=OQQCOQ0OQ0;
OQQCOQ0OQ0:=Result[1];
Result[1]:=Result[OC0COQ0OQ0-3];
Result[OC0COQ0OQ0-3]:=OQQCOQ0OQ0;
OQQCOQ0OQ0:=Result[2];
Result[2]:=Result[OC0COQ0OQ0-2];
Result[OC0COQ0OQ0-2]:=OQQCOQ0OQ0;
OQQCOQ0OQ0:=Result[3];
Result[3]:=Result[OC0COQ0OQ0-1];
Result[OC0COQ0OQ0-1]:=OQQCOQ0OQ0;
end;
class function OQOQOQ0OQ0.OCQCOQ0OQ0(const O0CCOQ0OQ0:TBytes;const OOCCOQ0OQ0:TBytes):TBytes;
var
OQCCOQ0OQ0:O0C00CCOQ0;
begin
SetLength(Result,Length(OOCCOQ0OQ0));
OQCCOQ0OQ0:=O0C00CCOQ0.Create(24);
try
OQCCOQ0OQ0.Key:=O0CCOQ0OQ0;
OQCCOQ0OQ0.IV:=OCOQOQ0OQ0;
OQCCOQ0OQ0.EncodeBuffer(@OOCCOQ0OQ0[0],@Result[0],Length(OOCCOQ0OQ0));
finally
OQCCOQ0OQ0.Free;
end;
end;
class function OQOQOQ0OQ0.OCCCOQ0OQ0(const O000OQ0OQ0:TBytes;const OO00OQ0OQ0:TBytes):TBytes;
var
OQ00OQ0OQ0:O0C00CCOQ0;
begin
SetLength(Result,Length(OO00OQ0OQ0));
OQ00OQ0OQ0:=O0C00CCOQ0.Create(24);
try
OQ00OQ0OQ0.Key:=O000OQ0OQ0;
OQ00OQ0OQ0.IV:=OCOQOQ0OQ0;
OQ00OQ0OQ0.DecodeBuffer(@OO00OQ0OQ0[0],@Result[0],Length(OO00OQ0OQ0));
finally
OQ00OQ0OQ0.Free;
end;
end;
class function OQOQOQ0OQ0.OC00OQ0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;const OCCOQC0OQ0:TBytes;O0OQCC0OQ0:boolean):TBytes;
const
O0O0OQ0OQ0:array[0..22]of byte=($F2,$FF,$97,$87,$15,$37,$07,$76,$07,$27,$E2,$7F,$A3,$B1,$D6,$73,$3F,$2F,$D1,$52,$AB,$AC,$C0);
OOO0OQ0OQ0:array[0..30]of byte=($A2,$FB,$E6,$AD,$4C,$7D,$1E,$3D,$6E,$B0,$B7,$6C,$97,$EF,$FF,$84,$44,$71,$02,$84,$AC,$F1,$3B,$29,$5C,$0F,$0C,$B1,$87,$75,$EF);
var
O00QOQ0OQ0:TBytes;
OO0QOQ0OQ0:TBytes;
OQ0QOQ0OQ0:TBytes;
OC0QOQ0OQ0:TBytes;
O0OQOQ0OQ0:TBytes;
OOOQOQ0OQ0:byte;
OQO0OQ0OQ0:TBytes;
OCO0OQ0OQ0:TBytes;
begin
if Length(OCCOQC0OQ0)<>32 then
O00QCQOOQ0(106);
if OC0QCC0OQ0='' then
OC0QCC0OQ0:=OQ0QCC0OQ0;
OO0QCC0OQ0:=OQQQQC0OQ0(OO0QCC0OQ0);
OQ0QCC0OQ0:=OQQQQC0OQ0(OQ0QCC0OQ0);
OC0QCC0OQ0:=OQQQQC0OQ0(OC0QCC0OQ0);
O00QOQ0OQ0:=O00OQC0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,False);
OQO0OQ0OQ0:=OOQQOQ0OQ0(O00QOQ0OQ0,DynArrayCreate(OOO0OQ0OQ0),24);
OO0QOQ0OQ0:=OCCCOQ0OQ0(OQO0OQ0OQ0,OOC0QC0OQ0(OCCOQC0OQ0));
OCO0OQ0OQ0:=OOQQOQ0OQ0(OO0QOQ0OQ0,DynArrayCreate(O0O0OQ0OQ0),40);
if O0OQCC0OQ0 then
OQ0QOQ0OQ0:=Encoding.UTF8.GetBytes(OC0QCC0OQ0)
else
OQ0QOQ0OQ0:=Encoding.Default.GetBytes(OC0QCC0OQ0);
OOOQOQ0OQ0:=Length(OQ0QOQ0OQ0)+5;
if OOOQOQ0OQ0 mod 8>0 then
OOOQOQ0OQ0:=OOOQOQ0OQ0+(8-OOOQOQ0OQ0 mod 8);
if OOOQOQ0OQ0<16 then
OOOQOQ0OQ0:=16;
OC0QOQ0OQ0:=O00COQ0OQ0(OCO0OQ0OQ0,OQ0QOQ0OQ0,OOOQOQ0OQ0);
O0OQOQ0OQ0:=OCQCOQ0OQ0(OCO0OQ0OQ0,OC0QOQ0OQ0);
Result:=OOQ0QC0OQ0(O0OQOQ0OQ0);
end;
class function O0Q0OQ0OQ0.OOQ0OQ0OQ0(OQQ0OQ0OQ0:OQOQQC0OQ0;const OCQ0OQ0OQ0:TBytes;const O0C0OQ0OQ0:TBytes):TBytes;
var
OOC0OQ0OQ0:OOQCCCCOQ0;
begin
Result:=nil;
if OCQ0OQ0OQ0=nil then
exit;
OOC0OQ0OQ0:=OOQCCCCOQ0.Create(-1,nil,False);
try
OOC0OQ0OQ0.Key:=OCQ0OQ0OQ0;
if OQQ0OQ0OQ0=OOOQQC0OQ0 then
Result:=OOC0OQ0OQ0.O00OCCCOQ0(@O0C0OQ0OQ0[0],Length(O0C0OQ0OQ0))
else begin
SetLength(Result,Length(O0C0OQ0OQ0));
OOC0OQ0OQ0.EncodeBuffer(@O0C0OQ0OQ0[0],@Result[0],Length(Result));
end;
finally
OOC0OQ0OQ0.Free;
end;
end;
class function O0Q0OQ0OQ0.OQC0OQ0OQ0(OCC0OQ0OQ0:OQOQQC0OQ0;const O00OOQ0OQ0:TBytes;const OO0OOQ0OQ0:TBytes):TBytes;
var
OQ0OOQ0OQ0:OOQCCCCOQ0;
OC0OOQ0OQ0:TBytes;
begin
Result:=nil;
if O00OOQ0OQ0=nil then
exit;
SetLength(OC0OOQ0OQ0,0);
OQ0OOQ0OQ0:=OOQCCCCOQ0.Create(-1,nil,False);
try
OQ0OOQ0OQ0.Key:=O00OOQ0OQ0;
OC0OOQ0OQ0:=OOC0QC0OQ0(OO0OOQ0OQ0);
if OCC0OQ0OQ0=OOOQQC0OQ0 then
Result:=OQ0OOQ0OQ0.O0C0CCCOQ0(@OC0OOQ0OQ0[0],Length(OC0OOQ0OQ0))
else begin
SetLength(Result,Length(OC0OOQ0OQ0));
OQ0OOQ0OQ0.DecodeBuffer(@OC0OOQ0OQ0[0],@Result[0],Length(OC0OOQ0OQ0));
end;
finally
OQ0OOQ0OQ0.Free;
end;
end;
class function O0Q0OQ0OQ0.O0OOOQ0OQ0(OOOOOQ0OQ0:integer;const OQOOOQ0OQ0:TBytes;const OCOOOQ0OQ0:TBytes;const O0QOOQ0OQ0:TBytes;OOQOOQ0OQ0:Integer):TBytes;
var
OQQOOQ0OQ0:integer;
OCQOOQ0OQ0:TBytes;
O0COOQ0OQ0:TBytes;
OOCOOQ0OQ0:THash_MD5;
OQCOOQ0OQ0:O0QOCCCOQ0;
begin
if OOOOOQ0OQ0=2361 then begin
SetLength(OCQOOQ0OQ0,16);
if Length(O0QOOQ0OQ0)>=16 then begin
SetLength(OCQOOQ0OQ0,32);
Move(OCOOOQ0OQ0[0],OCQOOQ0OQ0[0],16);
Move(OQOOOQ0OQ0[0],OCQOOQ0OQ0[16],16);
OCQOOQ0OQ0:=OOQ0QC0OQ0(OCQOOQ0OQ0);
OQCOOQ0OQ0:=O0QOCCCOQ0.Create(OCQOOQ0OQ0,O0QOOQ0OQ0,OOQOOQ0OQ0);
try
Result:=OQCOOQ0OQ0.OOCQQCCOQ0(16);
finally
OQCOOQ0OQ0.Free;
end;
end
else begin
for OQQOOQ0OQ0:=0 to 15 do
OCQOOQ0OQ0[OQQOOQ0OQ0]:=OQOOOQ0OQ0[OQQOOQ0OQ0+16]xor OCOOOQ0OQ0[OQQOOQ0OQ0+16];
OOCOOQ0OQ0:=THash_MD5.Create;
try
Result:=OOCOOQ0OQ0.ComputeHash(OCQOOQ0OQ0);
finally
OOCOOQ0OQ0.Free;
end;
end;
end
else if OOOOOQ0OQ0=6949 then begin
if Length(O0QOOQ0OQ0)>=16 then begin
SetLength(OCQOOQ0OQ0,48);
Move(OCOOOQ0OQ0[0],OCQOOQ0OQ0[0],24);
Move(OQOOOQ0OQ0[0],OCQOOQ0OQ0[24],24);
OCQOOQ0OQ0:=OOQ0QC0OQ0(OCQOOQ0OQ0);
OQCOOQ0OQ0:=O0QOCCCOQ0.Create(OCQOOQ0OQ0,O0QOOQ0OQ0,OOQOOQ0OQ0);
try
Result:=OQCOOQ0OQ0.OOCQQCCOQ0(24);
finally
OQCOOQ0OQ0.Free;
end;
end
else begin
SetLength(Result,24);
SetLength(OCQOOQ0OQ0,24);
SetLength(O0COOQ0OQ0,0);
for OQQOOQ0OQ0:=0 to 23 do
OCQOOQ0OQ0[OQQOOQ0OQ0]:=OQOOOQ0OQ0[OQQOOQ0OQ0+16]xor OCOOOQ0OQ0[OQQOOQ0OQ0+16];
OOCOOQ0OQ0:=THash_MD5.Create;
try
O0COOQ0OQ0:=OOCOOQ0OQ0.ComputeHash(@OCQOOQ0OQ0[0],0,16);
Move(O0COOQ0OQ0[0],Result[0],16);
O0COOQ0OQ0:=OOCOOQ0OQ0.ComputeHash(@OCQOOQ0OQ0[0],16,8);
Move(O0COOQ0OQ0[0],Result[16],8);
finally
OOCOOQ0OQ0.Free;
end;
end;
end
else if OOOOOQ0OQ0=18453 then begin
SetLength(OCQOOQ0OQ0,Length(OQOOOQ0OQ0)+Length(OCOOOQ0OQ0));
Move(OCOOOQ0OQ0[0],OCQOOQ0OQ0[0],Length(OCOOOQ0OQ0));
Move(OQOOOQ0OQ0[0],OCQOOQ0OQ0[Length(OCOOOQ0OQ0)],Length(OQOOOQ0OQ0));
OCQOOQ0OQ0:=OOQ0QC0OQ0(OCQOOQ0OQ0);
OQCOOQ0OQ0:=O0QOCCCOQ0.Create(OCQOOQ0OQ0,O0QOOQ0OQ0,OOQOOQ0OQ0);
try
Result:=OQCOOQ0OQ0.OOCQQCCOQ0(32);
finally
OQCOOQ0OQ0.Free;
end;
end
else
Result:=nil;
end;
class procedure O0Q0OQ0OQ0.OCCOOQ0OQ0(const O00Q0Q0OQ0,OO0Q0Q0OQ0:string;OQ0Q0Q0OQ0:byte;OC0Q0Q0OQ0:integer;const O0OQ0Q0OQ0,OOOQ0Q0OQ0,OQOQ0Q0OQ0:TBytes;OCOQ0Q0OQ0,O0QQ0Q0OQ0:Integer;
out OOQQ0Q0OQ0:TBytes;out OQQQ0Q0OQ0:TBytes;out OCQQ0Q0OQ0:TBytes;out O0CQ0Q0OQ0:TBytes);
const
OOCQ0Q0OQ0:array[0..21]of byte=(65,85,84,72,95,80,66,75,68,70,50,95,83,80,69,69,68,89,95,75,69,89);
var
OQCQ0Q0OQ0:integer;
OCCQ0Q0OQ0:integer;
O00C0Q0OQ0:OQOQQC0OQ0;
OO0C0Q0OQ0:TBytes;
OQ0C0Q0OQ0:TBytes;
OC0C0Q0OQ0:TBytes;
O0OC0Q0OQ0:TBytes;
OOOC0Q0OQ0:TBytes;
OQOC0Q0OQ0:TBytes;
OCOC0Q0OQ0:TBytes;
O0QC0Q0OQ0:THash_SHA1;
OOQC0Q0OQ0:THash_SHA2_512;
OQQC0Q0OQ0:O0QOCCCOQ0;
begin
SetLength(OO0C0Q0OQ0,0);
SetLength(O0CQ0Q0OQ0,0);
if OC0Q0Q0OQ0=2361 then begin
OQCQ0Q0OQ0:=16;
OCCQ0Q0OQ0:=32;
O00C0Q0OQ0:=O0OQQC0OQ0;
OC0C0Q0OQ0:=O00OQC0OQ0(O00Q0Q0OQ0,OO0Q0Q0OQ0,False);
SetLength(O0OC0Q0OQ0,16);
FillChar(O0OC0Q0OQ0,16,0);
Buffer.BlockCopy(OC0C0Q0OQ0,0,O0OC0Q0OQ0,0,Length(OC0C0Q0OQ0));
end
else if OC0Q0Q0OQ0=6949 then begin
OQCQ0Q0OQ0:=24;
if OQ0Q0Q0OQ0 and 2<>0 then begin
O00C0Q0OQ0:=O0OQQC0OQ0;
OCCQ0Q0OQ0:=48;
end
else begin
O00C0Q0OQ0:=OOOQQC0OQ0;
OCCQ0Q0OQ0:=40;
end;
OO0C0Q0OQ0:=Encoding.UTF8.GetBytes(OO0Q0Q0OQ0);
if Length(OOOQ0Q0OQ0)>0 then
OCOC0Q0OQ0:=OOC0QC0OQ0(OOOQ0Q0OQ0)
else
SetLength(OCOC0Q0OQ0,10);
O0QC0Q0OQ0:=THash_SHA1.Create;
try
O0QC0Q0OQ0.TransformBlock(OO0C0Q0OQ0,0,Length(OO0C0Q0OQ0));
O0QC0Q0OQ0.TransformFinalBlock(OCOC0Q0OQ0,0,Length(OCOC0Q0OQ0));
OC0C0Q0OQ0:=O0QC0Q0OQ0.Hash;
SetLength(O0OC0Q0OQ0,24);
FillChar(O0OC0Q0OQ0,24,0);
Move(OC0C0Q0OQ0[0],O0OC0Q0OQ0[0],Length(OC0C0Q0OQ0));
finally
O0QC0Q0OQ0.Free;
end;
end
else if OC0Q0Q0OQ0=18453 then begin
OQCQ0Q0OQ0:=32;
OCCQ0Q0OQ0:=32;
O00C0Q0OQ0:=O0OQQC0OQ0;
OO0C0Q0OQ0:=Encoding.UTF8.GetBytes(OO0Q0Q0OQ0);
if Length(OOOQ0Q0OQ0)>0 then
OCOC0Q0OQ0:=OOC0QC0OQ0(OOOQ0Q0OQ0)
else
SetLength(OCOC0Q0OQ0,16);
SetLength(OQ0C0Q0OQ0,Length(OCOC0Q0OQ0)+Length(OOCQ0Q0OQ0));
Move(OCOC0Q0OQ0[0],OQ0C0Q0OQ0[0],Length(OCOC0Q0OQ0));
Move(OOCQ0Q0OQ0[0],OQ0C0Q0OQ0[Length(OCOC0Q0OQ0)],Length(OOCQ0Q0OQ0));
OQQC0Q0OQ0:=O0QOCCCOQ0.Create(OO0C0Q0OQ0,OQ0C0Q0OQ0,OCOQ0Q0OQ0);
try
O0CQ0Q0OQ0:=OQQC0Q0OQ0.OOCQQCCOQ0(64);
finally
OQQC0Q0OQ0.Free;
end;
OOQC0Q0OQ0:=THash_SHA2_512.Create;
try
OOQC0Q0OQ0.TransformBlock(O0CQ0Q0OQ0,0,Length(O0CQ0Q0OQ0));
OOQC0Q0OQ0.TransformFinalBlock(OCOC0Q0OQ0,0,Length(OCOC0Q0OQ0));
OC0C0Q0OQ0:=OOQC0Q0OQ0.Hash;
SetLength(O0OC0Q0OQ0,32);
Move(OC0C0Q0OQ0[0],O0OC0Q0OQ0[0],Length(O0OC0Q0OQ0));
finally
OOQC0Q0OQ0.Free;
end;
end
else
raise Exception.Create('Invalid VerifierType');
OOOC0Q0OQ0:=OQC0OQ0OQ0(O00C0Q0OQ0,O0OC0Q0OQ0,O0OQ0Q0OQ0);
if Length(OOOC0Q0OQ0)=0 then
SetLength(OOOC0Q0OQ0,OCCQ0Q0OQ0);
OOQQ0Q0OQ0:=O0OCQCCOQ0(Length(OOOC0Q0OQ0));
OQOC0Q0OQ0:=OOQ0OQ0OQ0(O00C0Q0OQ0,O0OC0Q0OQ0,OOQQ0Q0OQ0);
OQQQ0Q0OQ0:=OOQ0QC0OQ0(OQOC0Q0OQ0);
if Length(OQOQ0Q0OQ0)>0 then
OCOC0Q0OQ0:=OOC0QC0OQ0(OQOQ0Q0OQ0);
OCQQ0Q0OQ0:=O0OOOQ0OQ0(OC0Q0Q0OQ0,OOOC0Q0OQ0,OOQQ0Q0OQ0,OCOC0Q0OQ0,O0QQ0Q0OQ0);
if Length(OCQQ0Q0OQ0)<>OQCQ0Q0OQ0 then
raise Exception.Create('Invalid concat length');
end;
class function O0Q0OQ0OQ0.OCQC0Q0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,OC0QCC0OQ0:string;O0CC0Q0OQ0:byte;OOCC0Q0OQ0:integer;const OQCC0Q0OQ0,OCCC0Q0OQ0,O0000Q0OQ0:TBytes;OO000Q0OQ0,OQ000Q0OQ0:Integer;
var OC000Q0OQ0:TBytes;var O0O00Q0OQ0:TBytes;var OOO00Q0OQ0:TBytes;var OQO00Q0OQ0:TBytes;out OCO00Q0OQ0:TBytes;O0OQCC0OQ0:boolean):TBytes;
var
OQ0QOQ0OQ0:TBytes;
O0Q00Q0OQ0:TBytes;
OOQ00Q0OQ0:TBytes;
OQQ00Q0OQ0:TBytes;
begin
if OC0QCC0OQ0='' then
OC0QCC0OQ0:=OQ0QCC0OQ0;
OO0QCC0OQ0:=OQQQQC0OQ0(OO0QCC0OQ0);
OQ0QCC0OQ0:=OQQQQC0OQ0(OQ0QCC0OQ0);
OC0QCC0OQ0:=OQQQQC0OQ0(OC0QCC0OQ0);
if Length(OC000Q0OQ0)=0 then
OCCOOQ0OQ0(OO0QCC0OQ0,OQ0QCC0OQ0,O0CC0Q0OQ0,OOCC0Q0OQ0,OQCC0Q0OQ0,OCCC0Q0OQ0,O0000Q0OQ0,OO000Q0OQ0,OQ000Q0OQ0,
OC000Q0OQ0,O0O00Q0OQ0,OOO00Q0OQ0,OQO00Q0OQ0);
if O0OQCC0OQ0 then
OQ0QOQ0OQ0:=Encoding.UTF8.GetBytes(OC0QCC0OQ0)
else
OQ0QOQ0OQ0:=Encoding.Default.GetBytes(OC0QCC0OQ0);
OOQ00Q0OQ0:=O0OCQCCOQ0(16);
SetLength(OQQ00Q0OQ0,Length(OQ0QOQ0OQ0)+16);
Buffer.BlockCopy(OOQ00Q0OQ0,0,OQQ00Q0OQ0,0,16);
Buffer.BlockCopy(OQ0QOQ0OQ0,0,OQQ00Q0OQ0,16,Length(OQ0QOQ0OQ0));
O0Q00Q0OQ0:=OOQ0OQ0OQ0(OOOQQC0OQ0,OOO00Q0OQ0,OQQ00Q0OQ0);
Result:=OOQ0QC0OQ0(O0Q00Q0OQ0);
if OOCC0Q0OQ0=18453 then begin
SetLength(OQQ00Q0OQ0,Length(OOQ00Q0OQ0)+Length(OQO00Q0OQ0));
Move(OOQ00Q0OQ0[0],OQQ00Q0OQ0[0],16);
Move(OQO00Q0OQ0[0],OQQ00Q0OQ0[16],Length(OQO00Q0OQ0));
O0Q00Q0OQ0:=OOQ0OQ0OQ0(O0OQQC0OQ0,OOO00Q0OQ0,OQQ00Q0OQ0);
OCO00Q0OQ0:=OOQ0QC0OQ0(O0Q00Q0OQ0);
end
else
OCO00Q0OQ0:=nil;
end;
initialization
{$IFDEF MSWINDOWS}
OCQ00Q0OQ0:=0;
{$ENDIF}
finalization
{$IFDEF MSWINDOWS}
if OCQ00Q0OQ0<>0 then begin
FreeLibrary(OCQ00Q0OQ0);
OCQ00Q0OQ0:=0;
end;
{$ENDIF}
end.
