//////////////////////////////////////////////////
//  Oracle Data Access Components Net
//  Copyright (c) 1998-2019 Devart. All right reserved.
//  OraNet (OCI Lite)
//////////////////////////////////////////////////
{$I Odac.inc}
unit OraNetClassesUni;
interface
{$IFDEF ODAC}
{$A+,C-,D-,G+,J-,L-,M-,O+,Y-,Z1}
{$ENDIF}
{$Q-,R-,W+}
uses
{$IFDEF UNIX}
cwstring,
{$ENDIF}
Classes,Types,SysUtils,StrUtils,DateUtils,
{$IFDEF MSWINDOWS}
Windows,WinSock,RTLConsts,
{$IFNDEF FPC}ScktComp,{$ELSE}Messages,SyncObjs,{$ENDIF}
{$ENDIF}
CRTypes,CRFunctions,CLRClasses,CRParser,MemUtils,
CRVio,CRVioSocket,CRVioTcp,
{$IFNDEF UNIDACPRO}
OraCall,OraError,OraParser,
OraNumber,OraDateTime,OraTimeZone,OraInterval,
OraNetSocket,OraNetCrypt;
{$ELSE}
OraCallUni,OraErrorUni,OraParserUni,
OraNumberUni,OraDateTimeUni,OraTimeZoneUni,OraIntervalUni,
OraNetSocketUni,OraNetCryptUni;
{$ENDIF}
type
OQQCQCCOQ0=array of Cardinal;
OCQCQCCOQ0=array of array of Cardinal;
OracleIntArrayEncoding=class(Encoding)
private
private O0CCQCCOQ0:boolean;
protected
function OOCCQCCOQ0(OQCCQCCOQ0:PWideChar;OCCCQCCOQ0,O000QCCOQ0:Integer;var OO00QCCOQ0:TBytes;OQ00QCCOQ0,OC00QCCOQ0:Integer):Integer;
function OOQ0QCCOQ0(const OQQ0QCCOQ0:TBytes;OCQ0QCCOQ0,O0C0QCCOQ0:Integer;OOC0QCCOQ0:PWideChar;OQC0QCCOQ0,OCC0QCCOQ0:Integer):Integer;
{$IFDEF NEXTGEN}
strict protected
function GetByteCount(OOOOQCCOQ0:PChar;O0O0CQC0Q0:Integer):Integer;overload;override;
function GetBytes(O00QOQCOQ0:PChar;OQ0QOQCOQ0:Integer;OC0QOQCOQ0:PByte;OQO0CQC0Q0:Integer):Integer;overload;override;
function GetCharCount(OCQOQCCOQ0:PByte;O0Q0CQC0Q0:Integer):Integer;overload;override;
function GetChars(OQQ0CQC0Q0:PByte;OCQ0CQC0Q0:Integer;O0C0CQC0Q0:PChar;OOC0CQC0Q0:Integer):Integer;overload;override;
{$ENDIF}
public
constructor Create;
function GetMaxByteCount(OC0OQCCOQ0:Integer):Integer;override;
function GetMaxCharCount(O0OOQCCOQ0:Integer):Integer;override;
{$IFNDEF NEXTGEN}
function GetByteCount(const OOOOQCCOQ0:array of char;OQOOQCCOQ0:Integer;OCOOQCCOQ0:Integer):Integer;
function GetCharCount(const OCQOQCCOQ0:TBytes;O0COQCCOQ0:Integer;OOCOQCCOQ0:Integer):Integer;
{$ELSE}
function GetPreamble:TBytes;override;
{$ENDIF}
{$IFNDEF NEXTGEN}
function GetBytes(const O00QOQCOQ0:AnsiString):TBytes;overload;override;
function GetBytes(const O00QOQCOQ0:AnsiString;OO0QOQCOQ0,OQ0QOQCOQ0:Integer;var OC0QOQCOQ0:TBytes;O0OQOQCOQ0:Integer):Integer;overload;override;
function GetBytes(const O00QOQCOQ0:WideString):TBytes;overload;override;
function GetBytes(const O00QOQCOQ0:WideString;OO0QOQCOQ0,OQ0QOQCOQ0:Integer;var OC0QOQCOQ0:TBytes;O0OQOQCOQ0:Integer):Integer;overload;override;
function GetAnsiString(const OQOQOQCOQ0:TBytes):AnsiString;overload;override;
function GetAnsiString(const OQOQOQCOQ0:TBytes;OCOQOQCOQ0:Integer;O0QQOQCOQ0:Integer):AnsiString;overload;override;
function GetWideString(const OOQQOQCOQ0:TBytes):WideString;overload;override;
function GetWideString(const OOQQOQCOQ0:TBytes;OQQQOQCOQ0:integer;OCQQOQCOQ0:integer):WideString;overload;override;
{$ENDIF}
class function GetInstance:OracleIntArrayEncoding;
end;
const
OOCQOQCOQ0=1;
OQCQOQCOQ0=2;
OCCQOQCOQ0=3;
O00COQCOQ0=4;
OO0COQCOQ0=5;
OQ0COQCOQ0=6;
OC0COQCOQ0=7;
O0OCOQCOQ0=9;
OOOCOQCOQ0=11;
OQOCOQCOQ0=12;
OCOCOQCOQ0=13;
O0QCOQCOQ0=14;
OOQCOQCOQ0=19;
{$IFNDEF MSWINDOWS}
WSABASEERR=10000;
WSAEADDRNOTAVAIL=10049;
WSAECONNRESET=10054;
WSAETIMEDOUT=10060;
WSAECONNREFUSED=111;
{$ENDIF}
type
OQQCOQCOQ0=^OCQCOQCOQ0;
OCQCOQCOQ0=array[0..16383]of SmallInt;
O0CCOQCOQ0=class(Exception)
end;
ENetError=class(Exception)
private
OOCCOQCOQ0:integer;
public
constructor Create(OQCCOQCOQ0:integer;OCCCOQCOQ0:string);
property Code:integer read OOCCOQCOQ0 write OOCCOQCOQ0;
end;
EDBError=class(Exception)
private
O000OQCOQ0:integer;
public
constructor Create(OQCCOQCOQ0:integer;OCCCOQCOQ0:string);
property Code:integer read O000OQCOQ0 write O000OQCOQ0;
end;
OO00OQCOQ0=class
private
OQ00OQCOQ0:O00QOCCOQ0;
OC00OQCOQ0:TObject;
O0O0OQCOQ0:TObject;
OOO0OQCOQ0:TIPVersion;
{$IFNDEF LITE}
OQO0OQCOQ0:TCRIOHandler;
OCO0OQCOQ0:TSSLOptions;
O0Q0OQCOQ0:TSSHOptions;
OOQ0OQCOQ0:THttpOptions;
OQQ0OQCOQ0:TProxyOptions;
{$ENDIF}
OCQ0OQCOQ0:Integer;
O0C0OQCOQ0:string;
OOC0OQCOQ0:string;
OQC0OQCOQ0:string;
OCC0OQCOQ0:integer;
O00OOQCOQ0:string;
OO0OOQCOQ0:string;
OQ0OOQCOQ0:integer;
OC0OOQCOQ0:integer;
O0OOOQCOQ0:integer;
OOOOOQCOQ0:integer;
OQOOOQCOQ0:TBytes;
OCOOOQCOQ0:TBytes;
O0QOOQCOQ0:TBytes;
OOQOOQCOQ0:TBytes;
OQQOOQCOQ0:integer;
OCQOOQCOQ0:integer;
O0COOQCOQ0:integer;
OOCOOQCOQ0:array[0..3]of byte;
OQCOOQCOQ0:byte;
OCCOOQCOQ0:boolean;
O00Q0QCOQ0:boolean;
protected
procedure OO0Q0QCOQ0;
procedure OQ0Q0QCOQ0(OC0Q0QCOQ0:string;out O0OQ0QCOQ0,OOOQ0QCOQ0:string;out OQOQ0QCOQ0:string;var OCOQ0QCOQ0,O0QQ0QCOQ0:string);
function OCQQ0QCOQ0(const O0CQ0QCOQ0,OOCQ0QCOQ0:string;const OQCQ0QCOQ0:Integer;const OCCQ0QCOQ0,O00C0QCOQ0,OO0C0QCOQ0,OQ0C0QCOQ0:string;OC0C0QCOQ0:TObject):string;
public
constructor Create;
destructor Destroy;override;
function OOQC0QCOQ0(const OQQC0QCOQ0:string):O00QOCCOQ0;
procedure O0CC0QCOQ0(OOCC0QCOQ0,OQCC0QCOQ0,OCCC0QCOQ0,O0000QCOQ0:string;OO000QCOQ0:integer;OQ000QCOQ0:boolean);
procedure OOC00QCOQ0(OQC00QCOQ0:TCRObjectList;OCC00QCOQ0:integer;O00O0QCOQ0:boolean);
procedure O0CO0QCOQ0;
function OOCO0QCOQ0:boolean;
procedure OQCO0QCOQ0(const OCCO0QCOQ0:TBytes;O00QCQCOQ0:integer);
procedure OO0QCQCOQ0(const OQ0QCQCOQ0:TBytes;OC0QCQCOQ0:integer);
function O0OQCQCOQ0(var OOOQCQCOQ0:TBytes;OQOQCQCOQ0,OCOQCQCOQ0:integer):integer;
procedure OQQQCQCOQ0(OCQQCQCOQ0,O0CQCQCOQ0,OOCQCQCOQ0:integer);
function OQCQCQCOQ0(out OCCQCQCOQ0,O00CCQCOQ0:integer):integer;
procedure OQ0CCQCOQ0(OC0CCQCOQ0:integer);
procedure O0OCCQCOQ0;
procedure OOQCCQCOQ0;
function OCCCCQCOQ0(O000CQCOQ0:Integer;out OO00CQCOQ0:string):string;
procedure OOO0CQCOQ0;
procedure OQO0CQCOQ0(OCO0CQCOQ0:Integer;O0Q0CQCOQ0:Boolean);
procedure OOQ0CQCOQ0(OQQ0CQCOQ0:IntPtr;OCQ0CQCOQ0:integer);
procedure OQC0CQCOQ0(OCC0CQCOQ0:Byte);
procedure O00OCQCOQ0(OO0OCQCOQ0:IntPtr;OQ0OCQCOQ0:integer);
procedure OOOOCQCOQ0(OQOOCQCOQ0:integer);
function OOQOCQCOQ0:Byte;
function OQQOCQCOQ0:Byte;
procedure OCQOCQCOQ0(O0COCQCOQ0:ShortInt);{$IFDEF USE_INLINE}inline;{$ENDIF}
procedure OOCOCQCOQ0(OQCOCQCOQ0:Byte);{$IFDEF USE_INLINE}inline;{$ENDIF}
procedure OCCOCQCOQ0(O00QQQCOQ0:SmallInt);{$IFDEF USE_INLINE}inline;{$ENDIF}
procedure OO0QQQCOQ0(OQ0QQQCOQ0:Word);
procedure OC0QQQCOQ0(O0OQQQCOQ0:Integer);{$IFDEF USE_INLINE}inline;{$ENDIF}
procedure OOOQQQCOQ0(OQOQQQCOQ0:Cardinal);
procedure O0QQQQCOQ0(OOQQQQCOQ0:Boolean);
procedure OQQQQQCOQ0(const OCQQQQCOQ0:TBytes);
procedure OOCQQQCOQ0(const OQCQQQCOQ0:string);
procedure OCCQQQCOQ0(const O00CQQCOQ0:TBytes);
procedure OQ0CQQCOQ0(const OC0CQQCOQ0:string);
procedure O0OCQQCOQ0(const OOOCQQCOQ0:TBytes);overload;
procedure O0OCQQCOQ0(OCOCQQCOQ0:IntPtr;OQOCQQCOQ0:Integer);overload;
procedure OOQCQQCOQ0(const OQQCQQCOQ0:OC0OOCCOQ0);
procedure O0CCQQCOQ0(const OOCCQQCOQ0:TBytes);
procedure OCCCQQCOQ0(const O000QQCOQ0:OQQCQCCOQ0);
procedure OQ00QQCOQ0(const OC00QQCOQ0:TBytes);
procedure OOO0QQCOQ0;{$IFDEF USE_INLINE}inline;{$ENDIF}
procedure OQO0QQCOQ0;{$IFDEF USE_INLINE}inline;{$ENDIF}
procedure OCO0QQCOQ0(const O0Q0QQCOQ0:integer);
procedure OQQ0QQCOQ0(OCQ0QQCOQ0:Byte;O0C0QQCOQ0:Integer);
function OOC0QQCOQ0:ShortInt;{$IFDEF USE_INLINE}inline;{$ENDIF}
function OQC0QQCOQ0:Byte;{$IFDEF USE_INLINE}inline;{$ENDIF}
function OCC0QQCOQ0:SmallInt;{$IFDEF USE_INLINE}inline;{$ENDIF}
function O00OQQCOQ0:Integer;
function OO0OQQCOQ0:Word;{$IFDEF USE_INLINE}inline;{$ENDIF}
function OQ0OQQCOQ0:Integer;{$IFDEF USE_INLINE}inline;{$ENDIF}
function OC0OQQCOQ0:Cardinal;{$IFDEF USE_INLINE}inline;{$ENDIF}
function O0OOQQCOQ0(OOOOQQCOQ0:integer):TBytes;
function OQOOQQCOQ0:TBytes;
function O0QOQQCOQ0(OOQOQQCOQ0:integer):TBytes;
function OCQOQQCOQ0(O0COQQCOQ0:integer):string;
function OQCOQQCOQ0(out OCCOQQCOQ0:Integer):TBytes;
function O00QOOCOQ0(OO0QOOCOQ0:Encoding):string;
function O0OQOOCOQ0:TBytes;overload;
function O0OQOOCOQ0(OOQQOOCOQ0:IntPtr;OQQQOOCOQ0:Integer):Integer;overload;
function O0CQOOCOQ0:TBytes;
function OQCQOOCOQ0(OCCQOOCOQ0:integer):TBytes;
function OQ0COOCOQ0(OC0COOCOQ0:integer):string;
procedure OOOCOOCOQ0(OQOCOOCOQ0:PRowId81);
procedure OCOCOOCOQ0(var O0QCOOCOQ0:TRowId81;out OOQCOOCOQ0:TBytes);
procedure O0CCOOCOQ0(OOCCOOCOQ0:integer);
procedure OQCCOOCOQ0(var OCCCOOCOQ0,O000OOCOQ0:string);
function OO00OOCOQ0(OQ00OOCOQ0:byte):Integer;
function OQO0OOCOQ0(OCO0OOCOQ0:integer;var O0Q0OOCOQ0:TBytes;OOQ0OOCOQ0:byte):byte;
procedure OOC0OOCOQ0(var OQC0OOCOQ0:TBytes;OCC0OOCOQ0:byte);
procedure OQ0OOOCOQ0;
procedure OC0OOOCOQ0(O0OOOOCOQ0:Boolean;const OOOOOOCOQ0:string);overload;
procedure OC0OOOCOQ0(O0OOOOCOQ0:Boolean;const OQQOOOCOQ0,OCQOOOCOQ0:string;const O0COOOCOQ0:Integer;const OOCOOOCOQ0,OQCOOOCOQ0,OCCOOOCOQ0,O00Q0OCOQ0:string);overload;
procedure OO0Q0OCOQ0;
procedure OQ0Q0OCOQ0;
procedure OOOQ0OCOQ0(OQOQ0OCOQ0:integer);
procedure O0CQ0OCOQ0;
property OOCQ0OCOQ0:TObject read OC00OQCOQ0;
property OQCQ0OCOQ0:boolean read O00Q0QCOQ0 write O00Q0QCOQ0;
end;
const
OCCQ0OCOQ0=1;
O00C0OCOQ0=2;
OO0C0OCOQ0=3;
OQ0C0OCOQ0=4;
OC0C0OCOQ0=6;
O0OC0OCOQ0=7;
OOOC0OCOQ0=8;
OQOC0OCOQ0=9;
OCOC0OCOQ0=11;
O0QC0OCOQ0=12;
OOQC0OCOQ0=13;
OQQC0OCOQ0=14;
OCQC0OCOQ0=15;
O0CC0OCOQ0=16;
OOCC0OCOQ0=17;
OQCC0OCOQ0=19;
OCCC0OCOQ0=21;
O0000OCOQ0=23;
OO000OCOQ0=27;
OQ000OCOQ0=2;
OC000OCOQ0=4;
O0O00OCOQ0=5;
OOO00OCOQ0=8;
OQO00OCOQ0=9;
OCO00OCOQ0=12;
O0Q00OCOQ0=13;
OOQ00OCOQ0=14;
OQQ00OCOQ0=15;
OCQ00OCOQ0=20;
O0C00OCOQ0=43;
OOC00OCOQ0=58;
OQC00OCOQ0=59;
OCC00OCOQ0=67;
O00O0OCOQ0=71;
OO0O0OCOQ0=74;
OQ0O0OCOQ0=78;
OC0O0OCOQ0=81;
O0OO0OCOQ0=82;
OOOO0OCOQ0=92;
OQOO0OCOQ0=94;
OCOO0OCOQ0=96;
O0QO0OCOQ0=98;
OOQO0OCOQ0=103;
OQQO0OCOQ0=104;
OCQO0OCOQ0=105;
O0CO0OCOQ0=107;
OOCO0OCOQ0=115;
OQCO0OCOQ0=118;
OCCO0OCOQ0=119;
O00QCOCOQ0=120;
OO0QCOCOQ0=125;
OQ0QCOCOQ0=135;
OC0QCOCOQ0=147;
O0OQCOCOQ0=$01;
OOOQCOCOQ0=$08;
OQOQCOCOQ0=$10;
OCOQCOCOQ0=$20;
O0QQCOCOQ0=$40;
OOQQCOCOQ0=$80;
OQQQCOCOQ0=$100;
OCQQCOCOQ0=$200;
O0CQCOCOQ0=$400;
OOCQCOCOQ0=$8000;
OQCQCOCOQ0=$80000;
OCCQCOCOQ0=1;
O00CCOCOQ0=31;
OO0CCOCOQ0=171;
OQ0CCOCOQ0=196;
OC0CCOCOQ0=870;
O0OCCOCOQ0=871;
OOOCCOCOQ0=872;
OQOCCOCOQ0=873;
OCOCCOCOQ0=1000;
O0QCCOCOQ0=2000;
OOQCCOCOQ0=4;
OQQCCOCOQ0=5;
OCQCCOCOQ0=6;
O0CCCOCOQ0=1;
OOCCCOCOQ0=2;
OQCCCOCOQ0=3;
OCCCCOCOQ0=4;
O000COCOQ0=5;
OO00COCOQ0=6;
OQ00COCOQ0=7;
OC00COCOQ0=8;
O0O0COCOQ0=9;
OOO0COCOQ0=10;
OQO0COCOQ0=11;
OCO0COCOQ0=12;
O0Q0COCOQ0=13;
OOQ0COCOQ0=14;
OQQ0COCOQ0=15;
OCQ0COCOQ0=OQQ0COCOQ0;
O0C0COCOQ0=OCQCCOCOQ0+O0CCCOCOQ0;
OOC0COCOQ0=OCQCCOCOQ0+OOCCCOCOQ0;
OQC0COCOQ0=OCQCCOCOQ0+OQCCCOCOQ0;
OCC0COCOQ0=OCQCCOCOQ0+OCCCCOCOQ0;
O00OCOCOQ0=OCQCCOCOQ0+O000COCOQ0;
OO0OCOCOQ0=OCQCCOCOQ0+OO00COCOQ0;
OQ0OCOCOQ0=OCQCCOCOQ0+OQ00COCOQ0;
OC0OCOCOQ0=OCQCCOCOQ0+OC00COCOQ0;
O0OOCOCOQ0=OCQCCOCOQ0+O0O0COCOQ0;
OOOOCOCOQ0=OCQCCOCOQ0+OOO0COCOQ0;
OQOOCOCOQ0=OCQCCOCOQ0+OQO0COCOQ0;
OCOOCOCOQ0=OCQCCOCOQ0+OCO0COCOQ0;
O0QOCOCOQ0=OCQCCOCOQ0+O0Q0COCOQ0;
OOQOCOCOQ0=OCQCCOCOQ0+OOQ0COCOQ0;
OQQOCOCOQ0=OCQCCOCOQ0+OQQ0COCOQ0;
OCQOCOCOQ0=7;
O0COCOCOQ0=1;
OOCOCOCOQ0=2;
OQCOCOCOQ0=250;
OCCOCOCOQ0=251;
O00QQOCOQ0=102;
OO0QQOCOQ0=58;
OQ0QQOCOQ0=0;
OC0QQOCOQ0=1;
O0OQQOCOQ0=8;
OOOQQOCOQ0=10;
OQOQQOCOQ0=6;
OCOQQOCOQ0=3;
O0QQQOCOQ0=2;
OOQQQOCOQ0=11;
OQQQQOCOQ0=12;
OCQQQOCOQ0=15;
O0CQQOCOQ0=16;
OOCQQOCOQ0=17;
OQCQQOCOQ0:array[0..9]of byte=(
OQ0QQOCOQ0,
OC0QQOCOQ0,
O0OQQOCOQ0,
OOOQQOCOQ0,
OQOQQOCOQ0,
OOQQQOCOQ0,
OQQQQOCOQ0,
OCQQQOCOQ0,
O0CQQOCOQ0,
OOCQQOCOQ0
);
OCCQQOCOQ0=0;
O00CQOCOQ0=1;
OO0CQOCOQ0=3;
OQ0CQOCOQ0=4;
OC0CQOCOQ0=5;
O0OCQOCOQ0=6;
OOOCQOCOQ0:array[0..5]of byte=(
OCCQQOCOQ0,
O00CQOCOQ0,
OO0CQOCOQ0,
OQ0CQOCOQ0,
OC0CQOCOQ0,
O0OCQOCOQ0
);
{$IFDEF MSWINDOWS}
OQOCQOCOQ0=0;
OCOCQOCOQ0=1;
O0QCQOCOQ0=1;
OOQCQOCOQ0=2;
OQQCQOCOQ0:array[0..3]of byte=(
OQOCQOCOQ0,
OCOCQOCOQ0,
O0QCQOCOQ0,
OOQCQOCOQ0
);
OCQCQOCOQ0:array[0..3]of string=(
'',
'NTS',
'KERBEROS5',
'tcps'
);
{$ENDIF}
type
O0CCQOCOQ0=class;
OOQ0O0QOQ0=class;
OO0OO0COQ0=class;
OCQOO0COQ0=class;
O0CQQ0COQ0=class;
OQ0CQ0COQ0=class;
O0QCQ0COQ0=class;
OOCCQ0COQ0=class;
OO00CQQOQ0=class;
OOO0CQQOQ0=class;
OQ0CO0QOQ0=class;
OC0CO0QOQ0=class;
OOQOC0QOQ0=class;
OOOCO0QOQ0=class;
OCCCO0QOQ0=class
private
O000O0QOQ0:integer;
function OO00O0QOQ0:boolean;
public
OQ00O0QOQ0:TObject;
constructor Create(O0O0O0QOQ0:TObject);
procedure OOO0O0QOQ0;
procedure OQO0O0QOQ0;
procedure OCO0O0QOQ0;
property O0Q0O0QOQ0:boolean read OO00O0QOQ0;
end;
O0CCQOCOQ0=class
protected
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OOCCQOCOQ0:O0CCQOCOQ0;
OQCCQOCOQ0:IntPtr;
OCCCQOCOQ0:TBytes;
O000QOCOQ0:IntPtr;
function OO00QOCOQ0:IntPtr;
procedure OQ00QOCOQ0;
procedure OC00QOCOQ0(O0O0QOCOQ0:O0CQQ0COQ0;OOO0QOCOQ0:IntPtr;OQO0QOCOQ0:pub4;OCO0QOCOQ0:string);
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0);
destructor Destroy;override;
procedure OCQ0QOCOQ0;
function O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;virtual;
function OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;virtual;
function OQOOQOCOQ0(OCOOQOCOQ0:pOCIError;var O0QOQOCOQ0:pOCIParam;OOQOQOCOQ0:ub4):sword;virtual;
property OQQOQOCOQ0:IntPtr read OO00QOCOQ0;
property OCQOQOCOQ0:O0CCQOCOQ0 read OOCCQOCOQ0;
end;
O0COQOCOQ0=class(O0CCQOCOQ0)
private
OOCOQOCOQ0:string;
OQCOQOCOQ0:ub2;
OCCOQOCOQ0:ub4;
O00QO0COQ0:ub2;
OO0QO0COQ0:ub2;
OQ0QO0COQ0:sb2;
OC0QO0COQ0:sb1;
O0OQO0COQ0:sb2;
OOOQO0COQ0:ub1;
OQOQO0COQ0:IntPtr;
OCOQO0COQ0:sb4;
O0QQO0COQ0:IntPtr;
OOQQO0COQ0:pub2;
OQQQO0COQ0:ub4;
OCQQO0COQ0:ub4;
O0CQO0COQ0:ub4;
OOCQO0COQ0:IntPtr;
OQCQO0COQ0:MulticastDelegate;
OCCQO0COQ0:IntPtr;
O00CO0COQ0:MulticastDelegate;
OO0CO0COQ0:ub4;
OQ0CO0COQ0:pub4;
OC0CO0COQ0:ub2;
O0OCO0COQ0:ub1;
OOOCO0COQ0:ub2;
OQOCO0COQ0:ub4;
OCOCO0COQ0:TBytes;
O0QCO0COQ0:TObject;
public
function O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;override;
function OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;override;
property OCQCO0COQ0:IntPtr read OOCQO0COQ0 write OOCQO0COQ0;
property O0CCO0COQ0:MulticastDelegate read OQCQO0COQ0 write OQCQO0COQ0;
property OOCCO0COQ0:IntPtr read OCCQO0COQ0 write OCCQO0COQ0;
property OQCCO0COQ0:MulticastDelegate read O00CO0COQ0 write O00CO0COQ0;
property OCCCO0COQ0:string read OOCOQOCOQ0 write OOCOQOCOQ0;
property O000O0COQ0:ub2 read OQCOQOCOQ0 write OQCOQOCOQ0;
property OO00O0COQ0:ub4 read OCCOQOCOQ0 write OCCOQOCOQ0;
property OQ00O0COQ0:ub2 read O00QO0COQ0 write O00QO0COQ0;
property OC00O0COQ0:ub2 read OO0QO0COQ0 write OO0QO0COQ0;
property O0O0O0COQ0:sb2 read OQ0QO0COQ0 write OQ0QO0COQ0;
property OOO0O0COQ0:sb1 read OC0QO0COQ0 write OC0QO0COQ0;
property OQO0O0COQ0:sb2 read O0OQO0COQ0 write O0OQO0COQ0;
property OCO0O0COQ0:ub1 read OOOQO0COQ0 write OOOQO0COQ0;
property O0Q0O0COQ0:IntPtr read OQOQO0COQ0 write OQOQO0COQ0;
property OOQ0O0COQ0:sb4 read OCOQO0COQ0 write OCOQO0COQ0;
property OQQ0O0COQ0:IntPtr read O0QQO0COQ0 write O0QQO0COQ0;
property OCQ0O0COQ0:pub2 read OOQQO0COQ0 write OOQQO0COQ0;
property O0C0O0COQ0:ub4 read OO0CO0COQ0 write OO0CO0COQ0;
property OOC0O0COQ0:ub2 read OC0CO0COQ0 write OC0CO0COQ0;
property OQC0O0COQ0:ub1 read O0OCO0COQ0 write O0OCO0COQ0;
property OCC0O0COQ0:TBytes read OCOCO0COQ0 write OCOCO0COQ0;
property O00OO0COQ0:TObject read O0QCO0COQ0 write O0QCO0COQ0;
end;
OOOOO0QOQ0=class(O0COQOCOQ0)
end;
OOQ0O0QOQ0=class(O0COQOCOQ0)
public
function OQQ0O0QOQ0(OCQ0O0QOQ0:pOCIError;O0C0O0QOQ0:ub4;OOC0O0QOQ0:ub4;OQC0O0QOQ0:ub4):sword;
function OCC0O0QOQ0(O00OO0QOQ0:pOCIError;OO0OO0QOQ0:IntPtr;OQ0OO0QOQ0:IntPtr;OC0OO0QOQ0:IntPtr;
O0OOO0QOQ0:IntPtr):sword;
end;
OO0OO0COQ0=class(O0COQOCOQ0)
public
function OQ0OO0COQ0(OC0OO0COQ0:pOCIError;O0OOO0COQ0:ub4;OOOOO0COQ0:ub4;OQOOO0COQ0:ub4):sword;
function OCOOO0COQ0(O0QOO0COQ0:pOCIError;OOQOO0COQ0:IntPtr;OQQOO0COQ0:IntPtr):sword;
end;
OQOOO0QOQ0=class(O0CCQOCOQ0)
private
OCOOO0QOQ0:Byte;
O0QOO0QOQ0:TCRObjectList;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0);
destructor Destroy;override;
function O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;override;
function OQOOQOCOQ0(OCOOQOCOQ0:pOCIError;var O0QOQOCOQ0:pOCIParam;OOQOQOCOQ0:ub4):sword;override;
procedure OQQOO0QOQ0(OCQOO0QOQ0:O0CCQOCOQ0);
end;
O0COO0QOQ0=class(O0CCQOCOQ0)
private
OOCOO0QOQ0:ub1;
OQCOO0QOQ0:ub2;
OCCOO0QOQ0:OQOOO0QOQ0;
O00Q00QOQ0:string;
OO0Q00QOQ0:string;
OQ0Q00QOQ0:string;
OC0Q00QOQ0:string;
O0OQ00QOQ0:string;
OOOQ00QOQ0:ub1;
OQOQ00QOQ0:TBytes;
OCOQ00QOQ0:ub4;
O0QQ00QOQ0:ub2;
OOQQ00QOQ0:sb2;
OQQQ00QOQ0:ub2;
OCQQ00QOQ0:ub1;
O0CQ00QOQ0:ub1;
OOCQ00QOQ0:ub1;
function OQCQ00QOQ0:O0CQQ0COQ0;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0;O00C00QOQ0:ub1;OO0C00QOQ0:ub2);
destructor Destroy;override;
function O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;override;
property OQ0C00QOQ0:O0CQQ0COQ0 read OQCQ00QOQ0;
property OC0C00QOQ0:OQOOO0QOQ0 read OCCOO0QOQ0;
end;
OCQOO0COQ0=class(O0CCQOCOQ0)
private
O0COO0COQ0:O0CCQOCOQ0;
OOCOO0COQ0:O0CCQOCOQ0;
function OQCOO0COQ0:O0CQQ0COQ0;
procedure OCCOO0COQ0(O00Q00COQ0:OOO0CQQOQ0;OO0Q00COQ0:O0COO0QOQ0);
procedure OC0Q00COQ0(O0OQ00COQ0:OOO0CQQOQ0;OOOQ00COQ0:O0COO0QOQ0);
procedure OOCQ00COQ0(OQCQ00COQ0:OOO0CQQOQ0;OCCQ00COQ0:O0COO0QOQ0);
procedure O0OC00COQ0(OOOC00COQ0:OOO0CQQOQ0;OQOC00COQ0:O0COO0QOQ0);
procedure OCQC00COQ0(O0CC00COQ0:OOO0CQQOQ0;OOCC00COQ0:O0COO0QOQ0);
procedure OQ0000COQ0(OC0000COQ0:OOO0CQQOQ0;O0O000COQ0:O0COO0QOQ0);
procedure OOQ000COQ0(OQQ000COQ0:OOO0CQQOQ0;OCQ000COQ0:O0COO0QOQ0);
procedure O00O00COQ0(OO0O00COQ0:OOO0CQQOQ0;OQ0O00COQ0:O0COO0QOQ0);
procedure OOQO00COQ0(OQQO00COQ0:OOO0CQQOQ0;OCQO00COQ0:O0COO0QOQ0);
procedure O00QC0COQ0(OO0QC0COQ0:OOO0CQQOQ0;OQ0QC0COQ0:O0COO0QOQ0);
procedure OOQQC0COQ0(OQQQC0COQ0:OOO0CQQOQ0;OCQQC0COQ0:O0COO0QOQ0);
procedure OQ0CC0COQ0(OC0CC0COQ0:OOO0CQQOQ0;O0OCC0COQ0:OQOOO0QOQ0);
function OCOCC0COQ0(O0QCC0COQ0:OOO0CQQOQ0;OOQCC0COQ0:O0CCQOCOQ0):O0COO0QOQ0;
function OOCCC0COQ0(OQCCC0COQ0:OOO0CQQOQ0;OCCCC0COQ0:O0CCQOCOQ0):O0COO0QOQ0;
function OO00C0COQ0(OQ00C0COQ0:OOO0CQQOQ0;OC00C0COQ0:O0CCQOCOQ0):OQOOO0QOQ0;
function OQO0C0COQ0(OCO0C0COQ0:OOO0CQQOQ0;O0Q0C0COQ0:O0CCQOCOQ0):OQOOO0QOQ0;
protected
procedure OQQ0C0COQ0(OCQ0C0COQ0:OOO0CQQOQ0;const O0C0C0COQ0:TBytes);
function OQC0C0COQ0(OCC0C0COQ0:OOO0CQQOQ0;O00OC0COQ0:pOCIError):sword;
procedure OO0OC0COQ0(OQ0OC0COQ0:OOO0CQQOQ0;const OC0OC0COQ0:string;O0OOC0COQ0:ub1);
function OCOOC0COQ0(O0QOC0COQ0:OOO0CQQOQ0;OOQOC0COQ0:pOCIError):sword;
public
destructor Destroy;override;
function O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;override;
function OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;override;
function OOCOC0COQ0(OQCOC0COQ0:OOO0CQQOQ0;const OCCOC0COQ0:string;O00QQ0COQ0:pOCIError):sword;
function O0OQQ0COQ0(OOOQQ0COQ0:OOO0CQQOQ0;const OQOQQ0COQ0:string;OCOQQ0COQ0:ub1;O0QQQ0COQ0:pOCIError):sword;
property OOQQQ0COQ0:O0CQQ0COQ0 read OQCOO0COQ0;
property OQQQQ0COQ0:O0CCQOCOQ0 read O0COO0COQ0 write O0COO0COQ0;
property OCQQQ0COQ0:O0CCQOCOQ0 read OOCOO0COQ0;
end;
O0CQQ0COQ0=class(O0CCQOCOQ0)
private
OOCQQ0COQ0:boolean;
OQCQQ0COQ0:boolean;
public
constructor Create(OCCQQ0COQ0:Cardinal);
function O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;override;
function OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;override;
property O00CQ0COQ0:boolean read OOCQQ0COQ0;
property OO0CQ0COQ0:boolean read OQCQQ0COQ0;
end;
O0OC00QOQ0=class
private
OOOC00QOQ0:integer;
OQOC00QOQ0:integer;
OCOC00QOQ0:string;
O0QC00QOQ0:string;
OOQC00QOQ0:string;
public
constructor Create(OCQC00QOQ0:integer;OQCCOQCOQ0:integer;OCCCOQCOQ0:string;O0CC00QOQ0:string;OOCC00QOQ0:string);
end;
OQCC00QOQ0=class(TCRObjectList)
private
OCCC00QOQ0:TCRObjectList;
function O00000QOQ0(OO0000QOQ0:integer):O0OC00QOQ0;
public
property OQ0000QOQ0[Index:integer]:O0OC00QOQ0 read O00000QOQ0;default;
end;
OQ0CQ0COQ0=class(O0CCQOCOQ0)
private
OC0CQ0COQ0:sword;
O0OCQ0COQ0:string;
OOOCQ0COQ0:OQCC00QOQ0;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0);
destructor Destroy;override;
property OQOCQ0COQ0:sword read OC0CQ0COQ0 write OC0CQ0COQ0;
property OCOCQ0COQ0:string read O0OCQ0COQ0 write O0OCQ0COQ0;
end;
O0QCQ0COQ0=class(O0CCQOCOQ0)
private
OOQCQ0COQ0:string;
OQQCQ0COQ0:O0CQQ0COQ0;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0);
property OCQCQ0COQ0:string read OOQCQ0COQ0 write OOQCQ0COQ0;
property O0CCQ0COQ0:O0CQQ0COQ0 read OQQCQ0COQ0;
end;
OO00CQQOQ0=class(O0CCQOCOQ0)
private
OQ00CQQOQ0:string;
OC00CQQOQ0:string;
O0O0CQQOQ0:string;
public
function OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;override;
end;
OC0000QOQ0=record
O0O000QOQ0:ub4;
OOO000QOQ0:ub2;
OQO000QOQ0:ub1;
OCO000QOQ0:TBytes;
end;
O0Q000QOQ0=^OC0000QOQ0;
OOQ000QOQ0=record
OQQ000QOQ0:OCIInd;
OCQ000QOQ0:TBytes;
O0C000QOQ0:O0Q000QOQ0;
OOC000QOQ0:Boolean;
end;
OQC000QOQ0=^OOQ000QOQ0;
OCC000QOQ0=record
O00O00QOQ0:array of OOQ000QOQ0;
end;
OO0O00QOQ0=^OCC000QOQ0;
OQ0O00QOQ0=class
OC0O00QOQ0:TList;
O0OO00QOQ0:ub4;
OOOO00QOQ0:Integer;
OQOO00QOQ0:Boolean;
OCOO00QOQ0:ub4;
O0QO00QOQ0:ub4;
OOQO00QOQ0:sword;
OQQO00QOQ0:Boolean;
function OCQO00QOQ0:OO0O00QOQ0;{$IFDEF USE_INLINE}inline;{$ENDIF}
function O0CO00QOQ0(OOCO00QOQ0:Integer):OO0O00QOQ0;{$IFDEF USE_INLINE}inline;{$ENDIF}
protected
procedure OQCO00QOQ0(OCCO00QOQ0:TCRList);
procedure OQ0QC0QOQ0(OC0QC0QOQ0,O0OQC0QOQ0:TCRList);
procedure O0QQC0QOQ0(OOQQC0QOQ0:OO0O00QOQ0);
procedure OQQQC0QOQ0(OCQQC0QOQ0:OO0O00QOQ0);
public
constructor Create;
destructor Destroy;override;
function O00CC0QOQ0(OO0CC0QOQ0,OQ0CC0QOQ0:TCRList):Boolean;
procedure OC0CC0QOQ0(O0OCC0QOQ0:TCRList);
procedure OQOCC0QOQ0;
procedure OOQCC0QOQ0;
procedure OQQCC0QOQ0(OCQCC0QOQ0:ub4);
function OCCCC0QOQ0:OO0O00QOQ0;
function OO00C0QOQ0(OQ00C0QOQ0:ub4):Integer;
function OC00C0QOQ0(O0O0C0QOQ0:ub4):Integer;
function OOO0C0QOQ0(OQO0C0QOQ0:ub4):Boolean;
function OCO0C0QOQ0:Boolean;
property O0Q0C0QOQ0:OO0O00QOQ0 read OCQO00QOQ0;
property OOQ0C0QOQ0[Index:Integer]:OO0O00QOQ0 read O0CO00QOQ0;
property OQQ0C0QOQ0:Boolean read OQOO00QOQ0;
property OCQ0C0QOQ0:ub4 read OCOO00QOQ0;
property O0C0C0QOQ0:ub4 read O0QO00QOQ0;
property OOC0C0QOQ0:sword read OOQO00QOQ0 write OOQO00QOQ0;
property OQC0C0QOQ0:ub4 read O0OO00QOQ0 write O0OO00QOQ0;
end;
OQ0OC0QOQ0=(OCC0C0QOQ0,O00OC0QOQ0,OO0OC0QOQ0);
OOCCQ0COQ0=class(O0CCQOCOQ0)
private
OQCCQ0COQ0:O0CQQ0COQ0;
OCCCQ0COQ0:OOO0CQQOQ0;
O000Q0COQ0:OOCCQ0COQ0;
OO00Q0COQ0:TCRList;
OQ00Q0COQ0:OO00OQCOQ0;
OC00Q0COQ0:OCCCO0QOQ0;
O0O0Q0COQ0:OQ0O00QOQ0;
OOO0Q0COQ0:TCRObjectList;
OQO0Q0COQ0:TCRObjectList;
OCO0Q0COQ0:TCRList;
O0Q0Q0COQ0:TCRList;
OOQ0Q0COQ0:TCRObjectList;
OQQ0Q0COQ0:TBytes;
OCQ0Q0COQ0:string;
O0C0Q0COQ0:sword;
OOC0Q0COQ0:ub2;
OQC0Q0COQ0:ub2;
OCC0Q0COQ0:ub4;
O00OQ0COQ0:sb2;
OO0OQ0COQ0:ub4;
OQ0OQ0COQ0:ub4;
OC0OQ0COQ0:ub4;
O0OOQ0COQ0:ub4;
OOOOQ0COQ0:cardinal;
OQOOQ0COQ0:TRowId81;
OCOOQ0COQ0:TBytes;
O0QOQ0COQ0:boolean;
OOQOQ0COQ0:ub4;
OQQOQ0COQ0:OQ0OC0QOQ0;
OCQOQ0COQ0:boolean;
O0COQ0COQ0:OCITimeZoneInfo;
OOCOQ0COQ0:Boolean;
function OQCOQ0COQ0:OO00OQCOQ0;
procedure OCCOQ0COQ0(O00QOCQOQ0:sword);
procedure OO0QOCQOQ0;
property OC0QOCQOQ0:OO00OQCOQ0 read OQCOQ0COQ0;
protected
function O0OQOCQOQ0(OOOQOCQOQ0:pOCIError):sword;
function OQOQOCQOQ0(OCOQOCQOQ0:pOCIError;var O0QQOCQOQ0:integer):sword;
procedure OOQQOCQOQ0;
function OQQQOCQOQ0(OCQQOCQOQ0:pOCIError):sword;
procedure OQCQOCQOQ0;
function OCCQOCQOQ0(O00COCQOQ0:pOCIError):sword;
procedure OC0COCQOQ0(O0OCOCQOQ0:O0COQOCOQ0);
function OQCCOCQOQ0(OCCCOCQOQ0:O0COQOCOQ0):sword;
procedure OQO0OCQOQ0;
procedure OQQ0OCQOQ0(OCQ0OCQOQ0:TCRList);
procedure OO0Q0CQOQ0(OQ0Q0CQOQ0:O0COQOCOQ0;OC0Q0CQOQ0:IntPtr;O0OQ0CQOQ0:pOCIInd);
procedure OOQQ0CQOQ0(OQQQ0CQOQ0:O0COQOCOQ0;OCQQ0CQOQ0:IntPtr;O0CQ0CQOQ0:pOCIInd;OOCQ0CQOQ0:pub2;out OQCQ0CQOQ0:TBytes);
procedure OQQC0CQOQ0(OCQC0CQOQ0:TCRList;const O0CC0CQOQ0:TBytes);
procedure OQCC0CQOQ0(OCCC0CQOQ0:TCRList);
procedure OCQ00CQOQ0(O0C00CQOQ0:OO0O00QOQ0;OOC00CQOQ0:TCRList;const OQC00CQOQ0:TBytes);
procedure OOOO0CQOQ0(OQOO0CQOQ0:OQC000QOQ0;OCOO0CQOQ0:OOOOO0QOQ0;O0QO0CQOQ0:O0COQOCOQ0);
procedure OQQO0CQOQ0(OCQO0CQOQ0:OO0O00QOQ0;O0CO0CQOQ0:TCRList);
procedure OQOQCCQOQ0(OCOQCCQOQ0:TCRList);
procedure OQOCCCQOQ0(OCOCCCQOQ0:O0COQOCOQ0;O0QCCCQOQ0:IntPtr;const OOQCCCQOQ0:TBytes;OQQCCCQOQ0:OCIInd);
procedure OC00CCQOQ0(O0O0CCQOQ0:OQC000QOQ0;OOO0CCQOQ0:ub2;OQO0CCQOQ0:O0COQOCOQ0;OCO0CCQOQ0:IntPtr;var O0Q0CCQOQ0:sb2;out OOQ0CCQOQ0:Integer);
procedure OO0OCCQOQ0(const OQ0OCCQOQ0:TBytes;OC0OCCQOQ0:ub2;O0OOCCQOQ0:O0COQOCOQ0;OOOOCCQOQ0:IntPtr;var OQOOCCQOQ0:Integer);
procedure OO0QQCQOQ0(OQ0QQCQOQ0:Integer;const OC0QQCQOQ0:string;O0OQQCQOQ0:TCRObjectList;
OOOQQCQOQ0:TCRList;OQOQQCQOQ0:pOCIError);
procedure OOCQQCQOQ0(OQCQQCQOQ0:integer);
procedure OO0CQCQOQ0(OQ0CQCQOQ0:Integer;const OC0CQCQOQ0:string;O0OCQCQOQ0:OQQCQCCOQ0;
OOOCQCQOQ0:OQQCQCCOQ0;OQOCQCQOQ0:word;OCOCQCQOQ0:word);
procedure OQQCQCQOQ0(OCQCQCQOQ0:Integer;const O0CCQCQOQ0:string;OOCCQCQOQ0:OQQCQCCOQ0;
OQCCQCQOQ0:OQQCQCCOQ0;OCCCQCQOQ0:word;O000QCQOQ0:word);
function OQ00QCQOQ0(OC00QCQOQ0:Integer;O0O0QCQOQ0:TCRObjectList;OOO0QCQOQ0:TCRList;OQO0QCQOQ0:pOCIError):sword;
function OCO0QCQOQ0(O0Q0QCQOQ0:TCRObjectList;OOQ0QCQOQ0:TCRList;OQQ0QCQOQ0:pOCIError):sword;
function OOQOQCQOQ0(OQQOQCQOQ0:TCRObjectList;OCQOQCQOQ0:TCRList;O0COQCQOQ0:pOCIError):sword;
procedure OOCOQCQOQ0(const OQCOQCQOQ0:string;OCCOQCQOQ0:word);
function O00QOQQOQ0(OO0QOQQOQ0:pOCIError;var OQ0QOQQOQ0:word):sword;
procedure O00COQQOQ0(const OO0COQQOQ0:string);
function OC0COQQOQ0(O0OCOQQOQ0:pOCIError):sword;
procedure OCOCOQQOQ0;
procedure O0QCOQQOQ0;
procedure OCCCOQQOQ0(const O000OQQOQ0:string);
function OQ00OQQOQ0(OC00OQQOQ0:pOCIError):sword;
procedure OOO0OQQOQ0;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0);
destructor Destroy;override;
function OQO0OQQOQ0(OCO0OQQOQ0:pOCIError):sword;
function OOOQ0QQOQ0(OQOQ0QQOQ0:pOCIError):sword;
function O0QQ0QQOQ0(var OOQQ0QQOQ0:pOCIDefine;OQQQ0QQOQ0:pOCIError;OCQQ0QQOQ0:ub4;
O0CQ0QQOQ0:IntPtr;OOCQ0QQOQ0:sb4;OQCQ0QQOQ0:ub2;OCCQ0QQOQ0:IntPtr;O00C0QQOQ0:pub2):sword;
class function OQ0C0QQOQ0(OC0C0QQOQ0:pOCIDefine;O0OC0QQOQ0:pOCIError;const OOOC0QQOQ0:pOCIType;
OQOC0QQOQ0:IntPtr;OCOC0QQOQ0:pub4;O0QC0QQOQ0:IntPtr;OOQC0QQOQ0:pub4):sword;
function O0CC0QQOQ0(var OOCC0QQOQ0:pOCIBind;OQCC0QQOQ0:pOCIError;OCCC0QQOQ0:IntPtr;
O0000QQOQ0:sb4;OO000QQOQ0:IntPtr;OQ000QQOQ0:sb4;OC000QQOQ0:ub2;O0O00QQOQ0:IntPtr;
OOO00QQOQ0:pub2;OQO00QQOQ0:ub4;OCO00QQOQ0:pub4):sword;
function O0C00QQOQ0(var OOC00QQOQ0:pOCIBind;OQC00QQOQ0:pOCIError;OCC00QQOQ0:ub4;
O00O0QQOQ0:IntPtr;OO0O0QQOQ0:sb4;OQ0O0QQOQ0:ub2;OC0O0QQOQ0:IntPtr;O0OO0QQOQ0:pub2;
OOOO0QQOQ0:ub4;OQOO0QQOQ0:pub4):sword;
class function O0QO0QQOQ0(OOQO0QQOQ0:pOCIBind;OQQO0QQOQ0:pOCIError;const OCQO0QQOQ0:pOCIType;
O0CO0QQOQ0:IntPtr;OOCO0QQOQ0:pub4;OQCO0QQOQ0:IntPtr;OCCO0QQOQ0:pub4):sword;
function OC0QCQQOQ0(O0OQCQQOQ0:pOCIError;OOOQCQQOQ0:ub4):sword;
function OQQQCQQOQ0(OCQQCQQOQ0:pOCIError;O0CQCQQOQ0:ub4;OOCQCQQOQ0:ub4;OQCQCQQOQ0:ub4):sword;
function OOOCCQQOQ0(OQOCCQQOQ0:pOCIError):sword;
function O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;override;
function OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;override;
function OQOOQOCOQ0(OCOOQOCOQ0:pOCIError;var O0QOQOCOQ0:pOCIParam;OOQOQOCOQ0:ub4):sword;override;
property OOQCCQQOQ0:O0CQQ0COQ0 read OQCCQ0COQ0;
property OQQCCQQOQ0:OOO0CQQOQ0 read OCCCQ0COQ0 write OCCCQ0COQ0;
property OCQCCQQOQ0:sword read O0C0Q0COQ0 write OCCOQ0COQ0;
property O0CCCQQOQ0:string read OCQ0Q0COQ0 write OCQ0Q0COQ0;
property OOCCCQQOQ0:ub2 read OOC0Q0COQ0 write OOC0Q0COQ0;
property OQCCCQQOQ0:TCRObjectList read OOO0Q0COQ0;
property OCCCCQQOQ0:TCRObjectList read OQO0Q0COQ0;
property O000CQQOQ0:TCRList read OO00Q0COQ0;
end;
OC0OC0QOQ0=class(TDirectServerInfo)
private
O0OOC0QOQ0:string;
OOOOC0QOQ0:string;
public
procedure Clear;override;
property OCOOC0QOQ0:string read O0OOC0QOQ0 write O0OOC0QOQ0;
property O0QOC0QOQ0:string read OOOOC0QOQ0 write OOOOC0QOQ0;
end;
OOO0CQQOQ0=class(O0CCQOCOQ0)
private
OQO0CQQOQ0:O0QCQ0COQ0;
OCO0CQQOQ0:OO00CQQOQ0;
O0Q0CQQOQ0:OO00OQCOQ0;
OOQ0CQQOQ0:OCCCO0QOQ0;
OQQ0CQQOQ0:TObject;
OCQ0CQQOQ0:byte;
O0C0CQQOQ0:word;
OOC0CQQOQ0:string;
OQC0CQQOQ0:TBytes;
OCC0CQQOQ0:TBytes;
O00OCQQOQ0:boolean;
OO0OCQQOQ0:boolean;
OQ0OCQQOQ0:boolean;
OC0OCQQOQ0:cardinal;
O0OOCQQOQ0:cardinal;
OOOOCQQOQ0:cardinal;
OQOOCQQOQ0:integer;
OCOOCQQOQ0:integer;
O0QOCQQOQ0:Integer;
OOQOCQQOQ0:word;
OQQOCQQOQ0:Encoding;
OCQOCQQOQ0:word;
O0COCQQOQ0:Encoding;
OOCOCQQOQ0:word;
OQCOCQQOQ0:Encoding;
OCCOCQQOQ0:word;
O00QQQQOQ0:Encoding;
OO0QQQQOQ0:OCITimeZoneInfo;
OQ0QQQQOQ0:TList;
OC0QQQQOQ0:TList;
O0OQQQQOQ0:TThreadList;
OOOQQQQOQ0:TStringList;
function OQOQQQQOQ0:O0CQQ0COQ0;
function OCOQQQQOQ0:OO00OQCOQ0;
function O0QQQQQOQ0:word;
function OOQQQQQOQ0:Encoding;
function OQQQQQQOQ0:word;
function OCQQQQQOQ0:Encoding;
function O0CQQQQOQ0:Encoding;
function OOCQQQQOQ0:Encoding;
protected
OQCQQQQOQ0:OOCCQ0COQ0;
OCCQQQQOQ0:OOCCQ0COQ0;
procedure O00CQQQOQ0;
procedure O0OCQQQOQ0;
procedure O0CCQQQOQ0;
procedure OOO0QQQOQ0(OQO0QQQOQ0:byte;OCO0QQQOQ0:boolean=false);
procedure OO0OQQQOQ0(OQ0OQQQOQ0:byte);
procedure OCOOQQQOQ0;
procedure O0QOQQQOQ0;
procedure OCQOQQQOQ0(O0COQQQOQ0:byte);
function OOCOQQQOQ0(OQCOQQQOQ0:pOCIError):sword;
procedure O00QOOQOQ0(OO0QOOQOQ0:pOCIError;OQ0QOOQOQ0:boolean=false);
procedure OCCOOOQOQ0;
procedure O00Q0OQOQ0(OO0Q0OQOQ0:pOCIError);
function OOQ00OQOQ0:boolean;
function OQQ00OQOQ0:boolean;
function OCQ00OQOQ0:boolean;
procedure O0C00OQOQ0(OOC00OQOQ0:Integer);
procedure OQC00OQOQ0(const OCC00OQOQ0:TBytes);
procedure OQ0O0OQOQ0;
procedure OC0O0OQOQ0;
procedure OOOO0OQOQ0;
procedure OCOO0OQOQ0;
procedure OCCO0OQOQ0;
function O00QCOQOQ0(OO0QCOQOQ0:TList;const OQ0QCOQOQ0:TBytes):O0CCQOCOQ0;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0);
destructor Destroy;override;
function OOOQCOQOQ0(OQOQCOQOQ0:pOCIError;OCOQCOQOQ0:ub4;O0QQCOQOQ0:ub4):sword;
function OOQQCOQOQ0(OQQQCOQOQ0:pOCIError):sword;
function OCQQCOQOQ0(O0CQCOQOQ0:pOCIError;const OOCQCOQOQ0:IntPtr;OQCQCOQOQ0:ub4;const OCCQCOQOQ0:IntPtr;O00CCOQOQ0:ub4;const OO0CCOQOQ0:IntPtr;OQ0CCOQOQ0:sb4;OC0CCOQOQ0:ub4):sword;
function OOQCCOQOQ0(OQQCCOQOQ0:pOCIError):integer;
function OCO0COQOQ0(OOOQOCQOQ0:pOCIError;O0Q0COQOQ0:OOCCQ0COQ0=nil):sword;
function OQQ0COQOQ0(OCOQOCQOQ0:pOCIError;var O0QQOCQOQ0:integer;OCQ0COQOQ0:OOCCQ0COQ0=nil):sword;
function OQCOCOQOQ0(OCCOCOQOQ0:pOCIError;O00QQOQOQ0:OOCCQ0COQ0=nil):sword;
function OOOQQOQOQ0(OQOQQOQOQ0:pOCIError):sword;
function OCOQQOQOQ0(O0QQQOQOQ0:pOCIError):sword;
function OOQQQOQOQ0(OQQQQOQOQ0:pOCIError):sword;
function OCQQQOQOQ0(O0CQQOQOQ0:pOCIError;OOCQQOQOQ0:IntPtr;OQCQQOQOQ0:ub4;OCCQQOQOQ0:ub1):sword;
function O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;override;
function OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;override;
function OOOCQOQOQ0(OQOCQOQOQ0:Exception;OCOCQOQOQ0:pOCIError;O0QCQOQOQ0:OOCCQ0COQ0=nil):sword;
function O0CCQOQOQ0(OOCCQOQOQ0:word):integer;
function OQCCQOQOQ0(OCCCQOQOQ0:sb4;O000QOQOQ0:Word):Word;
function OO00QOQOQ0:sb4;
function OQ00QOQOQ0(OC00QOQOQ0:word):Encoding;
function O0O0QOQOQ0(const OOO0QOQOQ0:TBytes;OQO0QOQOQ0:pOCIError):O0CCQOCOQ0;
function OQQ0QOQOQ0(const OCQ0QOQOQ0,O0C0QOQOQ0:string;OOC0QOQOQ0:pOCIError):O0CCQOCOQ0;
procedure OOQOQOQOQ0;
property O0COQOQOQ0:OO00OQCOQ0 read OCOQQQQOQ0;
property OOCOQOQOQ0:O0CQQ0COQ0 read OQOQQQQOQ0;
property OQCOQOQOQ0:OO00CQQOQ0 read OCO0CQQOQ0 write OCO0CQQOQ0;
property OCCOQOQOQ0:byte read OCQ0CQQOQ0;
property O00QO0QOQ0:Boolean read O00OCQQOQ0;
property OO0QO0QOQ0:word read O0C0CQQOQ0;
property OQ0QO0QOQ0:word read OOQOCQQOQ0;
property OC0QO0QOQ0:Encoding read O0CQQQQOQ0;
property O0OQO0QOQ0:word read OCQOCQQOQ0;
property OOOQO0QOQ0:Encoding read OOCQQQQOQ0;
property OQOQO0QOQ0:Integer read O0QOCQQOQ0;
property OCOQO0QOQ0:TBytes read OQC0CQQOQ0;
property O0QQO0QOQ0:TBytes read OCC0CQQOQ0;
property OOQQO0QOQ0:word read OQQQQQQOQ0;
property OQQQO0QOQ0:Encoding read OCQQQQQOQ0;
property OCQQO0QOQ0:OCITimeZoneInfo read OO0QQQQOQ0 write OO0QQQQOQ0;
property O0CQO0QOQ0:word read O0QQQQQOQ0;
property OOCQO0QOQ0:Encoding read OOQQQQQOQ0;
property OQCQO0QOQ0:cardinal read OC0OCQQOQ0;
property OCCQO0QOQ0:cardinal read OOOOCQQOQ0;
property O00CO0QOQ0:cardinal read O0OOCQQOQ0;
property OO0CO0QOQ0:boolean read OO0OCQQOQ0;
end;
OQ0CO0QOQ0=class(O0CCQOCOQ0)
end;
OC0CO0QOQ0=class(O0CCQOCOQ0)
end;
O0OCO0QOQ0=class(O0CCQOCOQ0)
end;
OOQOC0QOQ0=class(O0OCO0QOQ0)
end;
OQQOC0QOQ0=class(O0OCO0QOQ0)
end;
OCQOC0QOQ0=class(O0OCO0QOQ0)
private
O0COC0QOQ0:TBytes;
function OOCOC0QOQ0:IntPtr;
function OQCOC0QOQ0:Integer;
procedure OCCOC0QOQ0(const O00QQ0QOQ0:Integer);
function OO0QQ0QOQ0:Integer;
function OQ0QQ0QOQ0:TBytes;
procedure OC0QQ0QOQ0(const O0OQQ0QOQ0:TBytes);
function OOOQQ0QOQ0:AnsiString;
procedure OQOQQ0QOQ0(const OCOQQ0QOQ0:AnsiString);
function OOQQQ0QOQ0:WideString;
procedure OQQQQ0QOQ0(const OCQQQ0QOQ0:WideString);
procedure OOCQQ0QOQ0;{$IFDEF USE_INLINE}inline;{$ENDIF}
public
procedure OCCQQ0QOQ0(O00CQ0QOQ0:OCQOC0QOQ0);
function OO0CQ0QOQ0(OQ0CQ0QOQ0:IntPtr):Integer;
procedure OC0CQ0QOQ0(O0OCQ0QOQ0:IntPtr;OOOCQ0QOQ0:Integer);
property OQOCQ0QOQ0:IntPtr read OOCOC0QOQ0;
property OCOCQ0QOQ0:Integer read OQCOC0QOQ0 write OCCOC0QOQ0;
property O0QCQ0QOQ0:Integer read OO0QQ0QOQ0;
property OOQCQ0QOQ0:TBytes read OQ0QQ0QOQ0 write OC0QQ0QOQ0;
{$IFDEF IS_UNICODE}
property OQQCQ0QOQ0:WideString read OOQQQ0QOQ0 write OQQQQ0QOQ0;
{$ELSE}
property OQQCQ0QOQ0:AnsiString read OOOQQ0QOQ0 write OQOQQ0QOQ0;
{$ENDIF}
property OCQCQ0QOQ0:AnsiString read OOOQQ0QOQ0 write OQOQQ0QOQ0;
property O0CCQ0QOQ0:WideString read OOQQQ0QOQ0 write OQQQQ0QOQ0;
end;
OOOCO0QOQ0=class(O0OCO0QOQ0)
private
OQOCO0QOQ0:TRowId81;
OCOCO0QOQ0:TBytes;
public
class function O0QCO0QOQ0(OOQCO0QOQ0:PRowId81):string;
class function OQQCO0QOQ0(const OCQCO0QOQ0:TBytes;O0CCO0QOQ0,OOCCO0QOQ0:integer):string;
function OQCCO0QOQ0:string;reintroduce;
end;
OOCCQ0QOQ0=class(O0OCO0QOQ0)
private
OQCCQ0QOQ0:TBytes;
OCCCQ0QOQ0:ub2;
O000Q0QOQ0:ub4;
OO00Q0QOQ0:integer;
OQ00Q0QOQ0:boolean;
OC00Q0QOQ0:OCIDuration;
O0O0Q0QOQ0:Boolean;
OOO0Q0QOQ0:boolean;
OQO0Q0QOQ0:ub1;
OCO0Q0QOQ0:ub4;
O0Q0Q0QOQ0:TBytes;
OOQ0Q0QOQ0:Cardinal;
OQQ0Q0QOQ0:O0Q000QOQ0;
OCQ0Q0QOQ0:boolean;
function O0C0Q0QOQ0:Integer;
function OOC0Q0QOQ0(OQC0Q0QOQ0:pOCISvcCtx;OCC0Q0QOQ0:pOCIError;var O00OQ0QOQ0:ub4;OO0OQ0QOQ0:IntPtr;OQ0OQ0QOQ0:ub4;var OC0OQ0QOQ0:ub4;O0OOQ0QOQ0:ub2;OOOOQ0QOQ0:ub1):sword;
function OCQCOCOOQ0(O0CCOCOOQ0:pOCISvcCtx;OOCCOCOOQ0:pOCIError;var OQCCOCOOQ0:ub4;OCCCOCOOQ0:IntPtr;O000OCOOQ0:ub4;OO00OCOOQ0:integer;var OQ00OCOOQ0:ub4;OC00OCOOQ0:ub2;O0O0OCOOQ0:ub1):sword;
function OCOQ0COOQ0(O0QQ0COOQ0:OOO0CQQOQ0;OOQQ0COOQ0:boolean;OQQQ0COOQ0:ub1;out OCQQ0COOQ0:ub2):Encoding;
protected
class function OOCQ0COOQ0(OQCQ0COOQ0:OO00OQCOQ0;OCCQ0COOQ0:ub2;O00C0COOQ0:Integer):O0Q000QOQ0;
procedure OO0C0COOQ0;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0;OQ0C0COOQ0:ub2;OC0C0COOQ0:boolean=False);overload;
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0;OQ0C0COOQ0:ub2;O0OC0COOQ0:ub1;OC0C0COOQ0:boolean=False);overload;
destructor Destroy;override;
function OOOC0COOQ0(OQOC0COOQ0:pOCIError;var OCOC0COOQ0:tbool):sword;
function O0QC0COOQ0(OOQC0COOQ0:pOCISvcCtx;OQQC0COOQ0:pOCIError;out OCQC0COOQ0:ub4):sword;
function OQCC0COOQ0(OCCC0COOQ0:pOCISvcCtx;O0000COOQ0:pOCIError;var OO000COOQ0:ub4;OQ000COOQ0:ub4;
OC000COOQ0:IntPtr;O0O00COOQ0:ub4;OOO00COOQ0:ub2;OQO00COOQ0:ub1):sword;
function OCQ00COOQ0(O0C00COOQ0:pOCISvcCtx;OOC00COOQ0:pOCIError;var OQC00COOQ0:ub4;OCC00COOQ0:ub4;
O00O0COOQ0:IntPtr;OO0O0COOQ0:ub4;OQ0O0COOQ0:ub1;OC0O0COOQ0:ub2;O0OO0COOQ0:ub1):sword;
function OOOO0COOQ0(OQOO0COOQ0:pOCISvcCtx;OCOO0COOQ0:pOCIError;var O0QO0COOQ0:ub4;OOQO0COOQ0:ub4;
OQQO0COOQ0:IntPtr;OCQO0COOQ0:ub4;O0CO0COOQ0:ub2):sword;
function OQOCCCOOQ0(OCOCCCOOQ0:pOCISvcCtx;O0QCCCOOQ0:pOCIError;var OOQCCCOOQ0:ub4;OQQCCCOOQ0:ub4;
OCQCCCOOQ0:IntPtr;O0CCCCOOQ0:ub4;OOCCCCOOQ0:ub1;OQCCCCOOQ0:ub2):sword;
function O0CQQCOOQ0(OOCQQCOOQ0:pOCISvcCtx;OQCQQCOOQ0:pOCIError;OCCQQCOOQ0:ub4):sword;
function OOQCQCOOQ0(OQQCQCOOQ0:pOCISvcCtx;OCQCQCOOQ0:pOCIError;O0CCQCOOQ0:ub2;OOCCQCOOQ0:ub1;OQCCQCOOQ0:ub1;OCCCQCOOQ0:tbool;O000QCOOQ0:OCIDuration):sword;
function O0O0QCOOQ0(OOO0QCOOQ0:pOCISvcCtx;OQO0QCOOQ0:pOCIError;OCO0QCOOQ0:ub1;O0Q0QCOOQ0:ub1;OOQ0QCOOQ0:tbool;OQQ0QCOOQ0:OCIDuration):sword;
function O0OOQCOOQ0(OOOOQCOOQ0:pOCISvcCtx;OQOOQCOOQ0:pOCIError):sword;
function OOQOQCOOQ0(OQQOQCOOQ0:pOCISvcCtx;OCQOQCOOQ0:pOCIError):sword;
function O0OQOQOOQ0(OOOQOQOOQ0:pOCIEnv;OQOQOQOOQ0:pOCIError;var OCOQOQOOQ0:LongBool):sword;
function O0QQOQOOQ0(OOQQOQOOQ0:pOCISvcCtx;OQQQOQOOQ0:pOCIError;var OCQQOQOOQ0:tbool):sword;
function OQCQOQOOQ0(OCCQOQOOQ0:pOCISvcCtx;O00COQOOQ0:pOCIError;var OO0COQOOQ0:tbool):sword;
function OQ0COQOOQ0(OC0COQOOQ0:pOCISvcCtx;O0OCOQOOQ0:pOCIError):sword;
function OCOCOQOOQ0(O0QCOQOOQ0:pOCISvcCtx;OOQCOQOOQ0:pOCIError):sword;
function O0CCOQOOQ0(OOCCOQOOQ0:IntPtr;OQCCOQOOQ0:pub2;OCCCOQOOQ0:IntPtr;O000OQOOQ0:pub2):sword;
function O0O0OQOOQ0(OOO0OQOOQ0:IntPtr;OQO0OQOOQ0:ub2;OCO0OQOOQ0:IntPtr;O0Q0OQOOQ0:ub2):sword;
function OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;override;
property OQC0OQOOQ0:TBytes read OQCCQ0QOQ0 write OQCCQ0QOQ0;
property OCC0OQOOQ0:ub1 read OQO0Q0QOQ0 write OQO0Q0QOQ0;
property O00OOQOOQ0:boolean read OOO0Q0QOQ0;
property OO0OOQOOQ0:boolean read OQ00Q0QOQ0;
end;
OQ0OOQOOQ0=class
private
OC0OOQOOQ0:OO00OQCOQ0;
O0OOOQOOQ0:OOO0CQQOQ0;
OOOOOQOOQ0:boolean;
OQOOOQOOQ0:boolean;
OCOOOQOOQ0:sb2;
O0QOOQOOQ0:TBytes;
OOQOOQOOQ0:sb4;
OQQOOQOOQ0:sb4;
OCQOOQOOQ0:sb2;
O0COOQOOQ0:Integer;
OOCOOQOOQ0:sb4;
OQCOOQOOQ0:TBytes;
OCCOOQOOQ0:TBytes;
O00Q0QOOQ0:sb4;
OO0Q0QOOQ0:sb4;
OQ0Q0QOOQ0:Integer;
OC0Q0QOOQ0:IntPtr;
O0OQ0QOOQ0:sb4;
OOOQ0QOOQ0:TBytes;
function OQOQ0QOOQ0(OOOQOCQOQ0:pOCIError):sword;
public
constructor Create(O0QQ0QOOQ0:OOO0CQQOQ0;OOQQ0QOOQ0:Integer;const OQQQ0QOOQ0:TBytes;OCQQ0QOOQ0:Integer;O0CQ0QOOQ0:Integer);
procedure OOCQ0QOOQ0;
procedure OQCQ0QOOQ0;
function O00C0QOOQ0(OO0C0QOOQ0:pOCIError):sword;
procedure OOOC0QOOQ0(OQOC0QOOQ0:IntPtr;OCOC0QOOQ0:integer);
property O0QC0QOOQ0:sb2 write OCOOOQOOQ0;
property OOQC0QOOQ0:Integer write OQQOOQOOQ0;
property OQQC0QOOQ0:Integer write OOQOOQOOQ0;
property OCQC0QOOQ0:Integer write OQ0Q0QOOQ0;
property O0CC0QOOQ0:Integer read O0COOQOOQ0 write O0COOQOOQ0;
property OOCC0QOOQ0:Boolean write OQOOOQOOQ0;
property OQCC0QOOQ0:Boolean write OOOOOQOOQ0;
property OCCC0QOOQ0:TBytes read OQCOOQOOQ0 write OQCOOQOOQ0;
property O0000QOOQ0:Integer read O0OQ0QOOQ0;
property OO000QOOQ0:TBytes read OOOQ0QOOQ0 write OOOQ0QOOQ0;
end;
OQ000QOOQ0=class
public
class function OC000QOOQ0(const O0O00QOOQ0:TBytes):Single;
class function OQO00QOOQ0(OCO00QOOQ0:Single):TBytes;
end;
OOQ00QOOQ0=class
public
class function OQQ00QOOQ0(const OCQ00QOOQ0:TBytes):Double;
class function OOC00QOOQ0(OQC00QOOQ0:Double):TBytes;
end;
type
O00O0QOOQ0=class(O0OCO0QOQ0)
private
OO0O0QOOQ0:TOCIDateTime;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0;OQ0O0QOOQ0:cardinal);
destructor Destroy;override;
property OC0O0QOOQ0:TOCIDateTime read OO0O0QOOQ0;
end;
O0OO0QOOQ0=class(O0OCO0QOQ0)
private
OOOO0QOOQ0:TOCIInterval;
public
constructor Create(OOQ0QOCOQ0:O0CCQOCOQ0;OQ0O0QOOQ0:cardinal);
destructor Destroy;override;
property OQOO0QOOQ0:TOCIInterval read OOOO0QOOQ0;
end;
{$IFDEF NETDIAG}
type
OOCCCQC0Q0=procedure(const OQCCCQC0Q0:TBytes;OCCCCQC0Q0:integer);
O000CQC0Q0=procedure(var OO00CQC0Q0:TBytes;OQ00CQC0Q0:integer);
function OCC0CQOOQ0(O00OCQOOQ0,OO0OCQOOQ0:String):String;
function O0OOCQOOQ0(OOOOCQOOQ0,OQOOCQOOQ0,OCOOCQOOQ0:String):String;
var
NetWriteCallback:OOCCCQC0Q0;
NetReadCallback:O000CQC0Q0;
{$ENDIF}
procedure OCOO0QOOQ0(O0QO0QOOQ0:sword;OOQO0QOOQ0:boolean;OQQO0QOOQ0:pOCIError);
procedure OCQO0QOOQ0(O0CO0QOOQ0:string);
procedure OOCO0QOOQ0(OQCO0QOOQ0:Integer;OCCO0QOOQ0:string);
procedure O00QCQOOQ0(OO0QCQOOQ0:integer);
procedure OQ0QCQOOQ0(OC0QCQOOQ0:integer);
function O0OQCQOOQ0(OOOQCQOOQ0:word):boolean;
function OQOQCQOOQ0(OCOQCQOOQ0,O0QQCQOOQ0:boolean;OOQQCQOOQ0:IntPtr;OQQQCQOOQ0:Integer):string;overload;
function OQOQCQOOQ0(OCOQCQOOQ0,O0QQCQOOQ0:boolean;OOQQCQOOQ0:IntPtr;OCQQCQOOQ0:Integer;OQQQCQOOQ0:Integer):string;overload;
function O0CQCQOOQ0(OOCQCQOOQ0:boolean;OQCQCQOOQ0:IntPtr;OCCQCQOOQ0:Integer):string;overload;
function O00CCQOOQ0(OO0CCQOOQ0,OQ0CCQOOQ0:boolean;OC0CCQOOQ0:string):TBytes;
function O0OCCQOOQ0(const OOOCCQOOQ0:TBytes;OQOCCQOOQ0:IntPtr;OCOCCQOOQ0:integer;O0QCCQOOQ0:boolean):integer;overload;
function O0OCCQOOQ0(const OOOCCQOOQ0:string;OQOCCQOOQ0:IntPtr;OCOCCQOOQ0:integer;O0QCCQOOQ0:boolean):integer;overload;
implementation
uses
{$IFNDEF UNIDACPRO}
OraNet,OraNetAno,OraNetLogon,OraNetObjects;
{$ELSE}
OraNetUni,OraNetAnoUni,OraNetLogonUni,OraNetObjectsUni;
{$ENDIF}
const
OCQCCQOOQ0=',';
O0CCCQOOQ0=1024*64;
OOCCCQOOQ0=O0CCCQOOQ0*2;
OQCCCQOOQ0=O0CCCQOOQ0*4;
var
OCCCCQOOQ0:TIntValueStringList;
O000CQOOQ0:Boolean;
OO00CQOOQ0:OracleIntArrayEncoding;
function OQOQCQOOQ0(OCOQCQOOQ0,O0QQCQOOQ0:boolean;OOQQCQOOQ0:IntPtr;OQQQCQOOQ0:Integer):string;overload;
begin
if OOQQCQOOQ0=nil then
Result:=''
else if OCOQCQOOQ0 then
{$IFDEF IS_UNICODE}
Result:=Encoding.UTF8.GetString(BytesOf(OOQQCQOOQ0,OQQQCQOOQ0))
{$ELSE}
if O0QQCQOOQ0 then
Result:=Marshal.PtrToStringAnsi(OOQQCQOOQ0,OQQQCQOOQ0)
else
Result:=Encoding.UTF8.GetString(BytesOf(OOQQCQOOQ0,OQQQCQOOQ0))
{$ENDIF}
else
{$IFDEF IS_UNICODE}
Result:=Encoding.Default.GetString(BytesOf(OOQQCQOOQ0,OQQQCQOOQ0));
{$ELSE}
Result:=Marshal.PtrToStringAnsi(OOQQCQOOQ0,OQQQCQOOQ0);
{$ENDIF}
end;
function OQOQCQOOQ0(OCOQCQOOQ0,O0QQCQOOQ0:boolean;OOQQCQOOQ0:IntPtr;OCQQCQOOQ0:Integer;OQQQCQOOQ0:Integer):string;overload;
begin
if OOQQCQOOQ0=nil then
Result:=''
else if OCOQCQOOQ0 then
{$IFDEF IS_UNICODE}
Result:=Encoding.UTF8.GetString(BytesOf(PtrOffset(OOQQCQOOQ0,OCQQCQOOQ0),OQQQCQOOQ0))
{$ELSE}
if O0QQCQOOQ0 then
Result:=Marshal.PtrToStringAnsi(PtrOffset(OOQQCQOOQ0,OCQQCQOOQ0),OQQQCQOOQ0)
else
Result:=Encoding.UTF8.GetString(BytesOf(PtrOffset(OOQQCQOOQ0,OCQQCQOOQ0),OQQQCQOOQ0))
{$ENDIF}
else
{$IFDEF IS_UNICODE}
Result:=Encoding.Default.GetString(BytesOf(PtrOffset(OOQQCQOOQ0,OCQQCQOOQ0),OQQQCQOOQ0));
{$ELSE}
Result:=Marshal.PtrToStringAnsi(PtrOffset(OOQQCQOOQ0,OCQQCQOOQ0),OQQQCQOOQ0);
{$ENDIF}
end;
function O0CQCQOOQ0(OOCQCQOOQ0:boolean;OQCQCQOOQ0:IntPtr;OCCQCQOOQ0:Integer):string;overload;
begin
if OQCQCQOOQ0=nil then
Result:=''
else if OOCQCQOOQ0 then
{$IFDEF IS_UNICODE}
Result:=Marshal.PtrToStringUni(OQCQCQOOQ0,OCCQCQOOQ0 shr 1)
{$ELSE}
Result:=UTF8Encode(Marshal.PtrToStringUni(OQCQCQOOQ0,OCCQCQOOQ0 shr 1))
{$ENDIF}
else
{$IFDEF IS_UNICODE}
Result:=Encoding.Default.GetString(BytesOf(OQCQCQOOQ0,OCCQCQOOQ0));
{$ELSE}
Result:=Marshal.PtrToStringAnsi(OQCQCQOOQ0,OCCQCQOOQ0);
{$ENDIF}
end;
function O00CCQOOQ0(OO0CCQOOQ0,OQ0CCQOOQ0:boolean;OC0CCQOOQ0:string):TBytes;
begin
if OQ0CCQOOQ0 then
{$IFDEF IS_UNICODE}
Result:=Encoding.UTF8.GetBytes(OC0CCQOOQ0)
{$ELSE}
if OO0CCQOOQ0 then begin
SetLength(Result,Length(OC0CCQOOQ0));
Move(PAnsiChar(OC0CCQOOQ0)^,Pointer(Result)^,Length(OC0CCQOOQ0));
end
else
Result:=Encoding.UTF8.GetBytes(OC0CCQOOQ0)
{$ENDIF}
else
{$IFDEF IS_UNICODE}
Result:=Encoding.Default.GetBytes(OC0CCQOOQ0);
{$ELSE}
if OO0CCQOOQ0 then
Result:=Encoding.ANSI.GetBytes(Utf8Decode(OC0CCQOOQ0))
else begin
SetLength(Result,Length(OC0CCQOOQ0));
Move(PAnsiChar(OC0CCQOOQ0)^,Pointer(Result)^,Length(OC0CCQOOQ0));
end;
{$ENDIF}
end;
function O0OCCQOOQ0(const OOOCCQOOQ0:TBytes;OQOCCQOOQ0:IntPtr;OCOCCQOOQ0:integer;O0QCCQOOQ0:boolean):integer;overload;
var
OOQCCQOOQ0:integer;
begin
if O0QCCQOOQ0 then begin
OOQCCQOOQ0:=Length(OOOCCQOOQ0);
if OOQCCQOOQ0>OCOCCQOOQ0-2 then
OOQCCQOOQ0:=(OCOCCQOOQ0-2)and$fffffffe;
Marshal.Copy(OOOCCQOOQ0,0,OQOCCQOOQ0,OOQCCQOOQ0);
Marshal.WriteInt16(OQOCCQOOQ0,OOQCCQOOQ0,0);
Marshal.WriteInt16(OQOCCQOOQ0,OOQCCQOOQ0+1,0);
Result:=OOQCCQOOQ0;
end
else begin
OOQCCQOOQ0:=Length(OOOCCQOOQ0);
if OOQCCQOOQ0>OCOCCQOOQ0-1 then
OOQCCQOOQ0:=OCOCCQOOQ0-1;
Marshal.Copy(OOOCCQOOQ0,0,OQOCCQOOQ0,OOQCCQOOQ0);
Marshal.WriteByte(OQOCCQOOQ0,OOQCCQOOQ0,0);
Result:=OOQCCQOOQ0;
end;
end;
function O0OCCQOOQ0(const OOOCCQOOQ0:string;OQOCCQOOQ0:IntPtr;OCOCCQOOQ0:integer;O0QCCQOOQ0:boolean):integer;overload;
var
OQQCCQOOQ0:TBytes;
begin
if O0QCCQOOQ0 then
OQQCCQOOQ0:=Encoding.Unicode.GetBytes(OOOCCQOOQ0)
else
OQQCCQOOQ0:=Encoding.Default.GetBytes(OOOCCQOOQ0);
Result:=O0OCCQOOQ0(OQQCCQOOQ0,OQOCCQOOQ0,OCOCCQOOQ0,O0QCCQOOQ0);
end;
procedure OQ00CQOOQ0(const OC00CQOOQ0:string;out O0O0CQOOQ0,OOO0CQOOQ0,OQO0CQOOQ0:string);
var
OCO0CQOOQ0,O0Q0CQOOQ0,OOQ0CQOOQ0:integer;
OQQ0CQOOQ0:boolean;
begin
OOO0CQOOQ0:='';
O0O0CQOOQ0:='';
OQO0CQOOQ0:='';
OOQ0CQOOQ0:=Length(OC00CQOOQ0);
O0Q0CQOOQ0:=1;
OQQ0CQOOQ0:=False;
for OCO0CQOOQ0:=1 to OOQ0CQOOQ0+1 do begin
if(OCO0CQOOQ0<=OOQ0CQOOQ0)and(OC00CQOOQ0[OCO0CQOOQ0]='"')then
OQQ0CQOOQ0:=not OQQ0CQOOQ0;
if(OCO0CQOOQ0=OOQ0CQOOQ0+1)or(not OQQ0CQOOQ0 and(OC00CQOOQ0[OCO0CQOOQ0]='.'))then begin
if O0Q0CQOOQ0>1 then
O0O0CQOOQ0:=OOO0CQOOQ0;
OOO0CQOOQ0:=Copy(OC00CQOOQ0,O0Q0CQOOQ0,OCO0CQOOQ0-O0Q0CQOOQ0);
O0Q0CQOOQ0:=OCO0CQOOQ0+1;
end;
if(OCO0CQOOQ0<=OOQ0CQOOQ0)and not OQQ0CQOOQ0 and(OC00CQOOQ0[OCO0CQOOQ0]='@')then begin
if O0Q0CQOOQ0>1 then
O0O0CQOOQ0:=OOO0CQOOQ0;
OOO0CQOOQ0:=Copy(OC00CQOOQ0,O0Q0CQOOQ0,OCO0CQOOQ0-O0Q0CQOOQ0);
OQO0CQOOQ0:=Copy(OC00CQOOQ0,OCO0CQOOQ0+1,MaxInt);
break;
end;
end;
end;
function OCQ0CQOOQ0(O0C0CQOOQ0:string):string;
var
OOC0CQOOQ0:Integer;
begin
OOC0CQOOQ0:=Length(O0C0CQOOQ0);
if(OOC0CQOOQ0>1)and(O0C0CQOOQ0[1]='"')and(O0C0CQOOQ0[OOC0CQOOQ0]='"')then
Result:=Copy(O0C0CQOOQ0,2,OOC0CQOOQ0-2)
else
Result:=UpperCase(O0C0CQOOQ0);
end;
procedure OCOO0QOOQ0(O0QO0QOOQ0:sword;OOQO0QOOQ0:boolean;OQQO0QOOQ0:pOCIError);
begin
if O0QO0QOOQ0<>OCI_SUCCESS then
TOraError.DoOraError(@OCIErrorGet_,O0QO0QOOQ0,OOQO0QOOQ0,OQQO0QOOQ0);
end;
procedure OCQO0QOOQ0(O0CO0QOOQ0:string);
begin
raise Exception.Create(O0CO0QOOQ0);
end;
procedure OOCO0QOOQ0(OQCO0QOOQ0:Integer;OCCO0QOOQ0:string);
begin
raise EDBError.Create(OQCO0QOOQ0,OCCO0QOOQ0);
end;
procedure O00QCQOOQ0(OO0QCQOOQ0:integer);
begin
raise ENetError.Create(OO0QCQOOQ0,'Net error '+IntToStr(OO0QCQOOQ0));
end;
procedure OQ0QCQOOQ0(OC0QCQOOQ0:integer);
begin
raise EDBError.Create(OC0QCQOOQ0,'Unknown error '+IntToStr(OC0QCQOOQ0));
end;
function OQC0CQOOQ0:sword;
begin
OCQO0QOOQ0('Function is not supported');
Result:=OCI_ERROR;
end;
function OCCCO0QOQ0.OO00O0QOQ0:boolean;
begin
Result:=OQ00O0QOQ0<>nil;
end;
constructor OCCCO0QOQ0.Create(O0O0O0QOQ0:TObject);
begin
inherited Create;
O000O0QOQ0:=1;
OQ00O0QOQ0:=O0O0O0QOQ0;
end;
procedure OCCCO0QOQ0.OOO0O0QOQ0;
begin
if(Self<>nil)and(O000O0QOQ0>0)then begin
Dec(O000O0QOQ0);
if O000O0QOQ0=0 then begin
if OQ00O0QOQ0<>nil then begin
OQ00O0QOQ0.Free;
OQ00O0QOQ0:=nil;
end;
inherited Free;
end;
end;
end;
procedure OCCCO0QOQ0.OQO0O0QOQ0;
begin
if(Self<>nil)and(O000O0QOQ0>0)then begin
if OQ00O0QOQ0<>nil then begin
OQ00O0QOQ0.Free;
OQ00O0QOQ0:=nil;
end;
Dec(O000O0QOQ0);
if O000O0QOQ0=0 then
inherited Free;
end;
end;
procedure OCCCO0QOQ0.OCO0O0QOQ0;
begin
Inc(O000O0QOQ0);
end;
function OCC0CQOOQ0(O00OCQOOQ0,OO0OCQOOQ0:String):String;
var
OQ0OCQOOQ0,OC0OCQOOQ0:integer;
begin
Result:='';
OQ0OCQOOQ0:=1;
while(OQ0OCQOOQ0<=Length(O00OCQOOQ0))do begin
OQ0OCQOOQ0:=PosEx(OO0OCQOOQ0,UpperCase(O00OCQOOQ0),OQ0OCQOOQ0);
if OQ0OCQOOQ0=0 then
Exit;
OQ0OCQOOQ0:=OQ0OCQOOQ0+Length(OO0OCQOOQ0);
while(OQ0OCQOOQ0<=Length(O00OCQOOQ0))and(O00OCQOOQ0[OQ0OCQOOQ0]=' ')do
Inc(OQ0OCQOOQ0);
if(OQ0OCQOOQ0<=Length(O00OCQOOQ0))and(O00OCQOOQ0[OQ0OCQOOQ0]='=')then begin
Inc(OQ0OCQOOQ0);
OC0OCQOOQ0:=OQ0OCQOOQ0;
while(OC0OCQOOQ0<=Length(O00OCQOOQ0))and(O00OCQOOQ0[OC0OCQOOQ0]<>')')and(O00OCQOOQ0[OC0OCQOOQ0]<>#0)do
Inc(OC0OCQOOQ0);
Result:=Trim(Copy(O00OCQOOQ0,OQ0OCQOOQ0,OC0OCQOOQ0-OQ0OCQOOQ0));
Break;
end;
end;
end;
function O0OOCQOOQ0(OOOOCQOOQ0,OQOOCQOOQ0,OCOOCQOOQ0:String):String;
var
O0QOCQOOQ0,OOQOCQOOQ0:integer;
begin
O0QOCQOOQ0:=Pos(OQOOCQOOQ0,OOOOCQOOQ0);
if O0QOCQOOQ0=0 then
OCQO0QOOQ0(OQOOCQOOQ0+' not found');
O0QOCQOOQ0:=O0QOCQOOQ0+Length(OQOOCQOOQ0);
if OOOOCQOOQ0[O0QOCQOOQ0]='=' then begin
Inc(O0QOCQOOQ0);
OOQOCQOOQ0:=O0QOCQOOQ0;
while not((OOOOCQOOQ0[OOQOCQOOQ0]=')')or(OOOOCQOOQ0[OOQOCQOOQ0]=#0))do
Inc(OOQOCQOOQ0);
Delete(OOOOCQOOQ0,O0QOCQOOQ0,OOQOCQOOQ0-O0QOCQOOQ0);
Insert(OCOOCQOOQ0,OOOOCQOOQ0,O0QOCQOOQ0);
end;
Result:=OOOOCQOOQ0;
end;
function O0OQCQOOQ0(OOOQCQOOQ0:word):boolean;
begin
if(OOOQCQOOQ0>=OC0CCOCOQ0)and(OOOQCQOOQ0<=OQOCCOCOQ0)then
Result:=True
else
Result:=False;
end;
function OQQOCQOOQ0(OCQOCQOOQ0:word):word;
begin
if OCQOCQOOQ0>=10000 then
Result:=OQOCCOCOQ0
else if OCQOCQOOQ0>=8000 then
Result:=O0OCCOCOQ0
else
Result:=OC0CCOCOQ0;
end;
constructor O00O0QOOQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0;OQ0O0QOOQ0:cardinal);
begin
inherited Create(OOQ0QOCOQ0);
OO0O0QOOQ0:=TOCIDateTime.Create(OQ0O0QOOQ0);
end;
destructor O00O0QOOQ0.Destroy;
begin
OO0O0QOOQ0.Free;
inherited;
end;
constructor O0OO0QOOQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0;OQ0O0QOOQ0:cardinal);
begin
inherited Create(OOQ0QOCOQ0);
case OQ0O0QOOQ0 of
OCI_DTYPE_INTERVAL_DS:
OOOO0QOOQ0:=TOCIIntervalDS.Create;
OCI_DTYPE_INTERVAL_YM:
OOOO0QOOQ0:=TOCIIntervalYM.Create;
else
Assert(False);
end;
end;
destructor O0OO0QOOQ0.Destroy;
begin
OOOO0QOOQ0.Free;
inherited;
end;
constructor ENetError.Create(OQCCOQCOQ0:integer;OCCCOQCOQ0:string);
begin
inherited Create(OCCCOQCOQ0);
OOCCOQCOQ0:=OQCCOQCOQ0;
end;
constructor EDBError.Create(OQCCOQCOQ0:integer;OCCCOQCOQ0:string);
begin
inherited Create(OCCCOQCOQ0);
O000OQCOQ0:=OQCCOQCOQ0;
end;
constructor O0CQQ0COQ0.Create(OCCQQ0COQ0:Cardinal);
begin
inherited Create(nil);
OOCQQ0COQ0:=(OCCQQ0COQ0 and OCI_UTF16<>0);
OQCQQ0COQ0:=(OCCQQ0COQ0 and OCI_NCHAR_LITERAL_REPLACE_ON<>0);
end;
function O0CQQ0COQ0.O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case OCC0QOCOQ0 of
OCI_ATTR_ENV_UTF16:begin
if OOCQQ0COQ0 then
Marshal.WriteByte(OOC0QOCOQ0,1)
else
Marshal.WriteByte(OOC0QOCOQ0,0);
end;
else
Result:=inherited O0C0QOCOQ0(OOC0QOCOQ0,OQC0QOCOQ0,OCC0QOCOQ0,O00OQOCOQ0);
end;
end;
function O0CQQ0COQ0.OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case O0OOQOCOQ0 of
OCI_ATTR_ENV_UTF16:begin
if Marshal.ReadByte(OQ0OQOCOQ0)=0 then
OOCQQ0COQ0:=False
else
OOCQQ0COQ0:=True;
end;
else
Result:=inherited OO0OQOCOQ0(OQ0OQOCOQ0,OC0OQOCOQ0,O0OOQOCOQ0,OOOOQOCOQ0);
end;
end;
constructor OO00OQCOQ0.Create;
begin
inherited;
OOO0OQCOQ0:=ivIPv4;
OCQ0OQCOQ0:=0;
OQ0OOQCOQ0:=PacketSize;
if(OQ0OOQCOQ0<=0)or(OQ0OOQCOQ0>SDU)then
OC0OOQCOQ0:=SDU
else
OC0OOQCOQ0:=OQ0OOQCOQ0;
O0OOOQCOQ0:=TDU;
OOOOOQCOQ0:=OC0OOQCOQ0;
OQQOOQCOQ0:=10;
OCQOOQCOQ0:=0;
O0COOQCOQ0:=0;
if OQ0OOQCOQ0>O0OOOQCOQ0 then
SetLength(OQOOOQCOQ0,OQ0OOQCOQ0)
else
SetLength(OQOOOQCOQ0,O0OOOQCOQ0);
if OQ0OOQCOQ0>OC0OOQCOQ0 then
SetLength(OCOOOQCOQ0,OQ0OOQCOQ0)
else
SetLength(OCOOOQCOQ0,OC0OOQCOQ0);
SetLength(O0QOOQCOQ0,OQCCCQOOQ0);
SetLength(OOQOOQCOQ0,OOCCCQOOQ0);
OC00OQCOQ0:=OOCC0C0OQ0.Create;
O0O0OQCOQ0:=OCC0CCC0Q0.Create(Self);
OO0Q0QCOQ0;
end;
destructor OO00OQCOQ0.Destroy;
begin
OQ00OQCOQ0.Free;
OC00OQCOQ0.Free;
O0O0OQCOQ0.Free;
inherited;
end;
function OO00OQCOQ0.OOQC0QCOQ0(const OQQC0QCOQ0:string):O00QOCCOQ0;
var
OCQC0QCOQ0:string;
begin
OCQC0QCOQ0:=UpperCase(OOC0OQCOQ0);
if(OCQC0QCOQ0='')or(OCQC0QCOQ0='TCP')then
Result:=OQCCOCCOQ0.Create
{$IFNDEF LITE}
else if(OCQC0QCOQ0='TCPS')or(OCQC0QCOQ0='SSL')then begin
OOC0OQCOQ0:='TCPS';
if OQQC0QCOQ0<>'' then
OCO0OQCOQ0.ServerCertDN:=OQQC0QCOQ0;
Result:=OCCCOCCOQ0.Create(OQO0OQCOQ0,OCO0OQCOQ0);
end
else if OCQC0QCOQ0='SSH' then begin
OOC0OQCOQ0:='TCP';
Result:=OQO0OCCOQ0.Create(OQO0OQCOQ0,O0Q0OQCOQ0)
end
else if(OCQC0QCOQ0='HTTP')or(OCQC0QCOQ0='HTTPS')then begin
OOC0OQCOQ0:='TCP';
Result:=OOC0OCCOQ0.Create(OOQ0OQCOQ0,OQQ0OQCOQ0)
end
{$ENDIF}
else begin
OOCO0QOOQ0(12538,'ORA-12538: TNS:no such protocol adapter'#$A);
Result:=nil;
end;
end;
procedure OO00OQCOQ0.O0CC0QCOQ0(OOCC0QCOQ0,OQCC0QCOQ0,OCCC0QCOQ0,O0000QCOQ0:string;OO000QCOQ0:integer;OQ000QCOQ0:boolean);
var
OC000QCOQ0,O0O00QCOQ0,OOO00QCOQ0:integer;
OQO00QCOQ0:string;
OCO00QCOQ0:string;
O0Q00QCOQ0:integer;
OOQ00QCOQ0:string;
OQQ00QCOQ0:string;
OCQ00QCOQ0:string;
O0C00QCOQ0:string;
begin
OCC0CCC0Q0(O0O0OQCOQ0).O00QOQC0Q0:=AdvancedSecurity;
OQ00OQCOQ0:=OOQC0QCOQ0(O0000QCOQ0);
try
OQ00OQCOQ0.O0OQOCCOQ0(OOO0OQCOQ0,OQC0OQCOQ0,OCC0OQCOQ0,OO000QCOQ0,OQ0OOQCOQ0);
O0C00QCOQ0:='';
while True do begin
if O0C00QCOQ0<>'' then
OC0OOOCOQ0(OCC0CCC0Q0(O0O0OQCOQ0).O00QOQC0Q0,O0C00QCOQ0)
else
OC0OOOCOQ0(OCC0CCC0Q0(O0O0OQCOQ0).O00QOQC0Q0,OOC0OQCOQ0,OQC0OQCOQ0,OCC0OQCOQ0,OOCC0QCOQ0,OQCC0QCOQ0,OCCC0QCOQ0,O0000QCOQ0);
OOO00QCOQ0:=OQCQCQCOQ0(OC000QCOQ0,O0O00QCOQ0);
case OC000QCOQ0 of
OQCQOQCOQ0:begin
OOQCCQCOQ0;
if OCC0CCC0Q0(O0O0OQCOQ0).OQCQQCC0Q0 then begin
OCC0CCC0Q0(O0O0OQCOQ0).OO0QOQC0Q0.O0CO0QC0Q0:=OQ000QCOQ0;
OCC0CCC0Q0(O0O0OQCOQ0).OOOCQCC0Q0;
end
else
OCC0CCC0Q0(O0O0OQCOQ0).O00QOQC0Q0:=False;
break;
end;
OOOCOQCOQ0:
OQ00OQCOQ0.OOQQOCCOQ0;
O00COQCOQ0:begin
OQO00QCOQ0:=Encoding.Default.GetString(OQOOOQCOQ0,11,OOO00QCOQ0-11);
if OQO00QCOQ0<>'' then begin
OCO00QCOQ0:=OCC0CQOOQ0(OQO00QCOQ0,'ERR');
if not TryStrToInt(OCO00QCOQ0,O0Q00QCOQ0)then
O0Q00QCOQ0:=0;
if O0Q00QCOQ0=12505 then
OOCO0QOOQ0(12505,'ORA-12505: TNS:listener does not currently know of SID given in connect descriptor'#$A)
else if O0Q00QCOQ0=12514 then
OOCO0QOOQ0(12514,'ORA-12514: TNS:listener does not currently know of service requested in connect descriptor'#$A)
else if O0Q00QCOQ0=12518 then
OOCO0QOOQ0(12518,'ORA-12518: TNS:listener could not hand off client connection'#$A)
else if O0Q00QCOQ0=12541 then
OOCO0QOOQ0(12541,'ORA-12541: TNS:no listener'#$A)
else if O0Q00QCOQ0>0 then
OOCO0QOOQ0(O0Q00QCOQ0,'TNS:connection refused with error: ORA-'+OCO00QCOQ0+#$A)
else
OOCO0QOOQ0(12564,'TNS:connection refused'#$A)
end
else
OOCO0QOOQ0(12564,'TNS:connection refused'#$A)
end;
OO0COQCOQ0:begin
OCQ00QCOQ0:=OCCCCQCOQ0(OOO00QCOQ0,O0C00QCOQ0);
if OCQ00QCOQ0='' then
OCQO0QOOQ0('Invalid redirect adress');
OQ0Q0QCOQ0(OCQ00QCOQ0,OOQ00QCOQ0,OQC0OQCOQ0,OQQ00QCOQ0,O00OOQCOQ0,OO0OOQCOQ0);
if not TryStrToInt(OQQ00QCOQ0,OCC0OQCOQ0)then
OCQO0QOOQ0('Invalid port: '+OQQ00QCOQ0);
OQ00OQCOQ0.OQQQOCCOQ0;
OQ00OQCOQ0.O0OQOCCOQ0(OOO0OQCOQ0,OQC0OQCOQ0,OCC0OQCOQ0,OO000QCOQ0,OQ0OOQCOQ0);
end;
else
OOCO0QOOQ0(12561,'TNS:unknown error'#$A)
end;
end;
except
FreeAndNil(OQ00OQCOQ0);
raise;
end;
end;
procedure OO00OQCOQ0.OOC00QCOQ0(OQC00QCOQ0:TCRObjectList;OCC00QCOQ0:integer;O00O0QCOQ0:boolean);
procedure OO0O0QCOQ0(OQ0O0QCOQ0:TCRObjectList);
var
OC0O0QCOQ0:Integer;
O0OO0QCOQ0:OC0OC0QOQ0;
begin
O0C0OQCOQ0:='';
for OC0O0QCOQ0:=0 to OQ0O0QCOQ0.Count-1 do begin
if OC0O0QCOQ0>0 then
O0C0OQCOQ0:=O0C0OQCOQ0+',';
O0OO0QCOQ0:=OC0OC0QOQ0(OQ0O0QCOQ0[OC0O0QCOQ0]);
O0C0OQCOQ0:=O0C0OQCOQ0+O0OO0QCOQ0.Host+':'+O0OO0QCOQ0.Port;
end;
end;
var
OOOO0QCOQ0:Integer;
OQOO0QCOQ0:OC0OC0QOQ0;
OCOO0QCOQ0:string;
O0QO0QCOQ0:string;
OOQO0QCOQ0:EDBError;
OQQO0QCOQ0:SocketException;
OCQO0QCOQ0:Exception;
begin
OO0O0QCOQ0(OQC00QCOQ0);
if OCQ0OQCOQ0>=OQC00QCOQ0.Count then
OCQ0OQCOQ0:=0;
OOOO0QCOQ0:=OCQ0OQCOQ0;
OOQO0QCOQ0:=nil;
OQQO0QCOQ0:=nil;
OCQO0QCOQ0:=nil;
repeat
if OQC00QCOQ0.Count=0 then
OQOO0QCOQ0:=nil
else
OQOO0QCOQ0:=OC0OC0QOQ0(OQC00QCOQ0[OCQ0OQCOQ0]);
if OQOO0QCOQ0=nil then
OOC0OQCOQ0:='TCP'
else if OQOO0QCOQ0.Protocol='' then
OOC0OQCOQ0:='TCP'
else
OOC0OQCOQ0:=OQOO0QCOQ0.Protocol;
if OQOO0QCOQ0=nil then
OQC0OQCOQ0:='localhost'
else
OQC0OQCOQ0:=OQOO0QCOQ0.Host;
if OQOO0QCOQ0=nil then
OCC0OQCOQ0:=1521
else if OQOO0QCOQ0.Port='' then
OCC0OQCOQ0:=1521
else if not TryStrToInt(OQOO0QCOQ0.Port,OCC0OQCOQ0)then
OCQO0QOOQ0('Invalid port: '+OQOO0QCOQ0.Port);
if OQOO0QCOQ0=nil then begin
O00OOQCOQ0:='orcl';
OO0OOQCOQ0:='';
OCOO0QCOQ0:='';
O0QO0QCOQ0:='';
end
else begin
O00OOQCOQ0:=OQOO0QCOQ0.SID;
OO0OOQCOQ0:=OQOO0QCOQ0.ServiceName;
OCOO0QCOQ0:=OQOO0QCOQ0.OCOOC0QOQ0;
O0QO0QCOQ0:=OQOO0QCOQ0.O0QOC0QOQ0;
end;
try
O0CC0QCOQ0(O00OOQCOQ0,OO0OOQCOQ0,OCOO0QCOQ0,O0QO0QCOQ0,OCC00QCOQ0,O00O0QCOQ0);
break;
except
on E:Exception do begin
Inc(OCQ0OQCOQ0);
if OCQ0OQCOQ0>=OQC00QCOQ0.Count then
OCQ0OQCOQ0:=0;
if E is EDBError then begin
OOQO0QCOQ0.Free;
OOQO0QCOQ0:=EDBError(AcquireExceptionObject);
end
else if E is SocketException then begin
OQQO0QCOQ0.Free;
OQQO0QCOQ0:=SocketException(AcquireExceptionObject);
end
else begin
OCQO0QCOQ0.Free;
OCQO0QCOQ0:=Exception(AcquireExceptionObject);
end;
end;
end;
until OCQ0OQCOQ0=OOOO0QCOQ0;
if not OOCO0QCOQ0 then
if OOQO0QCOQ0<>nil then begin
OQQO0QCOQ0.Free;
OCQO0QCOQ0.Free;
raise OOQO0QCOQ0;
end
else if OQQO0QCOQ0<>nil then begin
OCQO0QCOQ0.Free;
raise OQQO0QCOQ0;
end
else if OCQO0QCOQ0<>nil then
raise OCQO0QCOQ0
else
OOCO0QOOQ0(0,'Connection was refused'#$A)
else begin
OOQO0QCOQ0.Free;
OQQO0QCOQ0.Free;
OCQO0QCOQ0.Free;
end;
end;
procedure OO00OQCOQ0.O0CO0QCOQ0;
begin
OQ0CCQCOQ0(64);
FreeAndNil(OQ00OQCOQ0);
OO0Q0QCOQ0;
end;
function OO00OQCOQ0.OOCO0QCOQ0:boolean;
begin
if OQ00OQCOQ0<>nil then
Result:=OQ00OQCOQ0.OOCCOCCOQ0
else
Result:=False;
end;
procedure OO00OQCOQ0.OO0Q0QCOQ0;
begin
O0C0OQCOQ0:='';
OQC0OQCOQ0:='';
OCC0OQCOQ0:=0;
O00OOQCOQ0:='';
OO0OOQCOQ0:='';
end;
procedure OO00OQCOQ0.OQ0Q0QCOQ0(OC0Q0QCOQ0:string;out O0OQ0QCOQ0,OOOQ0QCOQ0:string;out OQOQ0QCOQ0:string;var OCOQ0QCOQ0,O0QQ0QCOQ0:string);
var
OOQQ0QCOQ0:string;
OQQQ0QCOQ0:string;
begin
if OC0Q0QCOQ0<>'' then begin
O0OQ0QCOQ0:=OCC0CQOOQ0(OC0Q0QCOQ0,'PROTOCOL');
OOOQ0QCOQ0:=OCC0CQOOQ0(OC0Q0QCOQ0,'HOST');
OQOQ0QCOQ0:=OCC0CQOOQ0(OC0Q0QCOQ0,'PORT');
OOQQ0QCOQ0:=OCC0CQOOQ0(OC0Q0QCOQ0,'SID');
OQQQ0QCOQ0:=OCC0CQOOQ0(OC0Q0QCOQ0,'SERVICE_NAME');
if(OOQQ0QCOQ0<>'')or(OQQQ0QCOQ0<>'')then begin
if OOQQ0QCOQ0<>'' then begin
OCOQ0QCOQ0:=OOQQ0QCOQ0;
O0QQ0QCOQ0:='';
end;
if OQQQ0QCOQ0<>'' then begin
OCOQ0QCOQ0:='';
O0QQ0QCOQ0:=OQQQ0QCOQ0;
end;
end;
end;
end;
function OO00OQCOQ0.OCQQ0QCOQ0(const O0CQ0QCOQ0,OOCQ0QCOQ0:string;const OQCQ0QCOQ0:Integer;const OCCQ0QCOQ0,O00C0QCOQ0,OO0C0QCOQ0,OQ0C0QCOQ0:string;OC0C0QCOQ0:TObject):string;
var
O0OC0QCOQ0:string;
OOOC0QCOQ0:string;
OQOC0QCOQ0:string;
begin
Result:='(DESCRIPTION=(ADDRESS=(PROTOCOL='+UpperCase(O0CQ0QCOQ0)+')(HOST='+OOCQ0QCOQ0+')(PORT='+IntToStr(OQCQ0QCOQ0)+'))(CONNECT_DATA=';
if OO0C0QCOQ0<>'' then
Result:=Result+'(SERVER='+OO0C0QCOQ0+')';
if(OCCQ0QCOQ0<>'')or(O00C0QCOQ0='')then
Result:=Result+'(SID='+OCCQ0QCOQ0+')'
else
Result:=Result+'(SERVICE_NAME='+O00C0QCOQ0+')';
O0OC0QCOQ0:=StringReplace(OOCC0C0OQ0(OC0C0QCOQ0).OCQO0C0OQ0,'(','_',[rfReplaceAll]);
O0OC0QCOQ0:=StringReplace(O0OC0QCOQ0,')','_',[rfReplaceAll]);
OOOC0QCOQ0:=StringReplace(OOCC0C0OQ0(OC0C0QCOQ0).OCOO0C0OQ0,'(','_',[rfReplaceAll]);
OOOC0QCOQ0:=StringReplace(OOOC0QCOQ0,')','_',[rfReplaceAll]);
OQOC0QCOQ0:=StringReplace(OOCC0C0OQ0(OC0C0QCOQ0).OOQO0C0OQ0,'(','_',[rfReplaceAll]);
OQOC0QCOQ0:=StringReplace(OQOC0QCOQ0,')','_',[rfReplaceAll]);
Result:=Result+'(CID=(PROGRAM='+O0OC0QCOQ0+')'+
'(HOST='+OOOC0QCOQ0+')'+
'(USER='+OQOC0QCOQ0+')))';
if OQ0C0QCOQ0<>'' then
Result:=Result+'(SECURITY=(SSL_SERVER_CERT_DN='+OQ0C0QCOQ0+'))';
Result:=Result+')';
end;
procedure OO00OQCOQ0.OQCO0QCOQ0(const OCCO0QCOQ0:TBytes;O00QCQCOQ0:integer);
begin
if Length(OCCO0QCOQ0)=0 then
exit;
if OQ00OQCOQ0.OCCQOCCOQ0(@OCCO0QCOQ0[0],0,O00QCQCOQ0)<>O00QCQCOQ0 then
OOCO0QOOQ0(03113,'ORA-03113: end-of-file on communication channel'#$A);
{$IFDEF NETDIAG}
if Assigned(NetWriteCallback)then
NetWriteCallback(OCCO0QCOQ0,O00QCQCOQ0);
{$ENDIF}
end;
procedure OO00OQCOQ0.OO0QCQCOQ0(const OQ0QCQCOQ0:TBytes;OC0QCQCOQ0:integer);
begin
if Length(OQ0QCQCOQ0)=0 then
exit;
if OQ00OQCOQ0.OCOCOCCOQ0(@OQ0QCQCOQ0[0],0,OC0QCQCOQ0)<>OC0QCQCOQ0 then
OOCO0QOOQ0(03113,'ORA-03113: end-of-file on communication channel'#$A);
{$IFDEF NETDIAG}
if Assigned(NetWriteCallback)then
NetWriteCallback(OQ0QCQCOQ0,OC0QCQCOQ0);
{$ENDIF}
end;
function OO00OQCOQ0.O0OQCQCOQ0(var OOOQCQCOQ0:TBytes;OQOQCQCOQ0,OCOQCQCOQ0:integer):integer;
var
O0QQCQCOQ0:integer;
OOQQCQCOQ0:integer;
begin
O0QQCQCOQ0:=0;
while O0QQCQCOQ0<OCOQCQCOQ0 do begin
OOQQCQCOQ0:=OQ00OQCOQ0.OC0COCCOQ0(@OOOQCQCOQ0[0],OQOQCQCOQ0+O0QQCQCOQ0,OCOQCQCOQ0-O0QQCQCOQ0);
if OOQQCQCOQ0<=0 then begin
O0QQCQCOQ0:=0;
OOCO0QOOQ0(03113,'ORA-03113: end-of-file on communication channel'#$A);
end;
Inc(O0QQCQCOQ0,OOQQCQCOQ0);
end;
Result:=O0QQCQCOQ0;
end;
procedure OO00OQCOQ0.OQQQCQCOQ0(OCQQCQCOQ0,O0CQCQCOQ0,OOCQCQCOQ0:integer);
begin
if OCC0CCC0Q0(O0O0OQCOQ0).OCCOQCC0Q0 and(O0CQCQCOQ0<>OQOCOQCOQ0)and(OCQQCQCOQ0>10)then
OCQQCQCOQ0:=OCC0CCC0Q0(O0O0OQCOQ0).OOOOQCC0Q0(OCOOOQCOQ0,OCQQCQCOQ0);
OCOOOQCOQ0[0]:=OCQQCQCOQ0 div 256;
OCOOOQCOQ0[1]:=OCQQCQCOQ0 mod 256;
OCOOOQCOQ0[4]:=O0CQCQCOQ0;
OCOOOQCOQ0[5]:=OOCQCQCOQ0;
OO0QCQCOQ0(OCOOOQCOQ0,OCQQCQCOQ0);
end;
function OO00OQCOQ0.OQCQCQCOQ0(out OCCQCQCOQ0,O00CCQCOQ0:integer):integer;
var
OO0CCQCOQ0:integer;
begin
O0OQCQCOQ0(OQOOOQCOQ0,0,8);
OO0CCQCOQ0:=OQOOOQCOQ0[0];
OO0CCQCOQ0:=(OO0CCQCOQ0 shl 8)or OQOOOQCOQ0[1];
OCCQCQCOQ0:=OQOOOQCOQ0[4];
O00CCQCOQ0:=OQOOOQCOQ0[5];
if OCCQCQCOQ0>19 then
O00QCQOOQ0(204);
if OO0CCQCOQ0>Length(OQOOOQCOQ0)then
O00QCQOOQ0(203);
if OO0CCQCOQ0<8 then
O00QCQOOQ0(207);
Result:=O0OQCQCOQ0(OQOOOQCOQ0,8,OO0CCQCOQ0-8)+8;
if OCC0CCC0Q0(O0O0OQCOQ0).OCCOQCC0Q0 and(OCCQCQCOQ0<>OQOCOQCOQ0)and(OO0CCQCOQ0>10)then
Result:=OCC0CCC0Q0(O0O0OQCOQ0).OOQOQCC0Q0(OQOOOQCOQ0,Result);
{$IFDEF NETDIAG}
if Assigned(NetWriteCallback)then
NetReadCallback(OQOOOQCOQ0,Result);
{$ENDIF}
end;
procedure OO00OQCOQ0.OQ0CCQCOQ0(OC0CCQCOQ0:integer);
begin
OCOOOQCOQ0[8]:=OC0CCQCOQ0 div 256;
OCOOOQCOQ0[9]:=OC0CCQCOQ0 mod 256;
OQQQCQCOQ0(OQQOOQCOQ0,OQ0COQCOQ0,0);
OQQOOQCOQ0:=10;
end;
procedure OO00OQCOQ0.O0OCCQCOQ0;
var
OOOCCQCOQ0,OQOCCQCOQ0:integer;
OCOCCQCOQ0:boolean;
O0QCCQCOQ0:integer;
begin
OCOCCQCOQ0:=False;
if OQQOOQCOQ0>10 then begin
OQ0CCQCOQ0(0);
end;
while True do begin
OCQOOQCOQ0:=OQCQCQCOQ0(OOOCCQCOQ0,OQOCCQCOQ0);
if OCQOOQCOQ0<0 then
OCQOOQCOQ0:=0;
case OOOCCQCOQ0 of
OQ0COQCOQ0:begin
O0COOQCOQ0:=10;
if OCQOOQCOQ0<=O0COOQCOQ0 then
continue;
if OCOCCQCOQ0 then
if OQOOOQCOQ0[O0COOQCOQ0]=OQCC0OCOQ0 then begin
O0CQ0OCOQ0;
OCOCCQCOQ0:=False;
continue;
end
else if OQOOOQCOQ0[O0COOQCOQ0]=OQ0C0OCOQ0 then begin
Inc(O0COOQCOQ0);
OC0OQQCOQ0;
O0QCCQCOQ0:=OO0OQQCOQ0;
if O0QCCQCOQ0=1403 then
O0COOQCOQ0:=10
else begin
O0COOQCOQ0:=11;
raise O0CCOQCOQ0.Create('');
end;
end;
break;
end;
OQOCOQCOQ0:begin
OCOCCQCOQ0:=True;
OCCOOQCOQ0:=(OQOOOQCOQ0[8]=0)or(OQOOOQCOQ0[8]=1)and(OQOOOQCOQ0[10]<>2);
OQ0Q0OCOQ0;
OCC0CCC0Q0(O0O0OQCOQ0).OQCOQCC0Q0;
end;
else
O00QCQOOQ0(205);
end;
end;
end;
procedure OO00OQCOQ0.OOQCCQCOQ0;
var
OQQCCQCOQ0:Word;
OCQCCQCOQ0:Word;
O0CCCQCOQ0:Word;
OOCCCQCOQ0:Byte;
OQCCCQCOQ0:Byte;
begin
OQQCCQCOQ0:=(Word(OQOOOQCOQ0[8])shl 8)or Word(OQOOOQCOQ0[9]);
OCQCCQCOQ0:=(Word(OQOOOQCOQ0[10])shl 8)or Word(OQOOOQCOQ0[11]);
OC0OOQCOQ0:=(Word(OQOOOQCOQ0[12])shl 8)or Word(OQOOOQCOQ0[13]);
O0OOOQCOQ0:=(Word(OQOOOQCOQ0[14])shl 8)or Word(OQOOOQCOQ0[15]);
O0CCCQCOQ0:=(Word(OQOOOQCOQ0[16])shl 8)or Word(OQOOOQCOQ0[17]);
OOCCCQCOQ0:=OQOOOQCOQ0[22];
OQCCCQCOQ0:=OQOOOQCOQ0[23];
OCC0CCC0Q0(O0O0OQCOQ0).OCCQQCC0Q0(OQQCCQCOQ0,OCQCCQCOQ0,O0CCCQCOQ0,OOCCCQCOQ0,OQCCCQCOQ0);
if O0OOOQCOQ0<OC0OOQCOQ0 then
OC0OOQCOQ0:=O0OOOQCOQ0;
OOOOOQCOQ0:=OC0OOQCOQ0;
end;
function OO00OQCOQ0.OCCCCQCOQ0(O000CQCOQ0:Integer;out OO00CQCOQ0:string):string;
var
OQ00CQCOQ0:Integer;
OC00CQCOQ0:TBytes;
O0O0CQCOQ0:Integer;
begin
{$IFNDEF VER9P}
SetLength(OC00CQCOQ0,0);
{$ENDIF}
Result:='';
if O000CQCOQ0<10 then
Exit;
O0COOQCOQ0:=10;
OCQOOQCOQ0:=O000CQCOQ0;
OQ00CQCOQ0:=OQOOOQCOQ0[8];
OQ00CQCOQ0:=(OQ00CQCOQ0 shl 8)or OQOOOQCOQ0[9];
OC00CQCOQ0:=O0OOQQCOQ0(OQ00CQCOQ0);
O0O0CQCOQ0:=0;
while O0O0CQCOQ0<OQ00CQCOQ0 do begin
if OC00CQCOQ0[O0O0CQCOQ0]=0 then
Break;
Inc(O0O0CQCOQ0);
end;
if O0O0CQCOQ0<OQ00CQCOQ0 then begin
Result:=Encoding.Default.GetString(OC00CQCOQ0,0,O0O0CQCOQ0);
OO00CQCOQ0:=Encoding.Default.GetString(OC00CQCOQ0,O0O0CQCOQ0+1,OQ00CQCOQ0-O0O0CQCOQ0-1);
end
else begin
Result:=Encoding.Default.GetString(OC00CQCOQ0,0,OQ00CQCOQ0);
OO00CQCOQ0:='';
end;
end;
procedure OO00OQCOQ0.OOO0CQCOQ0;
begin
OOCOOQCOQ0[0]:=0;
OOCOOQCOQ0[1]:=0;
OOCOOQCOQ0[2]:=0;
OOCOOQCOQ0[3]:=1;
end;
procedure OO00OQCOQ0.OQO0CQCOQ0(OCO0CQCOQ0:Integer;O0Q0CQCOQ0:Boolean);
begin
OOOOOQCOQ0:=OC0OOQCOQ0;
if(OCO0CQCOQ0>0)or O0Q0CQCOQ0 then
OOOOOQCOQ0:=OOOOOQCOQ0-1;
if OCO0CQCOQ0>0 then
OOOOOQCOQ0:=OOOOOQCOQ0-OCO0CQCOQ0;
if O0Q0CQCOQ0 then begin
OOOOOQCOQ0:=OOOOOQCOQ0-11;
OOOOOQCOQ0:=OOOOOQCOQ0 and$FFFFFFF0;
OOOOOQCOQ0:=OOOOOQCOQ0+10;
end;
end;
procedure OO00OQCOQ0.OOQ0CQCOQ0(OQQ0CQCOQ0:IntPtr;OCQ0CQCOQ0:integer);
var
O0C0CQCOQ0:integer;
OOC0CQCOQ0:integer;
begin
Assert(O0COOQCOQ0=OCQOOQCOQ0);
while True do begin
O0C0CQCOQ0:=OOOOOQCOQ0-OQQOOQCOQ0;
if O0C0CQCOQ0>=OCQ0CQCOQ0 then
OOC0CQCOQ0:=OCQ0CQCOQ0
else
OOC0CQCOQ0:=O0C0CQCOQ0;
if OOC0CQCOQ0>0 then begin
case OOC0CQCOQ0 of
1:
OCOOOQCOQ0[OQQOOQCOQ0]:=PByte(OQQ0CQCOQ0)^;
2:
PWord(@OCOOOQCOQ0[OQQOOQCOQ0])^:=PWord(OQQ0CQCOQ0)^;
4:
PCardinal(@OCOOOQCOQ0[OQQOOQCOQ0])^:=PCardinal(OQQ0CQCOQ0)^;
{$IFDEF CPU64}
8:
PUInt64(@OCOOOQCOQ0[OQQOOQCOQ0])^:=PUInt64(OQQ0CQCOQ0)^;
{$ENDIF}
else
Move(OQQ0CQCOQ0^,OCOOOQCOQ0[OQQOOQCOQ0],OOC0CQCOQ0);
end;
Inc(OQQOOQCOQ0,OOC0CQCOQ0);
end;
if OCQ0CQCOQ0<=OOC0CQCOQ0 then
Exit;
OQ0CCQCOQ0(0);
OCQ0CQCOQ0:=OCQ0CQCOQ0-OOC0CQCOQ0;
OQQ0CQCOQ0:=IntPtr(NativeUInt(OQQ0CQCOQ0)+Cardinal(OOC0CQCOQ0));
end;
end;
procedure OO00OQCOQ0.OQC0CQCOQ0(OCC0CQCOQ0:byte);
begin
Assert(O0COOQCOQ0=OCQOOQCOQ0);
if OQQOOQCOQ0>=OOOOOQCOQ0 then
OQ0CCQCOQ0(0);
OCOOOQCOQ0[OQQOOQCOQ0]:=OCC0CQCOQ0;
Inc(OQQOOQCOQ0);
end;
procedure OO00OQCOQ0.O00OCQCOQ0(OO0OCQCOQ0:IntPtr;OQ0OCQCOQ0:integer);
var
OC0OCQCOQ0:integer;
O0OOCQCOQ0:integer;
begin
if OQ0OCQCOQ0<=0 then
Exit;
while True do begin
OC0OCQCOQ0:=OCQOOQCOQ0-O0COOQCOQ0;
if OC0OCQCOQ0<=0 then begin
O0OCCQCOQ0;
OC0OCQCOQ0:=OCQOOQCOQ0-O0COOQCOQ0;
if OC0OCQCOQ0<0 then
OOCO0QOOQ0(03113,'ORA-03113: end-of-file on communication channel'#$A);
end;
if OC0OCQCOQ0>=OQ0OCQCOQ0 then
O0OOCQCOQ0:=OQ0OCQCOQ0
else
O0OOCQCOQ0:=OC0OCQCOQ0;
case O0OOCQCOQ0 of
1:
PByte(OO0OCQCOQ0)^:=OQOOOQCOQ0[O0COOQCOQ0];
2:
PWord(OO0OCQCOQ0)^:=PWord(@OQOOOQCOQ0[O0COOQCOQ0])^;
4:
PCardinal(OO0OCQCOQ0)^:=PCardinal(@OQOOOQCOQ0[O0COOQCOQ0])^;
{$IFDEF CPU64}
8:
PUInt64(OO0OCQCOQ0)^:=PUInt64(@OQOOOQCOQ0[O0COOQCOQ0])^;
{$ENDIF}
else
Move(OQOOOQCOQ0[O0COOQCOQ0],OO0OCQCOQ0^,O0OOCQCOQ0);
end;
Inc(O0COOQCOQ0,O0OOCQCOQ0);
if OQ0OCQCOQ0<=O0OOCQCOQ0 then
Exit;
Dec(OQ0OCQCOQ0,O0OOCQCOQ0);
OO0OCQCOQ0:=IntPtr(NativeUInt(OO0OCQCOQ0)+Cardinal(O0OOCQCOQ0));
end;
end;
procedure OO00OQCOQ0.OOOOCQCOQ0(OQOOCQCOQ0:integer);
var
OCOOCQCOQ0:integer;
O0QOCQCOQ0:integer;
begin
if OQOOCQCOQ0<=0 then
Exit;
while True do begin
OCOOCQCOQ0:=OCQOOQCOQ0-O0COOQCOQ0;
if OCOOCQCOQ0<=0 then begin
O0OCCQCOQ0;
OCOOCQCOQ0:=OCQOOQCOQ0-O0COOQCOQ0;
if OCOOCQCOQ0<0 then
OOCO0QOOQ0(03113,'ORA-03113: end-of-file on communication channel'#$A);
end;
if OCOOCQCOQ0>=OQOOCQCOQ0 then
O0QOCQCOQ0:=OQOOCQCOQ0
else
O0QOCQCOQ0:=OCOOCQCOQ0;
Inc(O0COOQCOQ0,O0QOCQCOQ0);
if OQOOCQCOQ0<=O0QOCQCOQ0 then
Exit;
Dec(OQOOCQCOQ0,O0QOCQCOQ0);
end;
end;
function OO00OQCOQ0.OOQOCQCOQ0:byte;
begin
if O0COOQCOQ0>=OCQOOQCOQ0 then begin
O0OCCQCOQ0;
if O0COOQCOQ0>=OCQOOQCOQ0 then
OOCO0QOOQ0(03113,'ORA-03113: end-of-file on communication channel'#$A);
end;
Result:=OQOOOQCOQ0[O0COOQCOQ0];
Inc(O0COOQCOQ0);
end;
function OO00OQCOQ0.OQQOCQCOQ0:Byte;
begin
if O0COOQCOQ0>=OCQOOQCOQ0 then begin
O0OCCQCOQ0;
if O0COOQCOQ0>=OCQOOQCOQ0 then begin
Result:=0;
Exit;
end;
end;
Result:=OQOOOQCOQ0[O0COOQCOQ0];
end;
procedure OO00OQCOQ0.OCQOCQCOQ0(O0COCQCOQ0:ShortInt);
begin
OQC0CQCOQ0(Byte(O0COCQCOQ0));
end;
procedure OO00OQCOQ0.OOCOCQCOQ0(OQCOCQCOQ0:byte);
begin
OQC0CQCOQ0(OQCOCQCOQ0);
end;
procedure OO00OQCOQ0.OCCOCQCOQ0(O00QQQCOQ0:SmallInt);
begin
OO0QQQCOQ0(Word(O00QQQCOQ0));
end;
procedure OO00OQCOQ0.OO0QQQCOQ0(OQ0QQQCOQ0:Word);
begin
if OOCOOQCOQ0[1]=0 then begin
O0QOOQCOQ0[1]:=byte(OQ0QQQCOQ0);
O0QOOQCOQ0[0]:=byte(OQ0QQQCOQ0 shr 8);
OOQ0CQCOQ0(@O0QOOQCOQ0[0],2);
end
else begin
O0QOOQCOQ0[1]:=byte(OQ0QQQCOQ0 shr 8);
O0QOOQCOQ0[0]:=byte(OQ0QQQCOQ0);
if OQ0QQQCOQ0=0 then
OOQ0CQCOQ0(@O0QOOQCOQ0[0],1)
else
OOQ0CQCOQ0(@O0QOOQCOQ0[0],2);
end;
end;
procedure OO00OQCOQ0.OC0QQQCOQ0(O0OQQQCOQ0:Integer);
begin
OOOQQQCOQ0(Cardinal(O0OQQQCOQ0));
end;
procedure OO00OQCOQ0.OOOQQQCOQ0(OQOQQQCOQ0:Cardinal);
var
OCOQQQCOQ0:byte;
begin
if OOCOOQCOQ0[1]=0 then begin
O0QOOQCOQ0[3]:=byte(OQOQQQCOQ0);
O0QOOQCOQ0[2]:=byte(OQOQQQCOQ0 shr 8);
O0QOOQCOQ0[1]:=byte(OQOQQQCOQ0 shr 16);
O0QOOQCOQ0[0]:=byte(OQOQQQCOQ0 shr 24);
OOQ0CQCOQ0(@O0QOOQCOQ0[0],4);
end
else begin
OCOQQQCOQ0:=4;
while OQOQQQCOQ0<>0 do begin
O0QOOQCOQ0[OCOQQQCOQ0]:=Byte(OQOQQQCOQ0);
OQOQQQCOQ0:=OQOQQQCOQ0 shr 8;
Dec(OCOQQQCOQ0);
end;
O0QOOQCOQ0[OCOQQQCOQ0]:=4-OCOQQQCOQ0;
OOQ0CQCOQ0(@O0QOOQCOQ0[OCOQQQCOQ0],5-OCOQQQCOQ0);
end;
end;
procedure OO00OQCOQ0.O0QQQQCOQ0(OOQQQQCOQ0:Boolean);
begin
if OOQQQQCOQ0 then
OQC0CQCOQ0(1)
else
OQC0CQCOQ0(0);
end;
procedure OO00OQCOQ0.OQQQQQCOQ0(const OCQQQQCOQ0:TBytes);
var
O0CQQQCOQ0:Integer;
begin
O0CQQQCOQ0:=Length(OCQQQQCOQ0);
if O0CQQQCOQ0>0 then
O0OCQQCOQ0(@OCQQQQCOQ0[0],O0CQQQCOQ0);
end;
procedure OO00OQCOQ0.OOCQQQCOQ0(const OQCQQQCOQ0:string);
begin
if OQCQQQCOQ0<>'' then
OQQQQQCOQ0(Encoding.Default.GetBytes(OQCQQQCOQ0));
end;
procedure OO00OQCOQ0.OCCQQQCOQ0(const O00CQQCOQ0:TBytes);
var
OO0CQQCOQ0:integer;
begin
OO0CQQCOQ0:=Length(O00CQQCOQ0);
OOOQQQCOQ0(OO0CQQCOQ0);
if OO0CQQCOQ0>0 then
O0OCQQCOQ0(@O00CQQCOQ0[0],OO0CQQCOQ0);
end;
procedure OO00OQCOQ0.OQ0CQQCOQ0(const OC0CQQCOQ0:string);
begin
if OC0CQQCOQ0<>'' then
OCCQQQCOQ0(Encoding.Default.GetBytes(OC0CQQCOQ0));
end;
procedure OO00OQCOQ0.O0OCQQCOQ0(const OOOCQQCOQ0:TBytes);
var
OQOCQQCOQ0:Integer;
begin
OQOCQQCOQ0:=Length(OOOCQQCOQ0);
if OQOCQQCOQ0>0 then
O0OCQQCOQ0(@OOOCQQCOQ0[0],OQOCQQCOQ0)
else
O0OCQQCOQ0(nil,0)
end;
procedure OO00OQCOQ0.O0OCQQCOQ0(OCOCQQCOQ0:IntPtr;OQOCQQCOQ0:Integer);
var
O0QCQQCOQ0:integer;
begin
if OQOCQQCOQ0>252 then begin
OQC0CQCOQ0(254);
repeat
if OQOCQQCOQ0>255 then
O0QCQQCOQ0:=255
else
O0QCQQCOQ0:=OQOCQQCOQ0;
OQC0CQCOQ0(O0QCQQCOQ0);
OOQ0CQCOQ0(OCOCQQCOQ0,O0QCQQCOQ0);
OCOCQQCOQ0:=IntPtr(NativeUInt(OCOCQQCOQ0)+Cardinal(O0QCQQCOQ0));
Dec(OQOCQQCOQ0,O0QCQQCOQ0);
until OQOCQQCOQ0=0;
OQC0CQCOQ0(0);
end
else begin
if OQCOOQCOQ0=2 then
OQC0CQCOQ0(OQOCQQCOQ0);
if OQOCQQCOQ0>0 then
OOQ0CQCOQ0(OCOCQQCOQ0,OQOCQQCOQ0);
end;
end;
procedure OO00OQCOQ0.OOQCQQCOQ0(const OQQCQQCOQ0:OC0OOCCOQ0);
var
OCQCQQCOQ0:integer;
begin
OCQCQQCOQ0:=Length(OQQCQQCOQ0);
if OCQCQQCOQ0>0 then
OOQ0CQCOQ0(@OQQCQQCOQ0[0],OCQCQQCOQ0);
end;
procedure OO00OQCOQ0.O0CCQQCOQ0(const OOCCQQCOQ0:TBytes);
var
OQCCQQCOQ0:integer;
begin
OQCCQQCOQ0:=Length(OOCCQQCOQ0);
if OQCCQQCOQ0>0 then
OOQ0CQCOQ0(@OOCCQQCOQ0[0],OQCCQQCOQ0);
end;
procedure OO00OQCOQ0.OCCCQQCOQ0(const O000QQCOQ0:OQQCQCCOQ0);
var
OO00QQCOQ0:integer;
begin
for OO00QQCOQ0:=0 to Length(O000QQCOQ0)-1 do
OC0QQQCOQ0(O000QQCOQ0[OO00QQCOQ0]);
end;
procedure OO00OQCOQ0.OQ00QQCOQ0(const OC00QQCOQ0:TBytes);
var
O0O0QQCOQ0:integer;
begin
O0O0QQCOQ0:=Length(OC00QQCOQ0);
if O0O0QQCOQ0>0 then begin
OC0QQQCOQ0(O0O0QQCOQ0);
O0OCQQCOQ0(@OC00QQCOQ0[0],O0O0QQCOQ0);
end
else
OQC0CQCOQ0(0);
end;
procedure OO00OQCOQ0.OOO0QQCOQ0;
begin
OQC0CQCOQ0(1);
end;
procedure OO00OQCOQ0.OQO0QQCOQ0;
begin
OQC0CQCOQ0(0);
end;
procedure OO00OQCOQ0.OCO0QQCOQ0(const O0Q0QQCOQ0:integer);
var
OOQ0QQCOQ0:integer;
begin
for OOQ0QQCOQ0:=0 to O0Q0QQCOQ0-1 do
OOCOCQCOQ0(0);
end;
procedure OO00OQCOQ0.OQQ0QQCOQ0(OCQ0QQCOQ0:Byte;O0C0QQCOQ0:Integer);
begin
if O0C0QQCOQ0<OQQOOQCOQ0 then
OCOOOQCOQ0[O0C0QQCOQ0]:=OCQ0QQCOQ0;
end;
function OO00OQCOQ0.OOC0QQCOQ0:ShortInt;
begin
Result:=ShortInt(OOQOCQCOQ0);
end;
function OO00OQCOQ0.OQC0QQCOQ0:Byte;
begin
Result:=OOQOCQCOQ0;
end;
function OO00OQCOQ0.OCC0QQCOQ0:SmallInt;
begin
Result:=Smallint(OO00OOCOQ0(1));
end;
function OO00OQCOQ0.O00OQQCOQ0:Integer;
begin
case OQC0QQCOQ0 of
0:
Result:=0;
1:
Result:=Integer(OQC0QQCOQ0);
2:
Result:=Integer((OQC0QQCOQ0 shl 8)+OQC0QQCOQ0);
3:
Result:=Integer(((OQC0QQCOQ0 shl$10)+(OQC0QQCOQ0 shl 8))+OQC0QQCOQ0);
4:
Result:=((((OQC0QQCOQ0 shl$18)+(OQC0QQCOQ0 shl$10))+(OQC0QQCOQ0 shl$8))+OQC0QQCOQ0);
$81:
Result:=-Integer(OQC0QQCOQ0);
$82:
Result:=-Integer((OQC0QQCOQ0 shl$8)+OQC0QQCOQ0);
$83:
Result:=-Integer(((OQC0QQCOQ0 shl$10)+(OQC0QQCOQ0 shl$8))+OQC0QQCOQ0);
$84:
Result:=Integer(-(((OQC0QQCOQ0 shl$18)+(OQC0QQCOQ0 shl$10))+(OQC0QQCOQ0 shl$8))+OQC0QQCOQ0);
else begin
OQ0QCQOOQ0(1);
Result:=0;
end;
end;
end;
function OO00OQCOQ0.OO0OQQCOQ0:Word;
begin
Result:=Word(OO00OOCOQ0(1));
end;
function OO00OQCOQ0.OQ0OQQCOQ0:Integer;
begin
Result:=OO00OOCOQ0(2);
end;
function OO00OQCOQ0.OC0OQQCOQ0:Cardinal;
begin
Result:=Cardinal(OO00OOCOQ0(2));
end;
function OO00OQCOQ0.O0OOQQCOQ0(OOOOQQCOQ0:integer):TBytes;
begin
SetLength(Result,OOOOQQCOQ0);
if OOOOQQCOQ0>0 then
O00OCQCOQ0(@Result[0],OOOOQQCOQ0);
end;
function OO00OQCOQ0.OQOOQQCOQ0:TBytes;
var
OCOOQQCOQ0:Integer;
begin
OCOOQQCOQ0:=OCQOOQCOQ0-O0COOQCOQ0;
SetLength(Result,OCOOQQCOQ0);
if OCOOQQCOQ0>0 then
O00OCQCOQ0(@Result[0],OCOOQQCOQ0);
end;
function OO00OQCOQ0.O0QOQQCOQ0(OOQOQQCOQ0:integer):TBytes;
var
OQQOQQCOQ0:integer;
begin
if OQCOOQCOQ0=2 then
OQQOQQCOQ0:=OOQOCQCOQ0
else
OQQOQQCOQ0:=OOQOQQCOQ0;
if OQQOQQCOQ0<0 then
OQ0QCQOOQ0(1);
if OQQOQQCOQ0=0 then begin
Result:=nil;
Exit;
end;
SetLength(Result,OQQOQQCOQ0);
if OQQOQQCOQ0>0 then
O00OCQCOQ0(@Result[0],OQQOQQCOQ0);
end;
function OO00OQCOQ0.OCQOQQCOQ0(O0COQQCOQ0:integer):string;
var
OOCOQQCOQ0:TBytes;
begin
OOCOQQCOQ0:=O0QOQQCOQ0(O0COQQCOQ0);
if OOCOQQCOQ0<>nil then
Result:=Encoding.Default.GetString(OOCOQQCOQ0)
else
Result:='';
end;
function OO00OQCOQ0.OQCOQQCOQ0(out OCCOQQCOQ0:Integer):TBytes;
begin
OCCOQQCOQ0:=OC0OQQCOQ0;
SetLength(Result,OCCOQQCOQ0);
if OCCOQQCOQ0>0 then
OCCOQQCOQ0:=O0OQOOCOQ0(@Result[0],OCCOQQCOQ0);
end;
function OO00OQCOQ0.O00QOOCOQ0(OO0QOOCOQ0:Encoding):string;
var
OQ0QOOCOQ0:Integer;
OC0QOOCOQ0:TBytes;
begin
OC0QOOCOQ0:=OQCOQQCOQ0(OQ0QOOCOQ0);
if OQ0QOOCOQ0>0 then
Result:=OO0QOOCOQ0.GetString(OC0QOOCOQ0,0,OQ0QOOCOQ0)
else
Result:='';
end;
function OO00OQCOQ0.O0OQOOCOQ0:TBytes;
const
OOOQOOCOQ0=$2000000;
var
OQOQOOCOQ0:Byte;
OCOQOOCOQ0:Integer;
O0QQOOCOQ0:Byte;
begin
OQOQOOCOQ0:=OQC0QQCOQ0;
if OQOQOOCOQ0=0 then
Result:=nil
else if OQOQOOCOQ0<253 then begin
SetLength(Result,OQOQOOCOQ0);
O00OCQCOQ0(@Result[0],OQOQOOCOQ0);
end
else if OQOQOOCOQ0=253 then begin
Result:=nil;
OQ0QCQOOQ0(1);
end
else if OQOQOOCOQ0=254 then begin
OCOQOOCOQ0:=0;
SetLength(Result,256);
OQOQOOCOQ0:=OQC0QQCOQ0;
if OQOQOOCOQ0>252 then
O0QQOOCOQ0:=0
else
O0QQOOCOQ0:=254;
while OQOQOOCOQ0>0 do begin
if OQOQOOCOQ0<>O0QQOOCOQ0 then begin
if OCOQOOCOQ0+OQOQOOCOQ0>Length(Result)then
if Length(Result)<OOOQOOCOQ0 then
SetLength(Result,Length(Result)*2)
else
SetLength(Result,Length(Result)+OOOQOOCOQ0);
O00OCQCOQ0(@Result[OCOQOOCOQ0],OQOQOOCOQ0);
OCOQOOCOQ0:=OCOQOOCOQ0+OQOQOOCOQ0;
end;
OQOQOOCOQ0:=OQC0QQCOQ0;
end;
SetLength(Result,OCOQOOCOQ0);
end
else
Result:=nil;
end;
function OO00OQCOQ0.O0OQOOCOQ0(OOQQOOCOQ0:IntPtr;OQQQOOCOQ0:Integer):Integer;
var
OQOQOOCOQ0:Integer;
OCQQOOCOQ0:Integer;
O0QQOOCOQ0:Byte;
begin
OQOQOOCOQ0:=OQC0QQCOQ0;
if OQOQOOCOQ0=0 then
Result:=0
else if OQOQOOCOQ0<253 then begin
if OQQQOOCOQ0<OQOQOOCOQ0 then begin
O00OCQCOQ0(OOQQOOCOQ0,OQQQOOCOQ0);
OOOOCQCOQ0(OQOQOOCOQ0-OQQQOOCOQ0);
Result:=OQQQOOCOQ0;
end
else begin
O00OCQCOQ0(OOQQOOCOQ0,OQOQOOCOQ0);
Result:=OQOQOOCOQ0;
end;
end
else
if OQOQOOCOQ0=253 then begin
Result:=0;
OQ0QCQOOQ0(1);
end
else
if OQOQOOCOQ0=254 then begin
OCQQOOCOQ0:=OQQQOOCOQ0;
OQOQOOCOQ0:=OQC0QQCOQ0;
if OQOQOOCOQ0>252 then
O0QQOOCOQ0:=0
else
O0QQOOCOQ0:=254;
while OQOQOOCOQ0>0 do begin
if OQOQOOCOQ0<>O0QQOOCOQ0 then begin
if OQOQOOCOQ0>OCQQOOCOQ0 then begin
if OCQQOOCOQ0>0 then begin
O00OCQCOQ0(OOQQOOCOQ0,OCQQOOCOQ0);
OOOOCQCOQ0(OQOQOOCOQ0-OCQQOOCOQ0);
OOQQOOCOQ0:=IntPtr(NativeUInt(OOQQOOCOQ0)+Cardinal(OCQQOOCOQ0));
OCQQOOCOQ0:=0;
end
else
OOOOCQCOQ0(OQOQOOCOQ0);
end
else begin
O00OCQCOQ0(OOQQOOCOQ0,OQOQOOCOQ0);
Dec(OCQQOOCOQ0,OQOQOOCOQ0);
OOQQOOCOQ0:=IntPtr(NativeUInt(OOQQOOCOQ0)+Cardinal(OQOQOOCOQ0));
end;
end;
OQOQOOCOQ0:=OQC0QQCOQ0;
end;
Result:=OQQQOOCOQ0-OCQQOOCOQ0;
end
else
Result:=0;
end;
function OO00OQCOQ0.O0CQOOCOQ0:TBytes;
var
OOCQOOCOQ0:Integer;
begin
OOCQOOCOQ0:=OC0OQQCOQ0;
SetLength(Result,OOCQOOCOQ0);
if OOCQOOCOQ0>0 then begin
OOCQOOCOQ0:=O0OQOOCOQ0(@Result[0],OOCQOOCOQ0);
if OOCQOOCOQ0<Length(Result)then
SetLength(Result,OOCQOOCOQ0);
end;
end;
function OO00OQCOQ0.OQCQOOCOQ0(OCCQOOCOQ0:integer):TBytes;
var
O00COOCOQ0:integer;
OO0COOCOQ0:Byte;
begin
SetLength(Result,OCCQOOCOQ0);
O00COOCOQ0:=0;
while O00COOCOQ0<OCCQOOCOQ0 do begin
OO0COOCOQ0:=OOQOCQCOQ0;
if OO0COOCOQ0=$00 then
break;
Result[O00COOCOQ0+1]:=OO0COOCOQ0;
Inc(O00COOCOQ0);
end;
SetLength(Result,O00COOCOQ0);
end;
function OO00OQCOQ0.OQ0COOCOQ0(OC0COOCOQ0:integer):string;
var
O0OCOOCOQ0:TBytes;
begin
O0OCOOCOQ0:=OQCQOOCOQ0(OC0COOCOQ0);
if O0OCOOCOQ0<>nil then
Result:=Encoding.Default.GetString(O0OCOOCOQ0)
else
Result:='';
end;
procedure OO00OQCOQ0.OOOCOOCOQ0(OQOCOOCOQ0:PRowId81);
begin
OQOCOOCOQ0.ridobjnum:=Reverse4(OC0OQQCOQ0);
OQOCOOCOQ0.ridfilenum:=Reverse2(OO0OQQCOQ0);
OQOCOOCOQ0.filler:=OQC0QQCOQ0;
OQOCOOCOQ0.ridblocknum:=Reverse4(OC0OQQCOQ0);
OQOCOOCOQ0.ridslotnum:=Reverse2(OO0OQQCOQ0);
end;
procedure OO00OQCOQ0.OCOCOOCOQ0(var O0QCOOCOQ0:TRowId81;out OOQCOOCOQ0:TBytes);
var
OQQCOOCOQ0:Integer;
OCQCOOCOQ0:TBytes;
begin
OCQCOOCOQ0:=OQCOQQCOQ0(OQQCOOCOQ0);
if OQQCOOCOQ0>0 then
if OCQCOOCOQ0[0]=2 then begin
SetLength(OOQCOOCOQ0,OQQCOOCOQ0);
Move(OCQCOOCOQ0[1],OOQCOOCOQ0[0],OQQCOOCOQ0-1);
OOQCOOCOQ0[OQQCOOCOQ0-1]:=0;
end
else if(OCQCOOCOQ0[0]=1)and(OQQCOOCOQ0=13)then begin
O0QCOOCOQ0.filler:=0;
Move(OCQCOOCOQ0[1],(@O0QCOOCOQ0.ridobjnum)^,12);
end;
end;
procedure OO00OQCOQ0.O0CCOOCOQ0(OOCCOOCOQ0:integer);
begin
OOOOCQCOQ0(OOCCOOCOQ0);
end;
procedure OO00OQCOQ0.OQCCOOCOQ0(var OCCCOOCOQ0,O000OOCOQ0:string);
begin
OCCCOOCOQ0:=O00QOOCOQ0(Encoding.Default);
O000OOCOQ0:=O00QOOCOQ0(Encoding.Default);
OQ0OQQCOQ0;
end;
function OO00OQCOQ0.OO00OOCOQ0(OQ00OOCOQ0:byte):Integer;
var
OC00OOCOQ0:integer;
O0O0OOCOQ0:byte;
OOO0OOCOQ0:boolean;
begin
Result:=0;
OOO0OOCOQ0:=False;
if OOCOOQCOQ0[OQ00OOCOQ0]and 1>0 then begin
O0O0OOCOQ0:=OOQOCQCOQ0;
if O0O0OOCOQ0 and$80>0 then begin
O0O0OOCOQ0:=O0O0OOCOQ0 and$7F;
OOO0OOCOQ0:=True;
end;
end
else
if OQ00OOCOQ0=1 then
O0O0OOCOQ0:=2
else if OQ00OOCOQ0=2 then
O0O0OOCOQ0:=4
else
O0O0OOCOQ0:=0;
if O0O0OOCOQ0=0 then
Exit;
O00OCQCOQ0(@O0QOOQCOQ0[0],O0O0OOCOQ0);
if OOCOOQCOQ0[OQ00OOCOQ0]and 2>0 then begin
Result:=O0QOOQCOQ0[O0O0OOCOQ0-1];
for OC00OOCOQ0:=O0O0OOCOQ0-2 downto 0 do begin
Result:=Result shl 8;
Result:=Result or O0QOOQCOQ0[OC00OOCOQ0];
end;
end
else begin
Result:=O0QOOQCOQ0[0];
for OC00OOCOQ0:=1 to O0O0OOCOQ0-1 do begin
Result:=Result shl 8;
Result:=Result or O0QOOQCOQ0[OC00OOCOQ0];
end;
end;
if OOO0OOCOQ0 then
Result:=-Result;
end;
function OO00OQCOQ0.OQO0OOCOQ0(OCO0OOCOQ0:integer;var O0Q0OOCOQ0:TBytes;OOQ0OOCOQ0:byte):byte;
var
OQQ0OOCOQ0:boolean;
OCQ0OOCOQ0:byte;
O0C0OOCOQ0:integer;
begin
OQQ0OOCOQ0:=True;
OCQ0OOCOQ0:=0;
for O0C0OOCOQ0:=Length(O0Q0OOCOQ0)-1 downto 0 do begin
O0Q0OOCOQ0[OCQ0OOCOQ0]:=Byte(OCO0OOCOQ0 shr(8*O0C0OOCOQ0));
if OOCOOQCOQ0[OOQ0OOCOQ0]and 1>0 then begin
if not OQQ0OOCOQ0 or(O0Q0OOCOQ0[OCQ0OOCOQ0]<>0)then begin
OQQ0OOCOQ0:=False;
Inc(OCQ0OOCOQ0);
end;
end
else
Inc(OCQ0OOCOQ0);
end;
if OOCOOQCOQ0[OOQ0OOCOQ0]and 1>0 then
OQC0CQCOQ0(OCQ0OOCOQ0);
if OOCOOQCOQ0[OOQ0OOCOQ0]and 2>0 then
OOC0OOCOQ0(O0Q0OOCOQ0,OCQ0OOCOQ0);
Result:=OCQ0OOCOQ0;
end;
procedure OO00OQCOQ0.OOC0OOCOQ0(var OQC0OOCOQ0:TBytes;OCC0OOCOQ0:byte);
var
O00OOOCOQ0:integer;
OO0OOOCOQ0:byte;
begin
for O00OOOCOQ0:=0 to OCC0OOCOQ0 shr 1 do begin
OO0OOOCOQ0:=OQC0OOCOQ0[O00OOOCOQ0];
OQC0OOCOQ0[O00OOOCOQ0]:=OQC0OOCOQ0[OCC0OOCOQ0-1-O00OOOCOQ0];
OQC0OOCOQ0[OCC0OOCOQ0-1-O00OOOCOQ0]:=OO0OOOCOQ0;
end;
end;
procedure OO00OQCOQ0.OQ0OOOCOQ0;
begin
if not OOCO0QCOQ0 then
OOCO0QOOQ0(03114,'ORA-03114: not connected to ORACLE'#$A);
end;
procedure OO00OQCOQ0.OC0OOOCOQ0(O0OOOOCOQ0:Boolean;const OOOOOOCOQ0:string);
var
OQOOOOCOQ0:integer;
OCOOOOCOQ0:integer;
PacketSize:Integer;
O0QOOOCOQ0:Boolean;
OOQOOOCOQ0:TBytes;
begin
OOQOOOCOQ0:=Encoding.Default.GetBytes(OOOOOOCOQ0);
OCOOOOCOQ0:=Length(OOQOOOCOQ0);
PacketSize:=58;
if OCOOOOCOQ0>230 then begin
O0QOOOCOQ0:=True;
OQOOOOCOQ0:=PacketSize;
end
else begin
O0QOOOCOQ0:=False;
OQOOOOCOQ0:=PacketSize+OCOOOOCOQ0;
end;
FillChar(OCOOOQCOQ0,PacketSize+OCOOOOCOQ0+10,0);
OCOOOQCOQ0[0]:=OQOOOOCOQ0 div 256;
OCOOOQCOQ0[1]:=OQOOOOCOQ0 mod 256;
OCOOOQCOQ0[4]:=OOCQOQCOQ0;
OCOOOQCOQ0[5]:=0;
OCOOOQCOQ0[8]:=1;
OCOOOQCOQ0[9]:=$3A;
OCOOOQCOQ0[10]:=1;
OCOOOQCOQ0[11]:=$2C;
OCOOOQCOQ0[14]:=OC0OOQCOQ0 div 256;
OCOOOQCOQ0[15]:=OC0OOQCOQ0 mod 256;
OCOOOQCOQ0[16]:=O0OOOQCOQ0 div 256;
OCOOOQCOQ0[17]:=O0OOOQCOQ0 mod 256;
OCOOOQCOQ0[18]:=$4F;
OCOOOQCOQ0[19]:=$98;
OCOOOQCOQ0[23]:=1;
OCOOOQCOQ0[24]:=OCOOOOCOQ0 div 256;
OCOOOQCOQ0[25]:=OCOOOOCOQ0 mod 256;
OCOOOQCOQ0[27]:=PacketSize;
if O0OOOOCOQ0 then begin
OCOOOQCOQ0[32]:=1;
OCOOOQCOQ0[33]:=1;
end
else begin
OCOOOQCOQ0[32]:=4;
OCOOOQCOQ0[33]:=4;
end;
if O0QOOOCOQ0 then begin
OO0QCQCOQ0(OCOOOQCOQ0,OQOOOOCOQ0);
OQOOOOCOQ0:=OCOOOOCOQ0+10;
OCOOOQCOQ0[0]:=OQOOOOCOQ0 div 256;
OCOOOQCOQ0[1]:=OQOOOOCOQ0 mod 256;
OCOOOQCOQ0[4]:=OQ0COQCOQ0;
OCOOOQCOQ0[5]:=0;
OCOOOQCOQ0[8]:=0;
OCOOOQCOQ0[9]:=0;
Buffer.BlockCopy(OOQOOOCOQ0,0,OCOOOQCOQ0,10,OCOOOOCOQ0);
end
else
Buffer.BlockCopy(OOQOOOCOQ0,0,OCOOOQCOQ0,PacketSize,OCOOOOCOQ0);
OO0QCQCOQ0(OCOOOQCOQ0,OQOOOOCOQ0);
end;
procedure OO00OQCOQ0.OC0OOOCOQ0(O0OOOOCOQ0:Boolean;const OQQOOOCOQ0,OCQOOOCOQ0:string;const O0COOOCOQ0:Integer;const OOCOOOCOQ0,OQCOOOCOQ0,OCCOOOCOQ0,O00Q0OCOQ0:string);
var
OOOOOOCOQ0:string;
begin
OOOOOOCOQ0:=OCQQ0QCOQ0(OQQOOOCOQ0,OCQOOOCOQ0,O0COOOCOQ0,OOCOOOCOQ0,OQCOOOCOQ0,OCCOOOCOQ0,O00Q0OCOQ0,OC00OQCOQ0);
OC0OOOCOQ0(O0OOOOCOQ0,OOOOOOCOQ0);
end;
procedure OO00OQCOQ0.OO0Q0OCOQ0;
begin
OQ0OOOCOQ0;
OOOQ0OCOQ0(1);
end;
procedure OO00OQCOQ0.OQ0Q0OCOQ0;
var
OC0Q0OCOQ0,O0OQ0OCOQ0:integer;
begin
OQ0OOOCOQ0;
OOOQ0OCOQ0(2);
while OCCOOQCOQ0 do begin
OQCQCQCOQ0(OC0Q0OCOQ0,O0OQ0OCOQ0);
if(OC0Q0OCOQ0=OQOCOQCOQ0)and
(OCOOOQCOQ0[8]=1)and(OCOOOQCOQ0[10]=2)
then
OCCOOQCOQ0:=False;
end;
end;
procedure OO00OQCOQ0.OOOQ0OCOQ0(OQOQ0OCOQ0:integer);
procedure OCOQ0OCOQ0(var O0QQ0OCOQ0:TBytes;OOQQ0OCOQ0:Integer);
begin
O0QQ0OCOQ0[0]:=OOQQ0OCOQ0 div 256;
O0QQ0OCOQ0[1]:=OOQQ0OCOQ0 mod 256;
O0QQ0OCOQ0[4]:=OQOCOQCOQ0;
O0QQ0OCOQ0[5]:=0;
O0QQ0OCOQ0[8]:=1;
O0QQ0OCOQ0[10]:=OQOQ0OCOQ0;
end;
const
OQQQ0OCOQ0=11;
var
OCQQ0OCOQ0:TBytes;
begin
if OQOQ0OCOQ0=1 then begin
SetLength(OCQQ0OCOQ0,OQQQ0OCOQ0);
OCOQ0OCOQ0(OCQQ0OCOQ0,OQQQ0OCOQ0);
OQCO0QCOQ0(OCQQ0OCOQ0,OQQQ0OCOQ0);
end
else begin
OCOQ0OCOQ0(OCOOOQCOQ0,OQQQ0OCOQ0);
OQCO0QCOQ0(OCOOOQCOQ0,OQQQ0OCOQ0);
end;
end;
procedure OO00OQCOQ0.O0CQ0OCOQ0;
begin
OCOOOQCOQ0[10]:=OQCC0OCOQ0;
OQQOOQCOQ0:=11;
OQ0CCQCOQ0(0);
end;
function O0COCQOOQ0(OOCOCQOOQ0:string):integer;
var
OQCOCQOOQ0:integer;
begin
Result:=0;
OQCOCQOOQ0:=Pos('(1',OOCOCQOOQ0);
if OQCOCQOOQ0>0 then
try
Result:=StrToInt(Copy(OOCOCQOOQ0,OQCOCQOOQ0+1,Pos(')',OOCOCQOOQ0)-OQCOCQOOQ0-1));
except
end;
end;
function OOO0CQQOQ0.OOOCQOQOQ0(OQOCQOQOQ0:Exception;OCOCQOQOQ0:pOCIError;O0QCQOQOQ0:OOCCQ0COQ0=nil):sword;
var
OOQCQOQOQ0:integer;
OQQCQOQOQ0:OQ0CQ0COQ0;
OCQCQOQOQ0:integer;
begin
if OCOCQOQOQ0<>nil then begin
OQQCQOQOQ0:=OQ0CQ0COQ0(GetGCHandleTarget(OCOCQOQOQ0));
OQQCQOQOQ0.OC0CQ0COQ0:=-1;
if OQOCQOQOQ0 is EDBError then begin
OQQCQOQOQ0.OC0CQ0COQ0:=EDBError(OQOCQOQOQ0).Code;
OQQCQOQOQ0.O0OCQ0COQ0:=OQOCQOQOQ0.Message;
end
else if OQOCQOQOQ0 is SocketException then begin
OOQCQOQOQ0:=O0COCQOOQ0(OQOCQOQOQ0.Message);
case OOQCQOQOQ0 of
0:
OQQCQOQOQ0.O0OCQ0COQ0:='NET: Network error ('+OQOCQOQOQ0.Message+')';
WSAEADDRNOTAVAIL:
OQQCQOQOQ0.O0OCQ0COQ0:='NET: Invalid host';
WSAECONNRESET:begin
OQQCQOQOQ0.OC0CQ0COQ0:=03113;
OQQCQOQOQ0.O0OCQ0COQ0:='ORA-03113: end-of-file on communication channel'#$A;
end;
WSAETIMEDOUT:
OQQCQOQOQ0.O0OCQ0COQ0:='NET: Connection timed out';
WSAECONNREFUSED:
OQQCQOQOQ0.O0OCQ0COQ0:='NET: Service unavailable';
else
OQQCQOQOQ0.O0OCQ0COQ0:='NET: Network error ('+IntToStr(OOQCQOQOQ0-WSABASEERR)+')';
end;
OQQCQOQOQ0.O0OCQ0COQ0:=OQQCQOQOQ0.O0OCQ0COQ0+#13+'<Host = '+O0Q0CQQOQ0.O0C0OQCOQ0+'> ';
end
else if OQOCQOQOQ0 is ENetError then begin
case ENetError(OQOCQOQOQ0).Code of
0:begin
OQQCQOQOQ0.OC0CQ0COQ0:=12571;
OQQCQOQOQ0.O0OCQ0COQ0:='ORA-12571: TNS:packet writer failure'#$A;
end;
else
OQQCQOQOQ0.O0OCQ0COQ0:='NET: '+OQOCQOQOQ0.Message;
end;
end
else if OQOCQOQOQ0 is ENetError then begin
OQQCQOQOQ0.O0OCQ0COQ0:='NET: '+OQOCQOQOQ0.Message;
end
else if OQOCQOQOQ0 is O0CCOQCOQ0 then begin
Result:=OQQ0COQOQ0(OCOCQOQOQ0,OCQCQOQOQ0,O0QCQOQOQ0);
if(Result=-1)and(OCQCQOQOQ0=1403)then begin
Result:=OCI_NO_DATA;
Exit;
end;
end
else
OQQCQOQOQ0.O0OCQ0COQ0:='NET: '+OQOCQOQOQ0.Message;
end
else
if OQOCQOQOQ0 is O0CCOQCOQ0 then begin
Result:=OQQ0COQOQ0(OCOCQOQOQ0,OCQCQOQOQ0,O0QCQOQOQ0);
if(Result=-1)and(OCQCQOQOQ0=1403)then begin
Result:=OCI_NO_DATA;
Exit;
end;
end;
Result:=OCI_ERROR;
end;
function OOO0CQQOQ0.O00QCOQOQ0(OO0QCOQOQ0:TList;const OQ0QCOQOQ0:TBytes):O0CCQOCOQ0;
var
OC0QCOQOQ0:integer;
O0OQCOQOQ0:O0Q0QQOOQ0;
begin
for OC0QCOQOQ0:=0 to OO0QCOQOQ0.Count-1 do begin
O0OQCOQOQ0:=O0Q0QQOOQ0(GetGCHandleTarget(OO0QCOQOQ0[OC0QCOQOQ0]));
if CompareMem(@O0OQCOQOQ0.OOCQCOOOQ0[0],@OQ0QCOQOQ0[0],16)then begin
Result:=O0OQCOQOQ0;
exit;
end;
end;
Result:=nil;
end;
function OOO0CQQOQ0.O0O0QOQOQ0(const OOO0QOQOQ0:TBytes;OQO0QOQOQ0:pOCIError):O0CCQOCOQ0;
var
OCO0QOQOQ0:TList;
O0Q0QOQOQ0:string;
OOQ0QOQOQ0:O0Q0QQOOQ0;
begin
OCO0QOQOQ0:=O0OQQQQOQ0.LockList;
try
Result:=O0Q0QQOOQ0(O00QCOQOQ0(OCO0QOQOQ0,OOO0QOQOQ0));
if Result=nil then begin
OOQ0QOQOQ0:=O0Q0QQOOQ0.Create(Self,OOO0QOQOQ0);
try
OOQ0QOQOQ0.OQ000OOOQ0(OQO0QOQOQ0);
OOQ0QOQOQ0.OOOO0OOOQ0(OQO0QOQOQ0);
if OOQ0QOQOQ0.OOQQCOOOQ0<>'' then
O0Q0QOQOQ0:=OOQ0QOQOQ0.OOQQCOOOQ0+'.'+OOQ0QOQOQ0.OQQQCOOOQ0
else
O0Q0QOQOQ0:=OOQ0QOQOQ0.OQQQCOOOQ0;
OOOQQQQOQ0.AddObject(O0Q0QOQOQ0,OOQ0QOQOQ0);
OCO0QOQOQ0.Add(OOQ0QOQOQ0.OQQOQOCOQ0);
Result:=OOQ0QOQOQ0;
except
OOQ0QOQOQ0.Free;
raise;
end;
end;
finally
O0OQQQQOQ0.UnlockList;
end;
end;
function OOO0CQQOQ0.OQQ0QOQOQ0(const OCQ0QOQOQ0,O0C0QOQOQ0:string;OOC0QOQOQ0:pOCIError):O0CCQOCOQ0;
function OQC0QOQOQ0(const OCC0QOQOQ0,O00OQOQOQ0,OO0OQOQOQ0:string;OQ0OQOQOQ0:TList):O0CCQOCOQ0;
var
OC0OQOQOQ0,O0OOQOQOQ0:Integer;
OOOOQOQOQ0:O0Q0QQOOQ0;
begin
OOOOQOQOQ0:=O0Q0QQOOQ0.Create(Self,OCC0QOQOQ0,O00OQOQOQ0);
try
OOOOQOQOQ0.OQ000OOOQ0(OOC0QOQOQ0);
Result:=O00QCOQOQ0(OQ0OQOQOQ0,OOOOQOQOQ0.OOCQCOOOQ0);
if Result<>nil then
OOOQQQQOQ0.AddObject(OO0OQOQOQ0,Result)
else begin
OC0OQOQOQ0:=OOOQQQQOQ0.AddObject(OO0OQOQOQ0,OOOOQOQOQ0);
if OO0OQOQOQ0<>OOOOQOQOQ0.OOQQCOOOQ0+'.'+OOOOQOQOQ0.OQQQCOOOQ0 then
O0OOQOQOQ0:=OOOQQQQOQ0.AddObject(OOOOQOQOQ0.OOQQCOOOQ0+'.'+OOOOQOQOQ0.OQQQCOOOQ0,OOOOQOQOQ0)
else
O0OOQOQOQ0:=-1;
try
OOOOQOQOQ0.OOOO0OOOQ0(OOC0QOQOQ0);
except
OOOQQQQOQ0.Delete(OC0OQOQOQ0);
if O0OOQOQOQ0>=0 then
OOOQQQQOQ0.Delete(O0OOQOQOQ0);
raise;
end;
Result:=OOOOQOQOQ0;
OQ0OQOQOQ0.Add(Result.OQQOQOCOQ0);
OOOOQOQOQ0:=nil;
end;
finally
OOOOQOQOQ0.Free;
end;
end;
var
OQOOQOQOQ0:integer;
OCOOQOQOQ0:TList;
O0QOQOQOQ0:string;
begin
if OCQ0QOQOQ0<>'' then
O0QOQOQOQ0:=OCQ0QOQOQ0+'.'+O0C0QOQOQ0
else
O0QOQOQOQ0:=O0C0QOQOQ0;
OCOOQOQOQ0:=O0OQQQQOQ0.LockList;
try
for OQOOQOQOQ0:=0 to OOOQQQQOQ0.Count-1 do
if OOOQQQQOQ0[OQOOQOQOQ0]=O0QOQOQOQ0 then begin
Result:=O0CCQOCOQ0(OOOQQQQOQ0.Objects[OQOOQOQOQ0]);
Exit;
end;
Result:=OQC0QOQOQ0(OCQ0QOQOQ0,O0C0QOQOQ0,O0QOQOQOQ0,OCOOQOQOQ0);
finally
O0OQQQQOQ0.UnlockList;
end;
end;
procedure OOO0CQQOQ0.OOQOQOQOQ0;
var
OQQOQOQOQ0:integer;
OCQOQOQOQ0:TList;
begin
OCQOQOQOQ0:=O0OQQQQOQ0.LockList;
try
OOOQQQQOQ0.Clear;
for OQQOQOQOQ0:=0 to OCQOQOQOQ0.Count-1 do
O0CCQOCOQ0(GetGCHandleTarget(OCQOQOQOQ0[OQQOQOQOQ0])).OCQ0QOCOQ0;
OCQOQOQOQ0.Clear;
finally
O0OQQQQOQ0.UnlockList;
end;
end;
constructor O0CCQOCOQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0);
begin
inherited Create;
OOCCQOCOQ0:=OOQ0QOCOQ0;
end;
destructor O0CCQOCOQ0.Destroy;
begin
if O000QOCOQ0<>nil then
FreeGCHandle(O000QOCOQ0);
OQ00QOCOQ0;
inherited;
end;
function O0CCQOCOQ0.OO00QOCOQ0:IntPtr;
begin
if OQCCQOCOQ0=nil then
OQCCQOCOQ0:=AllocGCHandle(Self);
Result:=OQCCQOCOQ0;
end;
procedure O0CCQOCOQ0.OQ00QOCOQ0;
begin
if OQCCQOCOQ0<>nil then begin
FreeGCHandle(OQCCQOCOQ0);
OQCCQOCOQ0:=nil;
end;
end;
procedure O0CCQOCOQ0.OC00QOCOQ0(O0O0QOCOQ0:O0CQQ0COQ0;OOO0QOCOQ0:IntPtr;OQO0QOCOQ0:pub4;OCO0QOCOQ0:string);
begin
if O0O0QOCOQ0.O00CQ0COQ0 then begin
{$IFDEF IS_UNICODE}
OCCCQOCOQ0:=Encoding.Unicode.GetBytes(OCO0QOCOQ0);
{$ELSE}
OCCCQOCOQ0:=Encoding.Unicode.GetBytes(UTF8Decode(OCO0QOCOQ0));
{$ENDIF}
end
else
OCCCQOCOQ0:=Encoding.Default.GetBytes(OCO0QOCOQ0);
if O000QOCOQ0<>nil then
FreeGCHandle(O000QOCOQ0);
O000QOCOQ0:=AllocGCHandle(OCCCQOCOQ0,True);
Marshal.WriteIntPtr(OOO0QOCOQ0,GetAddrOfPinnedObject(O000QOCOQ0));
Marshal.WriteInt32(OQO0QOCOQ0,Length(OCCCQOCOQ0));
end;
procedure O0CCQOCOQ0.OCQ0QOCOQ0;
begin
{$IFDEF AUTOREFCOUNT}
OQ00QOCOQ0;
{$ELSE}
Self.Free;
{$ENDIF}
end;
function O0CCQOCOQ0.O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;
begin
Result:=OCI_INVALID_HANDLE;
end;
function O0CCQOCOQ0.OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;
begin
Result:=OCI_INVALID_HANDLE;
end;
function O0CCQOCOQ0.OQOOQOCOQ0(OCOOQOCOQ0:pOCIError;var O0QOQOCOQ0:pOCIParam;OOQOQOCOQ0:ub4):sword;
begin
Result:=OCI_INVALID_HANDLE;
end;
function O0COQOCOQ0.O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;
var
OOQCO0COQ0:O0CQQ0COQ0;
OQQCO0COQ0:OOO0CQQOQ0;
begin
OOQCO0COQ0:=O0CQQ0COQ0(OQ0CQ0COQ0(GetGCHandleTarget(O00OQOCOQ0)).OOCCQOCOQ0);
Result:=OCI_SUCCESS;
case OCC0QOCOQ0 of
OCI_ATTR_NAME:
OC00QOCOQ0(OOQCO0COQ0,OOC0QOCOQ0,OQC0QOCOQ0,OOCOQOCOQ0);
OCI_ATTR_DATA_TYPE:
Marshal.WriteInt16(OOC0QOCOQ0,OQCOQOCOQ0);
OCI_ATTR_DATA_SIZE:
Marshal.WriteInt32(OOC0QOCOQ0,Integer(OCCOQOCOQ0));
OCI_ATTR_CHAR_SIZE:
Marshal.WriteInt16(OOC0QOCOQ0,O00QO0COQ0);
OCI_ATTR_CHAR_USED:
Marshal.WriteInt16(OOC0QOCOQ0,OO0QO0COQ0);
OCI_ATTR_PRECISION:
Marshal.WriteInt16(OOC0QOCOQ0,OQ0QO0COQ0);
OCI_ATTR_SCALE:
Marshal.WriteByte(OOC0QOCOQ0,OC0QO0COQ0);
OCI_ATTR_FSPRECISION:
Marshal.WriteInt16(OOC0QOCOQ0,O0OQO0COQ0);
OCI_ATTR_IS_NULL:
Marshal.WriteByte(OOC0QOCOQ0,OOOQO0COQ0);
OCI_ATTR_CHARSET_FORM:
Marshal.WriteByte(OOC0QOCOQ0,O0OCO0COQ0);
OCI_ATTR_TYPE_NAME:begin
if(O0QCO0COQ0=nil)and(Length(OCOCO0COQ0)>0)then begin
OQQCO0COQ0:=OOCCQ0COQ0(OOCCQOCOQ0).OCCCQ0COQ0;
O0QCO0COQ0:=OQQCO0COQ0.O0O0QOQOQ0(OCOCO0COQ0,O00OQOCOQ0);
end;
if O0QCO0COQ0<>nil then
OC00QOCOQ0(OOQCO0COQ0,OOC0QOCOQ0,OQC0QOCOQ0,O0Q0QQOOQ0(O0QCO0COQ0).OQQQCOOOQ0)
else
Result:=OCI_ERROR;
end;
OCI_ATTR_SCHEMA_NAME:begin
if(O0QCO0COQ0=nil)and(Length(OCOCO0COQ0)>0)then begin
OQQCO0COQ0:=OOCCQ0COQ0(OOCCQOCOQ0).OCCCQ0COQ0;
O0QCO0COQ0:=OQQCO0COQ0.O0O0QOQOQ0(OCOCO0COQ0,O00OQOCOQ0);
end;
if O0QCO0COQ0<>nil then
OC00QOCOQ0(OOQCO0COQ0,OOC0QOCOQ0,OQC0QOCOQ0,O0Q0QQOOQ0(O0QCO0COQ0).OOQQCOOOQ0)
else
Result:=OCI_ERROR;
end;
else
Result:=inherited O0C0QOCOQ0(OOC0QOCOQ0,OQC0QOCOQ0,OCC0QOCOQ0,O00OQOCOQ0);
end;
end;
function O0COQOCOQ0.OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case O0OOQOCOQ0 of
OCI_ATTR_CHARSET_ID:
OC0CO0COQ0:=ub2(Marshal.ReadInt16(OQ0OQOCOQ0));
OCI_ATTR_CHARSET_FORM:
O0OCO0COQ0:=ub1(Marshal.ReadByte(OQ0OQOCOQ0));
OCI_ATTR_LOBPREFETCH_LENGTH:
OOOCO0COQ0:=ub2(Marshal.ReadInt16(OQ0OQOCOQ0));
OCI_ATTR_LOBPREFETCH_SIZE:begin
OQOCO0COQ0:=ub4(Marshal.ReadInt32(OQ0OQOCOQ0));
if OQOCO0COQ0>0 then
OOOCO0COQ0:=1;
end;
else
Result:=inherited OO0OQOCOQ0(OQ0OQOCOQ0,OC0OQOCOQ0,O0OOQOCOQ0,OOOOQOCOQ0);
end;
end;
constructor O0OC00QOQ0.Create(OCQC00QOQ0:integer;OQCCOQCOQ0:integer;OCCCOQCOQ0:string;O0CC00QOQ0:string;OOCC00QOQ0:string);
begin
inherited Create;
OOOC00QOQ0:=OCQC00QOQ0;
OQOC00QOQ0:=OQCCOQCOQ0;
OCOC00QOQ0:=OCCCOQCOQ0;
O0QC00QOQ0:=O0CC00QOQ0;
OOQC00QOQ0:=OOCC00QOQ0;
end;
function OQCC00QOQ0.O00000QOQ0(OO0000QOQ0:integer):O0OC00QOQ0;
begin
Result:=O0OC00QOQ0(OCCC00QOQ0[OO0000QOQ0]);
end;
constructor OQ0CQ0COQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0);
begin
inherited;
OOOCQ0COQ0:=OQCC00QOQ0.Create;
end;
destructor OQ0CQ0COQ0.Destroy;
begin
OOOCQ0COQ0.Free;
inherited;
end;
constructor O0QCQ0COQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0);
begin
inherited Create(OOQ0QOCOQ0);
OQQCQ0COQ0:=O0CQQ0COQ0(OOQ0QOCOQ0);
end;
function OO00CQQOQ0.OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case O0OOQOCOQ0 of
OCI_ATTR_USERNAME:
OQ00CQQOQ0:=O0CQCQOOQ0(O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0,OQ0OQOCOQ0,OC0OQOCOQ0);
OCI_ATTR_PASSWORD:
OC00CQQOQ0:=O0CQCQOOQ0(O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0,OQ0OQOCOQ0,OC0OQOCOQ0);
OCI_ATTR_CLIENT_IDENTIFIER:
O0O0CQQOQ0:=O0CQCQOOQ0(O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0,OQ0OQOCOQ0,OC0OQOCOQ0);
else
Result:=inherited OO0OQOCOQ0(OQ0OQOCOQ0,OC0OQOCOQ0,O0OOQOCOQ0,OOOOQOCOQ0);
end;
end;
procedure OC0OC0QOQ0.Clear;
begin
inherited;
O0OOC0QOQ0:='';
end;
constructor OOO0CQQOQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0);
begin
inherited;
O0Q0CQQOQ0:=OO00OQCOQ0.Create;
O0Q0CQQOQ0.OQCQ0OCOQ0:=O0CQQ0COQ0(OOQ0QOCOQ0).O00CQ0COQ0;
OOQ0CQQOQ0:=OCCCO0QOQ0.Create(O0Q0CQQOQ0);
OQ0QQQQOQ0:=TList.Create;
OC0QQQQOQ0:=TList.Create;
O0OQQQQOQ0:=TThreadList.Create;
OOOQQQQOQ0:=TStringList.Create;
OCOOCQQOQ0:=0;
OO0QQQQOQ0.tzIndex:=-1;
OO0QQQQOQ0.tzOffset:=GetLocalTimeZoneOffset;
O00OCQQOQ0:=not OldRxdMode;
end;
destructor OOO0CQQOQ0.Destroy;
begin
OOQ0CQQOQ0.OQO0O0QOQ0;
OOQ0CQQOQ0:=nil;
O0Q0CQQOQ0:=nil;
FreeAndNil(OQQ0CQQOQ0);
OOQOQOQOQ0;
FreeAndNil(OQ0QQQQOQ0);
FreeAndNil(OC0QQQQOQ0);
FreeAndNil(O0OQQQQOQ0);
FreeAndNil(OOOQQQQOQ0);
inherited;
end;
function OOO0CQQOQ0.OOQCCOQOQ0(OQQCCOQOQ0:pOCIError):integer;
var
OCQCCOQOQ0:Integer;
O0CCCOQOQ0:OOCCQ0COQ0;
OOCCCOQOQ0:pOCIBind;
OQCCCOQOQ0:OOQ0O0QOQ0;
OCCCCOQOQ0:string;
O000COQOQ0,OO00COQOQ0:TBytes;
OQ00COQOQ0,OC00COQOQ0:ub2;
O0O0COQOQ0:string;
OOO0COQOQ0:string;
OQO0COQOQ0:Integer;
begin
if OCOOCQQOQ0<>0 then begin
Result:=OCOOCQQOQ0;
Exit;
end;
OCCCCOQOQ0:='begin '+
'  SELECT Product, Version INTO :Product, :Version '+
'    FROM SYS.PRODUCT_COMPONENT_VERSION '+
'    WHERE Upper(Product) LIKE ''%ORACLE%''; '+
'end;';
O0CCCOQOQ0:=OOCCQ0COQ0.Create(OQO0CQQOQ0.OQQCQ0COQ0);
try
O0CCCOQOQ0.OCQ0Q0COQ0:=OCCCCOQOQ0;
O0CCCOQOQ0.OOC0Q0COQ0:=OCI_STMT_BEGIN;
OQCCCOQOQ0:=OOQ0O0QOQ0.Create(O0CCCOQOQ0);
O0CCCOQOQ0.OQO0Q0COQ0.Add(OQCCCOQOQ0);
O0CCCOQOQ0.O0Q0Q0COQ0.Add(OQCCCOQOQ0);
OQCCCOQOQ0.OOCOQOCOQ0:='Product';
OQCCCOQOQ0:=OOQ0O0QOQ0.Create(O0CCCOQOQ0);
O0CCCOQOQ0.OQO0Q0COQ0.Add(OQCCCOQOQ0);
O0CCCOQOQ0.O0Q0Q0COQ0.Add(OQCCCOQOQ0);
OQCCCOQOQ0.OOCOQOCOQ0:='Version';
OQ00COQOQ0:=0;
SetLength(O000COQOQ0,4001);
OCOO0QOOQ0(O0CCCOQOQ0.O0C00QQOQ0(OOCCCOQOQ0,OQQCCOQOQ0,1,@O000COQOQ0[0],4000,SQLT_VCS,nil,@OQ00COQOQ0,0,nil),OOCOQOQOQ0.O00CQ0COQ0,OQQCCOQOQ0);
OC00COQOQ0:=0;
SetLength(OO00COQOQ0,4001);
OCOO0QOOQ0(O0CCCOQOQ0.O0C00QQOQ0(OOCCCOQOQ0,OQQCCOQOQ0,2,@OO00COQOQ0[0],4000,SQLT_VCS,nil,@OC00COQOQ0,0,nil),OOCOQOQOQ0.O00CQ0COQ0,OQQCCOQOQ0);
O0CCCOQOQ0.OCCCQ0COQ0:=self;
OCOO0QOOQ0(O0CCCOQOQ0.OQQQCQQOQ0(OQQCCOQOQ0,1,0,OCI_DEFAULT),OOCOQOQOQ0.O00CQ0COQ0,OQQCCOQOQ0);
O0O0COQOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OOQQO0QOQ0),OOCOQOQOQ0.O00CQ0COQ0,@OO00COQOQ0[0],0,OC00COQOQ0);
Result:=0;
OOO0COQOQ0:='';
for OCQCCOQOQ0:=1 to Length(O0O0COQOQ0)do
if(O0O0COQOQ0[OCQCCOQOQ0]='.')then begin
if TryStrToInt(OOO0COQOQ0,OQO0COQOQ0)then
Result:=Result*10+OQO0COQOQ0
else begin
Result:=0;
Break;
end;
OOO0COQOQ0:='';
end
else
OOO0COQOQ0:=OOO0COQOQ0+O0O0COQOQ0[OCQCCOQOQ0];
OCOOCQQOQ0:=Result;
finally
O0CCCOQOQ0.Free;
end;
end;
procedure OOO0CQQOQ0.O00CQQQOQ0;
type
OO0CQQQOQ0=array[0..13]of byte;
const
OQ0CQQQOQ0:array[0..6]of byte=(OCQCCOCOQ0,OQQCCOCOQ0,OOQCCOCOQ0,3,2,1,0);
OC0CQQQOQ0:array[0..13]of byte=($4E,$45,$54,$5F,$54,$54,$43,$2D,$38,$2E,$31,$2E,$30,$00);
begin
O0COQOQOQ0.OOCOCQCOQ0(OCCQ0OCOQ0);
O0Q0CQQOQ0.O0CCQQCOQ0(DynArrayCreate(OQ0CQQQOQ0));
O0Q0CQQOQ0.O0CCQQCOQ0(DynArrayCreate(OC0CQQQOQ0));
end;
procedure OOO0CQQOQ0.O0OCQQQOQ0;
var
OOOCQQQOQ0,OQOCQQQOQ0:integer;
OCOCQQQOQ0:byte;
O0QCQQQOQ0:word;
OOQCQQQOQ0:word;
OQQCQQQOQ0:word;
OCQCQQQOQ0:TBytes;
begin
SetLength(OQC0CQQOQ0,0);
SetLength(OCC0CQQOQ0,0);
SetLength(OCQCQQQOQ0,0);
if O0Q0CQQOQ0.OOC0QQCOQ0<>OCCQ0OCOQ0 then
OQ0QCQOOQ0(1);
OCQ0CQQOQ0:=O0Q0CQQOQ0.OOC0QQCOQ0;
O0Q0CQQOQ0.OOC0QQCOQ0;
O0Q0CQQOQ0.OQ0COOCOQ0(50);
case OCQ0CQQOQ0 of
OOQCCOCOQ0:
O0C0CQQOQ0:=7230;
OQQCCOCOQ0:
O0C0CQQOQ0:=8030;
OCQCCOCOQ0:
O0C0CQQOQ0:=8100;
else
OQ0QCQOOQ0(444);
end;
OOQOCQQOQ0:=O0Q0CQQOQ0.OO0OQQCOQ0;
O0Q0CQQOQ0.OQC0QQCOQ0;
O0QCQQQOQ0:=O0Q0CQQOQ0.OO0OQQCOQ0;
if O0QCQQQOQ0>0 then
O0Q0CQQOQ0.O0OOQQCOQ0(O0QCQQQOQ0*5);
if OCQ0CQQOQ0>=OQQCCOCOQ0 then begin
OOQCQQQOQ0:=Word(O0Q0CQQOQ0.OQC0QQCOQ0)shl 8;
OOQCQQQOQ0:=OOQCQQQOQ0 or Word(O0Q0CQQOQ0.OQC0QQCOQ0);
OCQCQQQOQ0:=O0Q0CQQOQ0.O0OOQQCOQ0(OOQCQQQOQ0);
OQOCQQQOQ0:=(OCQCQQQOQ0[5]+OCQCQQQOQ0[6])+9;
OCQOCQQOQ0:=ub2((OCQCQQQOQ0[OQOCQQQOQ0]shl 8)or OCQCQQQOQ0[OQOCQQQOQ0+1]);
if OCQ0CQQOQ0>=OCQCCOCOQ0 then begin
OQQCQQQOQ0:=O0Q0CQQOQ0.OQC0QQCOQ0;
SetLength(OQC0CQQOQ0,OQQCQQQOQ0);
for OOOCQQQOQ0:=0 to OQQCQQQOQ0-1 do
OQC0CQQOQ0[OOOCQQQOQ0]:=O0Q0CQQOQ0.OQC0QQCOQ0;
OQQCQQQOQ0:=O0Q0CQQOQ0.OQC0QQCOQ0;
SetLength(OCC0CQQOQ0,OQQCQQQOQ0);
OCC0CQQOQ0:=O0Q0CQQOQ0.O0OOQQCOQ0(OQQCQQQOQ0);
if Length(OQC0CQQOQ0)>OCQOCOCOQ0 then begin
OCOCQQQOQ0:=OQC0CQQOQ0[OCQOCOCOQ0];
if OCOCQQQOQ0>OCQ0COCOQ0 then
OCOCQQQOQ0:=OCQ0COCOQ0;
end
else
OCOCQQQOQ0:=0;
OCQ0CQQOQ0:=OCQ0CQQOQ0+OCOCQQQOQ0;
case OCOCQQQOQ0 of
O0CCCOCOQ0:
O0C0CQQOQ0:=8200;
OOCCCOCOQ0:
O0C0CQQOQ0:=9020;
OQCCCOCOQ0:
O0C0CQQOQ0:=10100;
OCCCCOCOQ0:
O0C0CQQOQ0:=10200;
O000COCOQ0:
O0C0CQQOQ0:=11100;
OO00COCOQ0:
O0C0CQQOQ0:=11200;
OQ00COCOQ0:
O0C0CQQOQ0:=12000;
OC00COCOQ0:
O0C0CQQOQ0:=12100;
O0O0COCOQ0:
O0C0CQQOQ0:=12200;
OOO0COCOQ0:
O0C0CQQOQ0:=12200;
OQO0COCOQ0:
O0C0CQQOQ0:=18000;
OCO0COCOQ0:
O0C0CQQOQ0:=19000;
O0Q0COCOQ0:
O0C0CQQOQ0:=19000;
OOQ0COCOQ0:
O0C0CQQOQ0:=19000;
OQQ0COCOQ0:
O0C0CQQOQ0:=20000;
end;
end;
end;
end;
procedure OOO0CQQOQ0.O0CCQQQOQ0;
var
OOCCQQQOQ0:array of SmallInt;
procedure OQCCQQQOQ0(OCCCQQQOQ0,O000QQQOQ0,OO00QQQOQ0,OQ00QQQOQ0:SmallInt);
var
OC00QQQOQ0:SmallInt;
begin
if Length(OOCCQQQOQ0)<OOCCQQQOQ0[0]+4 then
SetLength(OOCCQQQOQ0,(Length(OOCCQQQOQ0)-1)*2+1);
OC00QQQOQ0:=OOCCQQQOQ0[0];
OOCCQQQOQ0[OC00QQQOQ0]:=OCCCQQQOQ0;
OOCCQQQOQ0[OC00QQQOQ0+1]:=OO00QQQOQ0;
if OO00QQQOQ0=0 then
OOCCQQQOQ0[0]:=OC00QQQOQ0+2
else begin
OOCCQQQOQ0[OC00QQQOQ0+2]:=OQ00QQQOQ0;
OOCCQQQOQ0[OC00QQQOQ0+3]:=0;
OOCCQQQOQ0[0]:=OC00QQQOQ0+4;
end;
end;
var
O0O0QQQOQ0:Integer;
begin
SetLength(OOCCQQQOQ0,2369);
OOCCQQQOQ0[0]:=1;
OQCCQQQOQ0(1,0,1,1);
OQCCQQQOQ0(2,0,2,10);
OQCCQQQOQ0(8,0,8,1);
OQCCQQQOQ0(12,0,12,10);
OQCCQQQOQ0(23,0,23,1);
OQCCQQQOQ0(24,0,24,1);
OQCCQQQOQ0(25,0,25,1);
OQCCQQQOQ0(26,0,26,1);
OQCCQQQOQ0(27,0,27,1);
OQCCQQQOQ0(28,0,28,1);
OQCCQQQOQ0(29,0,29,1);
OQCCQQQOQ0(30,0,30,1);
OQCCQQQOQ0(31,0,31,1);
OQCCQQQOQ0(32,0,32,1);
OQCCQQQOQ0(33,0,33,1);
OQCCQQQOQ0(10,1,10,1);
OQCCQQQOQ0(11,1,11,1);
OQCCQQQOQ0(40,1,40,1);
OQCCQQQOQ0(41,1,41,1);
OQCCQQQOQ0(117,1,117,1);
OQCCQQQOQ0(120,1,120,1);
OQCCQQQOQ0(290,1,290,1);
OQCCQQQOQ0(291,1,291,1);
OQCCQQQOQ0(292,1,292,1);
OQCCQQQOQ0(293,1,293,1);
OQCCQQQOQ0(294,1,294,1);
OQCCQQQOQ0(298,1,298,1);
OQCCQQQOQ0(299,1,299,1);
OQCCQQQOQ0(300,1,300,1);
OQCCQQQOQ0(301,1,301,1);
OQCCQQQOQ0(302,1,302,1);
OQCCQQQOQ0(303,1,303,1);
OQCCQQQOQ0(304,1,304,1);
OQCCQQQOQ0(305,1,305,1);
OQCCQQQOQ0(306,1,306,1);
OQCCQQQOQ0(307,1,307,1);
OQCCQQQOQ0(308,1,308,1);
OQCCQQQOQ0(309,1,309,1);
OQCCQQQOQ0(310,1,310,1);
OQCCQQQOQ0(311,1,311,1);
OQCCQQQOQ0(312,1,312,1);
OQCCQQQOQ0(313,1,313,1);
OQCCQQQOQ0(315,1,315,1);
OQCCQQQOQ0(316,1,316,1);
OQCCQQQOQ0(317,1,317,1);
OQCCQQQOQ0(318,1,318,1);
OQCCQQQOQ0(319,1,319,1);
OQCCQQQOQ0(320,1,320,1);
OQCCQQQOQ0(321,1,321,1);
OQCCQQQOQ0(322,1,322,1);
OQCCQQQOQ0(323,1,323,1);
OQCCQQQOQ0(327,1,327,1);
OQCCQQQOQ0(328,1,328,1);
OQCCQQQOQ0(329,1,329,1);
OQCCQQQOQ0(331,1,331,1);
OQCCQQQOQ0(333,1,333,1);
OQCCQQQOQ0(334,1,334,1);
OQCCQQQOQ0(335,1,335,1);
OQCCQQQOQ0(336,1,336,1);
OQCCQQQOQ0(337,1,337,1);
OQCCQQQOQ0(338,1,338,1);
OQCCQQQOQ0(339,1,339,1);
OQCCQQQOQ0(340,1,340,1);
OQCCQQQOQ0(341,1,341,1);
OQCCQQQOQ0(342,1,342,1);
OQCCQQQOQ0(343,1,343,1);
OQCCQQQOQ0(344,1,344,1);
OQCCQQQOQ0(345,1,345,1);
OQCCQQQOQ0(346,1,346,1);
OQCCQQQOQ0(348,1,348,1);
OQCCQQQOQ0(349,1,349,1);
OQCCQQQOQ0(354,1,354,1);
OQCCQQQOQ0(355,1,355,1);
OQCCQQQOQ0(359,1,359,1);
OQCCQQQOQ0(363,1,363,1);
OQCCQQQOQ0(380,1,380,1);
OQCCQQQOQ0(381,1,381,1);
OQCCQQQOQ0(382,1,382,1);
OQCCQQQOQ0(383,1,383,1);
OQCCQQQOQ0(384,1,384,1);
OQCCQQQOQ0(385,1,385,1);
OQCCQQQOQ0(386,1,386,1);
OQCCQQQOQ0(387,1,387,1);
OQCCQQQOQ0(388,1,388,1);
OQCCQQQOQ0(389,1,389,1);
OQCCQQQOQ0(390,1,390,1);
OQCCQQQOQ0(391,1,391,1);
OQCCQQQOQ0(393,1,393,1);
OQCCQQQOQ0(394,1,394,1);
OQCCQQQOQ0(395,1,395,1);
OQCCQQQOQ0(396,1,396,1);
OQCCQQQOQ0(397,1,397,1);
OQCCQQQOQ0(398,1,398,1);
OQCCQQQOQ0(399,1,399,1);
OQCCQQQOQ0(400,1,400,1);
OQCCQQQOQ0(401,1,401,1);
OQCCQQQOQ0(404,1,404,1);
OQCCQQQOQ0(405,1,405,1);
OQCCQQQOQ0(406,1,406,1);
OQCCQQQOQ0(407,1,407,1);
OQCCQQQOQ0(413,1,413,1);
OQCCQQQOQ0(414,1,414,1);
OQCCQQQOQ0(415,1,415,1);
OQCCQQQOQ0(416,1,416,1);
OQCCQQQOQ0(417,1,417,1);
OQCCQQQOQ0(418,1,418,1);
OQCCQQQOQ0(419,1,419,1);
OQCCQQQOQ0(420,1,420,1);
OQCCQQQOQ0(421,1,421,1);
OQCCQQQOQ0(422,1,422,1);
OQCCQQQOQ0(423,1,423,1);
OQCCQQQOQ0(424,1,424,1);
OQCCQQQOQ0(425,1,425,1);
OQCCQQQOQ0(426,1,426,1);
OQCCQQQOQ0(427,1,427,1);
OQCCQQQOQ0(429,1,429,1);
OQCCQQQOQ0(430,1,430,1);
OQCCQQQOQ0(431,1,431,1);
OQCCQQQOQ0(432,1,432,1);
OQCCQQQOQ0(433,1,433,1);
OQCCQQQOQ0(449,1,449,1);
OQCCQQQOQ0(450,1,450,1);
OQCCQQQOQ0(454,1,454,1);
OQCCQQQOQ0(455,1,455,1);
OQCCQQQOQ0(456,1,456,1);
OQCCQQQOQ0(457,1,457,1);
OQCCQQQOQ0(458,1,458,1);
OQCCQQQOQ0(459,1,459,1);
OQCCQQQOQ0(460,1,460,1);
OQCCQQQOQ0(461,1,461,1);
OQCCQQQOQ0(462,1,462,1);
OQCCQQQOQ0(463,1,463,1);
OQCCQQQOQ0(466,1,466,1);
OQCCQQQOQ0(467,1,467,1);
OQCCQQQOQ0(468,1,468,1);
OQCCQQQOQ0(469,1,469,1);
OQCCQQQOQ0(470,1,470,1);
OQCCQQQOQ0(471,1,471,1);
OQCCQQQOQ0(472,1,472,1);
OQCCQQQOQ0(473,1,473,1);
OQCCQQQOQ0(474,1,474,1);
OQCCQQQOQ0(475,1,475,1);
OQCCQQQOQ0(476,1,476,1);
OQCCQQQOQ0(477,1,477,1);
OQCCQQQOQ0(478,1,478,1);
OQCCQQQOQ0(479,1,479,1);
OQCCQQQOQ0(480,1,480,1);
OQCCQQQOQ0(481,1,481,1);
OQCCQQQOQ0(482,1,482,1);
OQCCQQQOQ0(483,1,483,1);
OQCCQQQOQ0(484,1,484,1);
OQCCQQQOQ0(485,1,485,1);
OQCCQQQOQ0(486,1,486,1);
OQCCQQQOQ0(490,1,490,1);
OQCCQQQOQ0(491,1,491,1);
OQCCQQQOQ0(492,1,492,1);
OQCCQQQOQ0(493,1,493,1);
OQCCQQQOQ0(494,1,494,1);
OQCCQQQOQ0(495,1,495,1);
OQCCQQQOQ0(496,1,496,1);
OQCCQQQOQ0(498,1,498,1);
OQCCQQQOQ0(499,1,499,1);
OQCCQQQOQ0(500,1,500,1);
OQCCQQQOQ0(501,1,501,1);
OQCCQQQOQ0(502,1,502,1);
OQCCQQQOQ0(509,1,509,1);
OQCCQQQOQ0(510,1,510,1);
OQCCQQQOQ0(513,1,513,1);
OQCCQQQOQ0(514,1,514,1);
OQCCQQQOQ0(516,1,516,1);
OQCCQQQOQ0(517,1,517,1);
OQCCQQQOQ0(518,1,518,1);
OQCCQQQOQ0(519,1,519,1);
OQCCQQQOQ0(520,1,520,1);
OQCCQQQOQ0(521,1,521,1);
OQCCQQQOQ0(522,1,522,1);
OQCCQQQOQ0(523,1,523,1);
OQCCQQQOQ0(524,1,524,1);
OQCCQQQOQ0(525,1,525,1);
OQCCQQQOQ0(526,1,526,1);
OQCCQQQOQ0(527,1,527,1);
OQCCQQQOQ0(528,1,528,1);
OQCCQQQOQ0(529,1,529,1);
OQCCQQQOQ0(530,1,530,1);
OQCCQQQOQ0(531,1,531,1);
OQCCQQQOQ0(532,1,532,1);
OQCCQQQOQ0(533,1,533,1);
OQCCQQQOQ0(534,1,534,1);
OQCCQQQOQ0(535,1,535,1);
OQCCQQQOQ0(536,1,536,1);
OQCCQQQOQ0(537,1,537,1);
OQCCQQQOQ0(538,1,538,1);
OQCCQQQOQ0(539,1,539,1);
OQCCQQQOQ0(540,1,540,1);
OQCCQQQOQ0(541,1,541,1);
OQCCQQQOQ0(542,1,542,1);
OQCCQQQOQ0(543,1,543,1);
OQCCQQQOQ0(560,1,560,1);
OQCCQQQOQ0(565,1,565,1);
OQCCQQQOQ0(572,1,572,1);
OQCCQQQOQ0(573,1,573,1);
OQCCQQQOQ0(574,1,574,1);
OQCCQQQOQ0(575,1,575,1);
OQCCQQQOQ0(576,1,576,1);
OQCCQQQOQ0(578,1,578,1);
OQCCQQQOQ0(580,1,580,1);
OQCCQQQOQ0(581,1,581,1);
OQCCQQQOQ0(582,1,582,1);
OQCCQQQOQ0(583,1,583,1);
OQCCQQQOQ0(584,1,584,1);
OQCCQQQOQ0(585,1,585,1);
OQCCQQQOQ0(3,0,2,10);
OQCCQQQOQ0(4,0,2,10);
OQCCQQQOQ0(5,0,1,1);
OQCCQQQOQ0(6,0,2,10);
OQCCQQQOQ0(7,0,2,10);
OQCCQQQOQ0(9,0,1,1);
OQCCQQQOQ0(13,0,0,0);
OQCCQQQOQ0(14,0,0,0);
OQCCQQQOQ0(15,0,23,1);
OQCCQQQOQ0(16,0,0,0);
OQCCQQQOQ0(17,0,0,0);
OQCCQQQOQ0(18,0,0,0);
OQCCQQQOQ0(19,0,0,0);
OQCCQQQOQ0(20,0,0,0);
OQCCQQQOQ0(21,0,0,0);
OQCCQQQOQ0(22,0,0,0);
OQCCQQQOQ0(39,0,120,1);
OQCCQQQOQ0(58,0,0,0);
OQCCQQQOQ0(68,0,2,10);
OQCCQQQOQ0(69,0,0,0);
OQCCQQQOQ0(70,0,0,0);
OQCCQQQOQ0(74,0,0,0);
OQCCQQQOQ0(76,0,0,0);
OQCCQQQOQ0(91,0,2,10);
OQCCQQQOQ0(94,0,1,1);
OQCCQQQOQ0(95,0,23,1);
OQCCQQQOQ0(96,0,96,1);
OQCCQQQOQ0(97,0,96,1);
OQCCQQQOQ0(100,0,100,1);
OQCCQQQOQ0(101,0,101,1);
OQCCQQQOQ0(102,0,102,1);
OQCCQQQOQ0(104,0,11,1);
OQCCQQQOQ0(105,0,0,0);
OQCCQQQOQ0(106,0,106,1);
OQCCQQQOQ0(108,0,109,1);
OQCCQQQOQ0(109,0,109,1);
OQCCQQQOQ0(110,0,111,1);
OQCCQQQOQ0(111,0,111,1);
OQCCQQQOQ0(112,0,112,1);
OQCCQQQOQ0(113,0,113,1);
OQCCQQQOQ0(114,0,114,1);
OQCCQQQOQ0(115,0,115,1);
OQCCQQQOQ0(116,0,102,1);
OQCCQQQOQ0(118,0,0,0);
OQCCQQQOQ0(119,0,0,0);
OQCCQQQOQ0(121,0,0,0);
OQCCQQQOQ0(122,0,0,0);
OQCCQQQOQ0(123,0,0,0);
OQCCQQQOQ0(136,0,0,0);
OQCCQQQOQ0(146,0,146,1);
OQCCQQQOQ0(147,0,0,0);
OQCCQQQOQ0(152,0,2,10);
OQCCQQQOQ0(153,0,2,10);
OQCCQQQOQ0(154,0,2,10);
OQCCQQQOQ0(155,0,1,1);
OQCCQQQOQ0(156,0,12,10);
OQCCQQQOQ0(172,0,2,10);
OQCCQQQOQ0(178,0,178,1);
OQCCQQQOQ0(179,0,179,1);
OQCCQQQOQ0(180,0,180,1);
OQCCQQQOQ0(181,0,181,1);
OQCCQQQOQ0(182,0,182,1);
OQCCQQQOQ0(183,0,183,1);
OQCCQQQOQ0(184,0,12,10);
OQCCQQQOQ0(185,0,185,1);
OQCCQQQOQ0(186,0,186,1);
OQCCQQQOQ0(187,0,187,1);
OQCCQQQOQ0(188,0,188,1);
OQCCQQQOQ0(189,0,189,1);
OQCCQQQOQ0(190,0,190,1);
OQCCQQQOQ0(191,0,0,0);
OQCCQQQOQ0(192,0,0,0);
OQCCQQQOQ0(195,0,112,1);
OQCCQQQOQ0(196,0,113,1);
OQCCQQQOQ0(197,0,114,1);
OQCCQQQOQ0(208,0,208,1);
OQCCQQQOQ0(209,0,0,0);
OQCCQQQOQ0(231,0,231,1);
OQCCQQQOQ0(232,0,231,1);
OQCCQQQOQ0(233,0,233,1);
OQCCQQQOQ0(241,0,109,1);
OQCCQQQOQ0(515,0,0,0);
OQCCQQQOQ0(590,1,590,1);
OQCCQQQOQ0(591,1,591,1);
OQCCQQQOQ0(592,1,592,1);
OQCCQQQOQ0(613,1,613,1);
OQCCQQQOQ0(614,1,614,1);
OQCCQQQOQ0(615,1,615,1);
OQCCQQQOQ0(616,1,616,1);
OQCCQQQOQ0(611,1,611,1);
OQCCQQQOQ0(593,1,593,1);
OQCCQQQOQ0(594,1,594,1);
OQCCQQQOQ0(595,1,595,1);
OQCCQQQOQ0(596,1,596,1);
OQCCQQQOQ0(597,1,597,1);
OQCCQQQOQ0(598,1,598,1);
OQCCQQQOQ0(599,1,599,1);
OQCCQQQOQ0(600,1,600,1);
OQCCQQQOQ0(601,1,601,1);
OQCCQQQOQ0(602,1,602,1);
OQCCQQQOQ0(603,1,603,1);
OQCCQQQOQ0(604,1,604,1);
OQCCQQQOQ0(605,1,605,1);
OQCCQQQOQ0(622,1,622,1);
OQCCQQQOQ0(623,1,623,1);
OQCCQQQOQ0(624,1,624,1);
OQCCQQQOQ0(625,1,625,1);
OQCCQQQOQ0(626,1,626,1);
OQCCQQQOQ0(627,1,627,1);
OQCCQQQOQ0(628,1,628,1);
OQCCQQQOQ0(629,1,629,1);
OQCCQQQOQ0(630,1,630,1);
OQCCQQQOQ0(631,1,631,1);
OQCCQQQOQ0(632,1,632,1);
for O0O0QQQOQ0:=1 to OOCCQQQOQ0[0]do
O0COQOQOQ0.OO0QQQCOQ0(OOCCQQQOQ0[O0O0QQQOQ0]);
end;
procedure OOO0CQQOQ0.OOO0QQQOQ0(OQO0QQQOQ0:byte;OCO0QQQOQ0:boolean=false);
const
O0Q0QQQOQ0:array[0..692]of byte=(
$01,$01,$01,$00,$02,$02,$0A,$00,$08,$08,$01,$00,$0C,$0C,$0A,$00,
$17,$17,$01,$00,$18,$18,$01,$00,$19,$19,$01,$00,$1A,$1A,$01,$00,
$1B,$1B,$01,$00,$1C,$1C,$01,$00,$1D,$1D,$01,$00,$1E,$1E,$01,$00,
$1F,$1F,$01,$00,$20,$20,$01,$00,$21,$21,$01,$00,$0A,$0A,$01,$00,
$0B,$0B,$01,$00,$22,$22,$01,$00,$23,$23,$01,$00,$24,$24,$01,$00,
$25,$25,$01,$00,$26,$26,$01,$00,$28,$28,$01,$00,$29,$29,$01,$00,
$2A,$2A,$01,$00,$2B,$2B,$01,$00,$2C,$2C,$01,$00,$2D,$2D,$01,$00,
$2E,$2E,$01,$00,$2F,$2F,$01,$00,$30,$30,$01,$00,$31,$31,$01,$00,
$32,$32,$01,$00,$33,$33,$01,$00,$34,$34,$01,$00,$35,$35,$01,$00,
$36,$36,$01,$00,$37,$37,$01,$00,$38,$38,$01,$00,$39,$39,$01,$00,
$3A,$3A,$01,$00,$3B,$3B,$01,$00,$3C,$3C,$01,$00,$3D,$3D,$01,$00,
$3E,$3E,$01,$00,$3F,$3F,$01,$00,$40,$40,$01,$00,$41,$41,$01,$00,
$42,$42,$01,$00,$43,$43,$01,$00,$47,$47,$01,$00,$48,$48,$01,$00,
$49,$49,$01,$00,$4B,$4B,$01,$00,$4D,$4D,$01,$00,$4E,$4E,$01,$00,
$4F,$4F,$01,$00,$50,$50,$01,$00,$51,$51,$01,$00,$52,$52,$01,$00,
$53,$53,$01,$00,$54,$54,$01,$00,$55,$55,$01,$00,$56,$56,$01,$00,
$57,$57,$01,$00,$59,$59,$01,$00,$5A,$5A,$01,$00,$5C,$5C,$01,$00,
$5D,$5D,$01,$00,$62,$62,$01,$00,$63,$63,$01,$00,$67,$67,$01,$00,
$6B,$6B,$01,$00,$75,$75,$01,$00,$78,$78,$01,$00,$7C,$7C,$01,$00,
$7D,$7D,$01,$00,$7E,$7E,$01,$00,$7F,$7F,$01,$00,$80,$80,$01,$00,
$81,$81,$01,$00,$82,$82,$01,$00,$83,$83,$01,$00,$84,$84,$01,$00,
$85,$85,$01,$00,$86,$86,$01,$00,$87,$87,$01,$00,$88,$88,$01,$00,
$89,$89,$01,$00,$8A,$8A,$01,$00,$8B,$8B,$01,$00,$8C,$8C,$01,$00,
$8D,$8D,$01,$00,$8E,$8E,$01,$00,$8F,$8F,$01,$00,$90,$90,$01,$00,
$91,$91,$01,$00,$94,$94,$01,$00,$95,$95,$01,$00,$96,$96,$01,$00,
$97,$97,$01,$00,$9D,$9D,$01,$00,$9E,$9E,$01,$00,$9F,$9F,$01,$00,
$A0,$A0,$01,$00,$A1,$A1,$01,$00,$A2,$A2,$01,$00,$A3,$A3,$01,$00,
$A4,$A4,$01,$00,$A5,$A5,$01,$00,$A6,$A6,$01,$00,$A7,$A7,$01,$00,
$A8,$A8,$01,$00,$A9,$A9,$01,$00,$AA,$AA,$01,$00,$AB,$AB,$01,$00,
$AD,$AD,$01,$00,$AE,$AE,$01,$00,$AF,$AF,$01,$00,$B0,$B0,$01,$00,
$B1,$B1,$01,$00,$B4,$B4,$01,$00,$B5,$B5,$01,$00,$B6,$B6,$01,$00,
$B7,$B7,$01,$00,$E7,$E7,$01,$00,$03,$02,$0A,$00,$04,$02,$0A,$00,
$05,$01,$01,$00,$06,$02,$0A,$00,$07,$02,$0A,$00,$09,$01,$01,$00,
$0D,$00,$0E,$00,$0F,$17,$01,$00,$10,$00,$11,$00,$12,$00,$13,$00,
$14,$00,$15,$00,$16,$00,$27,$78,$01,$5D,$01,$26,$01,$00,$3A,$00,
$44,$02,$0A,$00,$45,$00,$46,$00,$4A,$00,$4C,$00,$58,$00,$5B,$02,
$0A,$00,$5E,$01,$01,$00,$5F,$17,$01,$00,$60,$60,$01,$00,$61,$60,
$01,$00,$64,$00,$65,$00,$66,$66,$01,$00,$68,$00,$69,$00,$6A,$6A,
$01,$00,$6B,$00,$6C,$6D,$01,$00,$6D,$6D,$01,$00,$6E,$6F,$01,$00,
$6F,$6F,$01,$00,$70,$70,$01,$00,$71,$71,$01,$00,$72,$72,$01,$00,
$73,$73,$01,$00,$74,$66,$01,$00,$76,$00,$77,$00,$79,$00,$7A,$00,
$7B,$00,$88,$00,$92,$92,$01,$00,$93,$00,$98,$02,$0A,$00,$99,$02,
$0A,$00,$9A,$02,$0A,$00,$9B,$01,$01,$00,$9C,$0C,$0A,$00,$AC,$02,
$0A,$00,$AE,$00,$00);
OOQ0QQQOQ0:array[0..1132]of byte=(
$01,$01,$01,$00,$02,$02,$0A,$00,$08,$08,$01,$00,$0C,$0C,$0A,$00,
$17,$17,$01,$00,$18,$18,$01,$00,$19,$19,$01,$00,$1A,$1A,$01,$00,
$1B,$1B,$01,$00,$1C,$1C,$01,$00,$1D,$1D,$01,$00,$1E,$1E,$01,$00,
$1F,$1F,$01,$00,$20,$20,$01,$00,$21,$21,$01,$00,$0A,$0A,$01,$00,
$0B,$0B,$01,$00,$28,$28,$01,$00,$29,$29,$01,$00,$75,$75,$01,$00,
$78,$78,$01,$00,$22,$22,$01,$00,$23,$23,$01,$00,$24,$24,$01,$00,
$25,$25,$01,$00,$26,$26,$01,$00,$2A,$2A,$01,$00,$2B,$2B,$01,$00,
$2C,$2C,$01,$00,$2D,$2D,$01,$00,$2E,$2E,$01,$00,$2F,$2F,$01,$00,
$30,$30,$01,$00,$31,$31,$01,$00,$32,$32,$01,$00,$33,$33,$01,$00,
$34,$34,$01,$00,$35,$35,$01,$00,$36,$36,$01,$00,$37,$37,$01,$00,
$38,$38,$01,$00,$39,$39,$01,$00,$3B,$3B,$01,$00,$3C,$3C,$01,$00,
$3D,$3D,$01,$00,$3E,$3E,$01,$00,$3F,$3F,$01,$00,$40,$40,$01,$00,
$41,$41,$01,$00,$42,$42,$01,$00,$43,$43,$01,$00,$47,$47,$01,$00,
$48,$48,$01,$00,$49,$49,$01,$00,$4B,$4B,$01,$00,$4D,$4D,$01,$00,
$4E,$4E,$01,$00,$4F,$4F,$01,$00,$50,$50,$01,$00,$51,$51,$01,$00,
$52,$52,$01,$00,$53,$53,$01,$00,$54,$54,$01,$00,$55,$55,$01,$00,
$56,$56,$01,$00,$57,$57,$01,$00,$58,$58,$01,$00,$59,$59,$01,$00,
$5A,$5A,$01,$00,$5C,$5C,$01,$00,$5D,$5D,$01,$00,$62,$62,$01,$00,
$63,$63,$01,$00,$67,$67,$01,$00,$6B,$6B,$01,$00,$7C,$7C,$01,$00,
$7D,$7D,$01,$00,$7E,$7E,$01,$00,$7F,$7F,$01,$00,$80,$80,$01,$00,
$81,$81,$01,$00,$82,$82,$01,$00,$83,$83,$01,$00,$84,$84,$01,$00,
$85,$85,$01,$00,$86,$86,$01,$00,$87,$87,$01,$00,$89,$89,$01,$00,
$8A,$8A,$01,$00,$8B,$8B,$01,$00,$8C,$8C,$01,$00,$8D,$8D,$01,$00,
$8E,$8E,$01,$00,$8F,$8F,$01,$00,$90,$90,$01,$00,$91,$91,$01,$00,
$94,$94,$01,$00,$95,$95,$01,$00,$96,$96,$01,$00,$97,$97,$01,$00,
$9D,$9D,$01,$00,$9E,$9E,$01,$00,$9F,$9F,$01,$00,$A0,$A0,$01,$00,
$A1,$A1,$01,$00,$A2,$A2,$01,$00,$A3,$A3,$01,$00,$A4,$A4,$01,$00,
$A5,$A5,$01,$00,$A6,$A6,$01,$00,$A7,$A7,$01,$00,$A8,$A8,$01,$00,
$A9,$A9,$01,$00,$AA,$AA,$01,$00,$AB,$AB,$01,$00,$AD,$AD,$01,$00,
$AE,$AE,$01,$00,$AF,$AF,$01,$00,$B0,$B0,$01,$00,$B1,$B1,$01,$00,
$C1,$C1,$01,$00,$C2,$C2,$01,$00,$C6,$C6,$01,$00,$C7,$C7,$01,$00,
$C8,$C8,$01,$00,$C9,$C9,$01,$00,$CA,$CA,$01,$00,$CB,$CB,$01,$00,
$CC,$CC,$01,$00,$CD,$CD,$01,$00,$CE,$CE,$01,$00,$CF,$CF,$01,$00,
$D2,$D2,$01,$00,$D3,$D3,$01,$00,$D4,$D4,$01,$00,$D5,$D5,$01,$00,
$D6,$D6,$01,$00,$D7,$D7,$01,$00,$D8,$D8,$01,$00,$D9,$D9,$01,$00,
$DA,$DA,$01,$00,$DB,$DB,$01,$00,$DC,$DC,$01,$00,$DD,$DD,$01,$00,
$DE,$DE,$01,$00,$DF,$DF,$01,$00,$E0,$E0,$01,$00,$E1,$E1,$01,$00,
$E2,$E2,$01,$00,$E3,$E3,$01,$00,$E4,$E4,$01,$00,$E5,$E5,$01,$00,
$E6,$E6,$01,$00,$EA,$EA,$01,$00,$EB,$EB,$01,$00,$EC,$EC,$01,$00,
$ED,$ED,$01,$00,$EE,$EE,$01,$00,$EF,$EF,$01,$00,$F0,$F0,$01,$00,
$F2,$F2,$01,$00,$F3,$F3,$01,$00,$F4,$F4,$01,$00,$F5,$F5,$01,$00,
$F6,$F6,$01,$00,$FD,$FD,$01,$00,$FE,$FE,$01,$00,$01,$01,$01,$00,
$02,$02,$01,$00,$04,$04,$01,$00,$05,$05,$01,$00,$06,$06,$01,$00,
$07,$07,$01,$00,$08,$08,$01,$00,$09,$09,$01,$00,$0A,$0A,$01,$00,
$0B,$0B,$01,$00,$0C,$0C,$01,$00,$0D,$0D,$01,$00,$0E,$0E,$01,$00,
$0F,$0F,$01,$00,$10,$10,$01,$00,$11,$11,$01,$00,$12,$12,$01,$00,
$13,$13,$01,$00,$14,$14,$01,$00,$15,$15,$01,$00,$16,$16,$01,$00,
$17,$17,$01,$00,$18,$18,$01,$00,$19,$19,$01,$00,$1A,$1A,$01,$00,
$1B,$1B,$01,$00,$1C,$1C,$01,$00,$1D,$1D,$01,$00,$1E,$1E,$01,$00,
$1F,$1F,$01,$00,$30,$30,$01,$00,$35,$35,$01,$00,$3C,$3C,$01,$00,
$3D,$3D,$01,$00,$3E,$3E,$01,$00,$3F,$3F,$01,$00,$40,$40,$01,$00,
$42,$42,$01,$00,$44,$44,$01,$00,$45,$45,$01,$00,$46,$46,$01,$00,
$47,$47,$01,$00,$48,$48,$01,$00,$49,$49,$01,$00,$03,$02,$0A,$00,
$04,$02,$0A,$00,$05,$01,$01,$00,$06,$02,$0A,$00,$07,$02,$0A,$00,
$09,$01,$01,$00,$0D,$00,$0E,$00,$0F,$17,$01,$00,$10,$00,$11,$00,
$12,$00,$13,$00,$14,$00,$15,$00,$16,$00,$27,$78,$01,$00,$3A,$00,
$44,$02,$0A,$00,$45,$00,$46,$00,$4A,$00,$4C,$00,$5B,$02,$0A,$00,
$5E,$01,$01,$00,$5F,$17,$01,$00,$60,$60,$01,$00,$61,$60,$01,$00,
$64,$64,$01,$00,$65,$65,$01,$00,$66,$66,$01,$00,$68,$0B,$01,$00,
$69,$00,$6A,$6A,$01,$00,$6C,$6D,$01,$00,$6D,$6D,$01,$00,$6E,$6F,
$01,$00,$6F,$6F,$01,$00,$70,$70,$01,$00,$71,$71,$01,$00,$72,$72,
$01,$00,$73,$73,$01,$00,$74,$66,$01,$00,$76,$00,$77,$00,$79,$00,
$7A,$00,$7B,$00,$88,$00,$92,$92,$01,$00,$93,$00,$98,$02,$0A,$00,
$99,$02,$0A,$00,$9A,$02,$0A,$00,$9B,$01,$01,$00,$9C,$0C,$0A,$00,
$AC,$02,$0A,$00,$B2,$B2,$01,$00,$B3,$B3,$01,$00,$B4,$B4,$01,$00,
$B5,$B5,$01,$00,$B6,$B6,$01,$00,$B7,$B7,$01,$00,$B8,$0C,$0A,$00,
$B9,$B9,$01,$00,$BA,$BA,$01,$00,$BB,$BB,$01,$00,$BC,$BC,$01,$00,
$BD,$BD,$01,$00,$BE,$BE,$01,$00,$BF,$00,$C0,$00,$C3,$70,$01,$00,
$C4,$71,$01,$00,$C5,$72,$01,$00,$D0,$D0,$01,$00,$D1,$00,$E7,$E7,
$01,$00,$E8,$E7,$01,$00,$E9,$E9,$01,$00,$F1,$6D,$01,$00,$03,$00,
$4E,$4E,$01,$00,$4F,$4F,$01,$00,$50,$50,$01,$00,$00);
OQQ0QQQOQ0:array[0..37]of byte=(
$00,
$00,
$00,
$00,
$0F,
$00,
$00,
$07,
$00,
$00,
$00,
$00,
$00,
$00,
$00,
$00,
$00,
$03,
$00,
$00,
$00,
$00,
$00,
$01,
$00,
$00,
$05,
$01,
$00,
$00,
$00,
$00,
$00,
$00,
$00,
$00,
$02,
$1A
);
OCQ0QQQOQ0:array[0..6]of byte=(
$02,$01,$00,$00,$00,$00,$06);
O0C0QQQOQ0:array[0..1]of byte=(
$D0,$07);
var
OOC0QQQOQ0:TBytes;
OQC0QQQOQ0:TBytes;
OCC0QQQOQ0:Tbytes;
O00OQQQOQ0:Integer;
begin
SetLength(OOC0QQQOQ0,0);
SetLength(OQC0QQQOQ0,0);
O0Q0CQQOQ0.OOCOCQCOQ0(O00C0OCOQ0);
O0Q0CQQOQ0.OO0QQQCOQ0(OCCOCQQOQ0);
O0Q0CQQOQ0.OO0QQQCOQ0(OCCOCQQOQ0);
O0Q0CQQOQ0.OQCOOQCOQ0:=2;
O0Q0CQQOQ0.OOCOCQCOQ0(O0Q0CQQOQ0.OQCOOQCOQ0);
if OCQ0CQQOQ0>=OCQCCOCOQ0 then begin
if OCQ0CQQOQ0>=OQ0OCOCOQ0 then begin
OOC0QQQOQ0:=DynArrayCreate(OQQ0QQQOQ0);
OQC0QQQOQ0:=DynArrayCreate(OCQ0QQQOQ0);
end
else begin
SetLength(OOC0QQQOQ0,24);
Move(OQQ0QQQOQ0[0],OOC0QQQOQ0[0],Length(OOC0QQQOQ0));
SetLength(OQC0QQQOQ0,1);
Move(OCQ0QQQOQ0[0],OQC0QQQOQ0[0],Length(OQC0QQQOQ0));
end;
if Length(OOC0QQQOQ0)>=24 then begin
if OCQ0CQQOQ0>=OQC0COCOQ0 then
OOC0QQQOQ0[23]:=OOC0QQQOQ0[23]or$02;
if OCQ0CQQOQ0>=O00OCOCOQ0 then
OOC0QQQOQ0[23]:=OOC0QQQOQ0[23]or$40;
end;
if Length(OQC0CQQOQ0)>=5 then begin
if not OldAuthMode and(OCQ0CQQOQ0>=OQ0OCOCOQ0)then
OOC0QQQOQ0[4]:=$2F
else if OCO0QQQOQ0 then
OOC0QQQOQ0[4]:=$05
else
OOC0QQQOQ0[4]:=$0F;
OOC0QQQOQ0[4]:=OOC0QQQOQ0[4]and OQC0CQQOQ0[4];
end;
if O00OCQQOQ0 then
OOC0QQQOQ0[15]:=$28;
O0Q0CQQOQ0.OOCOCQCOQ0(Length(OOC0QQQOQ0));
O0Q0CQQOQ0.O0CCQQCOQ0(OOC0QQQOQ0);
O0Q0CQQOQ0.OOCOCQCOQ0(Length(OQC0QQQOQ0));
O0Q0CQQOQ0.O0CCQQCOQ0(OQC0QQQOQ0);
end;
if OCQ0CQQOQ0>=OQ0OCOCOQ0 then begin
SetLength(OCC0QQQOQ0,15);
O00OQQQOQ0:=-GetLocalTimeZoneOffset;
OCC0QQQOQ0[0]:=$80;
OCC0QQQOQ0[4]:=O00OQQQOQ0 div 60+60;
OCC0QQQOQ0[5]:=O00OQQQOQ0 mod 60+60;
OCC0QQQOQ0[6]:=0;
OCC0QQQOQ0[7]:=$80;
OCC0QQQOQ0[14]:=OQO0QQQOQ0;
O0Q0CQQOQ0.O0CCQQCOQ0(OCC0QQQOQ0);
O0Q0CQQOQ0.O0CCQQCOQ0(DynArrayCreate(O0C0QQQOQ0));
end;
if OCQ0CQQOQ0<OQQCCOCOQ0 then
O0Q0CQQOQ0.O0CCQQCOQ0(DynArrayCreate(O0Q0QQQOQ0))
else if OCQ0CQQOQ0<OQ0OCOCOQ0 then
O0Q0CQQOQ0.O0CCQQCOQ0(DynArrayCreate(OOQ0QQQOQ0))
else begin
O0Q0CQQOQ0.OOCOOQCOQ0[0]:=0;
O0Q0CQQOQ0.OOCOOQCOQ0[1]:=0;
O0Q0CQQOQ0.OOCOOQCOQ0[2]:=1;
O0Q0CQQOQ0.OOCOOQCOQ0[3]:=1;
O0CCQQQOQ0;
end;
end;
procedure OOO0CQQOQ0.OO0OQQQOQ0(OQ0OQQQOQ0:byte);
var
OC0OQQQOQ0:integer;
O0OOQQQOQ0:Word;
OOOOQQQOQ0:TBytes;
OQOOQQQOQ0:byte;
begin
{$IFNDEF VER9P}
SetLength(OOOOQQQOQ0,0);
{$ENDIF}
if O0Q0CQQOQ0.OOC0QQCOQ0<>O00C0OCOQ0 then
OQ0QCQOOQ0(1);
if OCQ0CQQOQ0>=OQ0OCOCOQ0 then begin
OOOOQQQOQ0:=O0Q0CQQOQ0.O0OOQQCOQ0(15);
OQOOQQQOQ0:=OOOOQQQOQ0[14];
if OQOOQQQOQ0<>OQ0OQQQOQ0 then
OO0OCQQOQ0:=True
else
OO0OCQQOQ0:=False;
end
else
OO0OCQQOQ0:=False;
OC0OQQQOQ0:=0;
repeat
if OCQ0CQQOQ0<OQ0OCOCOQ0 then
O0OOQQQOQ0:=O0Q0CQQOQ0.OQC0QQCOQ0
else
O0OOQQQOQ0:=O0Q0CQQOQ0.OO0OQQCOQ0;
if O0OOQQQOQ0<>0 then
OC0OQQQOQ0:=0
else
Inc(OC0OQQQOQ0);
until OC0OQQQOQ0>=2;
O0Q0CQQOQ0.OOCOOQCOQ0[0]:=0;
O0Q0CQQOQ0.OOCOOQCOQ0[1]:=1;
O0Q0CQQOQ0.OOCOOQCOQ0[2]:=1;
O0Q0CQQOQ0.OOCOOQCOQ0[3]:=1;
end;
function OOO0CQQOQ0.OQOQQQQOQ0:O0CQQ0COQ0;
begin
Result:=O0CQQ0COQ0(OOCCQOCOQ0);
end;
function OOO0CQQOQ0.OCOQQQQOQ0:OO00OQCOQ0;
begin
if not OOQ0CQQOQ0.O0Q0O0QOQ0 then
OOCO0QOOQ0(12571,'ORA-12571: TNS:packet writer failure'#$A);
Result:=OO00OQCOQ0(OOQ0CQQOQ0.OQ00O0QOQ0);
end;
procedure OOO0CQQOQ0.OCOOQQQOQ0;
begin
O0Q0CQQOQ0.OOCOCQCOQ0(OO0C0OCOQ0);
O0Q0CQQOQ0.OOCOCQCOQ0(OQC00OCOQ0);
O0Q0CQQOQ0.O0QQQQCOQ0(false);
O0Q0CQQOQ0.O0QQQQCOQ0(true);
O0Q0CQQOQ0.OC0QQQCOQ0(256);
O0Q0CQQOQ0.O0QQQQCOQ0(true);
O0Q0CQQOQ0.O0QQQQCOQ0(true);
end;
procedure OOO0CQQOQ0.O0QOQQQOQ0;
var
OOQOQQQOQ0:byte;
OQQOQQQOQ0:Cardinal;
begin
OOQOQQQOQ0:=O0Q0CQQOQ0.OOC0QQCOQ0;
if OOQOQQQOQ0<>OOOC0OCOQ0 then
OQ0QCQOOQ0(1);
OOC0CQQOQ0:=O0Q0CQQOQ0.O00QOOCOQ0(Encoding.Default);
OQQOQQQOQ0:=O0Q0CQQOQ0.OC0OQQCOQ0;
OCOOCQQOQ0:=((OQQOQQQOQ0 shr 24)and$FF)*1000+
((OQQOQQQOQ0 shr 20)and$0F)*100+
((OQQOQQQOQ0 shr 12)and$0F)*10+
((OQQOQQQOQ0 shr 8)and$0F);
O0Q0CQQOQ0.OOC0QQCOQ0;
end;
procedure OOO0CQQOQ0.OCQOQQQOQ0(O0COQQQOQ0:byte);
begin
O0Q0CQQOQ0.OOCOCQCOQ0(OO0C0OCOQ0);
O0Q0CQQOQ0.OOCOCQCOQ0(O0COQQQOQ0);
O0Q0CQQOQ0.OOCOCQCOQ0(0);
end;
function OOO0CQQOQ0.OOCOQQQOQ0(OQCOQQQOQ0:pOCIError):sword;
var
OCCOQQQOQ0:byte;
begin
OCCOQQQOQ0:=O0Q0CQQOQ0.OOC0QQCOQ0;
case OCCOQQQOQ0 of
OQ0C0OCOQ0:
Result:=OCO0COQOQ0(OQCOQQQOQ0);
OQOC0OCOQ0:
Result:=OCI_SUCCESS;
else begin
OQ0QCQOOQ0(1);
Result:=OCI_ERROR;
end;
end;
end;
function OOO0CQQOQ0.OCO0COQOQ0(OOOQOCQOQ0:pOCIError;O0Q0COQOQ0:OOCCQ0COQ0):sword;
var
OOQ0COQOQ0:integer;
begin
Result:=OQQ0COQOQ0(OOOQOCQOQ0,OOQ0COQOQ0,O0Q0COQOQ0);
end;
function OOO0CQQOQ0.OQQ0COQOQ0(OCOQOCQOQ0:pOCIError;var O0QQOCQOQ0:integer;OCQ0COQOQ0:OOCCQ0COQ0=nil):sword;
const
O0C0COQOQ0=512;
var
OOC0COQOQ0:integer;
OQC0COQOQ0:integer;
OCC0COQOQ0:smallint;
O00OCOQOQ0:smallint;
OO0OCOQOQ0:byte;
OQ0OCOQOQ0:TBytes;
OC0OCOQOQ0:TRowId81;
O0OOCOQOQ0:TBytes;
OOOOCOQOQ0:OQ0CQ0COQ0;
OQOOCOQOQ0:Encoding;
OCOOCOQOQ0,O0QOCOQOQ0:integer;
OOQOCOQOQ0,OQQOCOQOQ0:array of integer;
OCQOCOQOQ0,O0COCOQOQ0:integer;
OOCOCOQOQ0:string;
begin
OOC0COQOQ0:=O0Q0CQQOQ0.OC0OQQCOQ0;
O0QQOCQOQ0:=O0Q0CQQOQ0.OO0OQQCOQ0;
O0Q0CQQOQ0.OO0OQQCOQ0;
O0Q0CQQOQ0.OO0OQQCOQ0;
OQC0COQOQ0:=O0Q0CQQOQ0.OO0OQQCOQ0;
if(OCQ0COQOQ0<>nil)and(OCQ0COQOQ0.O0C0Q0COQ0=0)then
OCQ0COQOQ0.OCQCCQQOQ0:=OQC0COQOQ0;
OCC0COQOQ0:=O0Q0CQQOQ0.OCC0QQCOQ0;
O00OCOQOQ0:=O0Q0CQQOQ0.OQC0QQCOQ0;
O0Q0CQQOQ0.OOC0QQCOQ0;
O0Q0CQQOQ0.OCC0QQCOQ0;
O0Q0CQQOQ0.OCC0QQCOQ0;
O0Q0CQQOQ0.OQC0QQCOQ0;
OO0OCOQOQ0:=O0Q0CQQOQ0.OQC0QQCOQ0;
O0Q0CQQOQ0.OOOCOOCOQ0(@OC0OCOQOQ0);
O0Q0CQQOQ0.OQ0OQQCOQ0;
O0Q0CQQOQ0.OQC0QQCOQ0;
O0Q0CQQOQ0.OQC0QQCOQ0;
O0Q0CQQOQ0.OO0OQQCOQ0;
O0Q0CQQOQ0.OC0OQQCOQ0;
if OCOQOCQOQ0<>nil then begin
OOOOCOQOQ0:=OQ0CQ0COQ0(GetGCHandleTarget(OCOQOCQOQ0));
OOOOCOQOQ0.OOOCQ0COQ0.Clear;
OOOOCOQOQ0.OC0CQ0COQ0:=O0QQOCQOQ0;
end
else
OOOOCOQOQ0:=nil;
if O0OQCQOOQ0(OCCOCQQOQ0)then
OQOOCOQOQ0:=Encoding.UTF8
else
OQOOCOQOQ0:=Encoding.Default;
SetLength(O0OOCOQOQ0,0);
if OCQ0CQQOQ0>=OCQCCOCOQ0 then begin
O0Q0CQQOQ0.OCOCOOCOQ0(OC0OCOQOQ0,O0OOCOQOQ0);
SetLength(OOQOCOQOQ0,0);
O0QOCOQOQ0:=O0Q0CQQOQ0.OO0OQQCOQ0;
if O0QOCOQOQ0>0 then begin
SetLength(OOQOCOQOQ0,O0QOCOQOQ0);
if O0Q0CQQOQ0.OQQOCQCOQ0<>$FE then
OOQOCOQOQ0[0]:=O0Q0CQQOQ0.OO0OQQCOQ0
else begin
O0Q0CQQOQ0.OQC0QQCOQ0;
OCOOCOQOQ0:=0;
while O0Q0CQQOQ0.OQQOCQCOQ0<>$00 do begin
if OCOOCOQOQ0<O0QOCOQOQ0 then
OOQOCOQOQ0[OCOOCOQOQ0]:=O0Q0CQQOQ0.OO0OQQCOQ0
else
O0Q0CQQOQ0.OO0OQQCOQ0;
Inc(OCOOCOQOQ0);
end;
O0Q0CQQOQ0.OQC0QQCOQ0;
end;
end;
SetLength(OQQOCOQOQ0,0);
O0QOCOQOQ0:=integer(O0Q0CQQOQ0.OC0OQQCOQ0);
if O0QOCOQOQ0>0 then begin
SetLength(OQQOCOQOQ0,O0QOCOQOQ0);
if O0Q0CQQOQ0.OQQOCQCOQ0<>$FE then
OQQOCOQOQ0[0]:=O0Q0CQQOQ0.OO0OQQCOQ0
else begin
O0Q0CQQOQ0.OQC0QQCOQ0;
OCOOCOQOQ0:=0;
while O0Q0CQQOQ0.OQQOCQCOQ0<>$00 do begin
if OCOOCOQOQ0<O0QOCOQOQ0 then
OQQOCOQOQ0[OCOOCOQOQ0]:=O0Q0CQQOQ0.OO0OQQCOQ0
else
O0Q0CQQOQ0.OO0OQQCOQ0;
Inc(OCOOCOQOQ0);
end;
O0Q0CQQOQ0.OQC0QQCOQ0;
end;
end;
O0QOCOQOQ0:=O0Q0CQQOQ0.OO0OQQCOQ0;
if O0QOCOQOQ0>0 then begin
O0Q0CQQOQ0.OQC0QQCOQ0;
for OCOOCOQOQ0:=0 to O0QOCOQOQ0-1 do begin
OOCOCOQOQ0:=O0Q0CQQOQ0.O00QOOCOQ0(OQOOCOQOQ0);
O0Q0CQQOQ0.OQC0QQCOQ0;
O0Q0CQQOQ0.OQC0QQCOQ0;
if OOOOCOQOQ0<>nil then begin
OCQOCOQOQ0:=0;
if OCOOCOQOQ0<Length(OQQOCOQOQ0)then
OCQOCOQOQ0:=OCOOCOQOQ0;
O0COCOQOQ0:=0;
if OCOOCOQOQ0<Length(OOQOCOQOQ0)then
O0COCOQOQ0:=OCOOCOQOQ0;
OOOOCOQOQ0.OOOCQ0COQ0.Add(O0OC00QOQ0.Create(OCQOCOQOQ0,O0COCOQOQ0,OOCOCOQOQ0,'',''));
end;
end;
end;
end;
if OCQ0COQOQ0<>nil then begin
OCQ0COQOQ0.OCC0Q0COQ0:=OOC0COQOQ0;
OCQ0COQOQ0.O00OQ0COQ0:=OCC0COQOQ0;
OCQ0COQOQ0.OQC0Q0COQ0:=O00OCOQOQ0;
OCQ0COQOQ0.OQOOQ0COQ0:=OC0OCOQOQ0;
OCQ0COQOQ0.OCOOQ0COQ0:=O0OOCOQOQ0
end;
{$IFNDEF VER9P}
SetLength(OQ0OCOQOQ0,0);
{$ENDIF}
if O0QQOCQOQ0<>0 then begin
OQ0OCOQOQ0:=O0Q0CQQOQ0.O0OQOOCOQ0;
if OOOOCOQOQ0<>nil then begin
OOCOCOQOQ0:=OQOOCOQOQ0.GetString(OQ0OCOQOQ0);
OOOOCOQOQ0.O0OCQ0COQ0:=OOCOCOQOQ0;
end;
Result:=OCI_ERROR;
Exit;
end
else if OO0OCOQOQ0 and 1=1 then begin
if(OO0OCOQOQ0 and 32<>0)then begin
if OOOOCOQOQ0<>nil then begin
OOOOCOQOQ0.OC0CQ0COQ0:=24344;
OOOOCOQOQ0.O0OCQ0COQ0:='ORA-24344: success with compilation error'#$A;
end;
Result:=OCI_SUCCESS_WITH_INFO;
Exit;
end;
end;
if OOOOCOQOQ0<>nil then
OOOOCOQOQ0.O0OCQ0COQ0:='';
Result:=OCI_SUCCESS;
end;
function OOO0CQQOQ0.OQCOCOQOQ0(OCCOCOQOQ0:pOCIError;O00QQOQOQ0:OOCCQ0COQ0):sword;
var
OO0QQOQOQ0:integer;
OQ0QQOQOQ0:TBytes;
OC0QQOQOQ0:OQ0CQ0COQ0;
O0OQQOQOQ0:Encoding;
begin
SetLength(OQ0QQOQOQ0,0);
OO0QQOQOQ0:=O0Q0CQQOQ0.OO0OQQCOQ0;
O0Q0CQQOQ0.OO0OQQCOQ0;
O0Q0CQQOQ0.OO0OQQCOQ0;
if OCCOCOQOQ0<>nil then begin
OC0QQOQOQ0:=OQ0CQ0COQ0(GetGCHandleTarget(OCCOCOQOQ0));
OC0QQOQOQ0.OC0CQ0COQ0:=OO0QQOQOQ0;
end
else
OC0QQOQOQ0:=nil;
if OO0QQOQOQ0<>0 then begin
OQ0QQOQOQ0:=O0Q0CQQOQ0.O0OQOOCOQ0;
if OC0QQOQOQ0<>nil then begin
if O0OQCQOOQ0(OCCOCQQOQ0)then
O0OQQOQOQ0:=Encoding.UTF8
else
O0OQQOQOQ0:=Encoding.Default;
OC0QQOQOQ0.O0OCQ0COQ0:=O0OQQOQOQ0.GetString(OQ0QQOQOQ0);
end;
Result:=OCI_SUCCESS_WITH_INFO;
end
else
Result:=OCI_SUCCESS;
O0Q0CQQOQ0.O0COOQCOQ0:=O0Q0CQQOQ0.OCQOOQCOQ0;
end;
procedure OOO0CQQOQ0.O00QOOQOQ0(OO0QOOQOQ0:pOCIError;OQ0QOOQOQ0:boolean=false);
type
OC0QOOQOQ0=record
O0OQOOQOQ0:string;
OOOQOOQOQ0:string;
OQOQOOQOQ0:string;
end;
OCOQOOQOQ0=record
O0QQOOQOQ0:array of OC0QOOQOQ0;
OOQQOOQOQ0:string;
OQQQOOQOQ0:string;
OCQQOOQOQ0:string;
O0CQOOQOQ0:string;
end;
OOCQOOQOQ0=array of OCOQOOQOQ0;
procedure OQCQOOQOQ0(OCCQOOQOQ0:TTNSParser);
begin
OOCO0QOOQ0(12154,'ORA-12154: TNS:could not resolve the connect identifier specified'#$A);
end;
procedure O00COOQOQ0(const OO0COOQOQ0:string;OQ0COOQOQ0:string;var OC0COOQOQ0:OCOQOOQOQ0);
var
O0OCOOQOQ0:Integer;
begin
OQ0COOQOQ0:=Trim(OQ0COOQOQ0);
O0OCOOQOQ0:=Length(OC0COOQOQ0.O0QQOOQOQ0)-1;
if OO0COOQOQ0='PROTOCOL' then
OC0COOQOQ0.O0QQOOQOQ0[O0OCOOQOQ0].O0OQOOQOQ0:=OQ0COOQOQ0
else if OO0COOQOQ0='HOST' then
OC0COOQOQ0.O0QQOOQOQ0[O0OCOOQOQ0].OOOQOOQOQ0:=OQ0COOQOQ0
else if OO0COOQOQ0='PORT' then
OC0COOQOQ0.O0QQOOQOQ0[O0OCOOQOQ0].OQOQOOQOQ0:=OQ0COOQOQ0
else if OO0COOQOQ0='SID' then
OC0COOQOQ0.OQQQOOQOQ0:=OQ0COOQOQ0
else if OO0COOQOQ0='SERVICE_NAME' then
OC0COOQOQ0.OCQQOOQOQ0:=OQ0COOQOQ0
else if OO0COOQOQ0='SERVER' then
OC0COOQOQ0.OOQQOOQOQ0:=OQ0COOQOQ0
else if OO0COOQOQ0='SSL_SERVER_CERT_DN' then
OC0COOQOQ0.O0CQOOQOQ0:=OQ0COOQOQ0;
end;
procedure OOOCOOQOQ0(OQOCOOQOQ0:TTNSParser;var OCOCOOQOQ0:TStringArray;var O0QCOOQOQ0:OOCQOOQOQ0);
var
OOQCOOQOQ0:Integer;
OQQCOOQOQ0:string;
OCQCOOQOQ0:string;
O0CCOOQOQ0:string;
OOCCOOQOQ0:Integer;
OQCCOOQOQ0:Integer;
begin
OOQCOOQOQ0:=OQOCOOQOQ0.GetNext(OCQCOOQOQ0);
if OOQCOOQOQ0<>lcIdent then
OQCQOOQOQ0(OQOCOOQOQ0);
OCQCOOQOQ0:=UpperCase(Trim(OCQCOOQOQ0));
SetLength(OCOCOOQOQ0,Length(OCOCOOQOQ0)+1);
OCOCOOQOQ0[Length(OCOCOOQOQ0)-1]:=OCQCOOQOQ0;
if OCQCOOQOQ0='DESCRIPTION' then begin
OOCCOOQOQ0:=Length(O0QCOOQOQ0);
SetLength(O0QCOOQOQ0,OOCCOOQOQ0+1);
O0QCOOQOQ0[OOCCOOQOQ0].OOQQOOQOQ0:='';
O0QCOOQOQ0[OOCCOOQOQ0].OQQQOOQOQ0:='';
O0QCOOQOQ0[OOCCOOQOQ0].OCQQOOQOQ0:='';
end;
OOCCOOQOQ0:=Length(O0QCOOQOQ0)-1;
if OCQCOOQOQ0='ADDRESS' then
if OOCCOOQOQ0>=0 then begin
OQCCOOQOQ0:=Length(O0QCOOQOQ0[OOCCOOQOQ0].O0QQOOQOQ0);
SetLength(O0QCOOQOQ0[OOCCOOQOQ0].O0QQOOQOQ0,OQCCOOQOQ0+1);
O0QCOOQOQ0[OOCCOOQOQ0].O0QQOOQOQ0[OQCCOOQOQ0].O0OQOOQOQ0:='';
O0QCOOQOQ0[OOCCOOQOQ0].O0QQOOQOQ0[OQCCOOQOQ0].OOOQOOQOQ0:='';
O0QCOOQOQ0[OOCCOOQOQ0].O0QQOOQOQ0[OQCCOOQOQ0].OQOQOOQOQ0:='';
end
else
OQCQOOQOQ0(OQOCOOQOQ0);
OOQCOOQOQ0:=OQOCOOQOQ0.GetNext(OQQCOOQOQ0);
if OOQCOOQOQ0<>lxEqual then
OQCQOOQOQ0(OQOCOOQOQ0);
OOQCOOQOQ0:=OQOCOOQOQ0.GetNext(OQQCOOQOQ0);
if OOQCOOQOQ0=lcEnd then
OQCQOOQOQ0(OQOCOOQOQ0);
if(OOQCOOQOQ0=lcIdent)or(OOQCOOQOQ0=lcNumber)or(OOQCOOQOQ0=lcString)then begin
O0CCOOQOQ0:=OQQCOOQOQ0;
OQOCOOQOQ0.OmitBlank:=False;
while True do begin
OOQCOOQOQ0:=OQOCOOQOQ0.GetNext(OQQCOOQOQ0);
if OOQCOOQOQ0=lcEnd then
OQCQOOQOQ0(OQOCOOQOQ0)
else if OOQCOOQOQ0=lxRightBracket then
Break
else if(OOQCOOQOQ0=lcIdent)or(OOQCOOQOQ0=lcNumber)or(OOQCOOQOQ0=lcString)or(OOQCOOQOQ0=lcBlank)or(OOQCOOQOQ0>0)then
O0CCOOQOQ0:=O0CCOOQOQ0+OQQCOOQOQ0
else
OQCQOOQOQ0(OQOCOOQOQ0);
end;
OQOCOOQOQ0.OmitBlank:=True;
if OOCCOOQOQ0>=0 then
O00COOQOQ0(OCQCOOQOQ0,O0CCOOQOQ0,O0QCOOQOQ0[OOCCOOQOQ0]);
end
else if OOQCOOQOQ0=lxLeftBracket then
repeat
OOOCOOQOQ0(OQOCOOQOQ0,OCOCOOQOQ0,O0QCOOQOQ0);
OOQCOOQOQ0:=OQOCOOQOQ0.GetNext(OQQCOOQOQ0);
if(OOQCOOQOQ0<>lxLeftBracket)and(OOQCOOQOQ0<>lxRightBracket)then
OQCQOOQOQ0(OQOCOOQOQ0);
until OOQCOOQOQ0=lxRightBracket
else
OQCQOOQOQ0(OQOCOOQOQ0);
SetLength(OCOCOOQOQ0,Length(OCOCOOQOQ0)-1);
end;
procedure OCCCOOQOQ0(const O000OOQOQ0:string;var OO00OOQOQ0:OOCQOOQOQ0);
var
OQ00OOQOQ0:TTNSParser;
OC00OOQOQ0:Integer;
O0O0OOQOQ0:string;
OOO0OOQOQ0:TStringArray;
begin
OQ00OOQOQ0:=TTNSParser.Create(O000OOQOQ0);
try
OQ00OOQOQ0.OmitComment:=True;
SetLength(OOO0OOQOQ0,0);
OC00OOQOQ0:=OQ00OOQOQ0.GetNext(O0O0OOQOQ0);
if OC00OOQOQ0<>lxLeftBracket then
OQCQOOQOQ0(OQ00OOQOQ0);
OOOCOOQOQ0(OQ00OOQOQ0,OOO0OOQOQ0,OO00OOQOQ0);
OC00OOQOQ0:=OQ00OOQOQ0.GetNextToken;
if OC00OOQOQ0<>lcEnd then
OQCQOOQOQ0(OQ00OOQOQ0);
finally
OQ00OOQOQ0.Free;
end;
end;
procedure OQO0OOQOQ0(const OCO0OOQOQ0:OOCQOOQOQ0;O0Q0OOQOQ0:TCRObjectList);
var
OOQ0OOQOQ0,OQQ0OOQOQ0:Integer;
OCQ0OOQOQ0:OC0OC0QOQ0;
O0C0OOQOQ0:string;
begin
for OOQ0OOQOQ0:=0 to Length(OCO0OOQOQ0)-1 do
for OQQ0OOQOQ0:=0 to Length(OCO0OOQOQ0[OOQ0OOQOQ0].O0QQOOQOQ0)-1 do begin
O0C0OOQOQ0:=UpperCase(OCO0OOQOQ0[OOQ0OOQOQ0].O0QQOOQOQ0[OQQ0OOQOQ0].O0OQOOQOQ0);
if(O0C0OOQOQ0='')or(O0C0OOQOQ0='TCP')or(O0C0OOQOQ0='TCPS')then begin
OCQ0OOQOQ0:=OC0OC0QOQ0.Create;
OCQ0OOQOQ0.FullInfo:=True;
OCQ0OOQOQ0.Protocol:=OCO0OOQOQ0[OOQ0OOQOQ0].O0QQOOQOQ0[OQQ0OOQOQ0].O0OQOOQOQ0;
OCQ0OOQOQ0.Host:=OCO0OOQOQ0[OOQ0OOQOQ0].O0QQOOQOQ0[OQQ0OOQOQ0].OOOQOOQOQ0;
OCQ0OOQOQ0.Port:=OCO0OOQOQ0[OOQ0OOQOQ0].O0QQOOQOQ0[OQQ0OOQOQ0].OQOQOOQOQ0;
OCQ0OOQOQ0.SID:=OCO0OOQOQ0[OOQ0OOQOQ0].OQQQOOQOQ0;
OCQ0OOQOQ0.ServiceName:=OCO0OOQOQ0[OOQ0OOQOQ0].OCQQOOQOQ0;
OCQ0OOQOQ0.OCOOC0QOQ0:=OCO0OOQOQ0[OOQ0OOQOQ0].OOQQOOQOQ0;
OCQ0OOQOQ0.O0QOC0QOQ0:=OCO0OOQOQ0[OOQ0OOQOQ0].O0CQOOQOQ0;
O0Q0OOQOQ0.Add(OCQ0OOQOQ0);
end;
end;
end;
function OOC0OOQOQ0(const OQC0OOQOQ0:string):TStringArray;
var
OCC0OOQOQ0:Integer;
O00OOOQOQ0:Integer;
OO0OOOQOQ0,OQ0OOOQOQ0:Integer;
begin
OCC0OOQOQ0:=Length(OQC0OOQOQ0);
O00OOOQOQ0:=0;
OO0OOOQOQ0:=1;
OQ0OOOQOQ0:=1;
while OO0OOOQOQ0<=OCC0OOQOQ0 do begin
if OQC0OOQOQ0[OO0OOOQOQ0]=OCQCCQOOQ0 then begin
Inc(O00OOOQOQ0);
SetLength(Result,O00OOOQOQ0);
Result[O00OOOQOQ0-1]:=copy(OQC0OOQOQ0,OQ0OOOQOQ0,OO0OOOQOQ0-OQ0OOOQOQ0);
OQ0OOOQOQ0:=OO0OOOQOQ0+1;
end;
Inc(OO0OOOQOQ0);
end;
if(OQ0OOOQOQ0=1)then begin
SetLength(Result,1);
Result[0]:=OQC0OOQOQ0;
end
else begin
Inc(O00OOOQOQ0);
SetLength(Result,O00OOOQOQ0);
Result[O00OOOQOQ0-1]:=copy(OQC0OOQOQ0,OQ0OOOQOQ0,OO0OOOQOQ0-OQ0OOOQOQ0);
end;
end;
procedure OC0OOOQOQ0(const O0OOOOQOQ0:string;OOOOOOQOQ0:TCRObjectList);
var
OQOOOOQOQ0:Integer;
OCOOOOQOQ0:OC0OC0QOQ0;
O0QOOOQOQ0:OC0OC0QOQ0;
OOQOOOQOQ0:TStringArray;
OQQOOOQOQ0:TStringArray;
begin
OCOOOOQOQ0:=OC0OC0QOQ0.Create;
OCOOOOQOQ0.FullInfo:=True;
OCOOOOQOQ0.SetServerInfo(OQO0CQQOQ0.OOQCQ0COQ0);
OOQOOOQOQ0:=OOC0OOQOQ0(OCOOOOQOQ0.Host);
OQQOOOQOQ0:=OOC0OOQOQ0(OCOOOOQOQ0.Port);
if Length(OOQOOOQOQ0)<=1 then begin
OOOOOOQOQ0.Add(OCOOOOQOQ0);
Exit;
end;
try
for OQOOOOQOQ0:=0 to Length(OOQOOOQOQ0)-1 do begin
O0QOOOQOQ0:=OC0OC0QOQ0.Create;
O0QOOOQOQ0.FullInfo:=True;
O0QOOOQOQ0.Protocol:=OCOOOOQOQ0.Protocol;
O0QOOOQOQ0.Host:=OOQOOOQOQ0[OQOOOOQOQ0];
if OQOOOOQOQ0<Length(OQQOOOQOQ0)then
O0QOOOQOQ0.Port:=OQQOOOQOQ0[OQOOOOQOQ0]
else if Length(OQQOOOQOQ0)=1 then
O0QOOOQOQ0.Port:=OQQOOOQOQ0[0]
else
O0QOOOQOQ0.Port:='';
O0QOOOQOQ0.SID:=OCOOOOQOQ0.SID;
O0QOOOQOQ0.ServiceName:=OCOOOOQOQ0.ServiceName;
O0QOOOQOQ0.OCOOC0QOQ0:=OCOOOOQOQ0.OCOOC0QOQ0;
OOOOOOQOQ0.Add(O0QOOOQOQ0);
end;
finally
OCOOOOQOQ0.Free;
end;
end;
var
OCQOOOQOQ0:string;
O0COOOQOQ0:OOCQOOQOQ0;
OOCOOOQOQ0:TCRObjectList;
OQCOOOQOQ0:byte;
begin
OCQOOOQOQ0:=Trim(OQO0CQQOQ0.OOQCQ0COQ0);
OOCOOOQOQ0:=TCRObjectList.Create;
try
if(Length(OCQOOOQOQ0)>0)and(OCQOOOQOQ0[1]='(')then begin
SetLength(O0COOOQOQ0,0);
OCCCOOQOQ0(OCQOOOQOQ0,O0COOOQOQ0);
OQO0OOQOQ0(O0COOOQOQ0,OOCOOOQOQ0);
end
else
OC0OOOQOQ0(OQO0CQQOQ0.OOQCQ0COQ0,OOCOOOQOQ0);
O0Q0CQQOQ0.OOO0CQCOQ0;
O0Q0CQQOQ0.OOC00QCOQ0(OOCOOOQOQ0,OQOOCQQOQ0,OCO0CQQOQ0.OQ00CQQOQ0='');
O0Q0CQQOQ0.OOCOOQCOQ0[1]:=2;
O0Q0CQQOQ0.OOCOOQCOQ0[2]:=1;
finally
OOCOOOQOQ0.Free;
end;
O00CQQQOQ0;
O0OCQQQOQ0;
if OCCOCQQOQ0=0 then
{$IFDEF IS_UTF8}
OCCOCQQOQ0:=OQQOCQOOQ0(O0C0CQQOQ0);
{$ELSE}
OCCOCQQOQ0:=OQCCQOQOQ0(OO00QOQOQ0,OOQOCQQOQ0);
{$ENDIF}
if O0OQCQOOQ0(OCCOCQQOQ0)then
if(OOQOCQQOQ0=O0OCCOCOQ0)or
(OOQOCQQOQ0=OQOCCOCOQ0)
then
OCCOCQQOQ0:=OOQOCQQOQ0
else
OCCOCQQOQ0:=OQQOCQOOQ0(O0C0CQQOQ0);
if OCQ0CQQOQ0>=O0OOCOCOQ0 then
OC0OCQQOQ0:=128
else
OC0OCQQOQ0:=30;
if OCQ0CQQOQ0<OQQCCOCOQ0 then
O0OOCQQOQ0:=2000
else
O0OOCQQOQ0:=4000;
if OCQ0CQQOQ0<O0OOCOCOQ0 then
OOOOCQQOQ0:=O0OOCQQOQ0
else
OOOOCQQOQ0:=32767;
if OCQ0CQQOQ0>=OQ0OCOCOQ0 then
if Length(OQC0CQQOQ0)<42 then
OQCOOOQOQ0:=$12
else if OCQ0CQQOQ0=OCOOCOCOQ0 then
OQCOOOQOQ0:=$20
else if OCQ0CQQOQ0=OQOOCOCOQ0 then
OQCOOOQOQ0:=$1F
else
OQCOOOQOQ0:=$1A
else
OQCOOOQOQ0:=0;
OOO0QQQOQ0(OQCOOOQOQ0,OQ0QOOQOQ0);
OO0OQQQOQ0(OQCOOOQOQ0);
end;
procedure OOO0CQQOQ0.OCCOOOQOQ0;
begin
try
O0Q0CQQOQ0.O0CO0QCOQ0;
finally
OQ0OCQQOQ0:=False;
O00QQQQOQ0:=nil;
OQQOCQQOQ0:=nil;
O0COCQQOQ0:=nil;
OQ0O0OQOQ0;
OC0O0OQOQ0;
FreeAndNil(OQQ0CQQOQ0);
OOQOQOQOQ0;
end;
end;
procedure OOO0CQQOQ0.O00Q0OQOQ0(OO0Q0OQOQ0:pOCIError);
procedure OQ0Q0OQOQ0(var OC0Q0OQOQ0:string;const O0OQ0OQOQ0,OOOQ0OQOQ0:string);
begin
OC0Q0OQOQ0:=OC0Q0OQOQ0+
' BEGIN '+
'   EXECUTE IMMEDIATE ''alter session set '+O0OQ0OQOQ0+' = '''''+OOOQ0OQOQ0+'''''''; '+
' EXCEPTION '+
'  WHEN OTHERS THEN '+
'   NULL; '+
' END; ';
end;
procedure OQOQ0OQOQ0(var OCOQ0OQOQ0:string);
begin
if OCO0CQQOQ0.O0O0CQQOQ0='' then
Exit;
if OCOOCQQOQ0<9000 then
exit;
OCOQ0OQOQ0:=OCOQ0OQOQ0+
' BEGIN '+
'   DBMS_SESSION.SET_IDENTIFIER('''+OCO0CQQOQ0.O0O0CQQOQ0+'''); '+
' EXCEPTION '+
'  WHEN OTHERS THEN '+
'   NULL; '+
' END; ';
end;
procedure O0QQ0OQOQ0(var OOQQ0OQOQ0:string);
var
OQQQ0OQOQ0:integer;
OCQQ0OQOQ0:boolean;
O0CQ0OQOQ0:string;
begin
if OCOOCQQOQ0<8100 then
Exit;
O0CQ0OQOQ0:='+0:00';
try
OQQQ0OQOQ0:=-GetLocalTimeZoneOffset;
if OQQQ0OQOQ0>0 then
OCQQ0OQOQ0:=True
else begin
OCQQ0OQOQ0:=False;
OQQQ0OQOQ0:=-OQQQ0OQOQ0;
end;
O0CQ0OQOQ0:=IntToStr(OQQQ0OQOQ0 mod 60);
if Length(O0CQ0OQOQ0)=1 then
O0CQ0OQOQ0:='0'+O0CQ0OQOQ0;
O0CQ0OQOQ0:=IntToStr(OQQQ0OQOQ0 div 60)+':'+O0CQ0OQOQ0;
if OCQQ0OQOQ0 then
O0CQ0OQOQ0:='-'+O0CQ0OQOQ0
else
O0CQ0OQOQ0:='+'+O0CQ0OQOQ0;
except
O0CQ0OQOQ0:='+0:00';
end;
if O0CQ0OQOQ0<>'' then
OQ0Q0OQOQ0(OOQQ0OQOQ0,'TIME_ZONE',O0CQ0OQOQ0);
end;
procedure OOCQ0OQOQ0(var OQCQ0OQOQ0:string;out OCCQ0OQOQ0:Tbytes;var O00C0OQOQ0:ub2;OO0C0OQOQ0:OOCCQ0COQ0);
var
OQ0C0OQOQ0:OOQ0O0QOQ0;
OC0C0OQOQ0:pOCIBind;
begin
O0QOCQQOQ0:=0;
if OCQ0CQQOQ0<OOC0COCOQ0 then begin
OCCQ0OQOQ0:=nil;
Exit;
end;
OQCQ0OQOQ0:=OQCQ0OQOQ0+
' BEGIN '+
'  SELECT TZ_OFFSET(DBTIMEZONE) INTO :TimeZone FROM SYS.DUAL; '+
' EXCEPTION '+
'  WHEN OTHERS THEN '+
'   :TimeZone := ''+00:00''; '+
' END; ';
OQ0C0OQOQ0:=OOQ0O0QOQ0.Create(OO0C0OQOQ0);
OO0C0OQOQ0.OQO0Q0COQ0.Add(OQ0C0OQOQ0);
OO0C0OQOQ0.O0Q0Q0COQ0.Add(OQ0C0OQOQ0);
OQ0C0OQOQ0.OOCOQOCOQ0:='TimeZone';
O00C0OQOQ0:=0;
SetLength(OCCQ0OQOQ0,31);
OCOO0QOOQ0(OO0C0OQOQ0.O0C00QQOQ0(OC0C0OQOQ0,OO0Q0OQOQ0,OO0C0OQOQ0.OQO0Q0COQ0.Count,@OCCQ0OQOQ0[0],30,SQLT_VCS,nil,@O00C0OQOQ0,0,nil),OOCOQOQOQ0.O00CQ0COQ0,OO0Q0OQOQ0);
end;
procedure O0OC0OQOQ0(var OOOC0OQOQ0:string;out OQOC0OQOQ0:Tbytes;OCOC0OQOQ0:OOCCQ0COQ0);
var
O0QC0OQOQ0:OOQ0O0QOQ0;
OOQC0OQOQ0:pOCIBind;
begin
if OCOOCQQOQ0<12100 then begin
OQOC0OQOQ0:=nil;
Exit;
end;
OOOC0OQOQ0:=OOOC0OQOQ0+
' BEGIN '+
'  SELECT LENGTH(RPAD(''X'', 32767, ''X'')) INTO :MaxStrLen FROM DUAL; '+
' EXCEPTION '+
'  WHEN OTHERS THEN '+
'   NULL; '+
' END; ';
O0QC0OQOQ0:=OOQ0O0QOQ0.Create(OCOC0OQOQ0);
OCOC0OQOQ0.OQO0Q0COQ0.Add(O0QC0OQOQ0);
OCOC0OQOQ0.O0Q0Q0COQ0.Add(O0QC0OQOQ0);
O0QC0OQOQ0.OOCOQOCOQ0:='MaxStrLen';
SetLength(OQOC0OQOQ0,32);
OCOO0QOOQ0(OCOC0OQOQ0.O0C00QQOQ0(OOQC0OQOQ0,OO0Q0OQOQ0,OCOC0OQOQ0.OQO0Q0COQ0.Count,@OQOC0OQOQ0[0],4,SQLT_INT,nil,nil,0,nil),OOCOQOQOQ0.O00CQ0COQ0,OO0Q0OQOQ0);
end;
function OQQC0OQOQ0(const OCQC0OQOQ0:TBytes;O0CC0OQOQ0:ub2):Integer;
var
OOCC0OQOQ0:string;
OQCC0OQOQ0:TOCIDateTime;
OCCC0OQOQ0,O0000OQOQ0:sb1;
begin
try
OOCC0OQOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OOQQO0QOQ0),OOCOQOQOQ0.O00CQ0COQ0,@OCQC0OQOQ0[0],0,O0CC0OQOQ0);
OQCC0OQOQ0:=TOCIDateTime.Create(OCI_DTYPE_TIMESTAMP_TZ);
try
OQCC0OQOQ0.Parse(Trim(OOCC0OQOQ0),'TZH:TZM');
OQCC0OQOQ0.GetTimeZoneOffset(OCCC0OQOQ0,O0000OQOQ0);
Result:=OCCC0OQOQ0*60+O0000OQOQ0;
finally
OQCC0OQOQ0.Free;
end;
except
Result:=0;
end;
end;
function OO000OQOQ0(const OQ000OQOQ0:TBytes):Integer;
var
OC000OQOQ0:Integer;
begin
OC000OQOQ0:=PInteger(@OQ000OQOQ0[0])^;
if OC000OQOQ0<4000 then
Result:=4000
else if OC000OQOQ0>32767 then
Result:=32767
else
Result:=OC000OQOQ0;
end;
var
O0O00OQOQ0:string;
OOO00OQOQ0:OOCCQ0COQ0;
OQO00OQOQ0:TBytes;
OCO00OQOQ0:TBytes;
O0Q00OQOQ0:ub2;
begin
OCOOCQQOQ0:=OOQCCOQOQ0(nil);
OOO00OQOQ0:=OOCCQ0COQ0.Create(OQO0CQQOQ0.OQQCQ0COQ0);
try
OQOQ0OQOQ0(O0O00OQOQ0);
O0QQ0OQOQ0(O0O00OQOQ0);
OOCQ0OQOQ0(O0O00OQOQ0,OCO00OQOQ0,O0Q00OQOQ0,OOO00OQOQ0);
if OCQ0CQQOQ0<OQ0OCOCOQ0 then
OQO00OQOQ0:=nil
else if OCQ0CQQOQ0<OQOOCOCOQ0 then
O0OC0OQOQ0(O0O00OQOQ0,OQO00OQOQ0,OOO00OQOQ0)
else begin
OQO00OQOQ0:=nil;
O0OOCQQOQ0:=OOOOCQQOQ0;
end;
if O0O00OQOQ0<>'' then begin
OOO00OQOQ0.OCCCQ0COQ0:=self;
OOO00OQOQ0.OCQ0Q0COQ0:='BEGIN '+O0O00OQOQ0+' END;';
OOO00OQOQ0.OOC0Q0COQ0:=OCI_STMT_BEGIN;
OCOO0QOOQ0(OOO00OQOQ0.OQQQCQQOQ0(nil,1,0,OCI_DEFAULT),OOCOQOQOQ0.O00CQ0COQ0,OO0Q0OQOQ0);
if OCO00OQOQ0<>nil then
O0QOCQQOQ0:=OQQC0OQOQ0(OCO00OQOQ0,O0Q00OQOQ0);
if OQO00OQOQ0<>nil then
O0OOCQQOQ0:=OO000OQOQ0(OQO00OQOQ0);
end;
finally
OOO00OQOQ0.Free;
end;
end;
function OOO0CQQOQ0.OOQ00OQOQ0:boolean;
begin
Result:=OCQ0CQQOQ0>=OOC0COCOQ0;
end;
function OOO0CQQOQ0.OQQ00OQOQ0:boolean;
begin
Result:=UseFastSelect and
OOQ00OQOQ0 and
(OCQ0CQQOQ0>=OQC0COCOQ0);
end;
function OOO0CQQOQ0.OCQ00OQOQ0:boolean;
begin
Result:=not OldAlterMode and
OOQ00OQOQ0 and
(OCQ0CQQOQ0>=OQC0COCOQ0);
end;
procedure OOO0CQQOQ0.O0C00OQOQ0(OOC00OQOQ0:Integer);
begin
OQ0QQQQOQ0.Add(Pointer(NativeInt(OOC00OQOQ0)));
end;
procedure OOO0CQQOQ0.OQC00OQOQ0(const OCC00OQOQ0:TBytes);
var
O00O0OQOQ0:Integer;
OO0O0OQOQ0:IntPtr;
begin
O00O0OQOQ0:=Length(OCC00OQOQ0);
if O00O0OQOQ0<2 then
Exit;
O00O0OQOQ0:=(OCC00OQOQ0[0]shl 8)+OCC00OQOQ0[1]+2;
if O00O0OQOQ0>Length(OCC00OQOQ0)then
Exit;
OO0O0OQOQ0:=Marshal.AllocHGlobal(O00O0OQOQ0);
Move(OCC00OQOQ0[0],OO0O0OQOQ0^,O00O0OQOQ0);
OC0QQQQOQ0.Add(OO0O0OQOQ0);
end;
procedure OOO0CQQOQ0.OQ0O0OQOQ0;
begin
OQ0QQQQOQ0.Clear;
end;
procedure OOO0CQQOQ0.OC0O0OQOQ0;
var
O0OO0OQOQ0:Integer;
begin
for O0OO0OQOQ0:=0 to OC0QQQQOQ0.Count-1 do
Marshal.FreeHGlobal(OC0QQQQOQ0.Items[O0OO0OQOQ0]);
OC0QQQQOQ0.Clear;
end;
procedure OOO0CQQOQ0.OOOO0OQOQ0;
var
OQOO0OQOQ0:Integer;
begin
if OQ0QQQQOQ0.Count=0 then
Exit;
O0Q0CQQOQ0.OOCOCQCOQ0(OOCC0OCOQ0);
O0Q0CQQOQ0.OOCOCQCOQ0(OCQO0OCOQ0);
O0Q0CQQOQ0.OOCOCQCOQ0(0);
O0Q0CQQOQ0.OOO0QQCOQ0;
O0Q0CQQOQ0.OOOQQQCOQ0(OQ0QQQQOQ0.Count);
for OQOO0OQOQ0:=0 to OQ0QQQQOQ0.Count-1 do
O0Q0CQQOQ0.OC0QQQCOQ0(NativeInt(OQ0QQQQOQ0[OQOO0OQOQ0]));
OQ0O0OQOQ0;
end;
procedure OOO0CQQOQ0.OCOO0OQOQ0;
var
O0QO0OQOQ0:integer;
OOQO0OQOQ0:Integer;
OQQO0OQOQ0:IntPtr;
OCQO0OQOQ0:Integer;
O0CO0OQOQ0:Integer;
OOCO0OQOQ0:Integer;
OQCO0OQOQ0:TBytes;
begin
if OC0QQQQOQ0.Count=0 then
Exit;
O0CO0OQOQ0:=0;
repeat
OCQO0OQOQ0:=0;
OOCO0OQOQ0:=0;
for O0QO0OQOQ0:=O0CO0OQOQ0 to OC0QQQQOQ0.Count-1 do begin
OQQO0OQOQ0:=OC0QQQQOQ0.Items[O0QO0OQOQ0];
OOQO0OQOQ0:=(Marshal.ReadByte(OQQO0OQOQ0)shl 8)+Marshal.ReadByte(OQQO0OQOQ0,1)+2;
OCQO0OQOQ0:=OCQO0OQOQ0+OOQO0OQOQ0;
Inc(OOCO0OQOQ0);
if OOCO0OQOQ0>=25000 then
Break;
end;
O0Q0CQQOQ0.OOCOCQCOQ0(17);
O0Q0CQQOQ0.OOCOCQCOQ0(96);
O0Q0CQQOQ0.OOCOCQCOQ0(0);
O0Q0CQQOQ0.OOO0QQCOQ0;
O0Q0CQQOQ0.OC0QQQCOQ0(OCQO0OQOQ0);
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OC0QQQCOQ0(0);
O0Q0CQQOQ0.OOOQQQCOQ0(0);
O0Q0CQQOQ0.OOOQQQCOQ0(0);
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OOOQQQCOQ0($00080111);
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OC0QQQCOQ0(0);
O0Q0CQQOQ0.OC0QQQCOQ0(0);
O0Q0CQQOQ0.OC0QQQCOQ0(0);
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OCCOCQCOQ0(0);
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OCCOCQCOQ0(0);
O0Q0CQQOQ0.OQO0QQCOQ0;
O0Q0CQQOQ0.OCCOCQCOQ0(0);
for O0QO0OQOQ0:=O0CO0OQOQ0 to OC0QQQQOQ0.Count-1 do begin
OQQO0OQOQ0:=OC0QQQQOQ0.Items[O0QO0OQOQ0];
OOQO0OQOQ0:=(Marshal.ReadByte(OQQO0OQOQ0)shl 8)+Marshal.ReadByte(OQQO0OQOQ0,1)+2;
SetLength(OQCO0OQOQ0,OOQO0OQOQ0);
Move(OQQO0OQOQ0^,OQCO0OQOQ0[0],OOQO0OQOQ0);
O0Q0CQQOQ0.O0CCQQCOQ0(OQCO0OQOQ0);
end;
O0CO0OQOQ0:=O0CO0OQOQ0+OOCO0OQOQ0;
until O0CO0OQOQ0>=OC0QQQQOQ0.Count;
OC0O0OQOQ0;
end;
procedure OOO0CQQOQ0.OCCO0OQOQ0;
begin
OCOO0OQOQ0;
OOOO0OQOQ0;
end;
function OOO0CQQOQ0.OOOQCOQOQ0(OQOQCOQOQ0:pOCIError;OCOQCOQOQ0:ub4;O0QQCOQOQ0:ub4):sword;
begin
try
if not OQ0OCQQOQ0 then begin
O00QOOQOQ0(OQOQCOQOQ0);
try
if(OCO0CQQOQ0.OQ00CQQOQ0<>'')and(OCO0CQQOQ0.OC00CQQOQ0='')then
OOCO0QOOQ0(03127,'ORA-01005: null password given; logon denied'#$A);
FreeAndNil(OQQ0CQQOQ0);
if OCQ0CQQOQ0>=OQQCCOCOQ0 then
OQQ0CQQOQ0:=O0Q0CC0OQ0.Create(self)
else
OQQ0CQQOQ0:=O000CC0OQ0.Create(self);
if(OCQ0CQQOQ0>=OCQCCOCOQ0)and(OCO0CQQOQ0.OQ00CQQOQ0='')then begin
O0Q0CC0OQ0(OQQ0CQQOQ0).O00QQC0OQ0;
Result:=O0Q0CC0OQ0(OQQ0CQQOQ0).OO0QQC0OQ0(OQOQCOQOQ0);
if(Result<>OCI_SUCCESS)and(Result<>OCI_SUCCESS_WITH_INFO)then
Exit;
end
else begin
O0CO0C0OQ0(OQQ0CQQOQ0).OOOCCC0OQ0(OCO0CQQOQ0.OQ00CQQOQ0,O0QQCOQOQ0);
Result:=O0CO0C0OQ0(OQQ0CQQOQ0).O0QCCC0OQ0(OQOQCOQOQ0);
if(Result<>OCI_SUCCESS)and(Result<>OCI_SUCCESS_WITH_INFO)then
Exit;
O0CO0C0OQ0(OQQ0CQQOQ0).OQQCCC0OQ0(OCO0CQQOQ0.OQ00CQQOQ0,OCO0CQQOQ0.OC00CQQOQ0,O0QQCOQOQ0);
Result:=O0CO0C0OQ0(OQQ0CQQOQ0).OQCCCC0OQ0(OQOQCOQOQ0);
if(Result<>OCI_SUCCESS)and(Result<>OCI_SUCCESS_WITH_INFO)then
Exit;
if OCC0CCC0Q0(O0Q0CQQOQ0.O0O0OQCOQ0).OCCOQCC0Q0 and
(OCQ0CQQOQ0>=OQQCCOCOQ0)and
(Length(O0Q0CC0OQ0(OQQ0CQQOQ0).OC0QQC0OQ0)>0)
then
OCC0CCC0Q0(O0Q0CQQOQ0.O0O0OQCOQ0).OOQ0QCC0Q0(O0Q0CC0OQ0(OQQ0CQQOQ0).OC0QQC0OQ0);
end;
OCOOQQQOQ0;
O0QOQQQOQ0;
O00Q0OQOQ0(OQOQCOQOQ0);
OQ0OCQQOQ0:=True;
except
OCCOOOQOQ0;
raise;
end;
end
else
Result:=OCI_ERROR;
except
on E:Exception do
Result:=OOOCQOQOQ0(E,OQOQCOQOQ0);
end;
end;
function OOO0CQQOQ0.OOQQCOQOQ0(OQQQCOQOQ0:pOCIError):sword;
begin
try
if OQ0OCQQOQ0 then begin
if OQCQQQQOQ0<>nil then
FreeAndNil(OQCQQQQOQ0);
if OCCQQQQOQ0<>nil then
FreeAndNil(OCCQQQQOQ0);
try
try
OCQOQQQOQ0(OQO00OCOQ0);
OOCOQQQOQ0(OQQQCOQOQ0);
finally
OCCOOOQOQ0;
end;
except
end;
Result:=OCI_SUCCESS;
end
else
Result:=OCI_ERROR;
except
on E:Exception do
Result:=OOOCQOQOQ0(E,OQQQCOQOQ0);
end;
end;
function OOO0CQQOQ0.OCQQCOQOQ0(O0CQCOQOQ0:pOCIError;const OOCQCOQOQ0:IntPtr;OQCQCOQOQ0:ub4;const OCCQCOQOQ0:IntPtr;O00CCOQOQ0:ub4;const OO0CCOQOQ0:IntPtr;OQ0CCOQOQ0:sb4;OC0CCOQOQ0:ub4):sword;
function O0OCCOQOQ0(const OOOCCOQOQ0:string):sword;
begin
O00QOOQOQ0(O0CQCOQOQ0,True);
try
if OCQ0CQQOQ0<OQQCCOCOQ0 then
OQC0CQOOQ0;
FreeAndNil(OQQ0CQQOQ0);
OQQ0CQQOQ0:=O0Q0CC0OQ0.Create(self);
O0Q0CC0OQ0(OQQ0CQQOQ0).OOOCCC0OQ0(OOOCCOQOQ0,OCI_DEFAULT);
Result:=O0Q0CC0OQ0(OQQ0CQQOQ0).O0QCCC0OQ0(O0CQCOQOQ0);
except
OCCOOOQOQ0;
raise;
end;
end;
var
OQOCCOQOQ0:string;
OCOCCOQOQ0:string;
O0QCCOQOQ0:string;
begin
OQOCCOQOQ0:=O0CQCQOOQ0(O0Q0CQQOQ0.O00Q0QCOQ0,OOCQCOQOQ0,OQCQCOQOQ0);
OCOCCOQOQ0:=O0CQCQOOQ0(O0Q0CQQOQ0.O00Q0QCOQ0,OCCQCOQOQ0,O00CCOQOQ0);
O0QCCOQOQ0:=O0CQCQOOQ0(O0Q0CQQOQ0.O00Q0QCOQ0,OO0CCOQOQ0,OQ0CCOQOQ0);
try
if not OQ0OCQQOQ0 then begin
Result:=O0OCCOQOQ0(OQOCCOQOQ0);
if(Result<>OCI_SUCCESS)and(Result<>OCI_SUCCESS_WITH_INFO)then
Exit;
end;
if not(OQQ0CQQOQ0 is O0Q0CC0OQ0)then
OQC0CQOOQ0;
O0Q0CC0OQ0(OQQ0CQQOQ0).OOQOCC0OQ0(OQOCCOQOQ0,OCOCCOQOQ0,O0QCCOQOQ0,OCI_DEFAULT);
Result:=O0Q0CC0OQ0(OQQ0CQQOQ0).OQCOCC0OQ0(O0CQCOQOQ0);
if(Result<>OCI_SUCCESS)and(Result<>OCI_SUCCESS_WITH_INFO)then
Exit;
OQ0OCQQOQ0:=True;
except
on E:Exception do
Result:=OOOCQOQOQ0(E,O0CQCOQOQ0);
end;
end;
function OOO0CQQOQ0.OOOQQOQOQ0(OQOQQOQOQ0:pOCIError):sword;
begin
try
if not OQ0OCQQOQ0 then
Assert(False);
OCCO0OQOQ0;
OCQOQQQOQ0(OOQ00OCOQ0);
Result:=OOCOQQQOQ0(OQOQQOQOQ0);
except
on E:Exception do
Result:=OOOCQOQOQ0(E,OQOQQOQOQ0);
end;
end;
function OOO0CQQOQ0.OCOQQOQOQ0(O0QQQOQOQ0:pOCIError):sword;
begin
try
if not OQ0OCQQOQ0 then
Assert(False);
OCCO0OQOQ0;
OCQOQQQOQ0(OQQ00OCOQ0);
Result:=OOCOQQQOQ0(O0QQQOQOQ0);
except
on E:Exception do
Result:=OOOCQOQOQ0(E,O0QQQOQOQ0);
end;
end;
function OOO0CQQOQ0.OOQQQOQOQ0(OQQQQOQOQ0:pOCIError):sword;
begin
try
if not OQ0OCQQOQ0 then
Assert(False);
O0Q0CQQOQ0.OO0Q0OCOQ0;
Result:=OCI_SUCCESS;
except
on E:Exception do
Result:=OOOCQOQOQ0(E,OQQQQOQOQ0);
end;
end;
function OOO0CQQOQ0.OCQQQOQOQ0(O0CQQOQOQ0:pOCIError;OOCQQOQOQ0:IntPtr;OQCQQOQOQ0:ub4;OCCQQOQOQ0:ub1):sword;
var
O00CQOQOQ0:string;
OO0CQOQOQ0:TBytes;
OQ0CQOQOQ0:Cardinal;
begin
if O0C0CQQOQ0>8000 then
O00CQOQOQ0:=OOC0CQQOQ0
else
O00CQOQOQ0:='Oracle7';
if OOCOQOQOQ0.O00CQ0COQ0 then begin
{$IFDEF IS_UNICODE}
OO0CQOQOQ0:=Encoding.Unicode.GetBytes(O00CQOQOQ0);
{$ELSE}
OO0CQOQOQ0:=Encoding.Unicode.GetBytes(UTF8Decode(O00CQOQOQ0));
{$ENDIF}
OQCQQOQOQ0:=OQCQQOQOQ0 and$FFFFFFFE;
OQ0CQOQOQ0:=Length(OO0CQOQOQ0);
if OQ0CQOQOQ0>OQCQQOQOQ0-2 then
OQ0CQOQOQ0:=OQCQQOQOQ0-2;
Marshal.Copy(OO0CQOQOQ0,0,OOCQQOQOQ0,OQ0CQOQOQ0);
Marshal.WriteInt16(OOCQQOQOQ0,OQ0CQOQOQ0,0);
end
else begin
OO0CQOQOQ0:=Encoding.Unicode.Default.GetBytes(O00CQOQOQ0);
OQ0CQOQOQ0:=Length(OO0CQOQOQ0);
if OQ0CQOQOQ0>OQCQQOQOQ0-1 then
OQ0CQOQOQ0:=OQCQQOQOQ0-1;
Marshal.Copy(OO0CQOQOQ0,0,OOCQQOQOQ0,OQ0CQOQOQ0);
Marshal.WriteByte(OOCQQOQOQ0,OQ0CQOQOQ0,0);
end;
Result:=OCI_SUCCESS;
end;
function OOO0CQQOQ0.O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case OCC0QOCOQ0 of
OCI_ATTR_ENV:
if OOCCQOCOQ0=nil then
Marshal.WriteIntPtr(OOC0QOCOQ0,nil)
else
Marshal.WriteIntPtr(OOC0QOCOQ0,OOCCQOCOQ0.OQQOQOCOQ0);
OCI_ATTR_CHARSET_ID:
Marshal.WriteInt16(OOC0QOCOQ0,SmallInt(OCCOCQQOQ0));
else
Result:=inherited O0C0QOCOQ0(OOC0QOCOQ0,OQC0QOCOQ0,OCC0QOCOQ0,O00OQOCOQ0);
end;
end;
function OOO0CQQOQ0.OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;
var
OC0CQOQOQ0:string;
O0OCQOQOQ0:integer;
begin
Result:=OCI_SUCCESS;
case O0OOQOCOQ0 of
OCI_ATTR_SERVER:
OQO0CQQOQ0:=O0QCQ0COQ0(GetGCHandleTarget(OQ0OQOCOQ0));
OCI_ATTR_SESSION:
OCO0CQQOQ0:=OO00CQQOQ0(GetGCHandleTarget(OQ0OQOCOQ0));
OCI_ATTR_CHARSET:begin
OC0CQOQOQ0:=Trim(O0CQCQOOQ0(False,OQ0OQOCOQ0,OC0OQOCOQ0));
if OCCCCQOOQ0.TryGetValue(OC0CQOQOQ0,O0OCQOQOQ0)then begin
OCCOCQQOQ0:=Word(O0OCQOQOQ0);
if O0OQCQOOQ0(OCCOCQQOQ0)then
OCCOCQQOQ0:=OQQOCQOOQ0(O0C0CQQOQ0);
end
else
raise Exception.Create('Unknown charset');
end;
OCI_ATTR_CONNECTION_TIMEOUT:
OQOOCQQOQ0:=Marshal.ReadInt32(OQ0OQOCOQ0);
OCI_ATTR_CHARSET_ID:begin
OCCOCQQOQ0:=ub2(Marshal.ReadInt16(OQ0OQOCOQ0));
if O0OQCQOOQ0(OCCOCQQOQ0)then
OCCOCQQOQ0:=OQQOCQOOQ0(O0C0CQQOQ0);
if OCCOCQQOQ0=OCOCCOCOQ0 then
OCCOCQQOQ0:=OQQOCQOOQ0(O0C0CQQOQ0);
end;
OCI_ATTR_IP_VERSION:
O0Q0CQQOQ0.OOO0OQCOQ0:=TIPVersion(Marshal.ReadInt32(OQ0OQOCOQ0));
{$IFNDEF LITE}
OCI_ATTR_IOHANDLER:
O0Q0CQQOQ0.OQO0OQCOQ0:=TCRIOHandler(GetGCHandleTarget(OQ0OQOCOQ0));
OCI_ATTR_SSL_OPTIONS:
O0Q0CQQOQ0.OCO0OQCOQ0:=TSSLOptions(GetGCHandleTarget(OQ0OQOCOQ0));
OCI_ATTR_HTTP_OPTIONS:
O0Q0CQQOQ0.OOQ0OQCOQ0:=THttpOptions(GetGCHandleTarget(OQ0OQOCOQ0));
OCI_ATTR_HTTP_PROXY_OPTIONS:
O0Q0CQQOQ0.OQQ0OQCOQ0:=TProxyOptions(GetGCHandleTarget(OQ0OQOCOQ0));
{$ENDIF}
else
Result:=inherited OO0OQOCOQ0(OQ0OQOCOQ0,OC0OQOCOQ0,O0OOQOCOQ0,OOOOQOCOQ0);
end;
end;
function OOQ0O0QOQ0.OQQ0O0QOQ0(OCQ0O0QOQ0:pOCIError;O0C0O0QOQ0:ub4;OOC0O0QOQ0:ub4;
OQC0O0QOQ0:ub4):sword;
begin
OQQQO0COQ0:=O0C0O0QOQ0;
OCQQO0COQ0:=OOC0O0QOQ0;
O0CQO0COQ0:=OQC0O0QOQ0;
Result:=OCI_SUCCESS;
end;
function OOQ0O0QOQ0.OCC0O0QOQ0(O00OO0QOQ0:pOCIError;OO0OO0QOQ0:IntPtr;OQ0OO0QOQ0:IntPtr;OC0OO0QOQ0:IntPtr;
O0OOO0QOQ0:IntPtr):sword;
begin
OOCQO0COQ0:=OO0OO0QOQ0;
OQCQO0COQ0:=MulticastDelegate(OQ0OO0QOQ0);
OCCQO0COQ0:=OC0OO0QOQ0;
O00CO0COQ0:=MulticastDelegate(O0OOO0QOQ0);
Result:=OCI_SUCCESS;
end;
function OO0OO0COQ0.OQ0OO0COQ0(OC0OO0COQ0:pOCIError;O0OOO0COQ0:ub4;OOOOO0COQ0:ub4;OQOOO0COQ0:ub4):sword;
begin
OQQQO0COQ0:=O0OOO0COQ0;
OCQQO0COQ0:=OOOOO0COQ0;
O0CQO0COQ0:=OQOOO0COQ0;
Result:=OCI_SUCCESS;
end;
function OO0OO0COQ0.OCOOO0COQ0(O0QOO0COQ0:pOCIError;OOQOO0COQ0:IntPtr;OQQOO0COQ0:IntPtr):sword;
begin
OCCQO0COQ0:=OOQOO0COQ0;
O00CO0COQ0:=MulticastDelegate(OQQOO0COQ0);
Result:=OCI_SUCCESS;
end;
constructor OQOOO0QOQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0);
begin
inherited Create(OOQ0QOCOQ0);
OCOOO0QOQ0:=OCI_LTYPE_UNK;
O0QOO0QOQ0:=TCRObjectList.Create;
end;
destructor OQOOO0QOQ0.Destroy;
begin
O0QOO0QOQ0.Free;
inherited;
end;
function OQOOO0QOQ0.O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case OCC0QOCOQ0 of
OCI_ATTR_NUM_COLS,
OCI_ATTR_NUM_PARAMS:
if(O0QOO0QOQ0.Count>0)and(O0COO0QOQ0(O0QOO0QOQ0[0]).OOCOO0QOQ0=OCI_PTYPE_UNK)then
Marshal.WriteInt16(OOC0QOCOQ0,O0QOO0QOQ0.Count-1)
else
Marshal.WriteInt16(OOC0QOCOQ0,O0QOO0QOQ0.Count);
OCI_ATTR_LTYPE:
Marshal.WriteByte(OOC0QOCOQ0,OCOOO0QOQ0);
else
Result:=inherited O0C0QOCOQ0(OOC0QOCOQ0,OQC0QOCOQ0,OCC0QOCOQ0,O00OQOCOQ0);
end;
end;
function OQOOO0QOQ0.OQOOQOCOQ0(OCOOQOCOQ0:pOCIError;var O0QOQOCOQ0:pOCIParam;OOQOQOCOQ0:ub4):sword;
var
OOQOO0QOQ0:O0CCQOCOQ0;
begin
if OOQOQOCOQ0<=ub4(O0QOO0QOQ0.Count)then begin
OOQOO0QOQ0:=O0CCQOCOQ0(O0QOO0QOQ0[OOQOQOCOQ0]);
O0QOQOCOQ0:=OOQOO0QOQ0.OO00QOCOQ0;
Result:=OCI_SUCCESS;
end
else
Result:=OCI_ERROR;
end;
procedure OQOOO0QOQ0.OQQOO0QOQ0(OCQOO0QOQ0:O0CCQOCOQ0);
begin
O0QOO0QOQ0.Add(OCQOO0QOQ0);
end;
constructor O0COO0QOQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0;O00C00QOQ0:ub1;OO0C00QOQ0:ub2);
begin
inherited Create(OOQ0QOCOQ0);
OOCOO0QOQ0:=O00C00QOQ0;
OQCOO0QOQ0:=OO0C00QOQ0;
end;
destructor O0COO0QOQ0.Destroy;
begin
OCCOO0QOQ0.Free;
inherited Destroy;
end;
function O0COO0QOQ0.OQCQ00QOQ0:O0CQQ0COQ0;
var
OCCQ00QOQ0:O0CCQOCOQ0;
begin
OCCQ00QOQ0:=Self;
repeat
OCCQ00QOQ0:=OCCQ00QOQ0.OOCCQOCOQ0;
until(OCCQ00QOQ0=nil)or(OCCQ00QOQ0 is O0CQQ0COQ0);
Result:=O0CQQ0COQ0(OCCQ00QOQ0);
end;
function O0COO0QOQ0.O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case OCC0QOCOQ0 of
OCI_ATTR_PTYPE:
Marshal.WriteByte(OOC0QOCOQ0,OOCOO0QOQ0);
OCI_ATTR_NUM_COLS,
OCI_ATTR_NUM_PARAMS:
if OCCOO0QOQ0=nil then
Marshal.WriteInt16(OOC0QOCOQ0,0)
else
Result:=OCCOO0QOQ0.O0C0QOCOQ0(OOC0QOCOQ0,OQC0QOCOQ0,OCC0QOCOQ0,O00OQOCOQ0);
OCI_ATTR_LIST_COLUMNS,
OCI_ATTR_LIST_SUBPROGRAMS,
OCI_ATTR_LIST_TYPE_METHODS:begin
if OCCOO0QOQ0=nil then
OCCOO0QOQ0:=OQOOO0QOQ0.Create(Self);
Marshal.WriteIntPtr(OOC0QOCOQ0,OCCOO0QOQ0.OO00QOCOQ0);
end;
OCI_ATTR_LIST_ARGUMENTS:
if OCCOO0QOQ0=nil then
Marshal.WriteIntPtr(OOC0QOCOQ0,nil)
else
Marshal.WriteIntPtr(OOC0QOCOQ0,OCCOO0QOQ0.OO00QOCOQ0);
OCI_ATTR_DATA_TYPE:
Marshal.WriteInt16(OOC0QOCOQ0,OOOQ00QOQ0);
OCI_ATTR_SCHEMA_NAME:
OC00QOCOQ0(OQ0C00QOQ0,OOC0QOCOQ0,OQC0QOCOQ0,OQ0Q00QOQ0);
OCI_ATTR_TYPE_NAME:
OC00QOCOQ0(OQ0C00QOQ0,OOC0QOCOQ0,OQC0QOCOQ0,OC0Q00QOQ0);
OCI_ATTR_NAME:
if OOCOO0QOQ0=OCI_PTYPE_SYN then
OC00QOCOQ0(OQ0C00QOQ0,OOC0QOCOQ0,OQC0QOCOQ0,OC0Q00QOQ0)
else
OC00QOCOQ0(OQ0C00QOQ0,OOC0QOCOQ0,OQC0QOCOQ0,OO0Q00QOQ0);
OCI_ATTR_DATA_SIZE:
Marshal.WriteInt32(OOC0QOCOQ0,Integer(OCOQ00QOQ0));
OCI_ATTR_PRECISION:
Marshal.WriteInt16(OOC0QOCOQ0,O0QQ00QOQ0);
OCI_ATTR_SCALE:
Marshal.WriteByte(OOC0QOCOQ0,OOQQ00QOQ0);
OCI_ATTR_IOMODE:
Marshal.WriteByte(OOC0QOCOQ0,O0CQ00QOQ0);
OCI_ATTR_CHARSET_ID:
Marshal.WriteInt16(OOC0QOCOQ0,SmallInt(OQQQ00QOQ0));
OCI_ATTR_CHARSET_FORM:
Marshal.WriteByte(OOC0QOCOQ0,OCQQ00QOQ0);
OCI_ATTR_HAS_DEFAULT:
Marshal.WriteInt16(OOC0QOCOQ0,OOCQ00QOQ0);
else
Result:=inherited O0C0QOCOQ0(OOC0QOCOQ0,OQC0QOCOQ0,OCC0QOCOQ0,O00OQOCOQ0);
end;
end;
destructor OCQOO0COQ0.Destroy;
begin
O0COO0COQ0:=nil;
OOCOO0COQ0.Free;
inherited;
end;
function OCQOO0COQ0.OQCOO0COQ0:O0CQQ0COQ0;
begin
Result:=O0CQQ0COQ0(OOCCQOCOQ0);
end;
procedure OCQOO0COQ0.OCCOO0COQ0(O00Q00COQ0:OOO0CQQOQ0;OO0Q00COQ0:O0COO0QOQ0);
var
OQ0Q00COQ0:OO00OQCOQ0;
begin
OQ0Q00COQ0:=O00Q00COQ0.O0COQOQOQ0;
OQ0Q00COQ0.O0OOQQCOQ0(18);
if O00Q00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
OQ0Q00COQ0.O0OOQQCOQ0(6);
end;
procedure OCQOO0COQ0.OC0Q00COQ0(O0OQ00COQ0:OOO0CQQOQ0;OOOQ00COQ0:O0COO0QOQ0);
var
OQOQ00COQ0:OO00OQCOQ0;
OCOQ00COQ0:Integer;
O0QQ00COQ0:TBytes;
OOQQ00COQ0:TBytes;
OQQQ00COQ0:TBytes;
OCQQ00COQ0:TBytes;
O0CQ00COQ0:TBytes;
begin
OQOQ00COQ0:=O0OQ00COQ0.O0COQOQOQ0;
O0QQ00COQ0:=OQOQ00COQ0.OQCOQQCOQ0(OCOQ00COQ0);
OOOQ00COQ0.O00Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(O0OQ00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,O0QQ00COQ0,OCOQ00COQ0);
OOQQ00COQ0:=OQOQ00COQ0.OQCOQQCOQ0(OCOQ00COQ0);
OOOQ00COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(O0OQ00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OOQQ00COQ0,OCOQ00COQ0);
OQOQ00COQ0.OC0OQQCOQ0;
OQOQ00COQ0.O0OOQQCOQ0(3);
OQOQ00COQ0.OQC0QQCOQ0;
OQOQ00COQ0.OO0OQQCOQ0;
OQOQ00COQ0.OC0OQQCOQ0;
OOOQ00COQ0.OQOQ00QOQ0:=OQOQ00COQ0.O0CQOOCOQ0;
OQOQ00COQ0.OO0OQQCOQ0;
if OQOQ00COQ0.OQC0QQCOQ0<>0 then
O0COO0QOQ0(OOOQ00COQ0).OCCOO0QOQ0:=OQO0C0COQ0(O0OQ00COQ0,OOOQ00COQ0);
OQOQ00COQ0.O0OOQQCOQ0(11);
if O0OQ00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
OQOQ00COQ0.O0OOQQCOQ0(6);
OQOQ00COQ0.OO0OQQCOQ0;
OQOQ00COQ0.OO0OQQCOQ0;
OQOQ00COQ0.OC0OQQCOQ0;
OQOQ00COQ0.O0OOQQCOQ0(4);
OQOQ00COQ0.OO0OQQCOQ0;
OQQQ00COQ0:=OQOQ00COQ0.OQCOQQCOQ0(OCOQ00COQ0);
OOOQ00COQ0.OQ0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(O0OQ00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OQQQ00COQ0,OCOQ00COQ0);
OCQQ00COQ0:=OQOQ00COQ0.OQCOQQCOQ0(OCOQ00COQ0);
OOOQ00COQ0.OC0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(O0OQ00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OCQQ00COQ0,OCOQ00COQ0);
OQOQ00COQ0.OQC0QQCOQ0;
O0CQ00COQ0:=OQOQ00COQ0.OQCOQQCOQ0(OCOQ00COQ0);
OOOQ00COQ0.O0OQ00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(O0OQ00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,O0CQ00COQ0,OCOQ00COQ0);
OQOQ00COQ0.O0CQOOCOQ0;
OQOQ00COQ0.O0CQOOCOQ0;
OQOQ00COQ0.O0CQOOCOQ0;
OQOQ00COQ0.OQC0QQCOQ0;
OQOQ00COQ0.OO0OQQCOQ0;
OQOQ00COQ0.O0OOQQCOQ0(5);
if O0OQ00COQ0.OCQ0CQQOQ0>=OOC0COCOQ0 then begin
OQOQ00COQ0.O0OOQQCOQ0(4);
if O0OQ00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
OQOQ00COQ0.O0OOQQCOQ0(9);
if O0OQ00COQ0.OCQ0CQQOQ0>=O00OCOCOQ0 then
OQOQ00COQ0.OQC0QQCOQ0;
end;
end;
end;
procedure OCQOO0COQ0.OOCQ00COQ0(OQCQ00COQ0:OOO0CQQOQ0;OCCQ00COQ0:O0COO0QOQ0);
var
O00C00COQ0:OO00OQCOQ0;
OO0C00COQ0:Integer;
OQ0C00COQ0:TBytes;
OC0C00COQ0:TBytes;
begin
O00C00COQ0:=OQCQ00COQ0.O0COQOQOQ0;
OQ0C00COQ0:=O00C00COQ0.OQCOQQCOQ0(OO0C00COQ0);
OCCQ00COQ0.O00Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQCQ00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OQ0C00COQ0,OO0C00COQ0);
OC0C00COQ0:=O00C00COQ0.OQCOQQCOQ0(OO0C00COQ0);
OCCQ00COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQCQ00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OC0C00COQ0,OO0C00COQ0);
O00C00COQ0.OC0OQQCOQ0;
O00C00COQ0.O0OOQQCOQ0(4);
O00C00COQ0.OQC0QQCOQ0;
O00C00COQ0.OO0OQQCOQ0;
O00C00COQ0.OC0OQQCOQ0;
O00C00COQ0.OQC0QQCOQ0;
O00C00COQ0.OO0OQQCOQ0;
if O00C00COQ0.OQC0QQCOQ0<>0 then
O0COO0QOQ0(OCCQ00COQ0).OCCOO0QOQ0:=OQO0C0COQ0(OQCQ00COQ0,OCCQ00COQ0);
O00C00COQ0.O0OOQQCOQ0(11);
if OQCQ00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
O00C00COQ0.O0OOQQCOQ0(6);
O00C00COQ0.OO0OQQCOQ0;
O00C00COQ0.O0OOQQCOQ0(13);
if OQCQ00COQ0.OCQ0CQQOQ0>=OOC0COCOQ0 then begin
O00C00COQ0.O0OOQQCOQ0(4);
if OQCQ00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
O00C00COQ0.O0OOQQCOQ0(6);
if OQCQ00COQ0.OCQ0CQQOQ0>=O00OCOCOQ0 then
O00C00COQ0.OQC0QQCOQ0;
end;
end;
end;
procedure OCQOO0COQ0.O0OC00COQ0(OOOC00COQ0:OOO0CQQOQ0;OQOC00COQ0:O0COO0QOQ0);
var
OCOC00COQ0:OO00OQCOQ0;
O0QC00COQ0:Integer;
OOQC00COQ0:TBytes;
OQQC00COQ0:TBytes;
begin
{$IFNDEF VER9P}
SetLength(OOQC00COQ0,0);
{$ENDIF}
OCOC00COQ0:=OOOC00COQ0.O0COQOQOQ0;
if OQOC00COQ0.OQCOO0QOQ0>0 then
OCOC00COQ0.O0OOQQCOQ0(11)
else begin
OOQC00COQ0:=OCOC00COQ0.OQCOQQCOQ0(O0QC00COQ0);
OQOC00COQ0.O00Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OOOC00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OOQC00COQ0,O0QC00COQ0);
end;
OQQC00COQ0:=OCOC00COQ0.OQCOQQCOQ0(O0QC00COQ0);
OQOC00COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OOOC00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OQQC00COQ0,O0QC00COQ0);
OCOC00COQ0.OC0OQQCOQ0;
if OQOC00COQ0.OQCOO0QOQ0=0 then begin
OCOC00COQ0.O0OOQQCOQ0(5);
OCOC00COQ0.OO0OQQCOQ0;
OCOC00COQ0.OQC0QQCOQ0;
OCOC00COQ0.OO0OQQCOQ0;
OCOC00COQ0.OC0OQQCOQ0;
end;
OCOC00COQ0.OO0OQQCOQ0;
if OCOC00COQ0.OQC0QQCOQ0<>0 then
O0COO0QOQ0(OQOC00COQ0).OCCOO0QOQ0:=OQO0C0COQ0(OOOC00COQ0,OQOC00COQ0);
OCOC00COQ0.O0OOQQCOQ0(20);
if OOOC00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
OCOC00COQ0.O0OOQQCOQ0(12);
end;
procedure OCQOO0COQ0.OCQC00COQ0(O0CC00COQ0:OOO0CQQOQ0;OOCC00COQ0:O0COO0QOQ0);
var
OQCC00COQ0:OO00OQCOQ0;
OCCC00COQ0:Integer;
O00000COQ0:TBytes;
OO0000COQ0:TBytes;
begin
{$IFNDEF VER9P}
SetLength(O00000COQ0,0);
{$ENDIF}
OQCC00COQ0:=O0CC00COQ0.O0COQOQOQ0;
if OOCC00COQ0.OQCOO0QOQ0>0 then
OQCC00COQ0.O0OOQQCOQ0(12)
else begin
O00000COQ0:=OQCC00COQ0.OQCOQQCOQ0(OCCC00COQ0);
OOCC00COQ0.O00Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(O0CC00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,O00000COQ0,OCCC00COQ0);
end;
OO0000COQ0:=OQCC00COQ0.OQCOQQCOQ0(OCCC00COQ0);
OOCC00COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(O0CC00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OO0000COQ0,OCCC00COQ0);
OQCC00COQ0.OC0OQQCOQ0;
if OOCC00COQ0.OQCOO0QOQ0=0 then begin
OQCC00COQ0.O0OOQQCOQ0(6);
OQCC00COQ0.OO0OQQCOQ0;
OQCC00COQ0.OQC0QQCOQ0;
OQCC00COQ0.OO0OQQCOQ0;
OQCC00COQ0.OC0OQQCOQ0;
end;
OQCC00COQ0.OO0OQQCOQ0;
if OQCC00COQ0.OQC0QQCOQ0<>0 then
O0COO0QOQ0(OOCC00COQ0).OCCOO0QOQ0:=OQO0C0COQ0(O0CC00COQ0,OOCC00COQ0);
OQCC00COQ0.O0OOQQCOQ0(19);
if O0CC00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
OQCC00COQ0.O0OOQQCOQ0(12);
end;
procedure OCQOO0COQ0.OQ0000COQ0(OC0000COQ0:OOO0CQQOQ0;O0O000COQ0:O0COO0QOQ0);
var
OOO000COQ0:OO00OQCOQ0;
OQO000COQ0:Integer;
OCO000COQ0:TBytes;
O0Q000COQ0:TBytes;
begin
OOO000COQ0:=OC0000COQ0.O0COQOQOQ0;
OCO000COQ0:=OOO000COQ0.OQCOQQCOQ0(OQO000COQ0);
O0O000COQ0.O00Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OC0000COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OCO000COQ0,OQO000COQ0);
O0Q000COQ0:=OOO000COQ0.OQCOQQCOQ0(OQO000COQ0);
O0O000COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OC0000COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,O0Q000COQ0,OQO000COQ0);
OOO000COQ0.OC0OQQCOQ0;
OOO000COQ0.O0OOQQCOQ0(7);
OOO000COQ0.OO0OQQCOQ0;
OOO000COQ0.OQC0QQCOQ0;
if OOO000COQ0.OO0OQQCOQ0>0 then begin
if OOO000COQ0.OQC0QQCOQ0<>0 then
O0COO0QOQ0(O0O000COQ0).OCCOO0QOQ0:=OQO0C0COQ0(OC0000COQ0,O0O000COQ0);
OOO000COQ0.O0OOQQCOQ0(17);
end;
if OOO000COQ0.OO0OQQCOQ0>0 then begin
if OOO000COQ0.OQC0QQCOQ0<>0 then
OQO0C0COQ0(OC0000COQ0,O0O000COQ0){$IFNDEF NEXTGEN}.Free{$ENDIF};
OOO000COQ0.O0OOQQCOQ0(18);
end;
if OC0000COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
OOO000COQ0.O0OOQQCOQ0(12);
end;
procedure OCQOO0COQ0.OOQ000COQ0(OQQ000COQ0:OOO0CQQOQ0;OCQ000COQ0:O0COO0QOQ0);
var
O0C000COQ0:OO00OQCOQ0;
OOC000COQ0:Integer;
OQC000COQ0:TBytes;
OCC000COQ0:TBytes;
begin
O0C000COQ0:=OQQ000COQ0.O0COQOQOQ0;
OQC000COQ0:=O0C000COQ0.OQCOQQCOQ0(OOC000COQ0);
OCQ000COQ0.O00Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQ000COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OQC000COQ0,OOC000COQ0);
OCC000COQ0:=O0C000COQ0.OQCOQQCOQ0(OOC000COQ0);
OCQ000COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQ000COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OCC000COQ0,OOC000COQ0);
O0C000COQ0.OC0OQQCOQ0;
O0C000COQ0.O0OOQQCOQ0(12);
O0C000COQ0.OQC0QQCOQ0;
O0C000COQ0.OO0OQQCOQ0;
O0C000COQ0.OC0OQQCOQ0;
OCQ000COQ0.OQOQ00QOQ0:=O0C000COQ0.O0CQOOCOQ0;
O0C000COQ0.O0OOQQCOQ0(8);
if OQQ000COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
O0C000COQ0.O0OOQQCOQ0(6);
end;
procedure OCQOO0COQ0.O00O00COQ0(OO0O00COQ0:OOO0CQQOQ0;OQ0O00COQ0:O0COO0QOQ0);
var
OC0O00COQ0:OO00OQCOQ0;
O0OO00COQ0:Integer;
OOOO00COQ0:TBytes;
OQOO00COQ0:TBytes;
OCOO00COQ0:TBytes;
O0QO00COQ0:TBytes;
begin
OC0O00COQ0:=OO0O00COQ0.O0COQOQOQ0;
OOOO00COQ0:=OC0O00COQ0.OQCOQQCOQ0(O0OO00COQ0);
OQ0O00COQ0.O00Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OO0O00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OOOO00COQ0,O0OO00COQ0);
OQOO00COQ0:=OC0O00COQ0.OQCOQQCOQ0(O0OO00COQ0);
OQ0O00COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OO0O00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OQOO00COQ0,O0OO00COQ0);
OC0O00COQ0.OC0OQQCOQ0;
OC0O00COQ0.O0OOQQCOQ0(8);
OC0O00COQ0.OQC0QQCOQ0;
OC0O00COQ0.OO0OQQCOQ0;
OC0O00COQ0.OC0OQQCOQ0;
OCOO00COQ0:=OC0O00COQ0.OQCOQQCOQ0(O0OO00COQ0);
OQ0O00COQ0.OQ0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OO0O00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OCOO00COQ0,O0OO00COQ0);
O0QO00COQ0:=OC0O00COQ0.OQCOQQCOQ0(O0OO00COQ0);
OQ0O00COQ0.OC0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OO0O00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,O0QO00COQ0,O0OO00COQ0);
OC0O00COQ0.O0OOQQCOQ0(7);
if OO0O00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
OC0O00COQ0.O0OOQQCOQ0(6);
end;
procedure OCQOO0COQ0.OOQO00COQ0(OQQO00COQ0:OOO0CQQOQ0;OCQO00COQ0:O0COO0QOQ0);
var
O0CO00COQ0:OO00OQCOQ0;
OOCO00COQ0:Integer;
OQCO00COQ0:TBytes;
OCCO00COQ0:TBytes;
begin
O0CO00COQ0:=OQQO00COQ0.O0COQOQOQ0;
OQCO00COQ0:=O0CO00COQ0.OQCOQQCOQ0(OOCO00COQ0);
OCQO00COQ0.O00Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQO00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OQCO00COQ0,OOCO00COQ0);
OCCO00COQ0:=O0CO00COQ0.OQCOQQCOQ0(OOCO00COQ0);
OCQO00COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQO00COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OCCO00COQ0,OOCO00COQ0);
O0CO00COQ0.OC0OQQCOQ0;
O0CO00COQ0.O0OOQQCOQ0(11);
O0CO00COQ0.OQC0QQCOQ0;
O0CO00COQ0.OO0OQQCOQ0;
O0CO00COQ0.OC0OQQCOQ0;
O0CO00COQ0.O0CQOOCOQ0;
O0CO00COQ0.O0CQOOCOQ0;
O0CO00COQ0.O0CQOOCOQ0;
O0CO00COQ0.O0CQOOCOQ0;
O0CO00COQ0.OQC0QQCOQ0;
O0CO00COQ0.OO0OQQCOQ0;
O0CO00COQ0.OC0OQQCOQ0;
O0CO00COQ0.O0OOQQCOQ0(3);
if OQQO00COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
O0CO00COQ0.O0OOQQCOQ0(6);
end;
procedure OCQOO0COQ0.O00QC0COQ0(OO0QC0COQ0:OOO0CQQOQ0;OQ0QC0COQ0:O0COO0QOQ0);
var
OC0QC0COQ0:OO00OQCOQ0;
O0OQC0COQ0:Integer;
OOOQC0COQ0:TBytes;
OQOQC0COQ0:TBytes;
OCOQC0COQ0:TBytes;
O0QQC0COQ0:TBytes;
begin
OC0QC0COQ0:=OO0QC0COQ0.O0COQOQOQ0;
OC0QC0COQ0.O0OOQQCOQ0(12);
OC0QC0COQ0.OQC0QQCOQ0;
OC0QC0COQ0.OO0OQQCOQ0;
OQ0QC0COQ0.OCOQ00QOQ0:=OC0QC0COQ0.OC0OQQCOQ0;
OC0QC0COQ0.OQC0QQCOQ0;
OQ0QC0COQ0.OOOQ00QOQ0:=OC0QC0COQ0.OQC0QQCOQ0;
OOOQC0COQ0:=OC0QC0COQ0.OQCOQQCOQ0(O0OQC0COQ0);
OQ0QC0COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OO0QC0COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OOOQC0COQ0,O0OQC0COQ0);
OQ0QC0COQ0.O0QQ00QOQ0:=OC0QC0COQ0.OQC0QQCOQ0;
OQ0QC0COQ0.OOQQ00QOQ0:=OC0QC0COQ0.OCC0QQCOQ0;
OC0QC0COQ0.OQC0QQCOQ0;
OQOQC0COQ0:=OC0QC0COQ0.OQCOQQCOQ0(O0OQC0COQ0);
OQ0QC0COQ0.OQ0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OO0QC0COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OQOQC0COQ0,O0OQC0COQ0);
OCOQC0COQ0:=OC0QC0COQ0.OQCOQQCOQ0(O0OQC0COQ0);
OQ0QC0COQ0.OC0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OO0QC0COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OCOQC0COQ0,O0OQC0COQ0);
OQ0QC0COQ0.OQOQ00QOQ0:=OC0QC0COQ0.O0CQOOCOQ0;
OQ0QC0COQ0.OQQQ00QOQ0:=OC0QC0COQ0.OO0OQQCOQ0;
OQ0QC0COQ0.OCQQ00QOQ0:=OC0QC0COQ0.OQC0QQCOQ0;
O0QQC0COQ0:=OC0QC0COQ0.OQCOQQCOQ0(O0OQC0COQ0);
OQ0QC0COQ0.OC0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OO0QC0COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,O0QQC0COQ0,O0OQC0COQ0);
OC0QC0COQ0.O0CQOOCOQ0;
OC0QC0COQ0.O0CQOOCOQ0;
OC0QC0COQ0.O0CQOOCOQ0;
OC0QC0COQ0.OO0OQQCOQ0;
if OO0QC0COQ0.OCQ0CQQOQ0>=OOC0COCOQ0 then begin
OC0QC0COQ0.O0OOQQCOQ0(4);
if OO0QC0COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
OC0QC0COQ0.O0OOQQCOQ0(7);
if OO0QC0COQ0.OCQ0CQQOQ0>=O00OCOCOQ0 then
OC0QC0COQ0.OQC0QQCOQ0;
end;
end;
end;
procedure OCQOO0COQ0.OOQQC0COQ0(OQQQC0COQ0:OOO0CQQOQ0;OCQQC0COQ0:O0COO0QOQ0);
var
O0CQC0COQ0:OO00OQCOQ0;
OOCQC0COQ0:Integer;
OQCQC0COQ0:TBytes;
OCCQC0COQ0:TBytes;
O00CC0COQ0:TBytes;
OO0CC0COQ0:TBytes;
begin
O0CQC0COQ0:=OQQQC0COQ0.O0COQOQOQ0;
O0CQC0COQ0.O0OOQQCOQ0(13);
O0CQC0COQ0.OQC0QQCOQ0;
O0CQC0COQ0.OO0OQQCOQ0;
O0CQC0COQ0.OO0OQQCOQ0;
OCQQC0COQ0.OCOQ00QOQ0:=O0CQC0COQ0.OC0OQQCOQ0;
O0CQC0COQ0.OQC0QQCOQ0;
OCQQC0COQ0.OOOQ00QOQ0:=O0CQC0COQ0.OQC0QQCOQ0;
OQCQC0COQ0:=O0CQC0COQ0.OQCOQQCOQ0(OOCQC0COQ0);
OCQQC0COQ0.OO0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQQC0COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OQCQC0COQ0,OOCQC0COQ0);
OCQQC0COQ0.O0QQ00QOQ0:=O0CQC0COQ0.OQC0QQCOQ0;
OCQQC0COQ0.OOQQ00QOQ0:=O0CQC0COQ0.OCC0QQCOQ0;
O0CQC0COQ0.OO0OQQCOQ0;
O0CQC0COQ0.OQC0QQCOQ0;
OCQQC0COQ0.O0CQ00QOQ0:=O0CQC0COQ0.OQC0QQCOQ0;
O0CQC0COQ0.OQC0QQCOQ0;
OCQQC0COQ0.OOCQ00QOQ0:=O0CQC0COQ0.OQC0QQCOQ0;
OCQQC0COQ0.OQQQ00QOQ0:=O0CQC0COQ0.OO0OQQCOQ0;
OCQQC0COQ0.OCQQ00QOQ0:=O0CQC0COQ0.OQC0QQCOQ0;
OCCQC0COQ0:=O0CQC0COQ0.OQCOQQCOQ0(OOCQC0COQ0);
OCQQC0COQ0.OQ0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQQC0COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OCCQC0COQ0,OOCQC0COQ0);
O00CC0COQ0:=O0CQC0COQ0.OQCOQQCOQ0(OOCQC0COQ0);
OCQQC0COQ0.OC0Q00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQQC0COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,O00CC0COQ0,OOCQC0COQ0);
OO0CC0COQ0:=O0CQC0COQ0.OQCOQQCOQ0(OOCQC0COQ0);
OCQQC0COQ0.O0OQ00QOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQQC0COQ0.OOQQO0QOQ0),OOQQQ0COQ0.O00CQ0COQ0,OO0CC0COQ0,OOCQC0COQ0);
O0CQC0COQ0.OQC0QQCOQ0;
O0CQC0COQ0.O0CQOOCOQ0;
O0CQC0COQ0.OO0OQQCOQ0;
if O0CQC0COQ0.OQC0QQCOQ0<>0 then begin
O0COO0QOQ0(OCQQC0COQ0).OCCOO0QOQ0:=OQO0C0COQ0(OQQQC0COQ0,OCQQC0COQ0);
O0CQC0COQ0.O0OOQQCOQ0(12);
if OQQQC0COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
O0CQC0COQ0.O0OOQQCOQ0(6);
end;
O0CQC0COQ0.O0OOQQCOQ0(3);
if OQQQC0COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then
O0CQC0COQ0.O0OOQQCOQ0(6);
end;
procedure OCQOO0COQ0.OQ0CC0COQ0(OC0CC0COQ0:OOO0CQQOQ0;O0OCC0COQ0:OQOOO0QOQ0);
var
OOOCC0COQ0:OO00OQCOQ0;
OQOCC0COQ0:O0CCQOCOQ0;
begin
OOOCC0COQ0:=OC0CC0COQ0.O0COQOQOQ0;
OOOCC0COQ0.O0OOQQCOQ0(8);
O0OCC0COQ0.OCOOO0QOQ0:=OOOCC0COQ0.OQC0QQCOQ0;
OOOCC0COQ0.OO0OQQCOQ0;
if OOOCC0COQ0.OQC0QQCOQ0>0 then
while True do begin
OQOCC0COQ0:=OOCCC0COQ0(OC0CC0COQ0,O0OCC0COQ0);
if OQOCC0COQ0<>nil then
O0OCC0COQ0.OQQOO0QOQ0(OQOCC0COQ0)
else
break;
end;
end;
function OCQOO0COQ0.OCOCC0COQ0(O0QCC0COQ0:OOO0CQQOQ0;OOQCC0COQ0:O0CCQOCOQ0):O0COO0QOQ0;
var
OQQCC0COQ0:OO00OQCOQ0;
OCQCC0COQ0:Byte;
O0CCC0COQ0:Word;
begin
OQQCC0COQ0:=O0QCC0COQ0.O0COQOQOQ0;
OQQCC0COQ0.OQC0QQCOQ0;
OCQCC0COQ0:=OQQCC0COQ0.OQC0QQCOQ0;
OQQCC0COQ0.O0CQOOCOQ0;
O0CCC0COQ0:=OQQCC0COQ0.OO0OQQCOQ0 and$00FF;
Result:=O0COO0QOQ0.Create(OOQCC0COQ0,OCQCC0COQ0,O0CCC0COQ0);
try
case OCQCC0COQ0 of
OCI_PTYPE_UNK:
OCCOO0COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_TABLE:
OC0Q00COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_VIEW:
OOCQ00COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_PROC:
O0OC00COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_FUNC:
OCQC00COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_PKG:
OQ0000COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_TYPE:
OOQ000COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_SYN:
O00O00COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_SEQ:
OOQO00COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_COL:
O00QC0COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
OCI_PTYPE_ARG:
OOQQC0COQ0(O0QCC0COQ0,O0COO0QOQ0(Result));
else
OQ0QCQOOQ0(301);
end;
except
Result.Free;
raise;
end;
end;
function OCQOO0COQ0.OOCCC0COQ0(OQCCC0COQ0:OOO0CQQOQ0;OCCCC0COQ0:O0CCQOCOQ0):O0COO0QOQ0;
var
O000C0COQ0:OO00OQCOQ0;
begin
Result:=nil;
O000C0COQ0:=OQCCC0COQ0.O0COQOQOQ0;
case O000C0COQ0.OO0OQQCOQ0 of
0:
Exit;
1:
Result:=OCOCC0COQ0(OQCCC0COQ0,OCCCC0COQ0);
else
OQ0QCQOOQ0(1);
end;
end;
function OCQOO0COQ0.OO00C0COQ0(OQ00C0COQ0:OOO0CQQOQ0;OC00C0COQ0:O0CCQOCOQ0):OQOOO0QOQ0;
var
O0O0C0COQ0:OO00OQCOQ0;
OOO0C0COQ0:Byte;
begin
O0O0C0COQ0:=OQ00C0COQ0.O0COQOQOQ0;
O0O0C0COQ0.OQC0QQCOQ0;
OOO0C0COQ0:=O0O0C0COQ0.OQC0QQCOQ0;
O0O0C0COQ0.O0CQOOCOQ0;
O0O0C0COQ0.OO0OQQCOQ0;
Result:=OQOOO0QOQ0.Create(OC00C0COQ0);
try
case OOO0C0COQ0 of
OCI_PTYPE_LIST:
OQ0CC0COQ0(OQ00C0COQ0,OQOOO0QOQ0(Result));
else
OQ0QCQOOQ0(301);
end;
except
Result.Free;
raise;
end;
end;
function OCQOO0COQ0.OQO0C0COQ0(OCO0C0COQ0:OOO0CQQOQ0;O0Q0C0COQ0:O0CCQOCOQ0):OQOOO0QOQ0;
var
OOQ0C0COQ0:OO00OQCOQ0;
begin
Result:=nil;
OOQ0C0COQ0:=OCO0C0COQ0.O0COQOQOQ0;
case OOQ0C0COQ0.OO0OQQCOQ0 of
0:
Exit;
1:
Result:=OO00C0COQ0(OCO0C0COQ0,O0Q0C0COQ0);
else
OQ0QCQOOQ0(1);
end;
end;
procedure OCQOO0COQ0.OQQ0C0COQ0(OCQ0C0COQ0:OOO0CQQOQ0;const O0C0C0COQ0:TBytes);
var
OOC0C0COQ0:OO00OQCOQ0;
begin
OOC0C0COQ0:=OCQ0C0COQ0.O0COQOQOQ0;
OOC0C0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OOC0C0COQ0.OOCOCQCOQ0(OOOO0OCOQ0);
OOC0C0COQ0.OOCOCQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(4);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OQ00QQCOQ0(O0C0C0COQ0);
OOC0C0COQ0.OC0QQQCOQ0(0);
OOC0C0COQ0.OC0QQQCOQ0(2);
OOC0C0COQ0.OC0QQQCOQ0(2);
end;
function OCQOO0COQ0.OQC0C0COQ0(OCC0C0COQ0:OOO0CQQOQ0;O00OC0COQ0:pOCIError):sword;
begin
Result:=OCI_ERROR;
end;
procedure OCQOO0COQ0.OO0OC0COQ0(OQ0OC0COQ0:OOO0CQQOQ0;const OC0OC0COQ0:string;O0OOC0COQ0:ub1);
var
OOOOC0COQ0:OO00OQCOQ0;
OQOOC0COQ0:TBytes;
begin
OOOOC0COQ0:=OQ0OC0COQ0.O0COQOQOQ0;
OOOOC0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OOOOC0COQ0.OOCOCQCOQ0(OCCO0OCOQ0);
OOOOC0COQ0.OOCOCQCOQ0(0);
OQOOC0COQ0:=O00CCQOOQ0(OOQQQ0COQ0.O00CQ0COQ0,O0OQCQOOQ0(OQ0OC0COQ0.OOQQO0QOQ0),OC0OC0COQ0);
if Length(OQOOC0COQ0)=0 then
OOOOC0COQ0.OQO0QQCOQ0
else
OOOOC0COQ0.OOO0QQCOQ0;
OOOOC0COQ0.OC0QQQCOQ0(Length(OQOOC0COQ0));
OOOOC0COQ0.OOCOCQCOQ0(O0OOC0COQ0);
OOOOC0COQ0.OC0QQQCOQ0(0);
OOOOC0COQ0.OC0QQQCOQ0(0);
OOOOC0COQ0.OC0QQQCOQ0(2);
OOOOC0COQ0.OQQQQQCOQ0(OQOOC0COQ0);
end;
function OCQOO0COQ0.OCOOC0COQ0(O0QOC0COQ0:OOO0CQQOQ0;OOQOC0COQ0:pOCIError):sword;
procedure OQQOC0COQ0;
begin
if(OOCOO0COQ0<>nil)and
(O0COO0QOQ0(OOCOO0COQ0).OOCOO0QOQ0=OCI_PTYPE_TYPE)
then begin
OQQ0C0COQ0(O0QOC0COQ0,O0COO0QOQ0(OOCOO0COQ0).OQOQ00QOQ0);
OQC0C0COQ0(O0QOC0COQ0,OOQOC0COQ0);
end;
end;
var
OCQOC0COQ0:OO00OQCOQ0;
O0COC0COQ0:byte;
begin
FreeAndNil(OOCOO0COQ0);
OCQOC0COQ0:=O0QOC0COQ0.O0COQOQOQ0;
while True do begin
O0COC0COQ0:=OCQOC0COQ0.OQC0QQCOQ0;
case O0COC0COQ0 of
OOOC0OCOQ0:
if OCQOC0COQ0.OO0OQQCOQ0>0 then
OOCOO0COQ0:=OOCCC0COQ0(O0QOC0COQ0,Self)as O0COO0QOQ0;
OQ0C0OCOQ0:begin
Result:=O0QOC0COQ0.OCO0COQOQ0(OOQOC0COQ0);
Exit;
end;
else
OQ0QCQOOQ0(1);
end;
end;
end;
function OCQOO0COQ0.O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case OCC0QOCOQ0 of
OCI_ATTR_PARAM:
if O0COO0COQ0<>nil then
Marshal.WriteIntPtr(OOC0QOCOQ0,O0COO0COQ0.OQQOQOCOQ0)
else
Marshal.WriteIntPtr(OOC0QOCOQ0,OOCOO0COQ0.OQQOQOCOQ0);
else
Result:=inherited O0C0QOCOQ0(OOC0QOCOQ0,OQC0QOCOQ0,OCC0QOCOQ0,O00OQOCOQ0);
end;
end;
function OCQOO0COQ0.OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;
begin
case O0OOQOCOQ0 of
OCI_ATTR_DESC_PUBLIC:
Result:=OCI_SUCCESS;
else
Result:=inherited OO0OQOCOQ0(OQ0OQOCOQ0,OC0OQOCOQ0,O0OOQOCOQ0,OOOOQOCOQ0);
end;
end;
function OCQOO0COQ0.OOCOC0COQ0(OQCOC0COQ0:OOO0CQQOQ0;const OCCOC0COQ0:string;O00QQ0COQ0:pOCIError):sword;
var
OO0QQ0COQ0:string;
OQ0QQ0COQ0:string;
OC0QQ0COQ0:string;
begin
OQ00CQOOQ0(OCCOC0COQ0,OO0QQ0COQ0,OQ0QQ0COQ0,OC0QQ0COQ0);
OO0QQ0COQ0:=OCQ0CQOOQ0(OO0QQ0COQ0);
OQ0QQ0COQ0:=OCQ0CQOOQ0(OQ0QQ0COQ0);
O0COO0COQ0:=OQCOC0COQ0.OQQ0QOQOQ0(OO0QQ0COQ0,OQ0QQ0COQ0,O00QQ0COQ0);
Result:=OCI_SUCCESS;
end;
function OCQOO0COQ0.O0OQQ0COQ0(OOOQQ0COQ0:OOO0CQQOQ0;const OQOQQ0COQ0:string;OCOQQ0COQ0:ub1;O0QQQ0COQ0:pOCIError):sword;
begin
OO0OC0COQ0(OOOQQ0COQ0,OQOQQ0COQ0,OCOQQ0COQ0);
Result:=OCOOC0COQ0(OOOQQ0COQ0,O0QQQ0COQ0);
end;
constructor OQ0O00QOQ0.Create;
begin
inherited;
OC0O00QOQ0:=TList.Create;
OOQO00QOQ0:=OCI_SUCCESS;
OCOO00QOQ0:=1;
OQQO00QOQ0:=True;
end;
destructor OQ0O00QOQ0.Destroy;
begin
OOQCC0QOQ0;
OC0O00QOQ0.Free;
inherited;
end;
function OQ0O00QOQ0.OCQO00QOQ0:OO0O00QOQ0;
begin
Result:=OO0O00QOQ0(OC0O00QOQ0[0]);
end;
function OQ0O00QOQ0.O0CO00QOQ0(OOCO00QOQ0:Integer):OO0O00QOQ0;
begin
Result:=OO0O00QOQ0(OC0O00QOQ0[OOCO00QOQ0]);
end;
procedure OQ0O00QOQ0.OQCO00QOQ0(OCCO00QOQ0:TCRList);
var
O00QC0QOQ0:Integer;
OO0QC0QOQ0:OO0OO0COQ0;
begin
if O0OO00QOQ0=0 then begin
OQOO00QOQ0:=False;
Exit;
end;
if OCCO00QOQ0=nil then begin
OQOO00QOQ0:=False;
Exit;
end;
for O00QC0QOQ0:=0 to OCCO00QOQ0.Count-1 do begin
OO0QC0QOQ0:=OO0OO0COQ0(OCCO00QOQ0[O00QC0QOQ0]);
if OO0QC0QOQ0.O000O0COQ0 in[SQLT_LNG,SQLT_LBI]then begin
OQOO00QOQ0:=False;
Exit;
end;
end;
OQOO00QOQ0:=True;
end;
procedure OQ0O00QOQ0.OQ0QC0QOQ0(OC0QC0QOQ0,O0OQC0QOQ0:TCRList);
var
OOOQC0QOQ0:Integer;
OQOQC0QOQ0:O0COQOCOQ0;
OCOQC0QOQ0:OOOOO0QOQ0;
begin
if(OC0QC0QOQ0=nil)or(O0OQC0QOQ0=nil)then begin
OQQO00QOQ0:=True;
Exit;
end;
if OC0QC0QOQ0.Count<>OC0QC0QOQ0.Count then begin
OQQO00QOQ0:=True;
Exit;
end;
for OOOQC0QOQ0:=0 to OC0QC0QOQ0.Count-1 do begin
OQOQC0QOQ0:=O0COQOCOQ0(OC0QC0QOQ0[OOOQC0QOQ0]);
if OQOQC0QOQ0.OQCOQOCOQ0 in[SQLT_CHR,SQLT_STR,SQLT_AVC,SQLT_AFC]then begin
OCOQC0QOQ0:=OOOOO0QOQ0(O0OQC0QOQ0[OOOQC0QOQ0]);
if not(OCOQC0QOQ0.OQCOQOCOQ0 in[SQLT_CHR,SQLT_STR,SQLT_AVC,SQLT_AFC,SQLT_RID])then begin
OQQO00QOQ0:=True;
Exit;
end;
end;
end;
OQQO00QOQ0:=False;
end;
procedure OQ0O00QOQ0.O0QQC0QOQ0(OOQQC0QOQ0:OO0O00QOQ0);
begin
SetLength(OOQQC0QOQ0.O00O00QOQ0,OOOO00QOQ0);
end;
procedure OQ0O00QOQ0.OQQQC0QOQ0(OCQQC0QOQ0:OO0O00QOQ0);
var
O0CQC0QOQ0:Integer;
OOCQC0QOQ0:OQC000QOQ0;
begin
for O0CQC0QOQ0:=0 to Length(OCQQC0QOQ0.O00O00QOQ0)-1 do begin
OOCQC0QOQ0:=@OCQQC0QOQ0.O00O00QOQ0[O0CQC0QOQ0];
OOCQC0QOQ0.OCQ000QOQ0:=nil;
if OOCQC0QOQ0.O0C000QOQ0<>nil then begin
Dispose(OOCQC0QOQ0.O0C000QOQ0);
OOCQC0QOQ0.O0C000QOQ0:=nil;
end;
end;
end;
function OQ0O00QOQ0.O00CC0QOQ0(OO0CC0QOQ0,OQ0CC0QOQ0:TCRList):Boolean;
begin
if OC0O00QOQ0.Count=0 then
OQ0QC0QOQ0(OO0CC0QOQ0,OQ0CC0QOQ0);
Result:=OQQO00QOQ0;
end;
procedure OQ0O00QOQ0.OC0CC0QOQ0(O0OCC0QOQ0:TCRList);
var
OOOCC0QOQ0:OO0O00QOQ0;
begin
if OC0O00QOQ0.Count=0 then begin
OOOO00QOQ0:=O0OCC0QOQ0.Count;
OQCO00QOQ0(O0OCC0QOQ0);
New(OOOCC0QOQ0);
O0QQC0QOQ0(OOOCC0QOQ0);
OC0O00QOQ0.Add(OOOCC0QOQ0);
end;
end;
procedure OQ0O00QOQ0.OQOCC0QOQ0;
var
OCOCC0QOQ0:Integer;
O0QCC0QOQ0:OO0O00QOQ0;
begin
for OCOCC0QOQ0:=0 to OC0O00QOQ0.Count-1 do begin
O0QCC0QOQ0:=OO0O00QOQ0(OC0O00QOQ0[OCOCC0QOQ0]);
Dispose(O0QCC0QOQ0);
end;
OC0O00QOQ0.Clear;
OCOO00QOQ0:=1;
O0QO00QOQ0:=0;
OOQO00QOQ0:=OCI_SUCCESS;
end;
procedure OQ0O00QOQ0.OOQCC0QOQ0;
begin
OQOCC0QOQ0;
OQOO00QOQ0:=False;
OQQO00QOQ0:=True;
end;
procedure OQ0O00QOQ0.OQQCC0QOQ0(OCQCC0QOQ0:ub4);
var
O0CCC0QOQ0:Integer;
OOCCC0QOQ0:OO0O00QOQ0;
OQCCC0QOQ0:Integer;
begin
for O0CCC0QOQ0:=OCOO00QOQ0 to OCQCC0QOQ0 do begin
OOCCC0QOQ0:=OO0O00QOQ0(OC0O00QOQ0[O0CCC0QOQ0]);
OQQQC0QOQ0(OOCCC0QOQ0);
end;
if OCQCC0QOQ0>=O0QO00QOQ0 then begin
OCOO00QOQ0:=1;
O0QO00QOQ0:=0;
OQCCC0QOQ0:=O0OO00QOQ0+1;
for O0CCC0QOQ0:=OC0O00QOQ0.Count-1 downto OQCCC0QOQ0 do begin
OOCCC0QOQ0:=OO0O00QOQ0(OC0O00QOQ0[O0CCC0QOQ0]);
Dispose(OOCCC0QOQ0);
end;
OC0O00QOQ0.Count:=OQCCC0QOQ0;
end
else
OCOO00QOQ0:=OCQCC0QOQ0+1;
end;
function OQ0O00QOQ0.OCCCC0QOQ0:OO0O00QOQ0;
var
O000C0QOQ0:OO0O00QOQ0;
begin
Inc(O0QO00QOQ0);
while Integer(O0QO00QOQ0)>=OC0O00QOQ0.Count do begin
New(O000C0QOQ0);
O0QQC0QOQ0(O000C0QOQ0);
OC0O00QOQ0.Add(O000C0QOQ0);
end;
Result:=OO0O00QOQ0(OC0O00QOQ0[O0QO00QOQ0]);
end;
function OQ0O00QOQ0.OO00C0QOQ0(OQ00C0QOQ0:ub4):Integer;
begin
Result:=OQ00C0QOQ0-(O0QO00QOQ0-OCOO00QOQ0+1)
end;
function OQ0O00QOQ0.OC00C0QOQ0(O0O0C0QOQ0:ub4):Integer;
begin
if not OQQO00QOQ0 and OQOO00QOQ0 then
Result:=O0O0C0QOQ0+O0OO00QOQ0-(O0QO00QOQ0-OCOO00QOQ0+1)
else
Result:=O0O0C0QOQ0;
end;
function OQ0O00QOQ0.OOO0C0QOQ0(OQO0C0QOQ0:ub4):Boolean;
begin
Result:=(OOQO00QOQ0=OCI_NO_DATA)or
(O0QO00QOQ0-OCOO00QOQ0+1>=OQO0C0QOQ0);
end;
function OQ0O00QOQ0.OCO0C0QOQ0:Boolean;
begin
Result:=O0QO00QOQ0>=OCOO00QOQ0;
end;
constructor OOCCQ0COQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0);
begin
inherited;
OQCCQ0COQ0:=O0CQQ0COQ0(OOQ0QOCOQ0);
O0O0Q0COQ0:=OQ0O00QOQ0.Create;
OCQ0Q0COQ0:='';
OOO0Q0COQ0:=TCRObjectList.Create;
OQO0Q0COQ0:=TCRObjectList.Create;
OCO0Q0COQ0:=TCRList.Create;
O0Q0Q0COQ0:=TCRList.Create;
OOQ0Q0COQ0:=TCRObjectList.Create;
OC00Q0COQ0:=OCCCO0QOQ0.Create(nil);
OOQOQ0COQ0:=OCI_STMT_STATE_INITIALIZED;
OQQOQ0COQ0:=OCC0C0QOQ0;
OCQOQ0COQ0:=False;
end;
destructor OOCCQ0COQ0.Destroy;
begin
if(O000Q0COQ0<>nil)and(O000Q0COQ0.OO00Q0COQ0<>nil)then
O000Q0COQ0.OO00Q0COQ0.Remove(Self);
OO0QOCQOQ0;
if(O0C0Q0COQ0<>0)and(OC00Q0COQ0.O0Q0O0QOQ0)and OC0QOCQOQ0.OOCO0QCOQ0 then
OOOCCQQOQ0(nil);
O0O0Q0COQ0.Free;
OOQ0Q0COQ0.Free;
OOO0Q0COQ0.Free;
OQO0Q0COQ0.Free;
OCO0Q0COQ0.Free;
O0Q0Q0COQ0.Free;
OC00Q0COQ0.OOO0O0QOQ0;
OC00Q0COQ0:=nil;
OQ00Q0COQ0:=nil;
inherited;
end;
function OOCCQ0COQ0.OQCOQ0COQ0:OO00OQCOQ0;
begin
if not OC00Q0COQ0.O0Q0O0QOQ0 then
OOCO0QOOQ0(12571,'ORA-12571: TNS:packet writer failure'#$A);
Result:=OO00OQCOQ0(OC00Q0COQ0.OQ00O0QOQ0);
end;
procedure OOCCQ0COQ0.OCCOQ0COQ0(O00QOCQOQ0:sword);
begin
O0C0Q0COQ0:=O00QOCQOQ0;
if O0C0Q0COQ0=0 then
OOQOQ0COQ0:=OCI_STMT_STATE_INITIALIZED;
end;
procedure OOCCQ0COQ0.OO0QOCQOQ0;
{$IFNDEF NEXTGEN}
var
OQ0QOCQOQ0:Integer;
{$ENDIF}
begin
if OO00Q0COQ0<>nil then begin
{$IFNDEF NEXTGEN}
for OQ0QOCQOQ0:=OO00Q0COQ0.Count-1 downto 0 do
OOCCQ0COQ0(OO00Q0COQ0[OQ0QOCQOQ0]).Free;
{$ENDIF}
OO00Q0COQ0.Free;
end;
end;
function OOCCQ0COQ0.O0OQOCQOQ0(OOOQOCQOQ0:pOCIError):sword;
begin
Result:=OCCCQ0COQ0.OCO0COQOQ0(OOOQOCQOQ0,Self);
end;
function OOCCQ0COQ0.OQOQOCQOQ0(OCOQOCQOQ0:pOCIError;var O0QQOCQOQ0:integer):sword;
begin
Result:=OCCCQ0COQ0.OQQ0COQOQ0(OCOQOCQOQ0,O0QQOCQOQ0,Self);
end;
procedure OOCCQ0COQ0.OOQQOCQOQ0;
begin
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OQ000OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.O0QQQQCOQ0(True);
OQ00Q0COQ0.OOOQQQCOQ0(0);
end;
function OOCCQ0COQ0.OQQQOCQOQ0(OCQQOCQOQ0:pOCIError):sword;
var
O0CQOCQOQ0:boolean;
OOCQOCQOQ0:byte;
begin
Result:=OCI_SUCCESS;
O0CQOCQOQ0:=False;
while not O0CQOCQOQ0 do begin
OOCQOCQOQ0:=OQ00Q0COQ0.OOC0QQCOQ0;
case OOCQOCQOQ0 of
OOOC0OCOQ0:
OCQCCQQOQ0:=OQ00Q0COQ0.OQ0OQQCOQ0;
OQ0C0OCOQ0:begin
Result:=O0OQOCQOQ0(OCQQOCQOQ0);
Exit;
end;
OQOC0OCOQ0:O0CQOCQOQ0:=True;
end;
end;
end;
procedure OOCCQ0COQ0.OQCQOCQOQ0;
begin
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OOO00OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OC0QQQCOQ0(O0C0Q0COQ0);
OOQOQ0COQ0:=OCI_STMT_STATE_INITIALIZED;
end;
function OOCCQ0COQ0.OCCQOCQOQ0(O00COCQOQ0:pOCIError):sword;
var
OO0COCQOQ0:boolean;
OQ0COCQOQ0:byte;
begin
Result:=OCI_SUCCESS;
OO0COCQOQ0:=False;
while not OO0COCQOQ0 do begin
OQ0COCQOQ0:=OQ00Q0COQ0.OOC0QQCOQ0;
case OQ0COCQOQ0 of
OQOC0OCOQ0:begin
OO0COCQOQ0:=True;
OCQCCQQOQ0:=0;
end;
OQ0C0OCOQ0:begin
Result:=O0OQOCQOQ0(O00COCQOQ0);
Exit;
end;
else
OQ0QCQOOQ0(1);
end;
end;
end;
procedure OOCCQ0COQ0.OC0COCQOQ0(O0OCOCQOQ0:O0COQOCOQ0);
var
OOOCOCQOQ0:byte;
OQOCOCQOQ0:ub4;
OCOCOCQOQ0:cardinal;
O0QCOCQOQ0:byte;
OOQCOCQOQ0:ub2;
OQQCOCQOQ0:ub2;
OCQCOCQOQ0:byte;
O0CCOCQOQ0:integer;
OOCCOCQOQ0:integer;
begin
OOOCOCQOQ0:=O0OCOCQOQ0.OQCOQOCOQ0;
OQOCOCQOQ0:=ub4(O0OCOCQOQ0.OCOQO0COQ0);
OCQCOCQOQ0:=1;
O0CCOCQOQ0:=0;
case OOOCOCQOQ0 of
SQLT_UNK:begin
OCQCOCQOQ0:=$80;
end;
SQLT_CHR,SQLT_STR,SQLT_AFC,SQLT_AVC,SQLT_RID,SQLT_RDD:begin
if O0OCOCQOQ0.OC0CO0COQ0=0 then
OQQCOCQOQ0:=OCCCQ0COQ0.OCCOCQQOQ0
else if O0OCOCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then
OQQCOCQOQ0:=OQQOCQOOQ0(OCCCQ0COQ0.O0C0CQQOQ0)
else
OQQCOCQOQ0:=O0OCOCQOQ0.OC0CO0COQ0;
if O0OCOCQOQ0 is OO0OO0COQ0 then begin
if(O0OCOCQOQ0.O0OCO0COQ0=2)and(O0OCOCQOQ0.OC0CO0COQ0<>OCOCCOCOQ0)then
OQOCOCQOQ0:=OQOCOCQOQ0*2
else if O0OCOCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then begin
OQOCOCQOQ0:=(OQOCOCQOQ0 shr 1)*GetMaxCharLength(OQQCOCQOQ0);
if OQOCOCQOQ0>4000 then
OQOCOCQOQ0:=4000;
end;
end;
if O0OCOCQOQ0 is OOQ0O0QOQ0 then begin
if OQOCOCQOQ0=0 then
if O0OCOCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then
OQOCOCQOQ0:=2
else
OQOCOCQOQ0:=1
else if OOOCOCQOQ0 in[SQLT_STR,SQLT_AVC]then
if O0OCOCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then begin
if OQOCOCQOQ0>2 then
Dec(OQOCOCQOQ0,2);
end
else begin
if OQOCOCQOQ0>1 then
Dec(OQOCOCQOQ0);
end;
if O0OCOCQOQ0.OC0CO0COQ0<>0 then
OOQCOCQOQ0:=O0OCOCQOQ0.OC0CO0COQ0
else
OOQCOCQOQ0:=OCCCQ0COQ0.O0CQO0QOQ0;
O0QCOCQOQ0:=GetFixedCharLength(OOQCOCQOQ0);
if O0OCOCQOQ0.O0OCO0COQ0=2 then
OQOCOCQOQ0:=OQOCOCQOQ0*GetMaxCharLength(OCCCQ0COQ0.O0OQO0QOQ0)div O0QCOCQOQ0
else if O0OCOCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then
OQOCOCQOQ0:=OQOCOCQOQ0 shr 1*GetMaxCharLength(OCCCQ0COQ0.OOQOCQQOQ0)
else if OOQCOCQOQ0<>OCCCQ0COQ0.OOQQO0QOQ0 then
OQOCOCQOQ0:=OQOCOCQOQ0*GetMaxCharLength(OCCCQ0COQ0.OCCOCQQOQ0)div O0QCOCQOQ0;
if OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE]then
if OCCCQ0COQ0.OCQ0CQQOQ0>=O00OCOCOQ0 then
OCOCOCQOQ0:=$FFFE
else
OCOCOCQOQ0:=$7F00
else
OCOCOCQOQ0:=OCCCQ0COQ0.O0OOCQQOQ0;
if OQOCOCQOQ0>OCOCOCQOQ0 then
OQOCOCQOQ0:=OCOCOCQOQ0;
end;
if OOOCOCQOQ0=SQLT_AVC then
OOOCOCQOQ0:=SQLT_AFC
else if OOOCOCQOQ0<>SQLT_AFC then
OOOCOCQOQ0:=SQLT_CHR;
end;
SQLT_NUM,SQLT_INT,SQLT_UIN,SQLT_FLT:begin
OOOCOCQOQ0:=SQLT_NUM;
OQOCOCQOQ0:=22;
end;
SQLT_BFLOAT:begin
OOOCOCQOQ0:=SQLT_IBFLOAT;
OQOCOCQOQ0:=4;
end;
SQLT_BDOUBLE:begin
OOOCOCQOQ0:=SQLT_IBDOUBLE;
OQOCOCQOQ0:=8;
end;
SQLT_CUR,SQLT_RSET:begin
OOOCOCQOQ0:=SQLT_CUR;
OQOCOCQOQ0:=1;
end;
SQLT_BIN:
OCQCOCQOQ0:=OCQCOCQOQ0 or$02;
SQLT_TIMESTAMP:begin
OOOCOCQOQ0:=180;
OQOCOCQOQ0:=11;
end;
SQLT_TIMESTAMP_TZ:begin
OOOCOCQOQ0:=181;
OQOCOCQOQ0:=13;
end;
SQLT_TIMESTAMP_LTZ:begin
OOOCOCQOQ0:=231;
OQOCOCQOQ0:=11;
end;
SQLT_INTERVAL_YM:begin
OOOCOCQOQ0:=182;
OQOCOCQOQ0:=5;
end;
SQLT_INTERVAL_DS:begin
OOOCOCQOQ0:=183;
OQOCOCQOQ0:=11;
end;
SQLT_BLOB,SQLT_CLOB,SQLT_BFILEE,SQLT_CFILEE:begin
OQOCOCQOQ0:=4;
if(OCCCQ0COQ0.OCOOCQQOQ0>=11000)and(O0OCOCQOQ0.OOOCO0COQ0<>0)then begin
O0CCOCQOQ0:=$2000000;
if O0OCOCQOQ0.OQOCO0COQ0>0 then
O0OCOCQOQ0.O00QO0COQ0:=O0OCOCQOQ0.OQOCO0COQ0;
end;
end;
SQLT_LNG:
if O0OQCQOOQ0(OCCCQ0COQ0.OCCOCQQOQ0)and not O0OQCQOOQ0(O0OCOCQOQ0.OC0CO0COQ0)then
if OQOCOCQOQ0<$20000000 then
OQOCOCQOQ0:=OQOCOCQOQ0*3
else
OQOCOCQOQ0:=MaxInt
else if OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE]then
if OQOCOCQOQ0<$20000000 then
if GetMaxCharLength(OCCCQ0COQ0.OOQOCQQOQ0)>3 then
OQOCOCQOQ0:=OQOCOCQOQ0*3
else
OQOCOCQOQ0:=OQOCOCQOQ0*GetMaxCharLength(OCCCQ0COQ0.OOQOCQQOQ0)
else
OQOCOCQOQ0:=MaxInt;
SQLT_NTY:begin
OOOCOCQOQ0:=109;
OQOCOCQOQ0:=MaxInt;
end;
SQLT_REF:begin
OOOCOCQOQ0:=111;
OQOCOCQOQ0:=36;
end;
end;
if O0OCOCQOQ0 is OOQ0O0QOQ0 then
O0OCOCQOQ0.OCCOQOCOQ0:=OQOCOCQOQ0;
OOCCOCQOQ0:=O0OCOCQOQ0.OO0CO0COQ0;
if OOCCOCQOQ0>0 then
OCQCOCQOQ0:=OCQCOCQOQ0 or$40;
OQ00Q0COQ0.OOCOCQCOQ0(OOOCOCQOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OCQCOCQOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OC0QQQCOQ0(OQOCOCQOQ0);
OQ00Q0COQ0.OC0QQQCOQ0(OOCCOCQOQ0);
OQ00Q0COQ0.OC0QQQCOQ0(O0CCOCQOQ0);
if OCCCQ0COQ0.O0C0CQQOQ0>=8000 then begin
if O0OCOCQOQ0.O0QCO0COQ0<>nil then begin
OQ00Q0COQ0.OQ00QQCOQ0(O0Q0QQOOQ0(O0OCOCQOQ0.O00OO0COQ0).OOCQCOOOQ0);
OQ00Q0COQ0.OOOQQQCOQ0(O0Q0QQOOQ0(O0OCOCQOQ0.O00OO0COQ0).OQCQCOOOQ0);
end
else begin
OQ00Q0COQ0.OQ00QQCOQ0(nil);
OQ00Q0COQ0.OOOQQQCOQ0(0);
end;
if(O0OCOCQOQ0.O0OCO0COQ0<>2)then begin
OQ00Q0COQ0.OC0QQQCOQ0(0);
OQ00Q0COQ0.OOCOCQCOQ0(1)
end
else begin
if(OOOCOCQOQ0<>SQLT_CLOB)then
OQ00Q0COQ0.OC0QQQCOQ0(OCCCQ0COQ0.O0OQO0QOQ0)
else
OQ00Q0COQ0.OC0QQQCOQ0(0);
OQ00Q0COQ0.OOCOCQCOQ0(O0OCOCQOQ0.O0OCO0COQ0);
end;
if OCCCQ0COQ0.OCQ0CQQOQ0>=O0C0COCOQ0 then
OQ00Q0COQ0.OOOQQQCOQ0(O0OCOCQOQ0.O00QO0COQ0);
end;
end;
function OOCCQ0COQ0.OQCCOCQOQ0(OCCCOCQOQ0:O0COQOCOQ0):sword;
var
O000OCQOQ0:byte;
OO00OCQOQ0:byte;
OQ00OCQOQ0:word;
OC00OCQOQ0:byte;
O0O0OCQOQ0:cardinal;
OOO0OCQOQ0:integer;
begin
O000OCQOQ0:=OQ00Q0COQ0.OQC0QQCOQ0;
case O000OCQOQ0 of
109:O000OCQOQ0:=SQLT_NTY;
111:O000OCQOQ0:=SQLT_REF;
180:O000OCQOQ0:=SQLT_TIMESTAMP;
181:O000OCQOQ0:=SQLT_TIMESTAMP_TZ;
231:O000OCQOQ0:=SQLT_TIMESTAMP_LTZ;
182:O000OCQOQ0:=SQLT_INTERVAL_YM;
183:O000OCQOQ0:=SQLT_INTERVAL_DS;
208:O000OCQOQ0:=SQLT_RDD;
end;
OQ00Q0COQ0.OQC0QQCOQ0;
OO00OCQOQ0:=OQ00Q0COQ0.OQC0QQCOQ0;
if O000OCQOQ0 in[SQLT_NUM,SQLT_INTERVAL_DS]then begin
OQ00OCQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
OC00OCQOQ0:=0;
end
else begin
OQ00OCQOQ0:=0;
OC00OCQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
end;
O0O0OCQOQ0:=OQ00Q0COQ0.OC0OQQCOQ0;
OQ00Q0COQ0.OQ0OQQCOQ0;
OOO0OCQOQ0:=OQ00Q0COQ0.OQ0OQQCOQ0;
OCCCOCQOQ0.OQCOQOCOQ0:=O000OCQOQ0;
OCCCOCQOQ0.OCCOQOCOQ0:=O0O0OCQOQ0;
OCCCOCQOQ0.OQ0QO0COQ0:=OO00OCQOQ0;
OCCCOCQOQ0.OC0QO0COQ0:=OQ00OCQOQ0;
OCCCOCQOQ0.O0OQO0COQ0:=OC00OCQOQ0;
OCCCOCQOQ0.OO0QO0COQ0:=OOO0OCQOQ0 and 4096 shr 12;
OCCCOCQOQ0.O00QO0COQ0:=0;
if OCCCQ0COQ0.O0C0CQQOQ0>=8000 then begin
OCCCOCQOQ0.OCOCO0COQ0:=OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OCCCOCQOQ0.O0OCO0COQ0:=OQ00Q0COQ0.OQC0QQCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=O0C0COCOQ0 then
OCCCOCQOQ0.O00QO0COQ0:=OQ00Q0COQ0.OC0OQQCOQ0;
end;
Result:=OCI_SUCCESS;
end;
procedure OOCCQ0COQ0.OQO0OCQOQ0;
var
OCO0OCQOQ0:Integer;
O0Q0OCQOQ0:Integer;
OOQ0OCQOQ0:OOQ0O0QOQ0;
begin
OQ00Q0COQ0.OOC0QQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
O0Q0OCQOQ0:=OQ00Q0COQ0.OCC0QQCOQ0;
if O0Q0OCQOQ0>0 then begin
OQ00Q0COQ0.OOC0QQCOQ0;
OOQ0OCQOQ0:=OOQ0O0QOQ0.Create(Self);
try
for OCO0OCQOQ0:=0 to O0Q0OCQOQ0-1 do begin
OQCCOCQOQ0(OOQ0OCQOQ0);
OQ00Q0COQ0.OQC0QQCOQ0;
OQ00Q0COQ0.OQC0QQCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
OQ00Q0COQ0.OO0OQQCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OO0OCOCOQ0 then
OQ00Q0COQ0.OC0OQQCOQ0;
end;
end;
finally
OOQ0OCQOQ0.Free;
end;
end;
OQ00Q0COQ0.O0CQOOCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
OQ00Q0COQ0.OQ0OQQCOQ0;
OQ00Q0COQ0.OQ0OQQCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OCC0COCOQ0 then begin
OQ00Q0COQ0.OQ0OQQCOQ0;
OQ00Q0COQ0.OQ0OQQCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=O00OCOCOQ0 then
OQ00Q0COQ0.O0CQOOCOQ0;
end;
end;
end;
procedure OOCCQ0COQ0.OQQ0OCQOQ0(OCQ0OCQOQ0:TCRList);
function O0C0OCQOQ0(OOC0OCQOQ0:O0COQOCOQ0;OQC0OCQOQ0:ub4):boolean;
var
OCC0OCQOQ0:Byte;
begin
if OOC0OCQOQ0.OQ00O0COQ0>0 then
Result:=OOC0OCQOQ0.OQ00O0COQ0>OQC0OCQOQ0
else if OOC0OCQOQ0.OCCOQOCOQ0>OQC0OCQOQ0 then
Result:=True
else if(OOC0OCQOQ0.OQC0O0COQ0<>2)and(OCCCQ0COQ0.OOQQO0QOQ0<>OCCCQ0COQ0.OQ0QO0QOQ0)then begin
OCC0OCQOQ0:=GetMaxCharLength(OCCCQ0COQ0.OQ0QO0QOQ0);
if OCC0OCQOQ0>3 then
OCC0OCQOQ0:=3;
Result:=OOC0OCQOQ0.OCCOQOCOQ0*OCC0OCQOQ0>OQC0OCQOQ0;
end
else
Result:=False;
end;
function O00OOCQOQ0(OO0OOCQOQ0:O0COQOCOQ0):boolean;
begin
if OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE]then
Result:=False
else
case OO0OOCQOQ0.OQCOQOCOQ0 of
SQLT_LBI:
Result:=OO0OOCQOQ0.OCCOQOCOQ0>OCCCQ0COQ0.OOOOCQQOQ0;
SQLT_LNG:
if OO0OOCQOQ0.OCCOQOCOQ0=Cardinal(OO0OOCQOQ0.OCOQO0COQ0)then
Result:=O0C0OCQOQ0(OO0OOCQOQ0,OCCCQ0COQ0.OOOOCQQOQ0)
else
Result:=OO0OOCQOQ0.OCCOQOCOQ0>OCCCQ0COQ0.OOOOCQQOQ0;
SQLT_CHR,SQLT_STR,SQLT_AVC,SQLT_AFC:
if O0OQCQOOQ0(OCCCQ0COQ0.OCCOCQQOQ0)and not O0OQCQOOQ0(OO0OOCQOQ0.OC0CO0COQ0)then
if OQQCCQQOQ0.OCQ0CQQOQ0>=O0OOCOCOQ0 then
Result:=OO0OOCQOQ0.OCCOQOCOQ0>OCCCQ0COQ0.O0OOCQQOQ0
else
Result:=O0C0OCQOQ0(OO0OOCQOQ0,OCCCQ0COQ0.O0OOCQQOQ0)
else
Result:=O0C0OCQOQ0(OO0OOCQOQ0,OCCCQ0COQ0.O0OOCQQOQ0);
else
Result:=False;
end;
end;
type
OQ0OOCQOQ0=record
OC0OOCQOQ0:O0COQOCOQ0;
O0OOOCQOQ0:TBytes;
end;
var
OOOOOCQOQ0:Integer;
OQOOOCQOQ0,OCOOOCQOQ0:Word;
O0QOOCQOQ0:O0COQOCOQ0;
OOQOOCQOQ0:TBytes;
OQQOOCQOQ0:integer;
OCQOOCQOQ0:IntPtr;
O0COOCQOQ0:pOCIInd;
OOCOOCQOQ0:pub2;
OQCOOCQOQ0:integer;
OCCOOCQOQ0:O0CCCOOOQ0;
O00Q0CQOQ0:array of OQ0OOCQOQ0;
begin
{$IFDEF FPC}
SetLength(O00Q0CQOQ0,0);
{$ENDIF}
if OQQ0Q0COQ0=nil then
OQQOOCQOQ0:=OCQ0OCQOQ0.Count
else
OQQOOCQOQ0:=Length(OQQ0Q0COQ0);
O0QOOCQOQ0:=nil;
for OOOOOCQOQ0:=0 to OQQOOCQOQ0-1 do
if(OQQ0Q0COQ0=nil)or((OQQ0Q0COQ0[OOOOOCQOQ0]and$20)<>0)then begin
if O0QOOCQOQ0=nil then
OQ00Q0COQ0.OOCOCQCOQ0(O0OC0OCOQ0);
O0QOOCQOQ0:=O0COQOCOQ0(OCQ0OCQOQ0[OOOOOCQOQ0]);
if O0QOOCQOQ0.OO0CO0COQ0>0 then begin
OQ00Q0COQ0.OC0QQQCOQ0(O0QOOCQOQ0.OO0CO0COQ0);
OQCOOCQOQ0:=O0QOOCQOQ0.OO0CO0COQ0;
end
else
if O0QOOCQOQ0.OQCOQOCOQ0=SQLT_UNK then
OQCOOCQOQ0:=0
else
OQCOOCQOQ0:=1;
OQOOOCQOQ0:=0;
while OQOOOCQOQ0<OQCOOCQOQ0 do begin
if O0QOOCQOQ0.OO0CO0COQ0=0 then begin
OCQOOCQOQ0:=PtrOffset(O0QOOCQOQ0.OQOQO0COQ0,OOOOQ0COQ0*O0QOOCQOQ0.OQQQO0COQ0);
O0COOCQOQ0:=PtrOffset(O0QOOCQOQ0.O0QQO0COQ0,OOOOQ0COQ0*O0QOOCQOQ0.OCQQO0COQ0);
if O0QOOCQOQ0.OOQQO0COQ0<>nil then
OOCOOCQOQ0:=PtrOffset(O0QOOCQOQ0.OOQQO0COQ0,OOOOQ0COQ0*O0QOOCQOQ0.O0CQO0COQ0)
else
OOCOOCQOQ0:=nil;
end
else begin
OCQOOCQOQ0:=PtrOffset(O0QOOCQOQ0.OQOQO0COQ0,OQOOOCQOQ0*O0QOOCQOQ0.OQQQO0COQ0);
O0COOCQOQ0:=PtrOffset(O0QOOCQOQ0.O0QQO0COQ0,OQOOOCQOQ0*O0QOOCQOQ0.OCQQO0COQ0);
if O0QOOCQOQ0.OOQQO0COQ0<>nil then
OOCOOCQOQ0:=PtrOffset(O0QOOCQOQ0.OOQQO0COQ0,OQOOOCQOQ0*O0QOOCQOQ0.O0CQO0COQ0)
else
OOCOOCQOQ0:=nil;
end;
case O0QOOCQOQ0.OQCOQOCOQ0 of
SQLT_BLOB,SQLT_CLOB,SQLT_BFILEE,SQLT_CFILEE:begin
if(O0COOCQOQ0=nil)or(O0COOCQOQ0^=OCI_IND_NOTNULL)then begin
OOQOOCQOQ0:=OOCCQ0QOQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OCQOOCQOQ0))).OQCCQ0QOQ0;
if Length(OOQOOCQOQ0)>0 then
if OCCCQ0COQ0.OCQ0CQQOQ0>=OCQCCOCOQ0 then begin
OCOOOCQOQ0:=(OOQOOCQOQ0[0]shl 8)+OOQOOCQOQ0[1]+2;
if Length(OOQOOCQOQ0)>OCOOOCQOQ0 then
SetLength(OOQOOCQOQ0,OCOOOCQOQ0);
OQ00Q0COQ0.OOOQQQCOQ0(Length(OOQOOCQOQ0));
end;
end
else
SetLength(OOQOOCQOQ0,0);
OQ00Q0COQ0.O0OCQQCOQ0(OOQOOCQOQ0);
end;
SQLT_LBI,SQLT_LNG:
if not O00OOCQOQ0(O0QOOCQOQ0)then
OO0Q0CQOQ0(O0QOOCQOQ0,OCQOOCQOQ0,O0COOCQOQ0)
else begin
SetLength(O00Q0CQOQ0,Length(O00Q0CQOQ0)+1);
O00Q0CQOQ0[Length(O00Q0CQOQ0)-1].OC0OOCQOQ0:=O0QOOCQOQ0;
O00Q0CQOQ0[Length(O00Q0CQOQ0)-1].O0OOOCQOQ0:=nil;
end;
SQLT_CUR,SQLT_RSET:begin
if OOCCQ0COQ0(GetGCHandleTarget(Marshal.ReadIntPtr(O0QOOCQOQ0.OQOQO0COQ0))).O0C0Q0COQ0=0 then begin
SetLength(OOQOOCQOQ0,1);
OOQOOCQOQ0[0]:=0;
end
else begin
OCQCCQQOQ0:=OOCCQ0COQ0(GetGCHandleTarget(Marshal.ReadIntPtr(O0QOOCQOQ0.OQOQO0COQ0))).O0C0Q0COQ0;
if OCQCCQQOQ0<256 then begin
SetLength(OOQOOCQOQ0,2);
OOQOOCQOQ0[0]:=1;
OOQOOCQOQ0[1]:=OCQCCQQOQ0;
end
else begin
SetLength(OOQOOCQOQ0,3);
OOQOOCQOQ0[0]:=2;
OOQOOCQOQ0[1]:=(OCQCCQQOQ0 shr 8)and$FF;
OOQOOCQOQ0[2]:=OCQCCQQOQ0 and$FF;
end;
end;
OQ00Q0COQ0.O0OCQQCOQ0(OOQOOCQOQ0);
end;
SQLT_NTY:begin
if(O0COOCQOQ0<>nil)and(O0COOCQOQ0^=OCI_IND_NOTNULL)then begin
OCCOOCQOQ0:=O0CCCOOOQ0(GetGCHandleTarget(OCQOOCQOQ0));
OOQOOCQOQ0:=O0Q0QQOOQ0(O0QOOCQOQ0.O00OO0COQ0).O00QCOOOQ0(OCCOOCQOQ0);
end
else
SetLength(OOQOOCQOQ0,0);
OQ00Q0COQ0.OQ00QQCOQ0(nil);
OQ00Q0COQ0.OQ00QQCOQ0(nil);
OQ00Q0COQ0.OQ00QQCOQ0(nil);
OQ00Q0COQ0.OO0QQQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0(Cardinal(Length(OOQOOCQOQ0)));
OQ00Q0COQ0.OOOQQQCOQ0(1);
if Length(OOQOOCQOQ0)>0 then
OQ00Q0COQ0.O0OCQQCOQ0(OOQOOCQOQ0);
end;
SQLT_REF:begin
if(O0COOCQOQ0<>nil)and(O0COOCQOQ0^=OCI_IND_NOTNULL)then
OOQOOCQOQ0:=OQOCO0OOQ0(GetGCHandleTarget(OCQOOCQOQ0)).O0O0O0OOQ0
else
SetLength(OOQOOCQOQ0,0);
OQ00Q0COQ0.O0OCQQCOQ0(OOQOOCQOQ0);
end;
else begin
if(O0COOCQOQ0=nil)or(O0COOCQOQ0^=OCI_IND_NOTNULL)then
OOQQ0CQOQ0(O0QOOCQOQ0,OCQOOCQOQ0,O0COOCQOQ0,OOCOOCQOQ0,OOQOOCQOQ0)
else
SetLength(OOQOOCQOQ0,0);
if not O00OOCQOQ0(O0QOOCQOQ0)then
OQ00Q0COQ0.O0OCQQCOQ0(OOQOOCQOQ0)
else begin
SetLength(O00Q0CQOQ0,Length(O00Q0CQOQ0)+1);
O00Q0CQOQ0[Length(O00Q0CQOQ0)-1].OC0OOCQOQ0:=O0QOOCQOQ0;
O00Q0CQOQ0[Length(O00Q0CQOQ0)-1].O0OOOCQOQ0:=OOQOOCQOQ0;
end;
end;
end;
Inc(OQOOOCQOQ0);
end;
end;
for OOOOOCQOQ0:=0 to Length(O00Q0CQOQ0)-1 do begin
O0QOOCQOQ0:=O00Q0CQOQ0[OOOOOCQOQ0].OC0OOCQOQ0;
case O0QOOCQOQ0.OQCOQOCOQ0 of
SQLT_LBI,SQLT_LNG:
OO0Q0CQOQ0(O0QOOCQOQ0,O0QOOCQOQ0.OQOQO0COQ0,O0QOOCQOQ0.O0QQO0COQ0);
SQLT_CHR,SQLT_STR,SQLT_AFC,SQLT_AVC:
OQ00Q0COQ0.O0OCQQCOQ0(O00Q0CQOQ0[OOOOOCQOQ0].O0OOOCQOQ0);
end;
end;
Inc(OOOOQ0COQ0);
end;
procedure OOCCQ0COQ0.OO0Q0CQOQ0(OQ0Q0CQOQ0:O0COQOCOQ0;OC0Q0CQOQ0:IntPtr;O0OQ0CQOQ0:pOCIInd);
var
OOOQ0CQOQ0:TBytes;
OQOQ0CQOQ0:integer;
OCOQ0CQOQ0:ub1;
O0QQ0CQOQ0:ub4;
begin
OOOQ0CQOQ0:=nil;
OQOQ0CQOQ0:=0;
if OQ0Q0CQOQ0.OQCQO0COQ0<>nil then begin
OQOQ0CQOQ0:=0;
OCOQ0CQOQ0:=OCI_FIRST_PIECE;
repeat
Assert(OQ0Q0CQOQ0 is OOQ0O0QOQ0);
TOCICallbackInBind(OQ0Q0CQOQ0.OQCQO0COQ0)(OQ0Q0CQOQ0.OOCQO0COQ0,OQ0Q0CQOQ0.OQQOQOCOQ0,OOOOQ0COQ0,0,
OC0Q0CQOQ0,O0QQ0CQOQ0,OCOQ0CQOQ0,O0OQ0CQOQ0);
if(O0QQ0CQOQ0>0)and(Marshal.ReadInt16(O0OQ0CQOQ0)=0)then begin
SetLength(OOOQ0CQOQ0,Cardinal(OQOQ0CQOQ0)+O0QQ0CQOQ0);
Marshal.Copy(OC0Q0CQOQ0,OOOQ0CQOQ0,OQOQ0CQOQ0,O0QQ0CQOQ0);
Inc(OQOQ0CQOQ0,O0QQ0CQOQ0);
end;
if OCOQ0CQOQ0=OCI_FIRST_PIECE then
OCOQ0CQOQ0:=OCI_NEXT_PIECE;
until OCOQ0CQOQ0=OCI_LAST_PIECE;
end;
if(OQ0Q0CQOQ0.OQCOQOCOQ0=SQLT_LNG)and
O0OQCQOOQ0(OCCCQ0COQ0.OCCOCQQOQ0)and
not O0OQCQOOQ0(OQ0Q0CQOQ0.OC0CO0COQ0)
then begin
if OQ0Q0CQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then
OOOQ0CQOQ0:=Encoding.Convert(Encoding.Unicode,Encoding.UTF8,OOOQ0CQOQ0,0,OQOQ0CQOQ0)
else
OOOQ0CQOQ0:=Encoding.Convert(Encoding.ANSI,Encoding.UTF8,OOOQ0CQOQ0,0,OQOQ0CQOQ0);
end;
OQ00Q0COQ0.O0OCQQCOQ0(OOOQ0CQOQ0);
end;
procedure OOCCQ0COQ0.OOQQ0CQOQ0(OQQQ0CQOQ0:O0COQOCOQ0;OCQQ0CQOQ0:IntPtr;O0CQ0CQOQ0:pOCIInd;OOCQ0CQOQ0:pub2;out OQCQ0CQOQ0:TBytes);
var
OCCQ0CQOQ0:Integer;
O00C0CQOQ0:Integer;
OO0C0CQOQ0:Encoding;
OQ0C0CQOQ0:Encoding;
OC0C0CQOQ0:TBytes;
O0OC0CQOQ0:TBytes;
OOOC0CQOQ0:AnsiString;
OQOC0CQOQ0:WideString;
OCOC0CQOQ0:Int64;
O0QC0CQOQ0:TOCIDateTime;
OOQC0CQOQ0:TOCIInterval;
begin
case OQQQ0CQOQ0.OQCOQOCOQ0 of
SQLT_CHR,SQLT_STR,SQLT_AVC,SQLT_AFC:begin
if OQQQ0CQOQ0.OC0CO0COQ0=0 then
OO0C0CQOQ0:=OCCCQ0COQ0.OOCQO0QOQ0
else
OO0C0CQOQ0:=OCCCQ0COQ0.OQ00QOQOQ0(OQQQ0CQOQ0.OC0CO0COQ0);
if OQQQ0CQOQ0.O0OCO0COQ0=2 then
OQ0C0CQOQ0:=OCCCQ0COQ0.OOOQO0QOQ0
else
OQ0C0CQOQ0:=OCCCQ0COQ0.OQQQO0QOQ0;
if OO0C0CQOQ0=Encoding.Unicode then begin
O00C0CQOQ0:=OQQQ0CQOQ0.OCOQO0COQ0 shr 1;
if OQQQ0CQOQ0.OQCOQOCOQ0 in[SQLT_STR,SQLT_AVC]then begin
OCCQ0CQOQ0:=StrLenW(OCQQ0CQOQ0);
Dec(O00C0CQOQ0);
end
else if OOCQ0CQOQ0<>nil then
OCCQ0CQOQ0:=OOCQ0CQOQ0^
else
OCCQ0CQOQ0:=StrLenW(OCQQ0CQOQ0);
if OCCQ0CQOQ0>O00C0CQOQ0 then
OCCQ0CQOQ0:=O00C0CQOQ0;
if OCCQ0CQOQ0=0 then
OQCQ0CQOQ0:=nil
else if OQ0C0CQOQ0=Encoding.BigEndianUnicode then begin
SetLength(OQCQ0CQOQ0,OCCQ0CQOQ0*2);
CRFunctions.ConvertBigEndianBuffer(OCQQ0CQOQ0,@OQCQ0CQOQ0[0],OCCQ0CQOQ0*2);
end
else if OQ0C0CQOQ0=Encoding.UTF8 then begin
if O0CCCQOOQ0>=OCCQ0CQOQ0 then
O0OC0CQOQ0:=OQ00Q0COQ0.O0QOOQCOQ0
else
SetLength(O0OC0CQOQ0,OCCQ0CQOQ0 shl 2);
OCCQ0CQOQ0:=CRFunctions.UnicodeToUtf8WoT(@O0OC0CQOQ0[0],Length(O0OC0CQOQ0),OCQQ0CQOQ0,OCCQ0CQOQ0);
SetLength(OQCQ0CQOQ0,OCCQ0CQOQ0);
if OCCQ0CQOQ0>0 then
Move(O0OC0CQOQ0[0],OQCQ0CQOQ0[0],OCCQ0CQOQ0);
end
{$IFNDEF FPC}
else if OQ0C0CQOQ0=Encoding.Default then begin
if O0CCCQOOQ0>=OCCQ0CQOQ0 then
O0OC0CQOQ0:=OQ00Q0COQ0.O0QOOQCOQ0
else
SetLength(O0OC0CQOQ0,OCCQ0CQOQ0 shl 2);
OCCQ0CQOQ0:=LocaleCharsFromUnicode({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,OCQQ0CQOQ0,OCCQ0CQOQ0,@O0OC0CQOQ0[0],Length(O0OC0CQOQ0),nil,nil);
SetLength(OQCQ0CQOQ0,OCCQ0CQOQ0);
if OCCQ0CQOQ0>0 then
Move(O0OC0CQOQ0[0],OQCQ0CQOQ0[0],OCCQ0CQOQ0);
end
{$ENDIF}
else begin
OQOC0CQOQ0:=Marshal.PtrToStringUni(OCQQ0CQOQ0,OCCQ0CQOQ0);
OQCQ0CQOQ0:=OQ0C0CQOQ0.GetBytes(OQOC0CQOQ0);
end;
end
else begin
O00C0CQOQ0:=OQQQ0CQOQ0.OCOQO0COQ0;
if OQQQ0CQOQ0.OQCOQOCOQ0 in[SQLT_STR,SQLT_AVC]then begin
OCCQ0CQOQ0:=StrLen(PAChar(OCQQ0CQOQ0));
Dec(O00C0CQOQ0);
end
else if OOCQ0CQOQ0<>nil then
OCCQ0CQOQ0:=OOCQ0CQOQ0^
else
OCCQ0CQOQ0:=StrLen(PAChar(OCQQ0CQOQ0));
if OCCQ0CQOQ0>O00C0CQOQ0 then
OCCQ0CQOQ0:=O00C0CQOQ0;
if OCCQ0CQOQ0=0 then
OQCQ0CQOQ0:=nil
else if OQ0C0CQOQ0=OO0C0CQOQ0 then begin
SetLength(OQCQ0CQOQ0,OCCQ0CQOQ0);
Move(OCQQ0CQOQ0^,OQCQ0CQOQ0[0],OCCQ0CQOQ0);
end
else if(OQ0C0CQOQ0=Encoding.BigEndianUnicode){$IFDEF FPC}and(OO0C0CQOQ0=Encoding.UTF8){$ENDIF} then begin
if O0CCCQOOQ0>=OCCQ0CQOQ0 then
OC0C0CQOQ0:=OQ00Q0COQ0.OOQOOQCOQ0
else
SetLength(OC0C0CQOQ0,OCCQ0CQOQ0*2);
{$IFNDEF FPC}
if OO0C0CQOQ0<>Encoding.UTF8 then
OCCQ0CQOQ0:=UnicodeFromLocaleChars({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,OCQQ0CQOQ0,OCCQ0CQOQ0,@OC0C0CQOQ0[0],Length(OC0C0CQOQ0)shr 1)
else
{$ENDIF}
OCCQ0CQOQ0:=CRFunctions.Utf8ToUnicodeWoT(@OC0C0CQOQ0[0],Length(OC0C0CQOQ0)shr 1,OCQQ0CQOQ0,OCCQ0CQOQ0);
SetLength(OQCQ0CQOQ0,OCCQ0CQOQ0*2);
if OCCQ0CQOQ0>0 then
CRFunctions.ConvertBigEndianBuffer(@OC0C0CQOQ0[0],@OQCQ0CQOQ0[0],OCCQ0CQOQ0*2);
end
{$IFNDEF FPC}
else if OQ0C0CQOQ0=Encoding.UTF8 then begin
if O0CCCQOOQ0>=OCCQ0CQOQ0 then
OC0C0CQOQ0:=OQ00Q0COQ0.OOQOOQCOQ0
else
SetLength(OC0C0CQOQ0,OCCQ0CQOQ0*2);
OCCQ0CQOQ0:=UnicodeFromLocaleChars({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,OCQQ0CQOQ0,OCCQ0CQOQ0,@OC0C0CQOQ0[0],Length(OC0C0CQOQ0)shr 1);
if OCCQ0CQOQ0>0 then begin
if O0CCCQOOQ0>=OCCQ0CQOQ0 then
O0OC0CQOQ0:=OQ00Q0COQ0.O0QOOQCOQ0
else
SetLength(O0OC0CQOQ0,OCCQ0CQOQ0*4);
OCCQ0CQOQ0:=LocaleCharsFromUnicode(CP_UTF8,0,@OC0C0CQOQ0[0],OCCQ0CQOQ0,@O0OC0CQOQ0[0],Length(O0OC0CQOQ0),nil,nil);
SetLength(OQCQ0CQOQ0,OCCQ0CQOQ0);
if OCCQ0CQOQ0>0 then
Move(O0OC0CQOQ0[0],OQCQ0CQOQ0[0],OCCQ0CQOQ0);
end
else
OQCQ0CQOQ0:=nil;
end
{$ENDIF}
else begin
OOOC0CQOQ0:=Marshal.PtrToStringAnsi(OCQQ0CQOQ0,OCCQ0CQOQ0);
OQOC0CQOQ0:=WideString(OOOC0CQOQ0);
OQCQ0CQOQ0:=OQ0C0CQOQ0.GetBytes(OQOC0CQOQ0);
end;
end;
end;
SQLT_INT:begin
if OQQQ0CQOQ0.OCOQO0COQ0<2 then begin
OCOC0CQOQ0:=ShortInt(Marshal.ReadByte(OCQQ0CQOQ0));
OQCQ0CQOQ0:=TOCINumber.FromInt(OCOC0CQOQ0,sizeof(Integer),OCI_NUMBER_SIGNED);
end
else if OQQQ0CQOQ0.OCOQO0COQ0<4 then begin
OCOC0CQOQ0:=Marshal.ReadInt16(OCQQ0CQOQ0);
OQCQ0CQOQ0:=TOCINumber.FromInt(OCOC0CQOQ0,sizeof(Integer),OCI_NUMBER_SIGNED);
end
else if OQQQ0CQOQ0.OCOQO0COQ0<8 then begin
OCOC0CQOQ0:=Marshal.ReadInt32(OCQQ0CQOQ0);
OQCQ0CQOQ0:=TOCINumber.FromInt(OCOC0CQOQ0,sizeof(Integer),OCI_NUMBER_SIGNED);
end
else begin
OCOC0CQOQ0:=Marshal.ReadInt64(OCQQ0CQOQ0);
OQCQ0CQOQ0:=TOCINumber.FromInt(OCOC0CQOQ0,sizeof(Int64),OCI_NUMBER_SIGNED);
end;
end;
SQLT_UIN:begin
if OQQQ0CQOQ0.OCOQO0COQ0<2 then begin
OCOC0CQOQ0:=Marshal.ReadByte(OCQQ0CQOQ0);
OQCQ0CQOQ0:=TOCINumber.FromInt(OCOC0CQOQ0,sizeof(Integer),OCI_NUMBER_UNSIGNED);
end
else if OQQQ0CQOQ0.OCOQO0COQ0<4 then begin
OCOC0CQOQ0:=Word(Marshal.ReadInt16(OCQQ0CQOQ0));
OQCQ0CQOQ0:=TOCINumber.FromInt(OCOC0CQOQ0,sizeof(Integer),OCI_NUMBER_UNSIGNED);
end
else if OQQQ0CQOQ0.OCOQO0COQ0<8 then begin
OCOC0CQOQ0:=Cardinal(Marshal.ReadInt32(OCQQ0CQOQ0));
OQCQ0CQOQ0:=TOCINumber.FromInt(OCOC0CQOQ0,sizeof(Int64),OCI_NUMBER_UNSIGNED);
end
else begin
OCOC0CQOQ0:=Marshal.ReadInt64(OCQQ0CQOQ0);
OQCQ0CQOQ0:=TOCINumber.FromInt(OCOC0CQOQ0,sizeof(Int64),OCI_NUMBER_UNSIGNED);
end;
end;
SQLT_FLT:
OQCQ0CQOQ0:=TOCINumber.FromReal(BitConverter.Int64BitsToDouble(Marshal.ReadInt64(OCQQ0CQOQ0)),sizeof(Double));
SQLT_BFLOAT:
OQCQ0CQOQ0:=OQ000QOOQ0.OQO00QOOQ0(CRBitConverter.Int32BitsToSingle(Marshal.ReadInt32(OCQQ0CQOQ0)));
SQLT_BDOUBLE:
OQCQ0CQOQ0:=OOQ00QOOQ0.OOC00QOOQ0(BitConverter.Int64BitsToDouble(Marshal.ReadInt64(OCQQ0CQOQ0)));
SQLT_VNU:begin
OCCQ0CQOQ0:=Marshal.ReadByte(OCQQ0CQOQ0);
SetLength(OQCQ0CQOQ0,OCCQ0CQOQ0);
Marshal.Copy(PtrOffset(OCQQ0CQOQ0,1),OQCQ0CQOQ0,0,OCCQ0CQOQ0);
end;
SQLT_TIMESTAMP,
SQLT_TIMESTAMP_TZ,
SQLT_TIMESTAMP_LTZ:begin
O0QC0CQOQ0:=O00O0QOOQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OCQQ0CQOQ0))).OO0O0QOOQ0;
if OQQQ0CQOQ0.OQCOQOCOQ0=SQLT_TIMESTAMP_TZ then
OQCQ0CQOQ0:=ConvertToServerTZ(O0QC0CQOQ0.Value,OCCCQ0COQ0.OO0OCQQOQ0)
else
OQCQ0CQOQ0:=O0QC0CQOQ0.Value;
end;
SQLT_INTERVAL_YM,SQLT_INTERVAL_DS:begin
OOQC0CQOQ0:=O0OO0QOOQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OCQQ0CQOQ0))).OOOO0QOOQ0;
OQCQ0CQOQ0:=OOQC0CQOQ0.Value;
end;
else begin
if OOCQ0CQOQ0<>nil then
OCCQ0CQOQ0:=Marshal.ReadInt16(OOCQ0CQOQ0)
else
OCCQ0CQOQ0:=OQQQ0CQOQ0.OCOQO0COQ0;
SetLength(OQCQ0CQOQ0,OCCQ0CQOQ0);
if OCCQ0CQOQ0>0 then
Move(OCQQ0CQOQ0^,OQCQ0CQOQ0[0],OCCQ0CQOQ0);
end;
end;
end;
procedure OOCCQ0COQ0.OQQC0CQOQ0(OCQC0CQOQ0:TCRList;const O0CC0CQOQ0:TBytes);
var
OOCC0CQOQ0:OO0O00QOQ0;
begin
if O0OOQ0COQ0<OO0OQ0COQ0 then begin
OOCC0CQOQ0:=O0O0Q0COQ0.O0Q0C0QOQ0;
OCQ00CQOQ0(OOCC0CQOQ0,OCQC0CQOQ0,O0CC0CQOQ0);
OQQO0CQOQ0(OOCC0CQOQ0,OCQC0CQOQ0);
Inc(O0OOQ0COQ0);
end
else begin
OOCC0CQOQ0:=O0O0Q0COQ0.OCCCC0QOQ0;
OCQ00CQOQ0(OOCC0CQOQ0,OCQC0CQOQ0,O0CC0CQOQ0);
end;
end;
procedure OOCCQ0COQ0.OQCC0CQOQ0(OCCC0CQOQ0:TCRList);
var
O0000CQOQ0,OO000CQOQ0:word;
OQ000CQOQ0:O0COQOCOQ0;
OC000CQOQ0:integer;
O0O00CQOQ0:Integer;
OOO00CQOQ0:IntPtr;
OQO00CQOQ0:pOCIInd;
OCO00CQOQ0:pub2;
O0Q00CQOQ0:OCIInd;
OOQ00CQOQ0:Byte;
OQQ00CQOQ0:OOQ000QOQ0;
begin
OOQ00CQOQ0:=0;
for O0000CQOQ0:=0 to Length(OQQ0Q0COQ0)-1 do begin
OQ000CQOQ0:=O0COQOCOQ0(OCCC0CQOQ0[O0000CQOQ0]);
if OCCCQ0COQ0.OCQ0CQQOQ0<OOC0COCOQ0 then begin
if OQ000CQOQ0.OCCOQOCOQ0>4000 then
OOQ00CQOQ0:=1
else if OOQ00CQOQ0=1 then
OOQ00CQOQ0:=2;
end;
if(OQQ0Q0COQ0[O0000CQOQ0]and$10)=0 then
Continue;
OOO00CQOQ0:=OQ000CQOQ0.O0Q0O0COQ0;
OQO00CQOQ0:=OQ000CQOQ0.OQQ0O0COQ0;
OCO00CQOQ0:=OQ000CQOQ0.OCQ0O0COQ0;
if O0OOQ0COQ0>0 then begin
OOO00CQOQ0:=PtrOffset(OOO00CQOQ0,O0OOQ0COQ0*OQ000CQOQ0.OQQQO0COQ0);
if OQO00CQOQ0<>nil then
OQO00CQOQ0:=PtrOffset(OQO00CQOQ0,O0OOQ0COQ0*OQ000CQOQ0.OCQQO0COQ0);
if OCO00CQOQ0<>nil then
OCO00CQOQ0:=PtrOffset(OCO00CQOQ0,O0OOQ0COQ0*OQ000CQOQ0.O0CQO0COQ0);
end;
if OCQOQ0COQ0 or(OQ000CQOQ0.OO0CO0COQ0>0)then begin
O0O00CQOQ0:=OQ00Q0COQ0.OQ0OQQCOQ0;
if OQ000CQOQ0.OQ0CO0COQ0<>nil then
Marshal.WriteInt32(OQ000CQOQ0.OQ0CO0COQ0,O0O00CQOQ0);
end
else
O0O00CQOQ0:=1;
if(OOQ00CQOQ0>0)and(O0000CQOQ0<>0)then begin
OQ00Q0COQ0.OQC0QQCOQ0;
if OOQ00CQOQ0=2 then
OOQ00CQOQ0:=0;
end;
for OO000CQOQ0:=1 to O0O00CQOQ0 do begin
OOOO0CQOQ0(@OQQ00CQOQ0,nil,OQ000CQOQ0);
O0Q00CQOQ0:=OQ00Q0COQ0.OCC0QQCOQ0;
if O0Q00CQOQ0=OCI_IND_UNCHANGED then
Continue;
if(O0Q00CQOQ0<>OCI_IND_NULL)or(OQ000CQOQ0.O000O0COQ0 in[SQLT_LNG,SQLT_LBI])then
OC00CCQOQ0(@OQQ00CQOQ0,OQ000CQOQ0.O000O0COQ0,OQ000CQOQ0,OOO00CQOQ0,O0Q00CQOQ0,OC000CQOQ0)
else
OC000CQOQ0:=0;
OOO00CQOQ0:=PtrOffset(OOO00CQOQ0,OQ000CQOQ0.OQQQO0COQ0);
if OQO00CQOQ0<>nil then begin
OQO00CQOQ0^:=O0Q00CQOQ0;
OQO00CQOQ0:=PtrOffset(OQO00CQOQ0,OQ000CQOQ0.OCQQO0COQ0);
end;
if OCO00CQOQ0<>nil then begin
OCO00CQOQ0^:=OC000CQOQ0;
OCO00CQOQ0:=PtrOffset(OCO00CQOQ0,OQ000CQOQ0.O0CQO0COQ0);
end;
end;
end;
Inc(O0OOQ0COQ0);
end;
procedure OOCCQ0COQ0.OCQ00CQOQ0(O0C00CQOQ0:OO0O00QOQ0;OOC00CQOQ0:TCRList;const OQC00CQOQ0:TBytes);
const
OCC00CQOQ0:array[0..7]of Byte=($01,$02,$04,$08,$10,$20,$40,$80);
var
O00O0CQOQ0:word;
OO0O0CQOQ0:byte;
OQ0O0CQOQ0:O0COQOCOQ0;
OC0O0CQOQ0:OOOOO0QOQ0;
O0OO0CQOQ0:OQC000QOQ0;
begin
for O00O0CQOQ0:=0 to OOC00CQOQ0.Count-1 do begin
O0OO0CQOQ0:=@O0C00CQOQ0.O00O00QOQ0[O00O0CQOQ0];
if OQC00CQOQ0<>nil then begin
OO0O0CQOQ0:=OQC00CQOQ0[O00O0CQOQ0 shr 3];
if OO0O0CQOQ0 and OCC00CQOQ0[O00O0CQOQ0 and 7]=0 then
O0OO0CQOQ0.OOC000QOQ0:=True
else
O0OO0CQOQ0.OOC000QOQ0:=False
end
else
O0OO0CQOQ0.OOC000QOQ0:=False;
if O0OO0CQOQ0.OOC000QOQ0 then
Continue;
OQ0O0CQOQ0:=O0COQOCOQ0(OOC00CQOQ0[O00O0CQOQ0]);
if(OQQOQ0COQ0=O00OC0QOQ0)and(OOQ0Q0COQ0.Count>0)then begin
OC0O0CQOQ0:=OOOOO0QOQ0(OOQ0Q0COQ0[O00O0CQOQ0]);
OOOO0CQOQ0(O0OO0CQOQ0,OC0O0CQOQ0,OQ0O0CQOQ0);
end
else
OOOO0CQOQ0(O0OO0CQOQ0,nil,OQ0O0CQOQ0);
if not OCCCQ0COQ0.O00QO0QOQ0 or(OQQOQ0COQ0<>O00OC0QOQ0)then
O0OO0CQOQ0.OQQ000QOQ0:=OQ00Q0COQ0.OCC0QQCOQ0
else if OQ0O0CQOQ0.O000O0COQ0 in[SQLT_LNG,SQLT_LBI]then
O0OO0CQOQ0.OQQ000QOQ0:=OQ00Q0COQ0.OCC0QQCOQ0
else if O0OO0CQOQ0.OCQ000QOQ0<>nil then
O0OO0CQOQ0.OQQ000QOQ0:=OCI_IND_NOTNULL
else
O0OO0CQOQ0.OQQ000QOQ0:=OCI_IND_NULL;
if OQQOQ0COQ0<>OCC0C0QOQ0 then
if not OCCCQ0COQ0.O00QO0QOQ0 or(OQ0O0CQOQ0.O000O0COQ0 in[SQLT_LNG,SQLT_LBI])then
OQ00Q0COQ0.OCC0QQCOQ0;
end;
end;
procedure OOCCQ0COQ0.OOOO0CQOQ0(OQOO0CQOQ0:OQC000QOQ0;OCOO0CQOQ0:OOOOO0QOQ0;O0QO0CQOQ0:O0COQOCOQ0);
var
OOQO0CQOQ0:ub2;
begin
if OCOO0CQOQ0<>nil then
OOQO0CQOQ0:=OCOO0CQOQ0.O000O0COQ0
else
OOQO0CQOQ0:=O0QO0CQOQ0.O000O0COQ0;
case OOQO0CQOQ0 of
SQLT_RID:
if OQ00Q0COQ0.OQC0QQCOQ0>0 then begin
SetLength(OQOO0CQOQ0.OCQ000QOQ0,SizeOf(TRowId81));
OQ00Q0COQ0.OOOCOOCOQ0(@OQOO0CQOQ0.OCQ000QOQ0[0]);
end
else
OQOO0CQOQ0.OCQ000QOQ0:=nil;
SQLT_RDD,SQLT_URID:
OQOO0CQOQ0.OCQ000QOQ0:=OQ00Q0COQ0.O0CQOOCOQ0;
SQLT_BLOB,SQLT_CLOB,SQLT_BFILEE,SQLT_CFILEE:begin
if OQ00Q0COQ0.OC0OQQCOQ0>0 then begin
if(OCCCQ0COQ0.OCOOCQQOQ0>=11000)and(O0QO0CQOQ0.OOOCO0COQ0<>0)then
OQOO0CQOQ0.O0C000QOQ0:=OOCCQ0QOQ0.OOCQ0COOQ0(OCCCQ0COQ0.O0COQOQOQ0,O0QO0CQOQ0.O000O0COQ0,O0QO0CQOQ0.OQOCO0COQ0)
else
OQOO0CQOQ0.O0C000QOQ0:=nil;
OQOO0CQOQ0.OCQ000QOQ0:=OQ00Q0COQ0.O0OQOOCOQ0;
end
else
OQOO0CQOQ0.OCQ000QOQ0:=nil;
end;
SQLT_LNG,SQLT_LBI:
OQOO0CQOQ0.OCQ000QOQ0:=OQ00Q0COQ0.O0OQOOCOQ0;
SQLT_CUR,SQLT_RSET:
if OQQOQ0COQ0=O00OC0QOQ0 then begin
OQO0OCQOQ0;
SetLength(OQOO0CQOQ0.OCQ000QOQ0,2);
psb2(@OQOO0CQOQ0.OCQ000QOQ0[0])^:=OQ00Q0COQ0.OCC0QQCOQ0;
end
else
OQOO0CQOQ0.OCQ000QOQ0:=OQ00Q0COQ0.O0OQOOCOQ0;
SQLT_NTY:begin
OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
if OQ00Q0COQ0.OC0OQQCOQ0>0 then begin
OQ00Q0COQ0.OO0OQQCOQ0;
OQOO0CQOQ0.OCQ000QOQ0:=OQ00Q0COQ0.O0OQOOCOQ0
end
else begin
OQ00Q0COQ0.OO0OQQCOQ0;
OQOO0CQOQ0.OCQ000QOQ0:=nil;
end;
end;
else
if(OCOO0CQOQ0=nil)or(OCOO0CQOQ0.OO00O0COQ0>0)then
OQOO0CQOQ0.OCQ000QOQ0:=OQ00Q0COQ0.O0OQOOCOQ0
else
OQOO0CQOQ0.OCQ000QOQ0:=nil;
end;
end;
procedure OOCCQ0COQ0.OQQO0CQOQ0(OCQO0CQOQ0:OO0O00QOQ0;O0CO0CQOQ0:TCRList);
var
OOCO0CQOQ0:word;
OQCO0CQOQ0:O0COQOCOQ0;
OCCO0CQOQ0:ub2;
O00QCCQOQ0:OQC000QOQ0;
OO0QCCQOQ0:IntPtr;
OQ0QCCQOQ0:pOCIInd;
OC0QCCQOQ0:pub2;
O0OQCCQOQ0:Integer;
OOOQCCQOQ0:sb2;
begin
for OOCO0CQOQ0:=0 to O0CO0CQOQ0.Count-1 do begin
OQCO0CQOQ0:=O0COQOCOQ0(O0CO0CQOQ0[OOCO0CQOQ0]);
if(OQQOQ0COQ0=O00OC0QOQ0)and(OOQ0Q0COQ0.Count>0)then
OCCO0CQOQ0:=OOOOO0QOQ0(OOQ0Q0COQ0[OOCO0CQOQ0]).OQCOQOCOQ0
else
OCCO0CQOQ0:=OQCO0CQOQ0.OQCOQOCOQ0;
O00QCCQOQ0:=@OCQO0CQOQ0.O00O00QOQ0[OOCO0CQOQ0];
OOOQCCQOQ0:=O00QCCQOQ0.OQQ000QOQ0;
if(OOOQCCQOQ0<>OCI_IND_NULL)or(OQCO0CQOQ0.O000O0COQ0 in[SQLT_LNG,SQLT_LBI])then begin
OO0QCCQOQ0:=PtrOffset(OQCO0CQOQ0.OQOQO0COQ0,O0OOQ0COQ0*OQCO0CQOQ0.OQQQO0COQ0);
OC00CCQOQ0(O00QCCQOQ0,OCCO0CQOQ0,OQCO0CQOQ0,OO0QCCQOQ0,OOOQCCQOQ0,O0OQCCQOQ0);
end
else
O0OQCCQOQ0:=0;
if OQCO0CQOQ0.OQQ0O0COQ0<>nil then begin
OQ0QCCQOQ0:=PtrOffset(OQCO0CQOQ0.O0QQO0COQ0,O0OOQ0COQ0*OQCO0CQOQ0.OCQQO0COQ0);
OQ0QCCQOQ0^:=OOOQCCQOQ0;
end;
if OQCO0CQOQ0.OOQQO0COQ0<>nil then begin
OC0QCCQOQ0:=PtrOffset(OQCO0CQOQ0.OOQQO0COQ0,O0OOQ0COQ0*OQCO0CQOQ0.O0CQO0COQ0);
OC0QCCQOQ0^:=O0OQCCQOQ0;
end;
end;
end;
procedure OOCCQ0COQ0.OQOQCCQOQ0(OCOQCCQOQ0:TCRList);
var
O0QQCCQOQ0:Integer;
OOQQCCQOQ0:O0COQOCOQ0;
OQQQCCQOQ0:ub2;
OCQQCCQOQ0:ub4;
O0CQCCQOQ0:ub4;
OOCQCCQOQ0:OO0O00QOQ0;
OQCQCCQOQ0:OO0O00QOQ0;
OCCQCCQOQ0:OO0O00QOQ0;
O00CCCQOQ0:OQC000QOQ0;
OO0CCCQOQ0:IntPtr;
OQ0CCCQOQ0:pOCIInd;
OC0CCCQOQ0:pub2;
O0OCCCQOQ0:Integer;
OOOCCCQOQ0:sb2;
begin
O0CQCCQOQ0:=O0O0Q0COQ0.OCQ0C0QOQ0+OO0OQ0COQ0-1;
if O0CQCCQOQ0>O0O0Q0COQ0.O0C0C0QOQ0 then
O0CQCCQOQ0:=O0O0Q0COQ0.O0C0C0QOQ0;
OOCQCCQOQ0:=O0O0Q0COQ0.O0Q0C0QOQ0;
for O0QQCCQOQ0:=0 to OCOQCCQOQ0.Count-1 do begin
OOQQCCQOQ0:=O0COQOCOQ0(OCOQCCQOQ0[O0QQCCQOQ0]);
if(OQQOQ0COQ0=O00OC0QOQ0)and(OOQ0Q0COQ0.Count>0)then
OQQQCCQOQ0:=OOOOO0QOQ0(OOQ0Q0COQ0[O0QQCCQOQ0]).OQCOQOCOQ0
else
OQQQCCQOQ0:=OOQQCCQOQ0.OQCOQOCOQ0;
OO0CCCQOQ0:=OOQQCCQOQ0.O0Q0O0COQ0;
OQ0CCCQOQ0:=OOQQCCQOQ0.OQQ0O0COQ0;
OC0CCCQOQ0:=OOQQCCQOQ0.OCQ0O0COQ0;
OQCQCCQOQ0:=OOCQCCQOQ0;
OCQQCCQOQ0:=O0O0Q0COQ0.OCQ0C0QOQ0;
while OCQQCCQOQ0<=O0CQCCQOQ0 do begin
OCCQCCQOQ0:=O0O0Q0COQ0.OOQ0C0QOQ0[OCQQCCQOQ0];
if not OCCQCCQOQ0.O00O00QOQ0[O0QQCCQOQ0].OOC000QOQ0 then
OQCQCCQOQ0:=OCCQCCQOQ0;
O00CCCQOQ0:=@OQCQCCQOQ0.O00O00QOQ0[O0QQCCQOQ0];
OOOCCCQOQ0:=O00CCCQOQ0.OQQ000QOQ0;
if(OOOCCCQOQ0<>OCI_IND_NULL)or(OOQQCCQOQ0.O000O0COQ0 in[SQLT_LNG,SQLT_LBI])then
OC00CCQOQ0(O00CCCQOQ0,OQQQCCQOQ0,OOQQCCQOQ0,OO0CCCQOQ0,OOOCCCQOQ0,O0OCCCQOQ0)
else
O0OCCCQOQ0:=0;
OO0CCCQOQ0:=PtrOffset(OO0CCCQOQ0,OOQQCCQOQ0.OQQQO0COQ0);
if OQ0CCCQOQ0<>nil then begin
OQ0CCCQOQ0^:=OOOCCCQOQ0;
OQ0CCCQOQ0:=PtrOffset(OQ0CCCQOQ0,OOQQCCQOQ0.OCQQO0COQ0);
end;
if OC0CCCQOQ0<>nil then begin
OC0CCCQOQ0^:=O0OCCCQOQ0;
OC0CCCQOQ0:=PtrOffset(OC0CCCQOQ0,OOQQCCQOQ0.O0CQO0COQ0);
end;
Inc(OCQQCCQOQ0);
end;
if OQCQCCQOQ0<>OOCQCCQOQ0 then
OOCQCCQOQ0.O00O00QOQ0[O0QQCCQOQ0]:=OQCQCCQOQ0.O00O00QOQ0[O0QQCCQOQ0];
end;
O0OOQ0COQ0:=O0CQCCQOQ0-O0O0Q0COQ0.OCQ0C0QOQ0+1;
O0O0Q0COQ0.OQQCC0QOQ0(O0CQCCQOQ0);
end;
procedure OOCCQ0COQ0.OQOCCCQOQ0(OCOCCCQOQ0:O0COQOCOQ0;O0QCCCQOQ0:IntPtr;const OOQCCCQOQ0:TBytes;OQQCCCQOQ0:OCIInd);
var
OCQCCCQOQ0:Integer;
O0CCCCQOQ0:TBytes;
OOCCCCQOQ0:pub4;
OQCCCCQOQ0:ub4;
OCCCCCQOQ0:ub1;
O000CCQOQ0:pub2;
OO00CCQOQ0:integer;
OQ00CCQOQ0:pOCIInd;
begin
OCQCCCQOQ0:=Length(OOQCCCQOQ0);
if OCOCCCQOQ0.O00CO0COQ0<>nil then begin
if(OCQCCCQOQ0>0)and(OCOCCCQOQ0.OQCOQOCOQ0=SQLT_LNG)then begin
if O0OQCQOOQ0(OCCCQ0COQ0.OCCOCQQOQ0)and
not O0OQCQOOQ0(OCOCCCQOQ0.OC0CO0COQ0)
then begin
if OCOCCCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then begin
O0CCCCQOQ0:=Encoding.Convert(Encoding.UTF8,Encoding.Unicode,OOQCCCQOQ0,0,OCQCCCQOQ0);
OCQCCCQOQ0:=Length(O0CCCCQOQ0);
end
else begin
O0CCCCQOQ0:=Encoding.Convert(Encoding.UTF8,Encoding.ANSI,OOQCCCQOQ0,0,OCQCCCQOQ0);
OCQCCCQOQ0:=Length(O0CCCCQOQ0);
end;
end
else if OCOCCCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then begin
O0CCCCQOQ0:=Encoding.Convert(Encoding.Default,Encoding.Unicode,OOQCCCQOQ0,0,OCQCCCQOQ0);
OCQCCCQOQ0:=Length(O0CCCCQOQ0);
end
else begin
SetLength(O0CCCCQOQ0,0);
OCQCCCQOQ0:=Length(OOQCCCQOQ0);
end;
end;
OQ00CCQOQ0:=nil;
OO00CCQOQ0:=0;
OCCCCCQOQ0:=OCI_ONE_PIECE;
repeat
if OCOCCCQOQ0 is OO0OO0COQ0 then
TOCICallbackDefine(OCOCCCQOQ0.O00CO0COQ0)(OCOCCCQOQ0.OCCQO0COQ0,OCOCCCQOQ0.OQQOQOCOQ0,O0OOQ0COQ0,
O0QCCCQOQ0,OOCCCCQOQ0,OCCCCCQOQ0,OQ00CCQOQ0,O000CCQOQ0)
else
TOCICallbackOutBind(OCOCCCQOQ0.O00CO0COQ0)(OCOCCCQOQ0.OCCQO0COQ0,OCOCCCQOQ0.OQQOQOCOQ0,O0OOQ0COQ0,0,
O0QCCCQOQ0,OOCCCCQOQ0,OCCCCCQOQ0,OQ00CCQOQ0,O000CCQOQ0);
OQCCCCQOQ0:=OOCCCCQOQ0^;
if OQCCCCQOQ0>Cardinal(OCQCCCQOQ0)then begin
OQCCCCQOQ0:=OCQCCCQOQ0;
OOCCCCQOQ0^:=OQCCCCQOQ0;
end;
if OQCCCCQOQ0>0 then begin
if O0CCCCQOQ0<>nil then
Marshal.Copy(O0CCCCQOQ0,OO00CCQOQ0,O0QCCCQOQ0,OQCCCCQOQ0)
else
Marshal.Copy(OOQCCCQOQ0,OO00CCQOQ0,O0QCCCQOQ0,OQCCCCQOQ0);
Dec(OCQCCCQOQ0,OQCCCCQOQ0);
Inc(OO00CCQOQ0,OQCCCCQOQ0);
end;
Marshal.WriteInt16(OQ00CCQOQ0,OQQCCCQOQ0);
until OCQCCCQOQ0=0;
end;
end;
procedure OOCCQ0COQ0.OC00CCQOQ0(O0O0CCQOQ0:OQC000QOQ0;OOO0CCQOQ0:ub2;OQO0CCQOQ0:O0COQOCOQ0;OCO0CCQOQ0:IntPtr;var O0Q0CCQOQ0:sb2;out OOQ0CCQOQ0:Integer);
var
OQQ0CCQOQ0:Integer;
OCQ0CCQOQ0:ub4;
O0C0CCQOQ0:Tbytes;
OOC0CCQOQ0:string;
OQC0CCQOQ0:OOCCQ0QOQ0;
OCC0CCQOQ0:OOCCQ0COQ0;
O00OCCQOQ0:O0CCCOOOQ0;
begin
OOQ0CCQOQ0:=Length(O0O0CCQOQ0.OCQ000QOQ0);
case OOO0CCQOQ0 of
SQLT_RID,SQLT_RDD,SQLT_URID:begin
{$IFNDEF VER9P}
SetLength(O0C0CCQOQ0,0);
{$ENDIF}
if OOO0CCQOQ0=SQLT_RID then
OOC0CCQOQ0:=OOOCO0QOQ0.O0QCO0QOQ0(@O0O0CCQOQ0.OCQ000QOQ0[0])
else begin
if O0O0CCQOQ0.OCQ000QOQ0<>nil then
if O0O0CCQOQ0.OCQ000QOQ0[0]=2 then
OOC0CCQOQ0:=OOOCO0QOQ0.OQQCO0QOQ0(O0O0CCQOQ0.OCQ000QOQ0,Length(O0O0CCQOQ0.OCQ000QOQ0)-1,1)
else if(O0O0CCQOQ0.OCQ000QOQ0[0]=1)and(OOQ0CCQOQ0=13)then
OOC0CCQOQ0:=OOOCO0QOQ0.O0QCO0QOQ0(@O0O0CCQOQ0.OCQ000QOQ0[0])
else
OOC0CCQOQ0:=''
else
OOC0CCQOQ0:='';
end;
if OQO0CCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then
O0C0CCQOQ0:=Encoding.Unicode.GetBytes(OOC0CCQOQ0)
else
O0C0CCQOQ0:=OCCCQ0COQ0.OQQQO0QOQ0.GetBytes(OOC0CCQOQ0);
OOQ0CCQOQ0:=Length(O0C0CCQOQ0);
if OOQ0CCQOQ0>0 then
Marshal.Copy(O0C0CCQOQ0,0,OCO0CCQOQ0,OOQ0CCQOQ0);
if OQO0CCQOQ0.OC0CO0COQ0=OCOCCOCOQ0 then begin
Marshal.WriteInt16(OCO0CCQOQ0,OOQ0CCQOQ0,0);
OOQ0CCQOQ0:=OOQ0CCQOQ0 shr 1;
end
else
Marshal.WriteByte(OCO0CCQOQ0,OOQ0CCQOQ0,0);
end;
SQLT_BLOB,SQLT_CLOB,SQLT_BFILEE,SQLT_CFILEE:begin
OQC0CCQOQ0:=OOCCQ0QOQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OCO0CCQOQ0)));
OQC0CCQOQ0.OCCCQ0QOQ0:=OQO0CCQOQ0.OQCOQOCOQ0;
if OQO0CCQOQ0.O0OCO0COQ0=0 then
OQC0CCQOQ0.OCC0OQOOQ0:=1
else
OQC0CCQOQ0.OCC0OQOOQ0:=OQO0CCQOQ0.O0OCO0COQ0;
OQC0CCQOQ0.OQCCQ0QOQ0:=O0O0CCQOQ0.OCQ000QOQ0;
if OQC0CCQOQ0.OQQ0Q0QOQ0<>nil then
Dispose(OQC0CCQOQ0.OQQ0Q0QOQ0);
OQC0CCQOQ0.OQQ0Q0QOQ0:=O0O0CCQOQ0.O0C000QOQ0;
O0O0CCQOQ0.O0C000QOQ0:=nil;
OOQ0CCQOQ0:=Length(OQC0CCQOQ0.OQCCQ0QOQ0);
if(OOQ0CCQOQ0>7)and(OQC0CCQOQ0.OQCCQ0QOQ0[4]and$80>0)and(OQC0CCQOQ0.OQCCQ0QOQ0[7]and$01>0)then
OQC0CCQOQ0.OQ00Q0QOQ0:=True;
O0Q0CCQOQ0:=OCI_IND_NULL;
if OOQ0CCQOQ0>3 then begin
OCQ0CCQOQ0:=OQC0CCQOQ0.OQCCQ0QOQ0[0]shl 8+OQC0CCQOQ0.OQCCQ0QOQ0[1]+2;
if Cardinal(OOQ0CCQOQ0)<=OCQ0CCQOQ0 then
for OQQ0CCQOQ0:=3 to OCQ0CCQOQ0-1 do
if OQC0CCQOQ0.OQCCQ0QOQ0[OQQ0CCQOQ0]<>0 then begin
O0Q0CCQOQ0:=OCI_IND_NOTNULL;
Break;
end;
end;
if O0Q0CCQOQ0=OCI_IND_NULL then
OOQ0CCQOQ0:=0;
end;
SQLT_LNG,SQLT_LBI:
OQOCCCQOQ0(OQO0CCQOQ0,OCO0CCQOQ0,O0O0CCQOQ0.OCQ000QOQ0,O0Q0CCQOQ0);
SQLT_CUR,SQLT_RSET:begin
if OQQOQ0COQ0=O00OC0QOQ0 then begin
OCC0CCQOQ0:=OOCCQ0COQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OCO0CCQOQ0)));
OCC0CCQOQ0.OCQCCQQOQ0:=psb2(@O0O0CCQOQ0.OCQ000QOQ0[0])^;
if OCC0CCQOQ0.OCQCCQQOQ0 shr 8<>0 then
OOQ0CCQOQ0:=2
else
OOQ0CCQOQ0:=1;
end
else begin
OCC0CCQOQ0:=OOCCQ0COQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OCO0CCQOQ0)));
if O0O0CCQOQ0.OCQ000QOQ0[0]=1 then
OCC0CCQOQ0.OCQCCQQOQ0:=O0O0CCQOQ0.OCQ000QOQ0[1]
else
if O0O0CCQOQ0.OCQ000QOQ0[0]=2 then
OCC0CCQOQ0.OCQCCQQOQ0:=(Word(O0O0CCQOQ0.OCQ000QOQ0[1])shl 8)+O0O0CCQOQ0.OCQ000QOQ0[2]
else
if(OOQ0CCQOQ0=1)and(O0O0CCQOQ0.OCQ000QOQ0[0]=0)or
(OOQ0CCQOQ0=2)and(O0O0CCQOQ0.OCQ000QOQ0[0]=0)and(O0O0CCQOQ0.OCQ000QOQ0[1]=0)
then begin
OCC0CCQOQ0.OCQCCQQOQ0:=0;
O0Q0CCQOQ0:=OCI_IND_NULL;
end
else
OCQO0QOOQ0('Net error: maximum open cursors exceeded');
end;
OCC0CCQOQ0.OCCCQ0COQ0:=OCCCQ0COQ0;
if OCC0CCQOQ0.O0C0Q0COQ0<>0 then
OCC0CCQOQ0.OOQOQ0COQ0:=OCI_STMT_STATE_EXECUTED;
end;
SQLT_NTY:begin
if OQO0CCQOQ0 is OO0OO0COQ0 then
if Marshal.ReadIntPtr(OCO0CCQOQ0)<>nil then
O00OCCQOQ0:=O0CCCOOOQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OCO0CCQOQ0)))
else if O0O0CCQOQ0.OCQ000QOQ0<>nil then begin
O00OCCQOQ0:=O0Q0QQOOQ0(OQO0CCQOQ0.O0QCO0COQ0).OQCO0OOOQ0(OCI_DURATION_SESSION);
Marshal.WriteIntPtr(OCO0CCQOQ0,O00OCCQOQ0.OQQOQOCOQ0);
end
else
O00OCCQOQ0:=nil
else
O00OCCQOQ0:=O0CCCOOOQ0(GetGCHandleTarget(OCO0CCQOQ0));
if O00OCCQOQ0<>nil then begin
if O0O0CCQOQ0.OCQ000QOQ0<>nil then
O0Q0QQOOQ0(OQO0CCQOQ0.O0QCO0COQ0).OC0QCOOOQ0(O0O0CCQOQ0.OCQ000QOQ0,O00OCCQOQ0);
O00OCCQOQ0.OOO0QOOOQ0:=O0Q0CCQOQ0;
end;
end;
SQLT_REF:begin
if OQO0CCQOQ0 is OO0OO0COQ0 then
if Marshal.ReadIntPtr(OCO0CCQOQ0)<>nil then
O00OCCQOQ0:=O0CCCOOOQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OCO0CCQOQ0)))
else if O0O0CCQOQ0.OCQ000QOQ0<>nil then begin
O00OCCQOQ0:=OQOCO0OOQ0.Create(OQCCQ0COQ0,O0Q0QQOOQ0(OQO0CCQOQ0.O0QCO0COQ0),OCI_DURATION_SESSION);
Marshal.WriteIntPtr(OCO0CCQOQ0,O00OCCQOQ0.OQQOQOCOQ0);
end
else
O00OCCQOQ0:=nil
else
O00OCCQOQ0:=O0CCCOOOQ0(GetGCHandleTarget(OCO0CCQOQ0));
if O00OCCQOQ0<>nil then begin
OQOCO0OOQ0(O00OCCQOQ0).O0O0O0OOQ0:=O0O0CCQOQ0.OCQ000QOQ0;
O00OCCQOQ0.OOO0QOOOQ0:=O0Q0CCQOQ0;
end;
end;
else
OO0OCCQOQ0(O0O0CCQOQ0.OCQ000QOQ0,OOO0CCQOQ0,OQO0CCQOQ0,OCO0CCQOQ0,OOQ0CCQOQ0);
end;
end;
procedure OOCCQ0COQ0.OO0OCCQOQ0(const OQ0OCCQOQ0:TBytes;OC0OCCQOQ0:ub2;O0OOCCQOQ0:O0COQOCOQ0;OOOOCCQOQ0:IntPtr;var OQOOCCQOQ0:Integer);
var
OCOOCCQOQ0:Encoding;
O0QOCCQOQ0:Encoding;
OOQOCCQOQ0:Integer;
OQQOCCQOQ0:integer;
OCQOCCQOQ0:TBytes;
O0COCCQOQ0:TBytes;
OOCOCCQOQ0:TOCIDateTime;
OQCOCCQOQ0:TOCIInterval;
OCCOCCQOQ0:TBytes;
O00QQCQOQ0:TBytes;
begin
case O0OOCCQOQ0.OQCOQOCOQ0 of
SQLT_CHR,SQLT_STR,SQLT_AVC,SQLT_AFC,SQLT_VCS:begin
{$IFNDEF VER9P}
SetLength(O0COCCQOQ0,0);
{$ENDIF}
if O0OOCCQOQ0.O0OCO0COQ0=2 then
OCOOCCQOQ0:=OCCCQ0COQ0.OOOQO0QOQ0
else
OCOOCCQOQ0:=OCCCQ0COQ0.OQQQO0QOQ0;
if O0OOCCQOQ0.OC0CO0COQ0=0 then
O0QOCCQOQ0:=OCCCQ0COQ0.OOCQO0QOQ0
else
O0QOCCQOQ0:=OCCCQ0COQ0.OQ00QOQOQ0(O0OOCCQOQ0.OC0CO0COQ0);
if O0QOCCQOQ0=Encoding.Unicode then begin
OOQOCCQOQ0:=O0OOCCQOQ0.OCOQO0COQ0 shr 1;
if O0OOCCQOQ0.OQCOQOCOQ0 in[SQLT_STR,SQLT_AVC]then
Dec(OOQOCCQOQ0);
if OC0OCCQOQ0=SQLT_BIN then begin
OQOOCCQOQ0:=OQOOCCQOQ0*2;
if OQOOCCQOQ0>=OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0 and$FFFFFFFE;
BinToHexW(OQ0OCCQOQ0,OOOOCCQOQ0,OQOOCCQOQ0*2);
end
else if OCOOCCQOQ0=O0QOCCQOQ0 then begin
OQOOCCQOQ0:=OQOOCCQOQ0 shr 1;
if OQOOCCQOQ0>=OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
Move(OQ0OCCQOQ0[0],OOOOCCQOQ0^,OQOOCCQOQ0*2);
end
else if OCOOCCQOQ0=Encoding.BigEndianUnicode then begin
OQOOCCQOQ0:=OQOOCCQOQ0 shr 1;
if OQOOCCQOQ0>=OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
ConvertBigEndianBuffer(@OQ0OCCQOQ0[0],OOOOCCQOQ0,OQOOCCQOQ0*2);
end
else if OCOOCCQOQ0=Encoding.UTF8 then
if OQOOCCQOQ0>OOQOCCQOQ0 then begin
if O0CCCQOOQ0>=OQOOCCQOQ0 then
OCCOCCQOQ0:=OQ00Q0COQ0.OOQOOQCOQ0
else
SetLength(OCCOCCQOQ0,OQOOCCQOQ0*2);
OQOOCCQOQ0:=CRFunctions.Utf8ToUnicodeWoT(@OCCOCCQOQ0[0],Length(OCCOCCQOQ0)shr 1,@OQ0OCCQOQ0[0],OQOOCCQOQ0);
if OQOOCCQOQ0>OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
Move(OCCOCCQOQ0[0],OOOOCCQOQ0^,OQOOCCQOQ0*2);
end
else
OQOOCCQOQ0:=CRFunctions.Utf8ToUnicodeWoT(OOOOCCQOQ0,OOQOCCQOQ0,@OQ0OCCQOQ0[0],OQOOCCQOQ0)
{$IFNDEF FPC}
else if OCOOCCQOQ0=Encoding.Default then
if OQOOCCQOQ0>OOQOCCQOQ0 then begin
if O0CCCQOOQ0>=OQOOCCQOQ0 then
OCCOCCQOQ0:=OQ00Q0COQ0.OOQOOQCOQ0
else
SetLength(OCCOCCQOQ0,OQOOCCQOQ0*2);
OQOOCCQOQ0:=UnicodeFromLocaleChars({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,@OQ0OCCQOQ0[0],OQOOCCQOQ0,@OCCOCCQOQ0[0],Length(OCCOCCQOQ0)shr 1);
if OQOOCCQOQ0>OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
Move(OCCOCCQOQ0[0],OOOOCCQOQ0^,OQOOCCQOQ0*2);
end
else
OQOOCCQOQ0:=UnicodeFromLocaleChars({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,@OQ0OCCQOQ0[0],OQOOCCQOQ0,OOOOCCQOQ0,OOQOCCQOQ0)
{$ENDIF}
else begin
O0COCCQOQ0:=Encoding.Convert(OCOOCCQOQ0,Encoding.Unicode,OQ0OCCQOQ0,0,OQOOCCQOQ0);
OQOOCCQOQ0:=Length(O0COCCQOQ0)shr 1;
if OQOOCCQOQ0>OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
Move(O0COCCQOQ0[0],OOOOCCQOQ0^,OQOOCCQOQ0*2);
end;
if O0OOCCQOQ0.OQCOQOCOQ0 in[SQLT_STR,SQLT_AVC]then
Marshal.WriteInt16(OOOOCCQOQ0,OQOOCCQOQ0*2,0);
end
else begin
OOQOCCQOQ0:=O0OOCCQOQ0.OCOQO0COQ0;
if O0OOCCQOQ0.OQCOQOCOQ0 in[SQLT_STR,SQLT_AVC]then
Dec(OOQOCCQOQ0);
if OC0OCCQOQ0=SQLT_BIN then begin
OQOOCCQOQ0:=OQOOCCQOQ0*2;
if OQOOCCQOQ0>=OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0 and$FFFFFFFE;
BinToHexA(OQ0OCCQOQ0,OOOOCCQOQ0,OQOOCCQOQ0);
end
else begin
if OCOOCCQOQ0=O0QOCCQOQ0 then begin
if OQOOCCQOQ0>=OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
Move(OQ0OCCQOQ0[0],OOOOCCQOQ0^,OQOOCCQOQ0);
end
else if(OCOOCCQOQ0=Encoding.BigEndianUnicode)and
((O0QOCCQOQ0=Encoding.UTF8){$IFDEF FPC}or(O0QOCCQOQ0=OCCCQ0COQ0.OOCQO0QOQ0){$ENDIF})
then begin
if O0CCCQOOQ0>=OQOOCCQOQ0 then
OCCOCCQOQ0:=OQ00Q0COQ0.OOQOOQCOQ0
else
SetLength(OCCOCCQOQ0,OQOOCCQOQ0*2);
ConvertBigEndianBuffer(@OQ0OCCQOQ0[0],@OCCOCCQOQ0[0],OQOOCCQOQ0);
OQOOCCQOQ0:=OQOOCCQOQ0 shr 1;
if OQOOCCQOQ0 shl 2>OOQOCCQOQ0 then begin
if O0CCCQOOQ0>=OQOOCCQOQ0 then
O00QQCQOQ0:=OQ00Q0COQ0.O0QOOQCOQ0
else
SetLength(O00QQCQOQ0,OQOOCCQOQ0 shl 2);
{$IFNDEF FPC}
if O0QOCCQOQ0<>Encoding.UTF8 then
OQOOCCQOQ0:=LocaleCharsFromUnicode({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,@OCCOCCQOQ0[0],OQOOCCQOQ0,@O00QQCQOQ0[0],Length(O00QQCQOQ0),nil,nil)
else
{$ENDIF}
OQOOCCQOQ0:=CRFunctions.UnicodeToUtf8WoT(@O00QQCQOQ0[0],Length(O00QQCQOQ0),@OCCOCCQOQ0[0],OQOOCCQOQ0);
if OQOOCCQOQ0>OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
Move(O00QQCQOQ0[0],OOOOCCQOQ0^,OQOOCCQOQ0);
end
{$IFNDEF FPC}
else if O0QOCCQOQ0<>Encoding.UTF8 then
OQOOCCQOQ0:=LocaleCharsFromUnicode({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,@OCCOCCQOQ0[0],OQOOCCQOQ0,OOOOCCQOQ0,OOQOCCQOQ0,nil,nil)
{$ENDIF}
else
OQOOCCQOQ0:=CRFunctions.UnicodeToUtf8WoT(OOOOCCQOQ0,OOQOCCQOQ0,@OQ00Q0COQ0.OOQOOQCOQ0[0],OQOOCCQOQ0);
end
{$IFNDEF FPC}
else if(OCOOCCQOQ0=Encoding.UTF8)and(O0QOCCQOQ0=OCCCQ0COQ0.OOCQO0QOQ0)then begin
if O0CCCQOOQ0>=OQOOCCQOQ0 then
OCCOCCQOQ0:=OQ00Q0COQ0.OOQOOQCOQ0
else
SetLength(OCCOCCQOQ0,OQOOCCQOQ0*2);
OQOOCCQOQ0:=CRFunctions.Utf8ToUnicodeWoT(@OCCOCCQOQ0[0],Length(OCCOCCQOQ0)shr 1,@OQ0OCCQOQ0[0],OQOOCCQOQ0);
if OQOOCCQOQ0 shl 2>OOQOCCQOQ0 then begin
if O0CCCQOOQ0>=OQOOCCQOQ0 then
O00QQCQOQ0:=OQ00Q0COQ0.O0QOOQCOQ0
else
SetLength(O00QQCQOQ0,OQOOCCQOQ0 shl 2);
OQOOCCQOQ0:=LocaleCharsFromUnicode({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,@OCCOCCQOQ0[0],OQOOCCQOQ0,@O00QQCQOQ0[0],Length(O00QQCQOQ0),nil,nil);
if OQOOCCQOQ0>OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
Move(O00QQCQOQ0[0],OOOOCCQOQ0^,OQOOCCQOQ0);
end
else
OQOOCCQOQ0:=LocaleCharsFromUnicode({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,@OCCOCCQOQ0[0],OQOOCCQOQ0,OOOOCCQOQ0,OOQOCCQOQ0,nil,nil)
end
{$ENDIF}
else begin
O0COCCQOQ0:=Encoding.Convert(OCOOCCQOQ0,O0QOCCQOQ0,OQ0OCCQOQ0,0,OQOOCCQOQ0);
OQOOCCQOQ0:=Length(O0COCCQOQ0);
if OQOOCCQOQ0>=OOQOCCQOQ0 then
OQOOCCQOQ0:=OOQOCCQOQ0;
Move(O0COCCQOQ0[0],OOOOCCQOQ0^,OQOOCCQOQ0);
end;
end;
if O0OOCCQOQ0.OQCOQOCOQ0 in[SQLT_STR,SQLT_AVC]then
Marshal.WriteByte(OOOOCCQOQ0,OQOOCCQOQ0,0);
end;
end;
SQLT_INT:begin
OQQOCCQOQ0:=TOCINumber.ToInt(OQ0OCCQOQ0,sizeof(Integer),OCI_NUMBER_SIGNED);
if O0OOCCQOQ0.OCOQO0COQ0=1 then begin
if(OQQOCCQOQ0>128)or(OQQOCCQOQ0<-128)then
OOCO0QOOQ0(01455,'ORA-01455: converting column overflows integer datatype'#$A);
Marshal.WriteByte(OOOOCCQOQ0,ShortInt(OQQOCCQOQ0))
end
else
if O0OOCCQOQ0.OCOQO0COQ0=2 then begin
if(OQQOCCQOQ0>32767)or(OQQOCCQOQ0<-32768)then
OOCO0QOOQ0(01455,'ORA-01455: converting column overflows integer datatype'#$A);
Marshal.WriteInt16(OOOOCCQOQ0,SmallInt(OQQOCCQOQ0))
end
else
Marshal.WriteInt32(OOOOCCQOQ0,OQQOCCQOQ0);
end;
SQLT_UIN:begin
OQQOCCQOQ0:=TOCINumber.ToInt(OQ0OCCQOQ0,sizeof(Integer),OCI_NUMBER_UNSIGNED);
if O0OOCCQOQ0.OCOQO0COQ0=1 then begin
if OQQOCCQOQ0>255 then
OOCO0QOOQ0(01455,'ORA-01455: converting column overflows integer datatype'#$A);
Marshal.WriteByte(OOOOCCQOQ0,Byte(OQQOCCQOQ0))
end
else
if O0OOCCQOQ0.OCOQO0COQ0=2 then begin
if OQQOCCQOQ0>65535 then
OOCO0QOOQ0(01455,'ORA-01455: converting column overflows integer datatype'#$A);
Marshal.WriteInt16(OOOOCCQOQ0,Word(OQQOCCQOQ0))
end
else
Marshal.WriteInt32(OOOOCCQOQ0,OQQOCCQOQ0);
end;
SQLT_FLT:
if OC0OCCQOQ0 in[SQLT_FLT,SQLT_NUM,SQLT_VNU]then
Marshal.WriteInt64(OOOOCCQOQ0,BitConverter.DoubleToInt64Bits(TOCINumber.ToReal(OQ0OCCQOQ0,sizeof(Double))))
else if OC0OCCQOQ0 in[SQLT_BFLOAT,SQLT_IBFLOAT]then
Marshal.WriteInt64(OOOOCCQOQ0,BitConverter.DoubleToInt64Bits(OQ000QOOQ0.OC000QOOQ0(OQ0OCCQOQ0)))
else if OC0OCCQOQ0 in[SQLT_BDOUBLE,SQLT_IBDOUBLE]then
Marshal.WriteInt64(OOOOCCQOQ0,BitConverter.DoubleToInt64Bits(OOQ00QOOQ0.OQQ00QOOQ0(OQ0OCCQOQ0)))
else
Marshal.WriteInt64(OOOOCCQOQ0,0);
SQLT_BFLOAT,SQLT_IBFLOAT:
if OC0OCCQOQ0 in[SQLT_BFLOAT,SQLT_IBFLOAT]then
Marshal.WriteInt32(OOOOCCQOQ0,CRBitConverter.SingleToInt32Bits(OQ000QOOQ0.OC000QOOQ0(OQ0OCCQOQ0)))
else if OC0OCCQOQ0 in[SQLT_BFLOAT,SQLT_IBFLOAT]then
Marshal.WriteInt32(OOOOCCQOQ0,CRBitConverter.SingleToInt32Bits(OOQ00QOOQ0.OQQ00QOOQ0(OQ0OCCQOQ0)))
else if OC0OCCQOQ0 in[SQLT_FLT,SQLT_NUM,SQLT_VNU]then
Marshal.WriteInt64(OOOOCCQOQ0,CRBitConverter.SingleToInt32Bits(TOCINumber.ToReal(OQ0OCCQOQ0,sizeof(Single))))
else
Marshal.WriteInt64(OOOOCCQOQ0,0);
SQLT_BDOUBLE,SQLT_IBDOUBLE:
if OC0OCCQOQ0 in[SQLT_BDOUBLE,SQLT_IBDOUBLE]then
Marshal.WriteInt64(OOOOCCQOQ0,BitConverter.DoubleToInt64Bits(OOQ00QOOQ0.OQQ00QOOQ0(OQ0OCCQOQ0)))
else if OC0OCCQOQ0 in[SQLT_BFLOAT,SQLT_IBFLOAT]then
Marshal.WriteInt64(OOOOCCQOQ0,BitConverter.DoubleToInt64Bits(OQ000QOOQ0.OC000QOOQ0(OQ0OCCQOQ0)))
else if OC0OCCQOQ0 in[SQLT_FLT,SQLT_NUM,SQLT_VNU]then
Marshal.WriteInt64(OOOOCCQOQ0,BitConverter.DoubleToInt64Bits(TOCINumber.ToReal(OQ0OCCQOQ0,sizeof(Double))))
else
Marshal.WriteInt64(OOOOCCQOQ0,0);
SQLT_NUM,SQLT_VNU:begin
{$IFNDEF VER9P}
SetLength(OCQOCCQOQ0,0);
{$ENDIF}
if OC0OCCQOQ0 in[SQLT_BDOUBLE,SQLT_IBDOUBLE]then begin
OCQOCCQOQ0:=TOCINumber.FromReal(OOQ00QOOQ0.OQQ00QOOQ0(OQ0OCCQOQ0),OQOOCCQOQ0);
OQOOCCQOQ0:=Length(OCQOCCQOQ0);
Marshal.WriteByte(OOOOCCQOQ0,OQOOCCQOQ0);
Marshal.Copy(OCQOCCQOQ0,0,PtrOffset(OOOOCCQOQ0,1),OQOOCCQOQ0);
end
else if OC0OCCQOQ0 in[SQLT_BFLOAT,SQLT_IBFLOAT]then begin
OCQOCCQOQ0:=TOCINumber.FromReal(OQ000QOOQ0.OC000QOOQ0(OQ0OCCQOQ0),OQOOCCQOQ0);
OQOOCCQOQ0:=Length(OCQOCCQOQ0);
Marshal.WriteByte(OOOOCCQOQ0,OQOOCCQOQ0);
Marshal.Copy(OCQOCCQOQ0,0,PtrOffset(OOOOCCQOQ0,1),OQOOCCQOQ0);
end
else begin
Marshal.WriteByte(OOOOCCQOQ0,OQOOCCQOQ0);
Marshal.Copy(OQ0OCCQOQ0,0,PtrOffset(OOOOCCQOQ0,1),OQOOCCQOQ0);
end;
end;
SQLT_TIMESTAMP,
SQLT_TIMESTAMP_TZ,
SQLT_TIMESTAMP_LTZ:begin
OOCOCCQOQ0:=O00O0QOOQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OOOOCCQOQ0))).OO0O0QOOQ0;
if(O0OOCCQOQ0.OQCOQOCOQ0=SQLT_TIMESTAMP_TZ)and(OCCCQ0COQ0.OCCOQOQOQ0<O00OCOCOQ0)then
OOCOCCQOQ0.Value:=ConvertFromServerTZ(OQ0OCCQOQ0)
else
OOCOCCQOQ0.Value:=OQ0OCCQOQ0;
if(OQQOQ0COQ0=O00OC0QOQ0)and(O0OOCCQOQ0.OQCOQOCOQ0=SQLT_TIMESTAMP)then
if OC0OCCQOQ0=SQLT_TIMESTAMP_TZ then
OOCOCCQOQ0.Value:=ConvertToLocalTime(OOCOCCQOQ0.Value)
else if OC0OCCQOQ0=SQLT_TIMESTAMP_LTZ then
OOCOCCQOQ0.Value:=ConvertToLocalTime(OOCOCCQOQ0.Value,O0COQ0COQ0,-OCCCQ0COQ0.O0QOCQQOQ0);
end;
SQLT_DAT:begin
{$IFNDEF VER9P}
SetLength(OCQOCCQOQ0,0);
{$ENDIF}
if(OQQOQ0COQ0=O00OC0QOQ0)then begin
if OC0OCCQOQ0=SQLT_TIMESTAMP_TZ then begin
OCQOCCQOQ0:=ConvertToLocalTime(OQ0OCCQOQ0);
OQOOCCQOQ0:=Length(OCQOCCQOQ0);
if OQOOCCQOQ0>=O0OOCCQOQ0.OCOQO0COQ0 then
OQOOCCQOQ0:=O0OOCCQOQ0.OCOQO0COQ0;
Marshal.Copy(OCQOCCQOQ0,0,OOOOCCQOQ0,OQOOCCQOQ0);
end
else if OC0OCCQOQ0=SQLT_TIMESTAMP_LTZ then begin
OCQOCCQOQ0:=ConvertToLocalTime(OQ0OCCQOQ0,O0COQ0COQ0,-OCCCQ0COQ0.O0QOCQQOQ0);
OQOOCCQOQ0:=Length(OCQOCCQOQ0);
if OQOOCCQOQ0>=O0OOCCQOQ0.OCOQO0COQ0 then
OQOOCCQOQ0:=O0OOCCQOQ0.OCOQO0COQ0;
Marshal.Copy(OCQOCCQOQ0,0,OOOOCCQOQ0,OQOOCCQOQ0);
end
else begin
if OQOOCCQOQ0>=O0OOCCQOQ0.OCOQO0COQ0 then
OQOOCCQOQ0:=O0OOCCQOQ0.OCOQO0COQ0;
Marshal.Copy(OQ0OCCQOQ0,0,OOOOCCQOQ0,OQOOCCQOQ0);
end;
end
else begin
if OQOOCCQOQ0>=O0OOCCQOQ0.OCOQO0COQ0 then
OQOOCCQOQ0:=O0OOCCQOQ0.OCOQO0COQ0;
Marshal.Copy(OQ0OCCQOQ0,0,OOOOCCQOQ0,OQOOCCQOQ0);
end;
end;
SQLT_INTERVAL_YM,SQLT_INTERVAL_DS:begin
OQCOCCQOQ0:=O0OO0QOOQ0(GetGCHandleTarget(Marshal.ReadIntPtr(OOOOCCQOQ0))).OOOO0QOOQ0;
OQCOCCQOQ0.Value:=OQ0OCCQOQ0;
end;
else begin
if OQOOCCQOQ0>=O0OOCCQOQ0.OCOQO0COQ0 then
OQOOCCQOQ0:=O0OOCCQOQ0.OCOQO0COQ0;
Marshal.Copy(OQ0OCCQOQ0,0,OOOOCCQOQ0,OQOOCCQOQ0);
end;
end;
end;
procedure OOCCQ0COQ0.OO0QQCQOQ0(OQ0QQCQOQ0:integer;const OC0QQCQOQ0:string;O0OQQCQOQ0:TCRObjectList;
OOOQQCQOQ0:TCRList;OQOQQCQOQ0:pOCIError);
var
OCOQQCQOQ0:integer;
O0QQQCQOQ0:integer;
OOQQQCQOQ0:OQQCQCCOQ0;
OQQQQCQOQ0:OQQCQCCOQ0;
OCQQQCQOQ0:word;
O0CQQCQOQ0:word;
begin
SetLength(OQQ0Q0COQ0,0);
O0QQQCQOQ0:=OQ0QQCQOQ0;
if(O0QQQCQOQ0 and O0QQCOCOQ0>0)and(O0OQQCQOQ0<>nil)then begin
OCQQQCQOQ0:=O0OQQCQOQ0.Count;
if OCQQQCQOQ0>0 then
O0QQQCQOQ0:=O0QQQCQOQ0 or OQOQCOCOQ0;
end
else
OCQQQCQOQ0:=0;
if(O0QQQCQOQ0 and OCOQCOCOQ0>0)and(OOOQQCQOQ0<>nil)and(OOC0Q0COQ0<>OCI_STMT_EXPLAIN)then begin
O0CQQCQOQ0:=OOOQQCQOQ0.Count;
if O0CQQCQOQ0>0 then
O0QQQCQOQ0:=O0QQQCQOQ0 or OOOQCOCOQ0;
end
else
O0CQQCQOQ0:=0;
if not(OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE])then
if OCQOQ0COQ0 and(O0CQQCQOQ0>0)then
O0QQQCQOQ0:=O0QQQCQOQ0 or O0CQCOCOQ0
else
O0QQQCQOQ0:=O0QQQCQOQ0 or OOCQCOCOQ0
else if(O0QQQCQOQ0 and OCOQCOCOQ0>0)and(O0CQQCQOQ0>0)then
O0QQQCQOQ0:=O0QQQCQOQ0 or O0CQCOCOQ0;
SetLength(OOQQQCQOQ0,7);
OOQQQCQOQ0[0]:=1;
if OOC0Q0COQ0=SQL_PLSQL then
OOQQQCQOQ0[1]:=1
else if(O0QQQCQOQ0 and OCOQCOCOQ0>0)and(O0QQQCQOQ0 and O0QQCOCOQ0=0)then
OOQQQCQOQ0[1]:=Cardinal(Integer(OQ0OQ0COQ0)-Integer(OC0OQ0COQ0))
else if O0QQQCQOQ0 and O0QQCOCOQ0>0 then
OOQQQCQOQ0[1]:=O0O0Q0COQ0.OC00C0QOQ0(OO0OQ0COQ0);
SetLength(OQQQQCQOQ0,2);
if OQQOQ0COQ0=O00OC0QOQ0 then
OQQCQCQOQ0(O0QQQCQOQ0,OC0QQCQOQ0,OOQQQCQOQ0,OQQQQCQOQ0,OCQQQCQOQ0,O0CQQCQOQ0)
else
OO0CQCQOQ0(O0QQQCQOQ0,OC0QQCQOQ0,OOQQQCQOQ0,OQQQQCQOQ0,OCQQQCQOQ0,O0CQQCQOQ0);
if OCQQQCQOQ0>0 then
for OCOQQCQOQ0:=0 to OOO0Q0COQ0.Count-1 do
OC0COCQOQ0(O0COQOCOQ0(OOO0Q0COQ0[OCOQQCQOQ0]));
if(O0CQQCQOQ0>0)and(OOC0Q0COQ0<>OCI_STMT_EXPLAIN)then begin
for OCOQQCQOQ0:=0 to OOOQQCQOQ0.Count-1 do
OC0COCQOQ0(O0COQOCOQ0(OOOQQCQOQ0[OCOQQCQOQ0]));
if not(OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE])then begin
OOOOQ0COQ0:=OC0OQ0COQ0;
if OCQQQCQOQ0>0 then
OQQ0OCQOQ0(OOOQQCQOQ0)
else if OQ0OQ0COQ0=0 then
OQQ0OCQOQ0(OOOQQCQOQ0)
else
for OCOQQCQOQ0:=OC0OQ0COQ0 to OQ0OQ0COQ0-1 do
OQQ0OCQOQ0(OOOQQCQOQ0)
end
else if OQQOQ0COQ0=O00OC0QOQ0 then
OQQ0OCQOQ0(OOOQQCQOQ0);
end;
end;
procedure OOCCQ0COQ0.OOCQQCQOQ0(OQCQQCQOQ0:integer);
var
OCCQQCQOQ0:Integer;
O00CQCQOQ0:Integer;
begin
if OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE]then
O00CQCQOQ0:=1
else if OQ0OQ0COQ0=0 then
O00CQCQOQ0:=1
else
O00CQCQOQ0:=OQ0OQ0COQ0-OC0OQ0COQ0;
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OC000OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OC0QQQCOQ0(O0C0Q0COQ0);
OQ00Q0COQ0.OC0QQQCOQ0(O00CQCQOQ0);
OQ00Q0COQ0.OC0QQQCOQ0(0);
if OQCQQCQOQ0 and OQQQCOCOQ0<>0 then
OQ00Q0COQ0.OC0QQQCOQ0(1)
else
OQ00Q0COQ0.OC0QQQCOQ0(0);
if(OCCCCQQOQ0<>nil)and(OCCCCQQOQ0.Count>0)then
for OCCQQCQOQ0:=0 to O00CQCQOQ0-1 do
OQQ0OCQOQ0(OCCCCQQOQ0)
end;
procedure OOCCQ0COQ0.OO0CQCQOQ0(OQ0CQCQOQ0:integer;const OC0CQCQOQ0:string;O0OCQCQOQ0:OQQCQCCOQ0;
OOOCQCQOQ0:OQQCQCCOQ0;OQOCQCQOQ0:word;OCOCQCQOQ0:word);
var
O0QCQCQOQ0:TBytes;
OOQCQCQOQ0:TBytes;
begin
OOQCQCQOQ0:=O00CCQOOQ0(OQQCCQQOQ0.OOCOQOQOQ0.O00CQ0COQ0,O0OQCQOOQ0(OQQCCQQOQ0.OOQQO0QOQ0),OC0CQCQOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(O00O0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0(OQ0CQCQOQ0);
OQ00Q0COQ0.OC0QQQCOQ0(O0C0Q0COQ0);
if Length(OOQCQCQOQ0)=0 then
OQ00Q0COQ0.OQO0QQCOQ0
else
OQ00Q0COQ0.OOO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(Length(OOQCQCQOQ0));
SetLength(O0QCQCQOQ0,0);
if Length(O0QCQCQOQ0)=0 then
OQ00Q0COQ0.OQO0QQCOQ0
else
OQ00Q0COQ0.OOO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(Length(O0QCQCQOQ0));
if Length(O0OCQCQOQ0)=0 then
OQ00Q0COQ0.OQO0QQCOQ0
else
OQ00Q0COQ0.OOO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(Length(O0OCQCQOQ0));
OQ00Q0COQ0.O0QQQQCOQ0(True);
OQ00Q0COQ0.OC0QQQCOQ0(Length(OOOCQCQOQ0));
OQ00Q0COQ0.O0QQQQCOQ0(False);
if OQOCQCQOQ0>0 then
OQ00Q0COQ0.OOO0QQCOQ0
else
OQ00Q0COQ0.OQO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(OQOCQCQOQ0);
if OCOCQCQOQ0>0 then
OQ00Q0COQ0.OOO0QQCOQ0
else
OQ00Q0COQ0.OQO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(OCOCQCQOQ0);
OQ00Q0COQ0.OQQQQQCOQ0(OOQCQCQOQ0);
OQ00Q0COQ0.OQQQQQCOQ0(O0QCQCQOQ0);
OQ00Q0COQ0.OCCCQQCOQ0(O0OCQCQOQ0);
end;
procedure OOCCQ0COQ0.OQQCQCQOQ0(OCQCQCQOQ0:Integer;const O0CCQCQOQ0:string;OOCCQCQOQ0:OQQCQCCOQ0;
OQCCQCQOQ0:OQQCQCCOQ0;OCCCQCQOQ0:word;O000QCQOQ0:word);
var
OO00QCQOQ0:TBytes;
begin
OCCCQ0COQ0.OCCO0OQOQ0;
OO00QCQOQ0:=O00CCQOOQ0(OQQCCQQOQ0.OOCOQOQOQ0.O00CQ0COQ0,O0OQCQOOQ0(OQQCCQQOQ0.OOQQO0QOQ0),O0CCQCQOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OQOO0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0(OCQCQCQOQ0);
OQ00Q0COQ0.OC0QQQCOQ0(O0C0Q0COQ0);
if Length(OO00QCQOQ0)=0 then begin
OQ00Q0COQ0.OQO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(0);
end
else begin
OQ00Q0COQ0.OOO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(Length(OO00QCQOQ0));
end;
OQ00Q0COQ0.OOO0QQCOQ0;
OQ00Q0COQ0.OOOQQQCOQ0(13);
OQ00Q0COQ0.OQO0QQCOQ0;
OQ00Q0COQ0.OQO0QQCOQ0;
OQ00Q0COQ0.OOOQQQCOQ0(0);
if OCQCQCQOQ0 and$8000<>0 then begin
if OOC0Q0COQ0=OCI_STMT_SELECT then
if OCQCQCQOQ0 and O0QQCOCOQ0<>0 then
OQ00Q0COQ0.OOOQQQCOQ0(O0O0Q0COQ0.OC00C0QOQ0(OO0OQ0COQ0))
else if OCQCQCQOQ0 and O0OQCOCOQ0=0 then
OQ00Q0COQ0.OOOQQQCOQ0(O0O0Q0COQ0.OC00C0QOQ0(OO0OQ0COQ0))
else
OQ00Q0COQ0.OOOQQQCOQ0(0)
else
OQ00Q0COQ0.OOOQQQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0($7FFFFFFF);
end
else begin
OQ00Q0COQ0.OOOQQQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0($7FF8);
end;
if O000QCQOQ0>0 then
OQ00Q0COQ0.OOO0QQCOQ0
else
OQ00Q0COQ0.OQO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(O000QCQOQ0);
OQ00Q0COQ0.OCO0QQCOQ0(5);
if OCCCQ0COQ0.OCQ0CQQOQ0>=O0C0COCOQ0 then begin
if OCCCQCQOQ0>0 then
OQ00Q0COQ0.OOO0QQCOQ0
else
OQ00Q0COQ0.OQO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(OCCCQCQOQ0);
if OCCCQ0COQ0.OCQ0CQQOQ0>=OCC0COCOQ0 then begin
OQ00Q0COQ0.OOOQQQCOQ0(0);
OQ00Q0COQ0.OQO0QQCOQ0();
OQ00Q0COQ0.OOO0QQCOQ0();
if OCCCQ0COQ0.OCQ0CQQOQ0>=O00OCOCOQ0 then
OQ00Q0COQ0.OCO0QQCOQ0(5);
if OCCCQ0COQ0.OCQ0CQQOQ0>=OQ0OCOCOQ0 then
OQ00Q0COQ0.OCO0QQCOQ0(3);
end;
end;
OQ00Q0COQ0.OQQQQQCOQ0(OO00QCQOQ0);
if OCQCQCQOQ0 and O0OQCOCOQ0=0 then
OQ00Q0COQ0.OC0QQQCOQ0(0)
else
OQ00Q0COQ0.OC0QQQCOQ0(1);
if not(OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE])then
if OOC0Q0COQ0=OCI_STMT_SELECT then
if OCQCQCQOQ0 and O0QQCOCOQ0<>0 then
OQ00Q0COQ0.OOOQQQCOQ0(O0O0Q0COQ0.OC00C0QOQ0(OO0OQ0COQ0))
else if OCQCQCQOQ0 and O0OQCOCOQ0=0 then
OQ00Q0COQ0.OOOQQQCOQ0(O0O0Q0COQ0.OC00C0QOQ0(OO0OQ0COQ0))
else
OQ00Q0COQ0.OOOQQQCOQ0(0)
else
OQ00Q0COQ0.OC0QQQCOQ0(Integer(OQ0OQ0COQ0)-Integer(OC0OQ0COQ0))
else
OQ00Q0COQ0.OC0QQQCOQ0(1);
OQ00Q0COQ0.OCO0QQCOQ0(5);
if OOC0Q0COQ0=OCI_STMT_SELECT then begin
OQ00Q0COQ0.OOOQQQCOQ0(1);
OQ00Q0COQ0.OOOQQQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0($8000);
end
else begin
OQ00Q0COQ0.OOOQQQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0(0);
if OCCCQ0COQ0.OCQ0CQQOQ0>=OQ0OCOCOQ0 then
OQ00Q0COQ0.OOOQQQCOQ0($8000)
else
OQ00Q0COQ0.OOOQQQCOQ0(0);
end;
OQ00Q0COQ0.OOOQQQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0(0);
OQ00Q0COQ0.OOOQQQCOQ0(0);
end;
function OOCCQ0COQ0.OQ00QCQOQ0(OC00QCQOQ0:Integer;O0O0QCQOQ0:TCRObjectList;OOO0QCQOQ0:TCRList;OQO0QCQOQ0:pOCIError):sword;
begin
if OQQOQ0COQ0=O00OC0QOQ0 then
Result:=OOQOQCQOQ0(O0O0QCQOQ0,OOO0QCQOQ0,OQO0QCQOQ0)
else
Result:=OCO0QCQOQ0(O0O0QCQOQ0,OOO0QCQOQ0,OQO0QCQOQ0);
if(Result=OCI_SUCCESS)and(OC00QCQOQ0 and OCOQCOCOQ0>0)then
OOQOQ0COQ0:=OCI_STMT_STATE_EXECUTED;
end;
function OOCCQ0COQ0.OCO0QCQOQ0(O0Q0QCQOQ0:TCRObjectList;OOQ0QCQOQ0:TCRList;OQQ0QCQOQ0:pOCIError):sword;
var
OCQ0QCQOQ0:integer;
O0C0QCQOQ0:byte;
OOC0QCQOQ0:integer;
OQC0QCQOQ0:boolean;
OCC0QCQOQ0:boolean;
O00OQCQOQ0:integer;
OO0OQCQOQ0:word;
OQ0OQCQOQ0:word;
OC0OQCQOQ0:byte;
O0OOQCQOQ0:integer;
OOOOQCQOQ0:integer;
OQOOQCQOQ0:TBytes;
OCOOQCQOQ0:TBytes;
O0QOQCQOQ0:OOCCQ0COQ0;
begin
{$IFNDEF VER9P}
SetLength(OCOOQCQOQ0,0);
SetLength(OQOOQCQOQ0,0);
{$ENDIF}
OQC0QCQOQ0:=False;
OCC0QCQOQ0:=False;
while True do begin
O0C0QCQOQ0:=OQ00Q0COQ0.OOC0QQCOQ0;
case O0C0QCQOQ0 of
OCOC0OCOQ0:begin
if OCCCQ0COQ0.O0C0CQQOQ0<8000 then begin
OQ00Q0COQ0.OQC0QQCOQ0;
OO0OQCQOQ0:=OQ00Q0COQ0.OQC0QQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
end
else begin
OQ00Q0COQ0.OQC0QQCOQ0;
OO0OQCQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0+OQ00Q0COQ0.OO0OQQCOQ0 shl 8;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
if OCCCQ0COQ0.O0C0CQQOQ0>=8100 then begin
OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
end;
end;
SetLength(OQQ0Q0COQ0,OO0OQCQOQ0);
O0OOQCQOQ0:=0;
for OCQ0QCQOQ0:=0 to OO0OQCQOQ0-1 do begin
OC0OQCQOQ0:=OQ00Q0COQ0.OQC0QQCOQ0;
if OC0OQCQOQ0=0 then
OQ0QCQOOQ0(1);
if OC0OQCQOQ0 and$20>0 then begin
OQQ0Q0COQ0[OCQ0QCQOQ0]:=OQQ0Q0COQ0[OCQ0QCQOQ0]or$20;
Inc(O0OOQCQOQ0);
end;
if OC0OQCQOQ0 and$10>0 then begin
OQQ0Q0COQ0[OCQ0QCQOQ0]:=OQQ0Q0COQ0[OCQ0QCQOQ0]or$10;
end;
end;
if(OQQOQ0COQ0<>O00OC0QOQ0)and(Length(OQQ0Q0COQ0)>0)then begin
if O0OOQCQOQ0=0 then begin
if OQ00Q0COQ0.OOC0QQCOQ0<>O0OC0OCOQ0 then
OQ0QCQOOQ0(1);
OQCC0CQOQ0(OOQ0QCQOQ0);
end
else begin
for OCQ0QCQOQ0:=OC0OQ0COQ0 to OQ0OQ0COQ0-1 do
OQQ0OCQOQ0(OOQ0QCQOQ0);
end;
end;
end;
OC0C0OCOQ0:begin
if OCCCQ0COQ0.O0C0CQQOQ0<8000 then begin
OQ00Q0COQ0.OQC0QQCOQ0;
OQ00Q0COQ0.OQC0QQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ0OQCQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
end
else begin
OQ00Q0COQ0.OQC0QQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ00Q0COQ0.OO0OQQCOQ0;
OQ0OQCQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
if OCCCQ0COQ0.O0C0CQQOQ0>=8100 then begin
OQOOQCQOQ0:=OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
end;
end;
if OQ0OQCQOQ0>0 then
OQ0QCQOOQ0(40);
OCC0QCQOQ0:=True;
if(O0Q0QCQOQ0<>nil)and(O0Q0QCQOQ0.Count>0)then
O0O0Q0COQ0.OC0CC0QOQ0(O0Q0QCQOQ0)
else
O0O0Q0COQ0.OOQCC0QOQ0;
end;
OCCC0OCOQ0:begin
OQ00Q0COQ0.OO0OQQCOQ0;
if(O0Q0QCQOQ0<>nil)then
OQOOQCQOQ0:=OQ00Q0COQ0.O0OOQQCOQ0((O0Q0QCQOQ0.Count+7)shr 3);
end;
O0OC0OCOQ0:begin
if(O0Q0QCQOQ0<>nil)and(O0Q0QCQOQ0.Count>0)then
if OCC0QCQOQ0 then
OQQC0CQOQ0(O0Q0QCQOQ0,OQOOQCQOQ0)
else
OQ0QCQOOQ0(1)
else if(OOQ0QCQOQ0<>nil)and(OOQ0QCQOQ0.Count>0)then
if OQQ0Q0COQ0<>nil then
OQCC0CQOQ0(OOQ0QCQOQ0)
else
OQ0QCQOOQ0(1);
end;
OOOC0OCOQ0:begin
if OQC0QCQOQ0 then
OQ0QCQOOQ0(1);
O00OQCQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
for OCQ0QCQOQ0:=0 to O00OQCQOQ0-1 do
OQ00Q0COQ0.OC0OQQCOQ0;
OQC0QCQOQ0:=True;
if OQQOQ0COQ0=O00OC0QOQ0 then begin
OOC0QCQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
OQ00Q0COQ0.O0CCOOCOQ0(OOC0QCQOQ0);
OOC0QCQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
for OCQ0QCQOQ0:=1 to OOC0QCQOQ0 do begin
OQ00Q0COQ0.O0CQOOCOQ0;
OCOOQCQOQ0:=OQ00Q0COQ0.O0CQOOCOQ0;
if OQ00Q0COQ0.OO0OQQCOQ0=$A3 then begin
O0COQ0COQ0:=GetVectorTimeZoneInfo(OCOOQCQOQ0);
OCCCQ0COQ0.OCQQO0QOQ0:=O0COQ0COQ0;
end;
end;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OCC0COCOQ0 then begin
OOC0QCQOQ0:=Integer(OQ00Q0COQ0.OC0OQQCOQ0);
OQ00Q0COQ0.O0CCOOCOQ0(OOC0QCQOQ0);
end;
end;
end;
O0CC0OCOQ0:begin
OOC0QCQOQ0:=OQ00Q0COQ0.OQC0QQCOQ0;
OQ00Q0COQ0.O0CCOOCOQ0(OOC0QCQOQ0);
OOQ0Q0COQ0.Clear;
OCOCOQQOQ0;
end;
OO000OCOQ0:begin
OO00Q0COQ0:=TCRList.Create;
OOC0QCQOQ0:=OQ00Q0COQ0.OQ0OQQCOQ0();
for OCQ0QCQOQ0:=0 to OOC0QCQOQ0-1 do begin
OQ00Q0COQ0.OQC0QQCOQ0;
O0QOQCQOQ0:=OOCCQ0COQ0.Create(OQCCQ0COQ0);
try
O0QOQCQOQ0.O000Q0COQ0:=Self;
O0QOQCQOQ0.OCCCQ0COQ0:=OCCCQ0COQ0;
O0QOQCQOQ0.OQ00Q0COQ0:=OCCCQ0COQ0.O0COQOQOQ0;
O0QOQCQOQ0.OC00Q0COQ0.OOO0O0QOQ0;
O0QOQCQOQ0.OC00Q0COQ0:=OCCCQ0COQ0.OOQ0CQQOQ0;
O0QOQCQOQ0.OC00Q0COQ0.OCO0O0QOQ0;
O0QOQCQOQ0.OQQOQ0COQ0:=OQQOQ0COQ0;
O0QOQCQOQ0.OOQOQ0COQ0:=OCI_STMT_STATE_EXECUTED;
O0QOQCQOQ0.OCOCOQQOQ0;
O0QOQCQOQ0.OCCOQ0COQ0(OQ00Q0COQ0.OO0OQQCOQ0);
O0QOQCQOQ0.OQQOQ0COQ0:=OCC0C0QOQ0;
OO00Q0COQ0.Add(O0QOQCQOQ0);
except
O0QOQCQOQ0.Free;
raise;
end;
end;
end;
OQ0C0OCOQ0:begin
Result:=OQOQOCQOQ0(OQQ0QCQOQ0,OOOOQCQOQ0);
if(Result=-1)and(OOOOQCQOQ0=1403)and not(OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE])then
Result:=OCI_NO_DATA;
Exit;
end;
OQCC0OCOQ0:
OQ00Q0COQ0.O0CQ0OCOQ0;
else
OQ0QCQOOQ0(1);
end;
end;
end;
function OOCCQ0COQ0.OOQOQCQOQ0(OQQOQCQOQ0:TCRObjectList;OCQOQCQOQ0:TCRList;O0COQCQOQ0:pOCIError):sword;
begin
Result:=OCO0QCQOQ0(OQQOQCQOQ0,OCQOQCQOQ0,O0COQCQOQ0);
end;
const
OCCOCQOOQ0=32;
procedure OOCCQ0COQ0.OOCOQCQOQ0(const OQCOQCQOQ0:string;OCCOQCQOQ0:word);
begin
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(O0C00OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OC0QQQCOQ0(O0C0Q0COQ0);
OQ00Q0COQ0.OC0QQQCOQ0(OCCOQCQOQ0);
OQ00Q0COQ0.O0QQQQCOQ0(True);
OQ00Q0COQ0.O0QQQQCOQ0(True);
OQ00Q0COQ0.OC0QQQCOQ0(OCCOCQOOQ0);
OQ00Q0COQ0.O0QQQQCOQ0(True);
OQ00Q0COQ0.O0QQQQCOQ0(True);
OQ00Q0COQ0.OC0QQQCOQ0(OCCOCQOOQ0*30);
OQ00Q0COQ0.O0QQQQCOQ0(True);
end;
function OOCCQ0COQ0.O00QOQQOQ0(OO0QOQQOQ0:pOCIError;var OQ0QOQQOQ0:word):sword;
var
OC0QOQQOQ0:integer;
O0OQOQQOQ0:byte;
OOOQOQQOQ0:boolean;
OQOQOQQOQ0:integer;
OCOQOQQOQ0:integer;
O0QQOQQOQ0:integer;
OOQQOQQOQ0:OOOOO0QOQ0;
OQQQOQQOQ0:Integer;
OCQQOQQOQ0:byte;
O0CQOQQOQ0:TBytes;
OOCQOQQOQ0:TBytes;
OQCQOQQOQ0:TBytes;
OCCQOQQOQ0:integer;
begin
Result:=OCI_SUCCESS;
OOOQOQQOQ0:=False;
O0CQOQQOQ0:=nil;
OOCQOQQOQ0:=nil;
while not OOOQOQQOQ0 do begin
O0OQOQQOQ0:=OQ00Q0COQ0.OOC0QQCOQ0;
case O0OQOQQOQ0 of
OOOC0OCOQ0:begin
OQOQOQQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
OCOQOQQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
SetLength(OQCQOQQOQ0,OCOQOQQOQ0);
for OC0QOQQOQ0:=0 to OCOQOQQOQ0-1 do begin
OOQQOQQOQ0:=OOOOO0QOQ0.Create(Self);
OOQ0Q0COQ0.Add(OOQQOQQOQ0);
OQCCOCQOQ0(OOQQOQQOQ0);
OCQQOQQOQ0:=OQ00Q0COQ0.OQC0QQCOQ0;
OQCQOQQOQ0[OC0QOQQOQ0]:=OQ00Q0COQ0.OQC0QQCOQ0;
if OCCCQ0COQ0.O0C0CQQOQ0>=8000 then begin
O0CQOQQOQ0:=OQ00Q0COQ0.OQCOQQCOQ0(OQQQOQQOQ0);
OOQQOQQOQ0.OOCOQOCOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQCCQQOQ0.OOQQO0QOQ0),OQQCCQQOQ0.OOCOQOQOQ0.O00CQ0COQ0,O0CQOQQOQ0,0,OQQQOQQOQ0);
OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
end;
OOQQOQQOQ0.OOOQO0COQ0:=OCQQOQQOQ0;
end;
O0QQOQQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
if O0QQOQQOQ0>OCCOCQOOQ0*30 then
OQ0QCQOOQ0(107);
if(O0QQOQQOQ0=0)and((OCOQOQQOQ0>0)or(OQOQOQQOQ0>0))then
OQ0QCQOOQ0(112);
SetLength(OOCQOQQOQ0,O0QQOQQOQ0);
if O0QQOQQOQ0>0 then
O0QQOQQOQ0:=OQ00Q0COQ0.O0OQOOCOQ0(@OOCQOQQOQ0[0],O0QQOQQOQ0);
if(OOCQOQQOQ0=nil)or(O0QQOQQOQ0=0)then
OQ0QCQOOQ0(210);
OCCQOQQOQ0:=0;
for OC0QOQQOQ0:=0 to OCOQOQQOQ0-1 do begin
OOQQOQQOQ0:=OOOOO0QOQ0(OOQ0Q0COQ0[OQ0QOQQOQ0+OC0QOQQOQ0-1]);
OOQQOQQOQ0.OOCOQOCOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQCCQQOQ0.OOQQO0QOQ0),OQQCCQQOQ0.OOCOQOQOQ0.O00CQ0COQ0,OOCQOQQOQ0,OCCQOQQOQ0,OQCQOQQOQ0[OC0QOQQOQ0]);
Inc(OCCQOQQOQ0,OQCQOQQOQ0[OC0QOQQOQ0]+1);
end;
OQ0QOQQOQ0:=OQ0QOQQOQ0+OCOQOQQOQ0;
if OQOQOQQOQ0=OQ0QOQQOQ0-1 then
OQ0QOQQOQ0:=0;
end;
OQ0C0OCOQ0:begin
Result:=O0OQOCQOQ0(OO0QOQQOQ0);
Exit;
end;
OQOC0OCOQ0:
OOOQOQQOQ0:=True;
else
OQ0QCQOOQ0(1);
end;
end;
end;
procedure OOCCQ0COQ0.O00COQQOQ0(const OO0COQQOQ0:string);
var
OQ0COQQOQ0:TBytes;
begin
OQ0COQQOQ0:=O00CCQOOQ0(OQQCCQQOQ0.OOCOQOQOQ0.O00CQ0COQ0,O0OQCQOOQ0(OQQCCQQOQ0.OOQQO0QOQ0),OO0COQQOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(O0QO0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OOCOCQCOQ0(7);
OQ00Q0COQ0.OC0QQQCOQ0(O0C0Q0COQ0);
if Length(OQ0COQQOQ0)=0 then
OQ00Q0COQ0.OQO0QQCOQ0
else
OQ00Q0COQ0.OOO0QQCOQ0;
OQ00Q0COQ0.OC0QQQCOQ0(Length(OQ0COQQOQ0));
OQ00Q0COQ0.OOOQQQCOQ0(2);
OQ00Q0COQ0.O0QQQQCOQ0(True);
OQ00Q0COQ0.O0QQQQCOQ0(True);
OQ00Q0COQ0.OQQQQQCOQ0(OQ0COQQOQ0);
end;
function OOCCQ0COQ0.OC0COQQOQ0(O0OCOQQOQ0:pOCIError):sword;
var
OOOCOQQOQ0:byte;
OQOCOQQOQ0:boolean;
begin
Result:=OCI_SUCCESS;
OQOCOQQOQ0:=False;
while not OQOCOQQOQ0 do begin
OOOCOQQOQ0:=OQ00Q0COQ0.OOC0QQCOQ0;
case OOOCOQQOQ0 of
OOOC0OCOQ0:
O0QCOQQOQ0;
OQ0C0OCOQ0:begin
Result:=O0OQOCQOQ0(O0OCOQQOQ0);
Exit;
end;
OQOC0OCOQ0:
OQOCOQQOQ0:=True;
else
OQ0QCQOOQ0(1);
end;
end;
end;
procedure OOCCQ0COQ0.OCOCOQQOQ0;
begin
OQ00Q0COQ0.OC0OQQCOQ0;
O0QCOQQOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
OQ00Q0COQ0.OC0OQQCOQ0;
OQ00Q0COQ0.OC0OQQCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OCC0COCOQ0 then begin
OQ00Q0COQ0.OC0OQQCOQ0();
OQ00Q0COQ0.OC0OQQCOQ0();
if OCCCQ0COQ0.OCQ0CQQOQ0>=O00OCOCOQ0 then
OQ00Q0COQ0.O0CQOOCOQ0;
end;
end;
end;
procedure OOCCQ0COQ0.O0QCOQQOQ0;
var
OOQCOQQOQ0:integer;
OQQCOQQOQ0:Integer;
OCQCOQQOQ0:word;
O0CCOQQOQ0:OOOOO0QOQ0;
OOCCOQQOQ0:byte;
OQCCOQQOQ0:TBytes;
begin
OQCCOQQOQ0:=nil;
OCQCOQQOQ0:=OQ00Q0COQ0.OO0OQQCOQ0;
if(OQQOQ0COQ0=O00OC0QOQ0)and(OCQCOQQOQ0>0)then
OQ00Q0COQ0.OQC0QQCOQ0();
for OOQCOQQOQ0:=0 to OCQCOQQOQ0-1 do begin
O0CCOQQOQ0:=OOOOO0QOQ0.Create(Self);
try
OQCCOCQOQ0(O0CCOQQOQ0);
except
O0CCOQQOQ0.Free;
raise;
end;
OOQ0Q0COQ0.Add(O0CCOQQOQ0);
OOCCOQQOQ0:=OQ00Q0COQ0.OQC0QQCOQ0;
OQ00Q0COQ0.OQC0QQCOQ0;
OQCCOQQOQ0:=OQ00Q0COQ0.OQCOQQCOQ0(OQQCOQQOQ0);
O0CCOQQOQ0.OOCOQOCOQ0:=OQOQCQOOQ0(O0OQCQOOQ0(OQQCCQQOQ0.OOQQO0QOQ0),OQQCCQQOQ0.OOCOQOQOQ0.O00CQ0COQ0,OQCCOQQOQ0,OQQCOQQOQ0);
O0CCOQQOQ0.OOOQO0COQ0:=OOCCOQQOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
OQ00Q0COQ0.O0CQOOCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
OQ00Q0COQ0.OO0OQQCOQ0;
if OCCCQ0COQ0.OCQ0CQQOQ0>=OO0OCOCOQ0 then
OQ00Q0COQ0.OC0OQQCOQ0;
end;
end;
end;
procedure OOCCQ0COQ0.OCCCOQQOQ0(const O000OQQOQ0:string);
var
OO00OQQOQ0:TBytes;
begin
OO00OQQOQ0:=O00CCQOOQ0(OQQCCQQOQ0.OOCOQOQOQ0.O00CQ0COQ0,O0OQCQOOQ0(OQQCCQQOQ0.OOQQO0QOQ0),O000OQQOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(OO0O0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OQQQQQCOQ0(OO00OQQOQ0);
end;
function OOCCQ0COQ0.OQ00OQQOQ0(OC00OQQOQ0:pOCIError):sword;
var
O0O0OQQOQ0:byte;
begin
while True do begin
O0O0OQQOQ0:=OQ00Q0COQ0.OOC0QQCOQ0;
case O0O0OQQOQ0 of
OQ0C0OCOQ0:begin
Result:=O0OQOCQOQ0(OC00OQQOQ0);
Exit;
end;
end;
end;
end;
procedure OOCCQ0COQ0.OOO0OQQOQ0;
begin
OQ00Q0COQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(O0O00OCOQ0);
OQ00Q0COQ0.OOCOCQCOQ0(0);
OQ00Q0COQ0.OC0QQQCOQ0(O0C0Q0COQ0);
OQ00Q0COQ0.OC0QQQCOQ0(O0O0Q0COQ0.OC00C0QOQ0(OO0OQ0COQ0));
end;
function OOCCQ0COQ0.OQO0OQQOQ0(OCO0OQQOQ0:pOCIError):sword;
procedure O0Q0OQQOQ0(OOQ0OQQOQ0:StringBuilder;OQQ0OQQOQ0:PWideChar;OCQ0OQQOQ0:Integer);
const
O0C0OQQOQ0:array[0..15]of Char='0123456789ABCDEF';
var
OOC0OQQOQ0:Integer;
OQC0OQQOQ0:Word;
OCC0OQQOQ0:string;
begin
SetLength(OCC0OQQOQ0,5);
OCC0OQQOQ0[1]:='\';
for OOC0OQQOQ0:=0 to OCQ0OQQOQ0-1 do begin
OQC0OQQOQ0:=Word(OQQ0OQQOQ0[OOC0OQQOQ0]);
if OQC0OQQOQ0<128 then
{$IFDEF IS_UNICODE}
OOQ0OQQOQ0.Append(Char(OQC0OQQOQ0))
{$ELSE}
OOQ0OQQOQ0.Append(Char(Byte(OQC0OQQOQ0)))
{$ENDIF}
else begin
OCC0OQQOQ0[2]:=O0C0OQQOQ0[OQC0OQQOQ0 shr 12];
OCC0OQQOQ0[3]:=O0C0OQQOQ0[OQC0OQQOQ0 shr 8 and$F];
OCC0OQQOQ0[4]:=O0C0OQQOQ0[OQC0OQQOQ0 shr 4 and$F];
OCC0OQQOQ0[5]:=O0C0OQQOQ0[OQC0OQQOQ0 and$F];
OOQ0OQQOQ0.Append(OCC0OQQOQ0);
end;
end;
end;
type
OQ0OOQQOQ0=(O00OOQQOQ0,OO0OOQQOQ0);
OC0OOQQOQ0=record
O0OOOQQOQ0:Integer;
OOOOOQQOQ0:Integer;
OQOOOQQOQ0:OQ0OOQQOQ0;
end;
const
OCOOOQQOQ0=8;
var
O0QOOQQOQ0,OOQOOQQOQ0:integer;
OQQOOQQOQ0:TOraParser;
OCQOOQQOQ0:integer;
O0COOQQOQ0:string;
OOCOOQQOQ0:OOQ0O0QOQ0;
OQCOOQQOQ0:array of OC0OOQQOQ0;
OCCOOQQOQ0:Integer;
O00Q0QQOQ0:StringBuilder;
OO0Q0QQOQ0:boolean;
OQ0Q0QQOQ0:boolean;
OC0Q0QQOQ0:boolean;
{$IFNDEF IS_UNICODE}
O0OQ0QQOQ0:WideString;
{$ENDIF}
begin
try
OOQ0Q0COQ0.Clear;
OOO0Q0COQ0.Clear;
OQO0Q0COQ0.Clear;
OCO0Q0COQ0.Clear;
O0Q0Q0COQ0.Clear;
O0O0Q0COQ0.OOQCC0QOQ0;
O0QOQ0COQ0:=False;
SetLength(OQCOOQQOQ0,OCOOOQQOQ0);
OCCOOQQOQ0:=0;
OO0Q0QQOQ0:=False;
OQ0Q0QQOQ0:=False;
OC0Q0QQOQ0:=False;
OQQOOQQOQ0:=TOraParser.Create(OCQ0Q0COQ0);
OQQOOQQOQ0.DecSeparator:='.';
OQQOOQQOQ0.OmitComment:=True;
try
repeat
OCQOOQQOQ0:=OQQOOQQOQ0.GetNext(O0COOQQOQ0);
until OCQOOQQOQ0<>lxLeftBracket;
case OCQOOQQOQ0 of
lxSELECT,lxWITH:
OOC0Q0COQ0:=OCI_STMT_SELECT;
lxUPDATE:
OOC0Q0COQ0:=OCI_STMT_UPDATE;
lxDELETE:
OOC0Q0COQ0:=OCI_STMT_DELETE;
lxINSERT:
OOC0Q0COQ0:=OCI_STMT_INSERT;
lxMERGE:
OOC0Q0COQ0:=OCI_STMT_UPDATE;
lxBEGIN:
OOC0Q0COQ0:=OCI_STMT_BEGIN;
lxDECLARE:
OOC0Q0COQ0:=OCI_STMT_DECLARE;
lxEXPLAIN:
OOC0Q0COQ0:=OCI_STMT_EXPLAIN;
lxALTER:
OOC0Q0COQ0:=OCI_STMT_ALTER;
lxCREATE:
OOC0Q0COQ0:=OCI_STMT_CREATE;
lxDROP:
OOC0Q0COQ0:=OCI_STMT_DROP;
else
OOC0Q0COQ0:=OCI_STMT_UNKNOWN;
end;
if(OOC0Q0COQ0 in[OCI_STMT_INSERT,OCI_STMT_UPDATE,OCI_STMT_DELETE])and
(OQQOOQQOQ0.ToLexem(lxRETURNING)<>lcEnd)
then
if OCCCQ0COQ0.OOQ00OQOQ0 then
OCQOQ0COQ0:=True
else begin
OOC0Q0COQ0:=OCI_STMT_BEGIN;
OCQ0Q0COQ0:='begin '+OCQ0Q0COQ0+'; end;';
OQQOOQQOQ0.SetText(OCQ0Q0COQ0);
end;
OQQOOQQOQ0.ToBegin;
repeat
OCQOOQQOQ0:=OQQOOQQOQ0.GetNext(O0COOQQOQ0);
case OCQOOQQOQ0 of
lxCREATE,
lxTRIGGER:
OCQOOQQOQ0:=lcEnd;
lcString:
if OO0Q0QQOQ0 and OQCCQ0COQ0.OO0CQ0COQ0 and(OCCCQ0COQ0.O0C0CQQOQ0>=10000)then begin
if OCCOOQQOQ0>=Length(OQCOOQQOQ0)then
SetLength(OQCOOQQOQ0,OCCOOQQOQ0*2);
OQCOOQQOQ0[OCCOOQQOQ0].O0OOOQQOQ0:=OQQOOQQOQ0.PrevPos;
OQCOOQQOQ0[OCCOOQQOQ0].OOOOOQQOQ0:=OQQOOQQOQ0.CurrPos;
OQCOOQQOQ0[OCCOOQQOQ0].OQOOOQQOQ0:=OO0OOQQOQ0;
Inc(OCCOOQQOQ0);
OQ0Q0QQOQ0:=True;
end;
lxColon:begin
OCQOOQQOQ0:=OQQOOQQOQ0.GetNext(O0COOQQOQ0);
if(OCQOOQQOQ0=lcIdent)or(OCQOOQQOQ0=lcNumber)or(OCQOOQQOQ0>=lxSQLFirst)then begin
if OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE]then begin
if OCCOOQQOQ0>=Length(OQCOOQQOQ0)then
SetLength(OQCOOQQOQ0,OCCOOQQOQ0*2);
OQCOOQQOQ0[OCCOOQQOQ0].O0OOOQQOQ0:=OQQOOQQOQ0.PrevPos;
OQCOOQQOQ0[OCCOOQQOQ0].OOOOOQQOQ0:=OQQOOQQOQ0.CurrPos;
OQCOOQQOQ0[OCCOOQQOQ0].OQOOOQQOQ0:=O00OOQQOQ0;
Inc(OCCOOQQOQ0);
if(Length(O0COOQQOQ0)>0)and(O0COOQQOQ0[1]='"')then
OC0Q0QQOQ0:=True;
end;
OOCOOQQOQ0:=nil;
for O0QOOQQOQ0:=0 to OQO0Q0COQ0.Count-1 do
if AnsiCompareText(O0COOQQOQ0,string(OOQ0O0QOQ0(OQO0Q0COQ0[O0QOOQQOQ0]).OOCOQOCOQ0))=0 then begin
OOCOOQQOQ0:=OOQ0O0QOQ0(OQO0Q0COQ0[O0QOOQQOQ0]);
break;
end;
if OOCOOQQOQ0=nil then begin
OOCOOQQOQ0:=OOQ0O0QOQ0.Create(Self);
OOCOOQQOQ0.OOCOQOCOQ0:=O0COOQQOQ0;
OQO0Q0COQ0.Add(OOCOOQQOQ0);
OCO0Q0COQ0.Add(OOCOOQQOQ0);
O0Q0Q0COQ0.Add(OOCOOQQOQ0);
end
else begin
if not(OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE])then begin
OOCOOQQOQ0:=OOQ0O0QOQ0.Create(Self);
OOCOOQQOQ0.OOCOQOCOQ0:=O0COOQQOQ0;
OQO0Q0COQ0.Add(OOCOOQQOQ0);
end;
O0Q0Q0COQ0.Add(OOCOOQQOQ0)
end;
end;
end;
end;
if(OCQOOQQOQ0=lcIdent)and(Length(O0COOQQOQ0)=1)and((O0COOQQOQ0[1]='N')or(O0COOQQOQ0[1]='n'))then
OO0Q0QQOQ0:=True
else if OCQOOQQOQ0<>lcString then
OO0Q0QQOQ0:=False;
until OCQOOQQOQ0=lcEnd;
finally
OQQOOQQOQ0.Free;
end;
if(OCCOOQQOQ0>0)and(OQ0Q0QQOQ0 or OC0Q0QQOQ0)then begin
O00Q0QQOQ0:=StringBuilder.Create(Length(OCQ0Q0COQ0));
try
OOQOOQQOQ0:=0;
for O0QOOQQOQ0:=0 to OCCOOQQOQ0-1 do begin
if O0QOOQQOQ0=0 then
O00Q0QQOQ0.Append(copy(OCQ0Q0COQ0,1,OQCOOQQOQ0[0].O0OOOQQOQ0-1))
else
O00Q0QQOQ0.Append(copy(OCQ0Q0COQ0,OQCOOQQOQ0[O0QOOQQOQ0-1].OOOOOQQOQ0+1,OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0-OQCOOQQOQ0[O0QOOQQOQ0-1].OOOOOQQOQ0-1));
if OQCOOQQOQ0[O0QOOQQOQ0].OQOOOQQOQ0=OO0OOQQOQ0 then begin
if(OCQ0Q0COQ0[OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0]='N')or(OCQ0Q0COQ0[OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0]='n')then
O00Q0QQOQ0.Append('U''')
else
O00Q0QQOQ0.Append('''');
{$IFDEF IS_UNICODE}
O0Q0OQQOQ0(O00Q0QQOQ0,@OCQ0Q0COQ0[OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0+2],OQCOOQQOQ0[O0QOOQQOQ0].OOOOOQQOQ0-OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0-2);
{$ELSE}
if O0OQCQOOQ0(OCCCQ0COQ0.OCCOCQQOQ0)then
O0OQ0QQOQ0:=CRFunctions.Utf8Decode(copy(OCQ0Q0COQ0,OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0+2,OQCOOQQOQ0[O0QOOQQOQ0].OOOOOQQOQ0-OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0-2))
else
O0OQ0QQOQ0:=WideString(copy(OCQ0Q0COQ0,OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0+2,OQCOOQQOQ0[O0QOOQQOQ0].OOOOOQQOQ0-OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0-2));
O0Q0OQQOQ0(O00Q0QQOQ0,@O0OQ0QQOQ0[1],Length(O0OQ0QQOQ0));
{$ENDIF}
O00Q0QQOQ0.Append('''');
end
else if(OQCOOQQOQ0[O0QOOQQOQ0].OQOOOQQOQ0=O00OOQQOQ0)and OC0Q0QQOQ0 then begin
O00Q0QQOQ0.Append(':p');
O00Q0QQOQ0.Append(IntToStr(OQO0Q0COQ0.IndexOf(O0Q0Q0COQ0[OOQOOQQOQ0])+1));
Inc(OOQOOQQOQ0);
end
else
O00Q0QQOQ0.Append(copy(OCQ0Q0COQ0,OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0,OQCOOQQOQ0[O0QOOQQOQ0].OOOOOQQOQ0-OQCOOQQOQ0[O0QOOQQOQ0].O0OOOQQOQ0+1));
end;
O00Q0QQOQ0.Append(copy(OCQ0Q0COQ0,OQCOOQQOQ0[OCCOOQQOQ0-1].OOOOOQQOQ0+1,Length(OCQ0Q0COQ0)-OQCOOQQOQ0[OCCOOQQOQ0-1].OOOOOQQOQ0));
OCQ0Q0COQ0:=O00Q0QQOQ0.ToString;
finally
O00Q0QQOQ0.Free;
end;
end;
if OOC0Q0COQ0 in[OCI_STMT_SELECT,OCI_STMT_INSERT,OCI_STMT_UPDATE,OCI_STMT_DELETE]then
for O0QOOQQOQ0:=Length(OCQ0Q0COQ0)downto 1 do begin
if OCQ0Q0COQ0[O0QOOQQOQ0]=' ' then
continue
else begin
if OCQ0Q0COQ0[O0QOOQQOQ0]=';' then
OCQ0Q0COQ0[O0QOOQQOQ0]:=' ';
break;
end;
end;
Result:=OCI_SUCCESS;
except
on E:Exception do
Result:=OCCCQ0COQ0.OOOCQOQOQ0(E,OCO0OQQOQ0);
end;
end;
function OOCCQ0COQ0.OOOQ0QQOQ0(OQOQ0QQOQ0:pOCIError):sword;
var
OCOQ0QQOQ0:word;
begin
try
OCCCQ0COQ0.OOQ0CQQOQ0.OCO0O0QOQ0;
OC00Q0COQ0.OOO0O0QOQ0;
OC00Q0COQ0:=OCCCQ0COQ0.OOQ0CQQOQ0;
OQ00Q0COQ0:=OCCCQ0COQ0.O0COQOQOQ0;
OOQ0Q0COQ0.Clear;
if OCCCQ0COQ0.O0C0CQQOQ0<8000 then begin
if O0C0Q0COQ0=0 then begin
OOQQOCQOQ0;
Result:=OQQQOCQOQ0(OQOQ0QQOQ0);
if Result<>OCI_SUCCESS then
Exit;
end;
if(OCQ0Q0COQ0<>'')then begin
OO0QQCQOQ0(O0OQCOCOQ0,OCQ0Q0COQ0,nil,nil,OQOQ0QQOQ0);
Result:=OQ00QCQOQ0(O0OQCOCOQ0,nil,nil,OQOQ0QQOQ0);
if Result<>OCI_SUCCESS then
Exit;
end;
OCOQ0QQOQ0:=1;
repeat
OOCOQCQOQ0(OCQ0Q0COQ0,OCOQ0QQOQ0);
Result:=O00QOQQOQ0(OQOQ0QQOQ0,OCOQ0QQOQ0);
until(OCOQ0QQOQ0=0)or(Result<>OCI_SUCCESS);
end
else begin
O00COQQOQ0(OCQ0Q0COQ0);
Result:=OC0COQQOQ0(OQOQ0QQOQ0);
end;
except
on E:Exception do
Result:=OCCCQ0COQ0.OOOCQOQOQ0(E,OQOQ0QQOQ0);
end;
end;
function OOCCQ0COQ0.O0QQ0QQOQ0(var OOQQ0QQOQ0:pOCIDefine;OQQQ0QQOQ0:pOCIError;OCQQ0QQOQ0:ub4;
O0CQ0QQOQ0:IntPtr;OOCQ0QQOQ0:sb4;OQCQ0QQOQ0:ub2;OCCQ0QQOQ0:IntPtr;O00C0QQOQ0:pub2):sword;
var
OO0C0QQOQ0:OO0OO0COQ0;
begin
OOCOQ0COQ0:=False;
if ub4(OOO0Q0COQ0.Count)<OCQQ0QQOQ0 then
OOO0Q0COQ0.Count:=OCQQ0QQOQ0;
OO0C0QQOQ0:=OO0OO0COQ0(OOO0Q0COQ0[OCQQ0QQOQ0-1]);
if OO0C0QQOQ0=nil then begin
OO0C0QQOQ0:=OO0OO0COQ0.Create(Self);
OOO0Q0COQ0[OCQQ0QQOQ0-1]:=OO0C0QQOQ0;
end;
OOQQ0QQOQ0:=OO0C0QQOQ0.OQQOQOCOQ0;
OO0C0QQOQ0.OQCOQOCOQ0:=OQCQ0QQOQ0;
OO0C0QQOQ0.OQOQO0COQ0:=O0CQ0QQOQ0;
OO0C0QQOQ0.OCOQO0COQ0:=OOCQ0QQOQ0;
OO0C0QQOQ0.O0QQO0COQ0:=OCCQ0QQOQ0;
OO0C0QQOQ0.OOQQO0COQ0:=O00C0QQOQ0;
Result:=OCI_SUCCESS;
end;
class function OOCCQ0COQ0.OQ0C0QQOQ0(OC0C0QQOQ0:pOCIDefine;O0OC0QQOQ0:pOCIError;const OOOC0QQOQ0:pOCIType;
OQOC0QQOQ0:IntPtr;OCOC0QQOQ0:pub4;O0QC0QQOQ0:IntPtr;OOQC0QQOQ0:pub4):sword;
var
OQQC0QQOQ0:OO0OO0COQ0;
OCQC0QQOQ0:O0Q0QQOOQ0;
begin
OQQC0QQOQ0:=OO0OO0COQ0(GetGCHandleTarget(OC0C0QQOQ0));
OCQC0QQOQ0:=O0Q0QQOOQ0(GetGCHandleTarget(OOOC0QQOQ0));
OQQC0QQOQ0.O0QCO0COQ0:=OCQC0QQOQ0;
if OCQC0QQOQ0<>nil then
OQQC0QQOQ0.OCOCO0COQ0:=OCQC0QQOQ0.OOCQCOOOQ0
else
SetLength(OQQC0QQOQ0.OCOCO0COQ0,0);
OQQC0QQOQ0.OQOQO0COQ0:=OQOC0QQOQ0;
if O0QC0QQOQ0<>nil then
OQQC0QQOQ0.O0QQO0COQ0:=O0QC0QQOQ0
else
OQQC0QQOQ0.O0QQO0COQ0:=nil;
Result:=OCI_SUCCESS;
end;
function OOCCQ0COQ0.O0CC0QQOQ0(var OOCC0QQOQ0:pOCIBind;OQCC0QQOQ0:pOCIError;OCCC0QQOQ0:IntPtr;
O0000QQOQ0:sb4;OO000QQOQ0:IntPtr;OQ000QQOQ0:sb4;OC000QQOQ0:ub2;O0O00QQOQ0:IntPtr;
OOO00QQOQ0:pub2;OQO00QQOQ0:ub4;OCO00QQOQ0:pub4):sword;
var
O0Q00QQOQ0:OOQ0O0QOQ0;
OOQ00QQOQ0:string;
OQQ00QQOQ0:integer;
OCQ00QQOQ0:O0CQQ0COQ0;
begin
OOCOQ0COQ0:=False;
OCQ00QQOQ0:=O0CQQ0COQ0(OOCCQOCOQ0);
OOQ00QQOQ0:=O0CQCQOOQ0(OCQ00QQOQ0.O00CQ0COQ0,OCCC0QQOQ0,O0000QQOQ0);
O0Q00QQOQ0:=nil;
for OQQ00QQOQ0:=0 to OQO0Q0COQ0.Count-1 do begin
if SameText(OOQ00QQOQ0,OOQ0O0QOQ0(OQO0Q0COQ0[OQQ00QQOQ0]).OOCOQOCOQ0)then begin
O0Q00QQOQ0:=OOQ0O0QOQ0(OQO0Q0COQ0[OQQ00QQOQ0]);
break;
end;
end;
if O0Q00QQOQ0<>nil then begin
OOCC0QQOQ0:=O0Q00QQOQ0.OQQOQOCOQ0;
O0Q00QQOQ0.OQCOQOCOQ0:=OC000QQOQ0;
O0Q00QQOQ0.OQOQO0COQ0:=OO000QQOQ0;
O0Q00QQOQ0.OCOQO0COQ0:=OQ000QQOQ0;
O0Q00QQOQ0.O0QQO0COQ0:=O0O00QQOQ0;
O0Q00QQOQ0.OOQQO0COQ0:=OOO00QQOQ0;
O0Q00QQOQ0.OO0CO0COQ0:=OQO00QQOQ0;
O0Q00QQOQ0.OQ0CO0COQ0:=OCO00QQOQ0;
Result:=OCI_SUCCESS;
end
else begin
if OQCC0QQOQ0<>nil then
OQ0CQ0COQ0(GetGCHandleTarget(OQCC0QQOQ0)).OC0CQ0COQ0:=1036;
Result:=OCI_ERROR;
end;
end;
function OOCCQ0COQ0.O0C00QQOQ0(var OOC00QQOQ0:pOCIBind;OQC00QQOQ0:pOCIError;OCC00QQOQ0:ub4;
O00O0QQOQ0:IntPtr;OO0O0QQOQ0:sb4;OQ0O0QQOQ0:ub2;OC0O0QQOQ0:IntPtr;O0OO0QQOQ0:pub2;
OOOO0QQOQ0:ub4;OQOO0QQOQ0:pub4):sword;
var
OCOO0QQOQ0:OOQ0O0QOQ0;
begin
OOCOQ0COQ0:=False;
if(OCC00QQOQ0>0)and(Integer(OCC00QQOQ0)<=O0Q0Q0COQ0.Count)then begin
OCOO0QQOQ0:=OOQ0O0QOQ0(O0Q0Q0COQ0[OCC00QQOQ0-1]);
OOC00QQOQ0:=OCOO0QQOQ0.OQQOQOCOQ0;
OCOO0QQOQ0.OQCOQOCOQ0:=OQ0O0QQOQ0;
OCOO0QQOQ0.OQOQO0COQ0:=O00O0QQOQ0;
OCOO0QQOQ0.OCOQO0COQ0:=OO0O0QQOQ0;
OCOO0QQOQ0.O0QQO0COQ0:=OC0O0QQOQ0;
OCOO0QQOQ0.OOQQO0COQ0:=O0OO0QQOQ0;
OCOO0QQOQ0.OO0CO0COQ0:=OOOO0QQOQ0;
OCOO0QQOQ0.OQ0CO0COQ0:=OQOO0QQOQ0;
Result:=OCI_SUCCESS;
end
else begin
if OQC00QQOQ0<>nil then
OQ0CQ0COQ0(GetGCHandleTarget(OQC00QQOQ0)).OC0CQ0COQ0:=1036;
Result:=OCI_ERROR;
end;
end;
class function OOCCQ0COQ0.O0QO0QQOQ0(OOQO0QQOQ0:pOCIBind;OQQO0QQOQ0:pOCIError;const OCQO0QQOQ0:pOCIType;
O0CO0QQOQ0:IntPtr;OOCO0QQOQ0:pub4;OQCO0QQOQ0:IntPtr;OCCO0QQOQ0:pub4):sword;
var
O00QCQQOQ0:OOQ0O0QOQ0;
OO0QCQQOQ0:O0Q0QQOOQ0;
OQ0QCQQOQ0:O0CCCOOOQ0;
begin
OO0QCQQOQ0:=O0Q0QQOOQ0(GetGCHandleTarget(OCQO0QQOQ0));
O00QCQQOQ0:=OOQ0O0QOQ0(GetGCHandleTarget(OOQO0QQOQ0));
O00QCQQOQ0.O0QCO0COQ0:=OO0QCQQOQ0;
O00QCQQOQ0.OCOCO0COQ0:=OO0QCQQOQ0.OOCQCOOOQ0;
O00QCQQOQ0.OQOQO0COQ0:=Marshal.ReadIntPtr(O0CO0QQOQ0);
if O00QCQQOQ0.OQOQO0COQ0=nil then begin
OQ0QCQQOQ0:=OO0QCQQOQ0.OQCO0OOOQ0(OCI_DURATION_SESSION);
O00QCQQOQ0.OQOQO0COQ0:=OQ0QCQQOQ0.OO00QOCOQ0;
Marshal.WriteIntPtr(O0CO0QQOQ0,O00QCQQOQ0.OQOQO0COQ0);
end;
if OQCO0QQOQ0<>nil then
O00QCQQOQ0.O0QQO0COQ0:=Marshal.ReadIntPtr(OQCO0QQOQ0)
else
O00QCQQOQ0.O0QQO0COQ0:=nil;
Result:=OCI_SUCCESS;
end;
function OOCCQ0COQ0.OQQQCQQOQ0(OCQQCQQOQ0:pOCIError;O0CQCQQOQ0:ub4;OOCQCQQOQ0:ub4;OQCQCQQOQ0:ub4):sword;
var
OCCQCQQOQ0:Integer;
O00CCQQOQ0:Word;
OO0CCQQOQ0:Integer;
OQ0CCQQOQ0:Integer;
OC0CCQQOQ0:Boolean;
O0OCCQQOQ0:Boolean;
begin
try
OCCCQ0COQ0.OOQ0CQQOQ0.OCO0O0QOQ0;
OC00Q0COQ0.OOO0O0QOQ0;
OC00Q0COQ0:=OCCCQ0COQ0.OOQ0CQQOQ0;
OQ00Q0COQ0:=OCCCQ0COQ0.O0COQOQOQ0;
O0COQ0COQ0:=OCCCQ0COQ0.OCQQO0QOQ0;
OO0QOCQOQ0;
if O0CQCQQOQ0=0 then begin
OQ0OQ0COQ0:=1;
OC0OQ0COQ0:=0;
end
else begin
OQ0OQ0COQ0:=O0CQCQQOQ0;
OC0OQ0COQ0:=OOCQCQQOQ0;
end;
OC0CCQQOQ0:=not OCCCQ0COQ0.OOQ00OQOQ0;
OQ0CCQQOQ0:=0;
if OQCQCQQOQ0 and OCI_COMMIT_ON_SUCCESS<>0 then
OQ0CCQQOQ0:=OQQQCOCOQ0;
if OQCQCQQOQ0 and OCI_BATCH_ERRORS<>0 then
OQ0CCQQOQ0:=OQ0CCQQOQ0 or OQCQCOCOQ0;
OO0OQ0COQ0:=0;
OOOOQ0COQ0:=OC0OQ0COQ0;
O0OOQ0COQ0:=OC0OQ0COQ0;
O0O0Q0COQ0.OQOCC0QOQ0;
if OC0CCQQOQ0 then
O0OCCQQOQ0:=False
else
case OOC0Q0COQ0 of
OCI_STMT_UNKNOWN,
OCI_STMT_CREATE,
OCI_STMT_DROP,
OCI_STMT_ALTER:
O0OCCQQOQ0:=OCCCQ0COQ0.OCQ00OQOQ0;
OCI_STMT_SELECT:
O0OCCQQOQ0:=OCCCQ0COQ0.OQQ00OQOQ0
else
O0OCCQQOQ0:=True;
end;
if O0OCCQQOQ0 then begin
OQQOQ0COQ0:=O00OC0QOQ0;
OQ0CCQQOQ0:=OQ0CCQQOQ0 or OCOQCOCOQ0;
if OOC0Q0COQ0 in[OCI_STMT_BEGIN,OCI_STMT_DECLARE]then begin
OO0CCQQOQ0:=Integer(OQ0OQ0COQ0)-Integer(OC0OQ0COQ0);
if OO0CCQQOQ0<1 then
OO0CCQQOQ0:=1;
OQ0OQ0COQ0:=1;
end
else
OO0CCQQOQ0:=1;
Result:=OCI_SUCCESS;
for OCCQCQQOQ0:=1 to OO0CCQQOQ0 do begin
if not O0QOQ0COQ0 then begin
OO0QQCQOQ0(OQ0CCQQOQ0 or O0OQCOCOQ0,OCQ0Q0COQ0,nil,OQO0Q0COQ0,OCQQCQQOQ0);
if OCO0Q0COQ0.Count>0 then
Result:=OQ00QCQOQ0(OQ0CCQQOQ0 or O0OQCOCOQ0,nil,OCO0Q0COQ0,OCQQCQQOQ0)
else
Result:=OQ00QCQOQ0(OQ0CCQQOQ0 or O0OQCOCOQ0,nil,OQO0Q0COQ0,OCQQCQQOQ0);
end
else begin
if not OOCOQ0COQ0 or
(OCCCQ0COQ0.OCQ0CQQOQ0<OQC0COCOQ0)or
((OOO0Q0COQ0<>nil)and(OOO0Q0COQ0.Count>0))
then
OO0QQCQOQ0(OQ0CCQQOQ0,'',OOO0Q0COQ0,OQO0Q0COQ0,OCQQCQQOQ0)
else
OOCQQCQOQ0(OQ0CCQQOQ0);
if OCO0Q0COQ0.Count>0 then
Result:=OQ00QCQOQ0(OQ0CCQQOQ0,OOO0Q0COQ0,OCO0Q0COQ0,OCQQCQQOQ0)
else
Result:=OQ00QCQOQ0(OQ0CCQQOQ0,OOO0Q0COQ0,OQO0Q0COQ0,OCQQCQQOQ0);
if O0O0Q0COQ0.OQQ0C0QOQ0 then begin
O0O0Q0COQ0.OOC0C0QOQ0:=Result;
Result:=OCI_SUCCESS;
end;
end;
if O0C0Q0COQ0>0 then begin
O0QOQ0COQ0:=True;
OOCOQ0COQ0:=True;
end;
end;
end
else begin
if OQQOQ0COQ0<>OCC0C0QOQ0 then begin
O0QOQ0COQ0:=False;
OQQOQ0COQ0:=OCC0C0QOQ0;
end;
if(O0C0Q0COQ0=0)and(OC0CCQQOQ0 or(OOC0Q0COQ0=OCI_STMT_SELECT))then begin
OOQQOCQOQ0;
Result:=OQQQOCQOQ0(OCQQCQQOQ0);
if Result<>OCI_SUCCESS then
Exit;
end;
if(OOC0Q0COQ0=OCI_STMT_SELECT)and(Integer(OQ0OQ0COQ0)-Integer(OC0OQ0COQ0)>1)then
OQ0CCQQOQ0:=OQ0CCQQOQ0 or O0QQCOCOQ0;
OQ0CCQQOQ0:=OQ0CCQQOQ0 or OCOQCOCOQ0;
if not O0QOQ0COQ0 then begin
OO0QQCQOQ0(OQ0CCQQOQ0 or O0OQCOCOQ0,OCQ0Q0COQ0,nil,OQO0Q0COQ0,OCQQCQQOQ0);
if OCO0Q0COQ0.Count>0 then
Result:=OQ00QCQOQ0(OQ0CCQQOQ0 or O0OQCOCOQ0,nil,OCO0Q0COQ0,OCQQCQQOQ0)
else
Result:=OQ00QCQOQ0(OQ0CCQQOQ0 or O0OQCOCOQ0,nil,OQO0Q0COQ0,OCQQCQQOQ0);
end
else begin
OO0QQCQOQ0(OQ0CCQQOQ0,'',nil,OQO0Q0COQ0,OCQQCQQOQ0);
if OCO0Q0COQ0.Count>0 then
Result:=OQ00QCQOQ0(OQ0CCQQOQ0,nil,OCO0Q0COQ0,OCQQCQQOQ0)
else
Result:=OQ00QCQOQ0(OQ0CCQQOQ0,nil,OQO0Q0COQ0,OCQQCQQOQ0);
end;
if O0C0Q0COQ0>0 then
O0QOQ0COQ0:=True;
end;
if Result=OCI_SUCCESS then begin
if OQC0Q0COQ0=3 then begin
if OCCCQ0COQ0.O0C0CQQOQ0<8000 then begin
OOQ0Q0COQ0.Clear;
O00CCQQOQ0:=1;
repeat
OOCOQCQOQ0('',O00CCQQOQ0);
Result:=O00QOQQOQ0(OCQQCQQOQ0,O00CCQQOQ0);
until(O00CCQQOQ0=0)or(Result<>OCI_SUCCESS);
end
else if OOQ0Q0COQ0.Count=0 then begin
O00COQQOQ0('');
Result:=OC0COQQOQ0(OCQQCQQOQ0);
end;
end
else
OOQ0Q0COQ0.Clear;
if Result<>OCI_SUCCESS then
Exit;
end;
except
on E:Exception do
Result:=OCCCQ0COQ0.OOOCQOQOQ0(E,OCQQCQQOQ0,Self);
end;
end;
function OOCCQ0COQ0.OC0QCQQOQ0(O0OQCQQOQ0:pOCIError;OOOQCQQOQ0:ub4):sword;
function OQOQCQQOQ0:boolean;
var
OCOQCQQOQ0:Integer;
begin
for OCOQCQQOQ0:=0 to OOO0Q0COQ0.Count-1 do
if(O0COQOCOQ0(OOO0Q0COQ0[OCOQCQQOQ0]).OOOCO0COQ0>0)or
(O0COQOCOQ0(OOO0Q0COQ0[OCOQCQQOQ0]).OQOCO0COQ0>0)
then begin
Result:=True;
Exit;
end;
Result:=False;
end;
procedure O0QQCQQOQ0;
begin
if(OQQOQ0COQ0=O00OC0QOQ0)and OCCCQ0COQ0.OQQ00OQOQ0 then
if O0O0Q0COQ0.O00CC0QOQ0(OOO0Q0COQ0,OOQ0Q0COQ0)then begin
OQQOQ0COQ0:=OO0OC0QOQ0;
OO0QQCQOQ0(O0QQCOCOQ0,'',OOO0Q0COQ0,nil,O0OQCQQOQ0);
end
else if OQOQCQQOQ0 then
OO0QQCQOQ0(O0QQCOCOQ0,'',OOO0Q0COQ0,nil,O0OQCQQOQ0)
else
OOO0OQQOQ0
else
OO0QQCQOQ0(O0QQCOCOQ0,'',OOO0Q0COQ0,nil,O0OQCQQOQ0);
end;
procedure OOQQCQQOQ0;
begin
O0QQCQQOQ0;
OQ00Q0COQ0.OQ0CCQCOQ0(0);
end;
begin
try
if(O0C0Q0COQ0<>0)and not OC00Q0COQ0.O0Q0O0QOQ0 then begin
Result:=Self.OOOQ0QQOQ0(O0OQCQQOQ0);
if Result<>OCI_SUCCESS then
Exit;
end;
OO0OQ0COQ0:=OOOQCQQOQ0;
O0OOQ0COQ0:=0;
if O0O0Q0COQ0.OQQ0C0QOQ0 then begin
if not O0O0Q0COQ0.OOO0C0QOQ0(OO0OQ0COQ0)then
OOQQCQQOQ0;
if O0O0Q0COQ0.OCO0C0QOQ0 then
OQOQCCQOQ0(OQCCCQQOQ0);
if O0O0Q0COQ0.OCO0C0QOQ0 then begin
Result:=OCI_SUCCESS;
Exit;
end
else if O0O0Q0COQ0.OOC0C0QOQ0=OCI_NO_DATA then begin
Result:=OCI_NO_DATA;
OOQOQ0COQ0:=OCI_STMT_STATE_END_OF_FETCH;
Exit;
end
else if O0OOQ0COQ0>=OO0OQ0COQ0 then begin
Result:=OCI_SUCCESS;
Exit;
end;
end
else
O0QQCQQOQ0;
Result:=OQ00QCQOQ0(O0QQCOCOQ0,OOO0Q0COQ0,nil,O0OQCQQOQ0);
if O0O0Q0COQ0.OCO0C0QOQ0 then begin
O0O0Q0COQ0.OOC0C0QOQ0:=Result;
Result:=OCI_SUCCESS;
end;
if Result=OCI_NO_DATA then
OOQOQ0COQ0:=OCI_STMT_STATE_END_OF_FETCH;
except
on E:Exception do begin
Result:=OCCCQ0COQ0.OOOCQOQOQ0(E,O0OQCQQOQ0);
OOQOQ0COQ0:=OCI_STMT_STATE_END_OF_FETCH;
end;
end;
end;
function OOCCQ0COQ0.OOOCCQQOQ0(OQOCCQQOQ0:pOCIError):sword;
begin
try
try
if O0C0Q0COQ0=0 then
Result:=OCI_SUCCESS
else if OQQOQ0COQ0=OCC0C0QOQ0 then begin
OQCQOCQOQ0;
Result:=OCCQOCQOQ0(OQOCCQQOQ0);
end
else begin
OCCCQ0COQ0.O0C00OQOQ0(O0C0Q0COQ0);
Result:=OCI_SUCCESS;
end;
finally
OOQ0Q0COQ0.Clear;
OOO0Q0COQ0.Clear;
OQO0Q0COQ0.Clear;
OCO0Q0COQ0.Clear;
O0Q0Q0COQ0.Clear;
O0O0Q0COQ0.OOQCC0QOQ0;
SetLength(OQQ0Q0COQ0,0);
O0QOQ0COQ0:=False;
OOCOQ0COQ0:=False;
end;
except
on E:Exception do
Result:=OCCCQ0COQ0.OOOCQOQOQ0(E,OQOCCQQOQ0);
end;
end;
function OOCCQ0COQ0.O0C0QOCOQ0(OOC0QOCOQ0:IntPtr;OQC0QOCOQ0:pub4;OCC0QOCOQ0:ub4;O00OQOCOQ0:pOCIError):sword;
const
OCOCCQQOQ0:array[0..197]of byte=(0,
SQL_CREATE_TABLE,SQL_INSERT,SQL_SELECT,0,0,SQL_UPDATE,SQL_DELETE,0,0,0,
0,SQL_DROP_TABLE,0,0,0,0,SQL_GRANT,SQL_REVOKE,0,0,
0,0,0,SQL_CREATE_PROCEDURE,SQL_ALTER_PROCEDURE,SQL_LOCK,0,SQL_RENAME,SQL_COMMENT,SQL_AUDIT,
SQL_NOAUDIT,0,0,0,0,0,0,0,0,0,
0,SQL_ALTER_SESSION,0,SQL_COMMIT,SQL_ROLLBACK,SQL_SAVEPOINT,SQL_PLSQL,SQL_SET_TRANSACTION,0,0,
SQL_EXPLAIN,0,0,0,SQL_SET_ROLE,0,0,0,SQL_CREATE_TRIGGER,SQL_ALTER_TRIGGER,
0,SQL_ANALYZE_TABLE,SQL_ANALYZE_INDEX,SQL_ANALYZE_CLUSTER,0,0,0,0,0,0,
0,0,0,0,0,0,SQL_CREATE_TYPE,0,SQL_ALTER_ROLE,SQL_ALTER_TYPE,
SQL_CREATE_TYPE_BODY,SQL_ALTER_TYPE_BODY,0,0,SQL_TRUNCATE_TABLE,SQL_TRUNCATE_CLUSTER,0,0,0,0,
SQL_CREATE_FUNCTION,SQL_ALTER_FUNCTION,0,SQL_CREATE_PACKAGE,SQL_ALTER_PACKAGE,0,SQL_CREATE_PACKAGE_BODY,SQL_ALTER_PACKAGE_BODY,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,SQL_CALL_METHOD,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,SQL_ALTER_SYNONYM,0,0,0,0,0
);
var
O0QCCQQOQ0:OOOCO0QOQ0;
begin
Result:=OCI_SUCCESS;
case OCC0QOCOQ0 of
OCI_ATTR_ROWID:begin
O0QCCQQOQ0:=OOOCO0QOQ0(GetGCHandleTarget(OOC0QOCOQ0));
O0QCCQQOQ0.OQOCO0QOQ0:=OQOOQ0COQ0;
O0QCCQQOQ0.OCOCO0QOQ0:=OCOOQ0COQ0;
end;
OCI_ATTR_STMT_TYPE:
Marshal.WriteInt16(OOC0QOCOQ0,OOC0Q0COQ0);
OCI_ATTR_SQLFNCODE:
Marshal.WriteInt16(OOC0QOCOQ0,OCOCCQQOQ0[OQC0Q0COQ0]);
OCI_ATTR_PARSE_ERROR_OFFSET:
Marshal.WriteInt16(OOC0QOCOQ0,O00OQ0COQ0);
OCI_ATTR_PARAM_COUNT:begin
if(O0C0Q0COQ0<>0)and not OC00Q0COQ0.O0Q0O0QOQ0 then
Result:=Self.OOOQ0QQOQ0(O00OQOCOQ0);
if Result=OCI_SUCCESS then
Marshal.WriteInt32(OOC0QOCOQ0,OOQ0Q0COQ0.Count)
else
Marshal.WriteInt32(OOC0QOCOQ0,0);
end;
OCI_ATTR_ROW_COUNT:
Marshal.WriteInt32(OOC0QOCOQ0,O0O0Q0COQ0.OO00C0QOQ0(OCC0Q0COQ0));
OCI_ATTR_STMT_STATE:
Marshal.WriteInt32(OOC0QOCOQ0,OOQOQ0COQ0);
OCI_ATTR_IMPLICIT_RESULT_COUNT:
if OO00Q0COQ0<>nil then
Marshal.WriteInt32(OOC0QOCOQ0,OO00Q0COQ0.Count)
else
Marshal.WriteInt32(OOC0QOCOQ0,0);
else
Result:=inherited O0C0QOCOQ0(OOC0QOCOQ0,OQC0QOCOQ0,OCC0QOCOQ0,O00OQOCOQ0);
end;
end;
function OOCCQ0COQ0.OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case O0OOQOCOQ0 of
OCI_ATTR_PREFETCH_ROWS:
O0O0Q0COQ0.OQC0C0QOQ0:=ub4(OQ0OQOCOQ0^);
OCI_ATTR_PREFETCH_MEMORY:;
else
Result:=inherited OO0OQOCOQ0(OQ0OQOCOQ0,OC0OQOCOQ0,O0OOQOCOQ0,OOOOQOCOQ0);
end;
end;
function OOCCQ0COQ0.OQOOQOCOQ0(OCOOQOCOQ0:pOCIError;var O0QOQOCOQ0:pOCIParam;OOQOQOCOQ0:ub4):sword;
begin
if OOQOQOCOQ0<=ub4(OOQ0Q0COQ0.Count)then begin
O0QOQOCOQ0:=OOOOO0QOQ0(OOQ0Q0COQ0[OOQOQOCOQ0-1]).OQQOQOCOQ0;
Result:=OCI_SUCCESS;
end
else begin
O0QOQOCOQ0:=nil;
Result:=OCI_NO_DATA;
end;
end;
function OCQOC0QOQ0.OOCOC0QOQ0:IntPtr;
begin
if System.Length(O0COC0QOQ0)>0 then
Result:=@O0COC0QOQ0[0]
else
Result:=nil;
end;
function OCQOC0QOQ0.OQCOC0QOQ0:Integer;
begin
if System.Length(O0COC0QOQ0)>0 then
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
Result:=System.Length(O0COC0QOQ0)-2
else
Result:=System.Length(O0COC0QOQ0)-1
else
Result:=0
end;
procedure OCQOC0QOQ0.OCCOC0QOQ0(const O00QQ0QOQ0:Integer);
begin
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
SetLength(O0COC0QOQ0,O00QQ0QOQ0+2)
else
SetLength(O0COC0QOQ0,O00QQ0QOQ0+1);
OOCQQ0QOQ0;
end;
function OCQOC0QOQ0.OO0QQ0QOQ0:Integer;
begin
if System.Length(O0COC0QOQ0)>0 then
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
Result:=System.Length(PWideChar(@O0COC0QOQ0[0]))*2
else
Result:=System.Length(PAnsiChar(@O0COC0QOQ0[0]))
else
Result:=0;
end;
function OCQOC0QOQ0.OQ0QQ0QOQ0:TBytes;
begin
if System.Length(O0COC0QOQ0)>0 then
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
Result:=Copy(O0COC0QOQ0,0,System.Length(O0COC0QOQ0)-2)
else
Result:=Copy(O0COC0QOQ0,0,System.Length(O0COC0QOQ0)-1)
else
SetLength(Result,0);
end;
procedure OCQOC0QOQ0.OC0QQ0QOQ0(const O0OQQ0QOQ0:TBytes);
begin
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
SetLength(O0COC0QOQ0,System.Length(O0OQQ0QOQ0)+2)
else
SetLength(O0COC0QOQ0,System.Length(O0OQQ0QOQ0)+1);
Move(O0OQQ0QOQ0[0],O0COC0QOQ0[0],System.Length(O0OQQ0QOQ0));
OOCQQ0QOQ0;
end;
function OCQOC0QOQ0.OOOQQ0QOQ0:AnsiString;
begin
if System.Length(O0COC0QOQ0)>0 then
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
Result:=AnsiString(PWideChar(@O0COC0QOQ0[0]))
else
Result:=AnsiString(PAnsiChar(@O0COC0QOQ0[0]))
else
Result:='';
end;
procedure OCQOC0QOQ0.OQOQQ0QOQ0(const OCOQQ0QOQ0:AnsiString);
var
O0QQQ0QOQ0:WideString;
begin
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then begin
O0QQQ0QOQ0:=WideString(OCOQQ0QOQ0);
SetLength(O0COC0QOQ0,(System.Length(O0QQQ0QOQ0)+1)*2);
Move(O0QQQ0QOQ0[1],O0COC0QOQ0[0],System.Length(O0QQQ0QOQ0)*2);
end
else begin
{$IFNDEF NEXTGEN}
SetLength(O0COC0QOQ0,System.Length(OCOQQ0QOQ0)+1);
Move(OCOQQ0QOQ0[1],O0COC0QOQ0[0],System.Length(OCOQQ0QOQ0));
{$ELSE}
SetLength(O0COC0QOQ0,OCOQQ0QOQ0.Length+1);
Move(OCOQQ0QOQ0.Ptr^,O0COC0QOQ0[0],OCOQQ0QOQ0.Length);
{$ENDIF}
end;
OOCQQ0QOQ0;
end;
function OCQOC0QOQ0.OOQQQ0QOQ0:WideString;
begin
if System.Length(O0COC0QOQ0)>0 then
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
Result:=PWideChar(@O0COC0QOQ0[0])
else
Result:=WideString(PAnsiChar(@O0COC0QOQ0[0]))
else
Result:='';
end;
procedure OCQOC0QOQ0.OQQQQ0QOQ0(const OCQQQ0QOQ0:WideString);
var
O0CQQ0QOQ0:AnsiString;
begin
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then begin
SetLength(O0COC0QOQ0,(System.Length(OCQQQ0QOQ0)+1)*2);
Move(OCQQQ0QOQ0[1],O0COC0QOQ0[0],System.Length(OCQQQ0QOQ0)*2);
end
else begin
O0CQQ0QOQ0:=AnsiString(OCQQQ0QOQ0);
{$IFNDEF NEXTGEN}
SetLength(O0COC0QOQ0,System.Length(O0CQQ0QOQ0)+1);
Move(O0CQQ0QOQ0[1],O0COC0QOQ0[0],System.Length(O0CQQ0QOQ0));
{$ELSE}
SetLength(O0COC0QOQ0,O0CQQ0QOQ0.Length+1);
Move(O0CQQ0QOQ0.Ptr^,O0COC0QOQ0[0],O0CQQ0QOQ0.Length);
{$ENDIF}
end;
OOCQQ0QOQ0;
end;
procedure OCQOC0QOQ0.OOCQQ0QOQ0;
var
OQCQQ0QOQ0:Integer;
begin
OQCQQ0QOQ0:=System.Length(O0COC0QOQ0);
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
PWord(@O0COC0QOQ0[OQCQQ0QOQ0-2])^:=0
else
O0COC0QOQ0[OQCQQ0QOQ0-1]:=0;
end;
procedure OCQOC0QOQ0.OCCQQ0QOQ0(O00CQ0QOQ0:OCQOC0QOQ0);
begin
O0COC0QOQ0:=O00CQ0QOQ0.O0COC0QOQ0;
end;
function OCQOC0QOQ0.OO0CQ0QOQ0(OQ0CQ0QOQ0:IntPtr):Integer;
begin
if System.Length(O0COC0QOQ0)>0 then begin
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
Result:=System.Length(O0COC0QOQ0)-2
else
Result:=System.Length(O0COC0QOQ0)-1;
if Result>0 then
Move(O0COC0QOQ0[0],OQ0CQ0QOQ0^,Result);
end
else
Result:=0;
end;
procedure OCQOC0QOQ0.OC0CQ0QOQ0(O0OCQ0QOQ0:IntPtr;OOOCQ0QOQ0:Integer);
begin
if O0CQQ0COQ0(OOCCQOCOQ0).O00CQ0COQ0 then
SetLength(O0COC0QOQ0,OOOCQ0QOQ0+2)
else
SetLength(O0COC0QOQ0,OOOCQ0QOQ0+1);
if OOOCQ0QOQ0>0 then
Move(O0OCQ0QOQ0^,O0COC0QOQ0[0],OOOCQ0QOQ0);
OOCQQ0QOQ0;
end;
function O00QQQOOQ0(OO0QQQOOQ0:TBytes;OQ0QQQOOQ0:integer;OC0QQQOOQ0:integer):string;
const
O0OQQQOOQ0:string='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
var
OOOQQQOOQ0,OQOQQQOOQ0:cardinal;
OCOQQQOOQ0,O0QQQQOOQ0,OOQQQQOOQ0:byte;
OQQQQQOOQ0,OCQQQQOOQ0:integer;
begin
OQQQQQOOQ0:=1;
OCQQQQOOQ0:=(OQ0QQQOOQ0*8+5)div 6;
SetLength(Result,OCQQQQOOQ0);
OQOQQQOOQ0:=2-OC0QQQOOQ0;
OOQQQQOOQ0:=$FF;
for OOOQQQOOQ0:=0 to OQ0QQQOOQ0-1 do begin
OCOQQQOOQ0:=OO0QQQOOQ0[OOOQQQOOQ0];
O0QQQQOOQ0:=OCOQQQOOQ0 shr OQOQQQOOQ0;
if OOQQQQOOQ0<>$FF then
O0QQQQOOQ0:=O0QQQQOOQ0 or OOQQQQOOQ0;
Result[OQQQQQOOQ0]:=O0OQQQOOQ0[O0QQQQOOQ0+1];
Inc(OQQQQQOOQ0);
OOQQQQOOQ0:=(OCOQQQOOQ0 and($FF shr(8-OQOQQQOOQ0)))shl(6-OQOQQQOOQ0);
if OQOQQQOOQ0=6 then begin
Result[OQQQQQOOQ0]:=O0OQQQOOQ0[OOQQQQOOQ0+1];
Inc(OQQQQQOOQ0);
OOQQQQOOQ0:=$FF;
OQOQQQOOQ0:=2;
end
else
OQOQQQOOQ0:=OQOQQQOOQ0+2;
end;
if OOQQQQOOQ0<>$FF then
Result[OQQQQQOOQ0]:=O0OQQQOOQ0[OOQQQQOOQ0+1];
end;
class function OOOCO0QOQ0.O0QCO0QOQ0(OOQCO0QOQ0:PRowId81):string;
begin
if OOQCO0QOQ0.ridobjnum=0 then begin
Result:=
IntToHex(Reverse4(OOQCO0QOQ0.ridblocknum),8)+'.'+
IntToHex(Reverse2(OOQCO0QOQ0.ridslotnum),4)+'.'+
IntToHex(Reverse2(OOQCO0QOQ0.ridfilenum),4)
end
else begin
Result:=O00QQQOOQ0(BitConverter.GetBytes(OOQCO0QOQ0.ridobjnum),4,-4);
Result:=Result+O00QQQOOQ0(BitConverter.GetBytes(OOQCO0QOQ0.ridfilenum),2,-2);
Result:=Result+O00QQQOOQ0(BitConverter.GetBytes(OOQCO0QOQ0.ridblocknum),4,-4);
Result:=Result+O00QQQOOQ0(BitConverter.GetBytes(OOQCO0QOQ0.ridslotnum),2,-2);
end;
end;
class function OOOCO0QOQ0.OQQCO0QOQ0(const OCQCO0QOQ0:TBytes;O0CCO0QOQ0,OOCCO0QOQ0:integer):string;
begin
Result:='*'+O00QQQOOQ0(OCQCO0QOQ0,O0CCO0QOQ0,OOCCO0QOQ0);
end;
function OOOCO0QOQ0.OQCCO0QOQ0:string;
begin
if Length(OCOCO0QOQ0)>0 then
Result:=OQQCO0QOQ0(OCOCO0QOQ0,Length(OCOCO0QOQ0)-1,0)
else
Result:=O0QCO0QOQ0(@OQOCO0QOQ0);
end;
constructor OracleIntArrayEncoding.Create;
begin
inherited Create;
O0CCQCCOQ0:=true;
end;
class function OracleIntArrayEncoding.GetInstance():OracleIntArrayEncoding;
begin
if OO00CQOOQ0=nil then
OO00CQOOQ0:=OracleIntArrayEncoding.Create;
Result:=OO00CQOOQ0;
end;
function OracleIntArrayEncoding.GetMaxByteCount(OC0OQCCOQ0:Integer):Integer;
begin
if OC0OQCCOQ0<>0 then
Result:=OC0OQCCOQ0*3
else
Result:=3;
end;
function OracleIntArrayEncoding.GetMaxCharCount(O0OOQCCOQ0:Integer):Integer;
begin
Result:=((O0OOQCCOQ0 shr 1)+(O0OOQCCOQ0 and 1));
end;
{$IFDEF NEXTGEN}
function OracleIntArrayEncoding.GetByteCount(OOOOQCCOQ0:PChar;O0O0CQC0Q0:Integer):Integer;
{$ELSE}
function OracleIntArrayEncoding.GetByteCount(const OOOOQCCOQ0:array of char;OQOOQCCOQ0:Integer;OCOOQCCOQ0:Integer):Integer;
{$ENDIF}
var
O0QOQCCOQ0:Integer;
OOQOQCCOQ0,OQQOQCCOQ0:Integer;
begin
Result:=0;
{$IFDEF NEXTGEN}
O0QOQCCOQ0:=0;
{$ELSE}
O0QOQCCOQ0:=OQOOQCCOQ0;
{$ENDIF}
OOQOQCCOQ0:=O0QOQCCOQ0+{$IFDEF NEXTGEN}O0O0CQC0Q0{$ELSE}OCOOQCCOQ0{$ENDIF};
while O0QOQCCOQ0<OOQOQCCOQ0 do begin
OQQOQCCOQ0:=Ord(OOOOQCCOQ0[O0QOQCCOQ0]);
Inc(O0QOQCCOQ0);
if((byte(OQQOQCCOQ0 shr 8))<>0)then begin
Inc(Result,3);
end
else begin
Inc(Result,2);
end;
end;
end;
{$IFDEF NEXTGEN}
function OracleIntArrayEncoding.GetCharCount(OCQOQCCOQ0:PByte;O0Q0CQC0Q0:Integer):Integer;
{$ELSE}
function OracleIntArrayEncoding.GetCharCount(const OCQOQCCOQ0:TBytes;O0COQCCOQ0:Integer;OOCOQCCOQ0:Integer):Integer;
{$ENDIF}
var
OQCOQCCOQ0:Integer;
OCCOQCCOQ0:Integer;
begin
Result:=0;
{$IFDEF NEXTGEN}
OQCOQCCOQ0:=0;
{$ELSE}
OQCOQCCOQ0:=O0COQCCOQ0;
{$ENDIF}
OCCOQCCOQ0:=OQCOQCCOQ0+{$IFDEF NEXTGEN}O0Q0CQC0Q0{$ELSE}OOCOQCCOQ0{$ENDIF};
while(OQCOQCCOQ0<OCCOQCCOQ0)do begin
Inc(OQCOQCCOQ0);
case(OCQOQCCOQ0[OQCOQCCOQ0-1])of
0:begin
Inc(Result);
end;
1:begin
Inc(OQCOQCCOQ0);
Inc(Result);
end;
2:begin
Inc(OQCOQCCOQ0,2);
Inc(Result);
end;
else
raise Exception.Create('');
end;
end;
end;
function OracleIntArrayEncoding.OOCCQCCOQ0(OQCCQCCOQ0:PWideChar;OCCCQCCOQ0,O000QCCOQ0:Integer;var OO00QCCOQ0:TBytes;OQ00QCCOQ0,OC00QCCOQ0:Integer):Integer;
var
O0O0QCCOQ0,OOO0QCCOQ0:Integer;
OQO0QCCOQ0:Integer;
OCO0QCCOQ0,O0Q0QCCOQ0:byte;
begin
O0O0QCCOQ0:=OCCCQCCOQ0+O000QCCOQ0;
OOO0QCCOQ0:=OQ00QCCOQ0+OC00QCCOQ0;
while(OCCCQCCOQ0<O0O0QCCOQ0)and(OQ00QCCOQ0<OOO0QCCOQ0)do begin
OQO0QCCOQ0:=Ord(OQCCQCCOQ0[OCCCQCCOQ0]);
Inc(OCCCQCCOQ0);
OCO0QCCOQ0:=byte(OQO0QCCOQ0 and$ff);
O0Q0QCCOQ0:=byte(OQO0QCCOQ0 shr 8);
if(O0Q0QCCOQ0<>0)then begin
OO00QCCOQ0[OQ00QCCOQ0]:=2;
Inc(OQ00QCCOQ0);
if(O0CCQCCOQ0)then begin
OO00QCCOQ0[OQ00QCCOQ0]:=O0Q0QCCOQ0;
Inc(OQ00QCCOQ0);
OO00QCCOQ0[OQ00QCCOQ0]:=OCO0QCCOQ0;
Inc(OQ00QCCOQ0);
end
else begin
OO00QCCOQ0[OQ00QCCOQ0]:=OCO0QCCOQ0;
Inc(OQ00QCCOQ0);
OO00QCCOQ0[OQ00QCCOQ0]:=O0Q0QCCOQ0;
Inc(OQ00QCCOQ0);
end;
end
else begin
OO00QCCOQ0[OQ00QCCOQ0]:=1;
Inc(OQ00QCCOQ0);
OO00QCCOQ0[OQ00QCCOQ0]:=OCO0QCCOQ0;
Inc(OQ00QCCOQ0);
end;
end;
Result:=OQ00QCCOQ0+OC00QCCOQ0-OOO0QCCOQ0;
end;
function OracleIntArrayEncoding.OOQ0QCCOQ0(const OQQ0QCCOQ0:TBytes;OCQ0QCCOQ0,O0C0QCCOQ0:Integer;OOC0QCCOQ0:PWideChar;OQC0QCCOQ0,OCC0QCCOQ0:Integer):Integer;
var
O00OQCCOQ0:Word;
OO0OQCCOQ0,OQ0OQCCOQ0:Integer;
begin
OO0OQCCOQ0:=OCQ0QCCOQ0+O0C0QCCOQ0;
OQ0OQCCOQ0:=OQC0QCCOQ0+OCC0QCCOQ0;
while(OCQ0QCCOQ0<OO0OQCCOQ0)and(OQC0QCCOQ0<OQ0OQCCOQ0)do begin
case OQQ0QCCOQ0[OCQ0QCCOQ0]of
0:begin
Inc(OCQ0QCCOQ0);
OOC0QCCOQ0[OQC0QCCOQ0]:=WideChar(0);
Inc(OQC0QCCOQ0);
end;
1:begin
Inc(OCQ0QCCOQ0);
OOC0QCCOQ0[OQC0QCCOQ0]:=WideChar(OQQ0QCCOQ0[OCQ0QCCOQ0]);
Inc(OQC0QCCOQ0);
Inc(OCQ0QCCOQ0);
end;
2:begin
if(not O0CCQCCOQ0)then
break;
Inc(OCQ0QCCOQ0);
O00OQCCOQ0:=(OQQ0QCCOQ0[OCQ0QCCOQ0]shl 8)+OQQ0QCCOQ0[OCQ0QCCOQ0+1];
OOC0QCCOQ0[OQC0QCCOQ0]:=WideChar(O00OQCCOQ0);
Inc(OQC0QCCOQ0);
Inc(OCQ0QCCOQ0,2);
end;
else
raise Exception.Create('');
end;
end;
Result:=OQC0QCCOQ0+OCC0QCCOQ0-OQ0OQCCOQ0;
end;
{$IFDEF NEXTGEN}
function OracleIntArrayEncoding.GetChars(OQQ0CQC0Q0:PByte;OCQ0CQC0Q0:Integer;O0C0CQC0Q0:PChar;OOC0CQC0Q0:Integer):Integer;
begin
Result:=OOQ0QCCOQ0(TBytes(OQQ0CQC0Q0),0,OCQ0CQC0Q0,O0C0CQC0Q0,0,OOC0CQC0Q0);
end;
{$ELSE}
function OracleIntArrayEncoding.GetAnsiString(const OQOQOQCOQ0:TBytes):AnsiString;
begin
Result:=AnsiString(GetWideString(OQOQOQCOQ0));
end;
function OracleIntArrayEncoding.GetAnsiString(const OQOQOQCOQ0:TBytes;OCOQOQCOQ0:Integer;O0QQOQCOQ0:Integer):AnsiString;
begin
Result:=AnsiString(GetWideString(OQOQOQCOQ0,OCOQOQCOQ0,O0QQOQCOQ0));
end;
function OracleIntArrayEncoding.GetWideString(const OOQQOQCOQ0:TBytes):WideString;
begin
Result:=GetWideString(OOQQOQCOQ0,0,Length(OOQQOQCOQ0));
end;
function OracleIntArrayEncoding.GetWideString(const OOQQOQCOQ0:TBytes;OQQQOQCOQ0:integer;OCQQOQCOQ0:integer):WideString;
var
O0CQOQCOQ0:Integer;
begin
SetLength(Result,GetMaxCharCount(Length(OOQQOQCOQ0)));
if Length(Result)>0 then begin
O0CQOQCOQ0:=OOQ0QCCOQ0(OOQQOQCOQ0,OQQQOQCOQ0,OCQQOQCOQ0,@Result[1],0,Length(Result));
if O0CQOQCOQ0<>Length(Result)then
Result:=copy(Result,1,O0CQOQCOQ0);
end;
end;
{$ENDIF}
{$IFDEF NEXTGEN}
function OracleIntArrayEncoding.GetBytes(O00QOQCOQ0:PChar;OQ0QOQCOQ0:Integer;OC0QOQCOQ0:PByte;OQO0CQC0Q0:Integer):Integer;
begin
Result:=OOCCQCCOQ0(O00QOQCOQ0,0,OQ0QOQCOQ0,TBytes(OC0QOQCOQ0),0,OQO0CQC0Q0);
end;
{$ELSE}
function OracleIntArrayEncoding.GetBytes(const O00QOQCOQ0:WideString;OO0QOQCOQ0,OQ0QOQCOQ0:Integer;var OC0QOQCOQ0:TBytes;O0OQOQCOQ0:Integer):Integer;
begin
if Length(OC0QOQCOQ0)>0 then
Result:=OOCCQCCOQ0(PWideChar(O00QOQCOQ0),OO0QOQCOQ0-1,OQ0QOQCOQ0,OC0QOQCOQ0,O0OQOQCOQ0,Length(OC0QOQCOQ0))
else
Result:=0;
end;
{$ENDIF}
{$IFNDEF NEXTGEN}
function OracleIntArrayEncoding.GetBytes(const O00QOQCOQ0:WideString):TBytes;
var
OOOQOQCOQ0:Integer;
begin
SetLength(Result,GetMaxByteCount(Length(O00QOQCOQ0)));
if Length(Result)>0 then begin
OOOQOQCOQ0:=OOCCQCCOQ0(PWideChar(O00QOQCOQ0),0,Length(O00QOQCOQ0),Result,0,Length(Result));
if OOOQOQCOQ0<>Length(Result)then
Result:=copy(Result,0,OOOQOQCOQ0);
end;
end;
function OracleIntArrayEncoding.GetBytes(const O00QOQCOQ0:AnsiString):TBytes;
begin
Result:=GetBytes(WideString(O00QOQCOQ0));
end;
function OracleIntArrayEncoding.GetBytes(const O00QOQCOQ0:AnsiString;OO0QOQCOQ0,OQ0QOQCOQ0:Integer;var OC0QOQCOQ0:TBytes;O0OQOQCOQ0:Integer):Integer;
begin
Result:=GetBytes(WideString(O00QOQCOQ0),OO0QOQCOQ0,OQ0QOQCOQ0,OC0QOQCOQ0,O0OQOQCOQ0);
end;
{$ENDIF}
{$IFDEF NEXTGEN}
function OracleIntArrayEncoding.GetPreamble:TBytes;
begin
SetLength(Result,0);
end;
{$ENDIF}
constructor OOCCQ0QOQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0;OQ0C0COOQ0:ub2;OC0C0COOQ0:boolean=False);
begin
inherited Create(OOQ0QOCOQ0);
OCCCQ0QOQ0:=OQ0C0COOQ0;
OOO0Q0QOQ0:=OC0C0COOQ0;
end;
constructor OOCCQ0QOQ0.Create(OOQ0QOCOQ0:O0CCQOCOQ0;OQ0C0COOQ0:ub2;O0OC0COOQ0:ub1;OC0C0COOQ0:boolean=False);
begin
inherited Create(OOQ0QOCOQ0);
OCCCQ0QOQ0:=OQ0C0COOQ0;
OQO0Q0QOQ0:=O0OC0COOQ0;
OOO0Q0QOQ0:=OC0C0COOQ0;
end;
destructor OOCCQ0QOQ0.Destroy;
begin
OO0C0COOQ0;
inherited;
end;
function OOCCQ0QOQ0.OOOC0COOQ0(OQOC0COOQ0:pOCIError;var OCOC0COOQ0:tbool):sword;
begin
OCOC0COOQ0:=tbool(OQCCQ0QOQ0<>nil);
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.OCOQ0COOQ0(O0QQ0COOQ0:OOO0CQQOQ0;OOQQ0COOQ0:boolean;OQQQ0COOQ0:ub1;out OCQQ0COOQ0:ub2):Encoding;
var
O0CQ0COOQ0:word;
begin
O0CQ0COOQ0:=O0QQ0COOQ0.OOQCCOQOQ0(nil);
OCQQ0COOQ0:=O0QQ0COOQ0.OOQQO0QOQ0;
if(OQCCQ0QOQ0[6]and$80)=$80 then
if(O0CQ0COOQ0 div 10=817)or(O0CQ0COOQ0 div 10=816)then
Result:=Encoding.Unicode
else if O0QQ0COOQ0.OCCOQOQOQ0<OQC0COCOQ0 then
Result:=OracleIntArrayEncoding.GetInstance
else
Result:=Encoding.BigEndianUnicode
else if OQQQ0COOQ0=2 then
if not OOQQ0COOQ0 and(O0CQ0COOQ0 div 100=81)then
Result:=O0QQ0COOQ0.OQQQO0QOQ0
else
Result:=O0QQ0COOQ0.OOOQO0QOQ0
else
if OOQQ0COOQ0 and(O0CQ0COOQ0 div 100=81)then begin
OCQQ0COOQ0:=O0QQ0COOQ0.OQ0QO0QOQ0;
Result:=O0QQ0COOQ0.OC0QO0QOQ0;
end
else
Result:=O0QQ0COOQ0.OQQQO0QOQ0;
end;
class function OOCCQ0QOQ0.OOCQ0COOQ0(OQCQ0COOQ0:OO00OQCOQ0;OCCQ0COOQ0:ub2;O00C0COOQ0:Integer):O0Q000QOQ0;
begin
New(Result);
Result.O0O000QOQ0:=OQCQ0COOQ0.OC0OQQCOQ0;
OQCQ0COOQ0.OC0OQQCOQ0;
if O00C0COOQ0>0 then begin
if OCCQ0COOQ0=SQLT_CLOB then begin
if OQCQ0COOQ0.OQC0QQCOQ0=1 then
Result.OOO000QOQ0:=OQCQ0COOQ0.OO0OQQCOQ0
else
Result.OOO000QOQ0:=0;
Result.OQO000QOQ0:=OQCQ0COOQ0.OQC0QQCOQ0;
end
else begin
Result.OOO000QOQ0:=0;
Result.OQO000QOQ0:=0;
end;
Result.OCO000QOQ0:=OQCQ0COOQ0.O0OQOOCOQ0;
if Cardinal(O00C0COOQ0)<Result.O0O000QOQ0 then
SetLength(Result.OCO000QOQ0,0);
end;
end;
procedure OOCCQ0QOQ0.OO0C0COOQ0;
begin
if OQQ0Q0QOQ0<>nil then begin
Dispose(OQQ0Q0QOQ0);
OQQ0Q0QOQ0:=nil;
end;
end;
function OOCCQ0QOQ0.O0QC0COOQ0(OOQC0COOQ0:pOCISvcCtx;OQQC0COOQ0:pOCIError;out OCQC0COOQ0:ub4):sword;
var
O0CC0COOQ0:OQ0OOQOOQ0;
OOCC0COOQ0:OOO0CQQOQ0;
begin
if OQQ0Q0QOQ0<>nil then begin
OCQC0COOQ0:=OQQ0Q0QOQ0.O0O000QOQ0;
Result:=OCI_SUCCESS;
end
else begin
OOCC0COOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OOQC0COOQ0));
O0CC0COOQ0:=OQ0OOQOOQ0.Create(OOCC0COOQ0,1,OQCCQ0QOQ0,0,Length(OQCCQ0QOQ0));
try
O0CC0COOQ0.OOCC0QOOQ0:=true;
O0CC0COOQ0.O0CC0QOOQ0:=0;
O0CC0COOQ0.OQCQ0QOOQ0;
Result:=O0CC0COOQ0.O00C0QOOQ0(OQQC0COOQ0);
OCQC0COOQ0:=O0CC0COOQ0.O0CC0QOOQ0;
finally
O0CC0COOQ0.Free;
end;
OQQ0Q0QOQ0:=new(O0Q000QOQ0);
OQQ0Q0QOQ0.O0O000QOQ0:=OCQC0COOQ0;
end;
end;
const
O0CQQQOOQ0=32512;
function OOCCQ0QOQ0.O0C0Q0QOQ0:Integer;
begin
if Length(OQCCQ0QOQ0)<$66 then
Result:=0
else if OQCCQ0QOQ0[$66-1]<>1 then
Result:=0
else
Result:=(OQCCQ0QOQ0[$5E]shl 8)+OQCCQ0QOQ0[$5F];
end;
function OOCCQ0QOQ0.OOC0Q0QOQ0(OQC0Q0QOQ0:pOCISvcCtx;OCC0Q0QOQ0:pOCIError;var O00OQ0QOQ0:ub4;
OO0OQ0QOQ0:IntPtr;OQ0OQ0QOQ0:ub4;var OC0OQ0QOQ0:ub4;O0OOQ0QOQ0:ub2;OOOOQ0QOQ0:ub1):sword;
function OQOOQ0QOQ0(OCOOQ0QOQ0:OOO0CQQOQ0;O0QOQ0QOQ0:O0CQQ0COQ0;OOQOQ0QOQ0:ub2):Encoding;
begin
if O0QOQ0QOQ0.O00CQ0COQ0 or(OOQOQ0QOQ0=1000)then
Result:=Encoding.Unicode
else if OOQOQ0QOQ0=0 then
{$IFDEF IS_UTF8_EXCLUDE_MEMO}
Result:=Encoding.ANSI
{$ELSE}
Result:=OCOOQ0QOQ0.OQQQO0QOQ0
{$ENDIF}
else
Result:=OCOOQ0QOQ0.OQ00QOQOQ0(OOQOQ0QOQ0);
end;
procedure OQQOQ0QOQ0(OCQOQ0QOQ0:TBytes;O0COQ0QOQ0:Integer;var OOCOQ0QOQ0:ub4);
var
OQCOQ0QOQ0:Integer;
begin
OQCOQ0QOQ0:=Length(OCQOQ0QOQ0);
if Cardinal(OQCOQ0QOQ0)>OQ0OQ0QOQ0 then
OQCOQ0QOQ0:=Integer(OQ0OQ0QOQ0);
if OQCOQ0QOQ0>0 then
Move(OCQOQ0QOQ0[0],OO0OQ0QOQ0^,OQCOQ0QOQ0);
OOCOQ0QOQ0:=OQCOQ0QOQ0 div O0COQ0QOQ0;
end;
procedure OCCOQ0QOQ0(const O00QOCOOQ0:TBytes;OO0QOCOOQ0,OQ0QOCOOQ0:Encoding;OC0QOCOOQ0:Integer;var O0OQOCOOQ0:ub4);
var
OOOQOCOOQ0:WideString;
OQOQOCOOQ0:Tbytes;
begin
OOOQOCOOQ0:=OO0QOCOOQ0.{$IFDEF IS_UNICODE}GetString{$ELSE}GetWideString{$ENDIF}(O00QOCOOQ0,0,Length(O00QOCOOQ0));
OQOQOCOOQ0:=OQ0QOCOOQ0.GetBytes(OOOQOCOOQ0);
OQQOQ0QOQ0(OQOQOCOOQ0,OC0QOCOOQ0,O0OQOCOOQ0);
end;
procedure OCOQOCOOQ0(const O0QQOCOOQ0:TBytes;OOQQOCOOQ0,OQQQOCOOQ0:Encoding;OCQQOCOOQ0:Integer;var O0CQOCOOQ0:ub4);
begin
if(OOQQOCOOQ0=Encoding.Unicode)or(OOQQOCOOQ0=Encoding.BigEndianUnicode)then begin
if OQQQOCOOQ0=Encoding.UTF8 then begin
if OOQQOCOOQ0=Encoding.BigEndianUnicode then
ConvertBigEndianBuffer(IntPtr(O0QQOCOOQ0),Length(O0QQOCOOQ0));
O0CQOCOOQ0:=CRFunctions.UnicodeToUtf8WoT(OO0OQ0QOQ0,OQ0OQ0QOQ0,IntPtr(O0QQOCOOQ0),Length(O0QQOCOOQ0)shr 1);
end
{$IFNDEF FPC}
else if OQQQOCOOQ0=Encoding.ANSI then begin
if OOQQOCOOQ0=Encoding.BigEndianUnicode then
ConvertBigEndianBuffer(IntPtr(O0QQOCOOQ0),Length(O0QQOCOOQ0));
O0CQOCOOQ0:=LocaleCharsFromUnicode({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,IntPtr(O0QQOCOOQ0),Length(O0QQOCOOQ0)shr 1,OO0OQ0QOQ0,OQ0OQ0QOQ0,nil,nil);
end
{$ENDIF}
else
OCCOQ0QOQ0(O0QQOCOOQ0,OOQQOCOOQ0,OQQQOCOOQ0,OCQQOCOOQ0,O0CQOCOOQ0);
end
else if OQQQOCOOQ0=Encoding.Unicode then begin
if OOQQOCOOQ0=Encoding.UTF8 then
O0CQOCOOQ0:=CRFunctions.Utf8ToUnicodeWoT(OO0OQ0QOQ0,OQ0OQ0QOQ0 shr 1,IntPtr(O0QQOCOOQ0),Length(O0QQOCOOQ0))
{$IFNDEF FPC}
else if OOQQOCOOQ0=Encoding.ANSI then
O0CQOCOOQ0:=UnicodeFromLocaleChars({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,IntPtr(O0QQOCOOQ0),Length(O0QQOCOOQ0),OO0OQ0QOQ0,OQ0OQ0QOQ0 shr 1)
{$ENDIF}
else
OCCOQ0QOQ0(O0QQOCOOQ0,OOQQOCOOQ0,OQQQOCOOQ0,OCQQOCOOQ0,O0CQOCOOQ0);
end
else
OCCOQ0QOQ0(O0QQOCOOQ0,OOQQOCOOQ0,OQQQOCOOQ0,OCQQOCOOQ0,O0CQOCOOQ0);
end;
type
O00COCOOQ0=(OOCQOCOOQ0,OQCQOCOOQ0,OCCQOCOOQ0);
var
OO0COCOOQ0:OOO0CQQOQ0;
OQ0COCOOQ0:O0CQQ0COQ0;
OC0COCOOQ0:Cardinal;
O0OCOCOOQ0:Encoding;
OOOCOCOOQ0:Encoding;
OQOCOCOOQ0:OQ0OOQOOQ0;
OCOCOCOOQ0:O00COCOOQ0;
O0QCOCOOQ0:ub2;
OOQCOCOOQ0:Byte;
OQQCOCOOQ0:Byte;
begin
OO0COCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OQC0Q0QOQ0));
OQ0COCOOQ0:=O0CQQ0COQ0(OO0COCOOQ0.OOCCQOCOQ0);
if OCCCQ0QOQ0 in[SQLT_CLOB,SQLT_CFILEE]then begin
if(O0OOQ0QOQ0=1000)or OQ0COCOOQ0.O00CQ0COQ0 then begin
OQQCOCOOQ0:=2;
OOQCOCOOQ0:=2;
end
else if O0OOQ0QOQ0<>0 then begin
OQQCOCOOQ0:=GetFixedCharLength(O0OOQ0QOQ0);
OOQCOCOOQ0:=GetMaxCharLength(O0OOQ0QOQ0);
end
else begin
OQQCOCOOQ0:=GetFixedCharLength(OO0COCOOQ0.OOQQO0QOQ0);
OOQCOCOOQ0:=GetMaxCharLength(OO0COCOOQ0.OOQQO0QOQ0);
end;
end
else begin
OQQCOCOOQ0:=1;
OOQCOCOOQ0:=1;
end;
if OC0OQ0QOQ0>0 then
OC0COCOOQ0:=OC0OQ0QOQ0
else
OC0COCOOQ0:=OQ0OQ0QOQ0 div OOQCOCOOQ0;
if(OQQ0Q0QOQ0<>nil)and((OQQ0Q0QOQ0.O0O000QOQ0=0)or(Length(OQQ0Q0QOQ0.OCO000QOQ0)>0))then begin
OC0OQ0QOQ0:=OQQ0Q0QOQ0.O0O000QOQ0;
O0OCOCOOQ0:=nil;
OOOCOCOOQ0:=nil;
if OCCCQ0QOQ0 in[SQLT_CLOB,SQLT_CFILEE]then begin
if(OQQ0Q0QOQ0.OOO000QOQ0=1000)or(OQQ0Q0QOQ0.OOO000QOQ0=2000)or(OQO0Q0QOQ0=2)then
O0OCOCOOQ0:=Encoding.BigEndianUnicode
else if O0OQCQOOQ0(OQQ0Q0QOQ0.OOO000QOQ0)then
O0OCOCOOQ0:=Encoding.UTF8
else
O0OCOCOOQ0:=OO0COCOOQ0.OQQQO0QOQ0;
if O0OCOCOOQ0<>nil then
OOOCOCOOQ0:=OQOOQ0QOQ0(OO0COCOOQ0,OQ0COCOOQ0,O0OOQ0QOQ0);
end;
if O0OCOCOOQ0<>OOOCOCOOQ0 then
OCOQOCOOQ0(OQQ0Q0QOQ0.OCO000QOQ0,O0OCOCOOQ0,OOOCOCOOQ0,OQQCOCOOQ0,OC0OQ0QOQ0)
else if OQQ0Q0QOQ0.OCO000QOQ0<>nil then
OQQOQ0QOQ0(OQQ0Q0QOQ0.OCO000QOQ0,OQQCOCOOQ0,OC0OQ0QOQ0)
else
OQQOQ0QOQ0(nil,OQQCOCOOQ0,OC0OQ0QOQ0);
Result:=OCI_SUCCESS;
Inc(O00OQ0QOQ0,OC0OQ0QOQ0);
end
else begin
OQOCOCOOQ0:=OQ0OOQOOQ0.Create(OO0COCOOQ0,2,OQCCQ0QOQ0,0,Length(OQCCQ0QOQ0));
try
if OCCCQ0QOQ0 in[SQLT_CLOB,SQLT_CFILEE]then begin
O0OCOCOOQ0:=OCOQ0COOQ0(OO0COCOOQ0,True,OOOOQ0QOQ0,O0QCOCOOQ0);
OOOCOCOOQ0:=OQOOQ0QOQ0(OO0COCOOQ0,OQ0COCOOQ0,O0OOQ0QOQ0);
if O0OCOCOOQ0=OOOCOCOOQ0 then
OCOCOCOOQ0:=OOCQOCOOQ0
else if(O0OCOCOOQ0=Encoding.BigEndianUnicode)and(OOOCOCOOQ0=Encoding.Unicode)then
OCOCOCOOQ0:=OQCQOCOOQ0
else
OCOCOCOOQ0:=OCCQOCOOQ0;
end
else begin
O0QCOCOOQ0:=0;
O0OCOCOOQ0:=nil;
OOOCOCOOQ0:=nil;
OCOCOCOOQ0:=OOCQOCOOQ0;
end;
OQOCOCOOQ0.OOCC0QOOQ0:=true;
OQOCOCOOQ0.O0CC0QOOQ0:=OC0COCOOQ0;
OQOCOCOOQ0.OCQC0QOOQ0:=O00OQ0QOQ0;
OQOCOCOOQ0.O0QC0QOOQ0:=O0QCOCOOQ0;
case OCOCOCOOQ0 of
OCCQOCOOQ0:
OQOCOCOOQ0.OOOC0QOOQ0(nil,0);
else
OQOCOCOOQ0.OOOC0QOOQ0(OO0OQ0QOQ0,OQ0OQ0QOQ0);
end;
OQOCOCOOQ0.OQCQ0QOOQ0;
Result:=OQOCOCOOQ0.O00C0QOOQ0(OCC0Q0QOQ0);
OC0OQ0QOQ0:=OQOCOCOOQ0.O0CC0QOOQ0;
Inc(O00OQ0QOQ0,OC0OQ0QOQ0);
case OCOCOCOOQ0 of
OOCQOCOOQ0:
OC0OQ0QOQ0:=OQOCOCOOQ0.O0OQ0QOOQ0 div OQQCOCOOQ0;
OQCQOCOOQ0:
ConvertBigEndianBuffer(OO0OQ0QOQ0,OC0OQ0QOQ0*2);
OCCQOCOOQ0:
{$IFDEF FPC}
OCCOQ0QOQ0(OQOCOCOOQ0.OO000QOOQ0,O0OCOCOOQ0,OOOCOCOOQ0,OQQCOCOOQ0,OC0OQ0QOQ0);
{$ELSE}
OCOQOCOOQ0(OQOCOCOOQ0.OO000QOOQ0,O0OCOCOOQ0,OOOCOCOOQ0,OQQCOCOOQ0,OC0OQ0QOQ0);
{$ENDIF}
end;
finally
OQOCOCOOQ0.Free;
end;
end;
SetLength(OQQ0Q0QOQ0.OCO000QOQ0,0);
end;
function OOCCQ0QOQ0.OQCC0COOQ0(OCCC0COOQ0:pOCISvcCtx;O0000COOQ0:pOCIError;var OO000COOQ0:ub4;OQ000COOQ0:ub4;
OC000COOQ0:IntPtr;O0O00COOQ0:ub4;OOO00COOQ0:ub2;OQO00COOQ0:ub1):sword;
var
OCO00COOQ0:OOO0CQQOQ0;
O0Q00COOQ0:O0CQQ0COQ0;
OOQ00COOQ0:boolean;
OQQ00COOQ0:Cardinal;
begin
OCO00COOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OCCC0COOQ0));
O0Q00COOQ0:=O0CQQ0COQ0(OCO00COOQ0.OOCCQOCOQ0);
Result:=OCI_SUCCESS;
OOQ00COOQ0:=OO000COOQ0=0;
if OOQ00COOQ0 then begin
if OO00Q0QOQ0=0 then begin
OCOO0QOOQ0(O0QC0COOQ0(OCCC0COOQ0,O0000COOQ0,OCO0Q0QOQ0),O0Q00COOQ0.O00CQ0COQ0,O0000COOQ0);
OQ000COOQ0:=1;
end
else
OQ000COOQ0:=OO00Q0QOQ0;
end;
OQQ00COOQ0:=O0C0Q0QOQ0;
if OQQ00COOQ0=0 then begin
Result:=OOC0Q0QOQ0(OCCC0COOQ0,O0000COOQ0,OQ000COOQ0,OC000COOQ0,O0O00COOQ0,OO000COOQ0,OOO00COOQ0,OQO00COOQ0);
if OQ000COOQ0<=OCO0Q0QOQ0 then begin
OO00Q0QOQ0:=OQ000COOQ0;
if not OOQ00COOQ0 then
Result:=0
else
Result:=OCI_NEED_DATA;
end
else begin
OO00Q0QOQ0:=0;
end;
Exit;
end;
if(OQ000COOQ0>OQQ00COOQ0)then
OQ0QCQOOQ0(1);
if OO000COOQ0>(OQQ00COOQ0-OQ000COOQ0)then
OO000COOQ0:=OQQ00COOQ0-OQ000COOQ0;
Marshal.Copy(OQCCQ0QOQ0,$66+OQ000COOQ0,OC000COOQ0,OO000COOQ0);
end;
function OOCCQ0QOQ0.OCQCOCOOQ0(O0CCOCOOQ0:pOCISvcCtx;OOCCOCOOQ0:pOCIError;var OQCCOCOOQ0:ub4;
OCCCOCOOQ0:IntPtr;O000OCOOQ0:ub4;OO00OCOOQ0:integer;var OQ00OCOOQ0:ub4;OC00OCOOQ0:ub2;O0O0OCOOQ0:ub1):sword;
function OOO0OCOOQ0(OQO0OCOOQ0:OOO0CQQOQ0;OCO0OCOOQ0:O0CQQ0COQ0;O0Q0OCOOQ0:ub2):Encoding;
begin
if OCO0OCOOQ0.O00CQ0COQ0 or(O0Q0OCOOQ0=1000)then
Result:=Encoding.Unicode
else if OC00OCOOQ0=0 then
{$IFDEF IS_UTF8_EXCLUDE_MEMO}
Result:=Encoding.ANSI
{$ELSE}
Result:=OQO0OCOOQ0.OQQQO0QOQ0
{$ENDIF}
else
Result:=OQO0OCOOQ0.OQ00QOQOQ0(O0Q0OCOOQ0);
end;
function OOQ0OCOOQ0(OQQ0OCOOQ0,OCQ0OCOOQ0:Encoding;O0C0OCOOQ0:IntPtr;OOC0OCOOQ0:Integer):TBytes;
var
OQC0OCOOQ0:TBytes;
OCC0OCOOQ0:WideString;
begin
SetLength(OQC0OCOOQ0,OOC0OCOOQ0);
Move(O0C0OCOOQ0^,OQC0OCOOQ0[0],OOC0OCOOQ0);
OCC0OCOOQ0:=OQQ0OCOOQ0.{$IFDEF IS_UNICODE}GetString{$ELSE}GetWideString{$ENDIF}(OQC0OCOOQ0);
Result:=OCQ0OCOOQ0.GetBytes(OCC0OCOOQ0);
end;
function O00OOCOOQ0(OO0OOCOOQ0,OQ0OOCOOQ0:Encoding;OC0OOCOOQ0:IntPtr;O0OOOCOOQ0:Integer):TBytes;
var
OOOOOCOOQ0:Integer;
begin
if OO0OOCOOQ0=Encoding.Unicode then begin
if OQ0OOCOOQ0=Encoding.UTF8 then begin
OOOOOCOOQ0:=CRFunctions.UnicodeToUtf8WoT(nil,0,OC0OOCOOQ0,O0OOOCOOQ0 shr 1);
SetLength(Result,OOOOOCOOQ0);
CRFunctions.UnicodeToUtf8WoT(IntPtr(Result),OOOOOCOOQ0,OC0OOCOOQ0,O0OOOCOOQ0 shr 1);
end
{$IFNDEF FPC}
else if OQ0OOCOOQ0=Encoding.ANSI then begin
OOOOOCOOQ0:=LocaleCharsFromUnicode({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,OC0OOCOOQ0,O0OOOCOOQ0 shr 1,nil,0,nil,nil);
SetLength(Result,OOOOOCOOQ0);
LocaleCharsFromUnicode({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,OC0OOCOOQ0,O0OOOCOOQ0 shr 1,IntPtr(Result),OOOOOCOOQ0,nil,nil);
end
{$ENDIF}
else
Result:=OOQ0OCOOQ0(OO0OOCOOQ0,OQ0OOCOOQ0,OC0OOCOOQ0,O0OOOCOOQ0);
end
else if(OQ0OOCOOQ0=Encoding.Unicode)or(OQ0OOCOOQ0=Encoding.BigEndianUnicode)then begin
if OO0OOCOOQ0=Encoding.UTF8 then begin
OOOOOCOOQ0:=CRFunctions.Utf8ToUnicodeWoT(nil,0,OC0OOCOOQ0,O0OOOCOOQ0);
SetLength(Result,OOOOOCOOQ0*2);
OOOOOCOOQ0:=CRFunctions.Utf8ToUnicodeWoT(IntPtr(Result),OOOOOCOOQ0,OC0OOCOOQ0,O0OOOCOOQ0);
if OQ0OOCOOQ0=Encoding.BigEndianUnicode then
ConvertBigEndianBuffer(Result,OOOOOCOOQ0*2);
end
{$IFNDEF FPC}
else if OO0OOCOOQ0=Encoding.ANSI then begin
OOOOOCOOQ0:=UnicodeFromLocaleChars({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,OC0OOCOOQ0,O0OOOCOOQ0,nil,0);
SetLength(Result,OOOOOCOOQ0*2);
UnicodeFromLocaleChars({$IFDEF VER12P}DefaultSystemCodePage{$ELSE}0{$ENDIF},0,OC0OOCOOQ0,O0OOOCOOQ0,IntPtr(Result),OOOOOCOOQ0);
if OQ0OOCOOQ0=Encoding.BigEndianUnicode then
ConvertBigEndianBuffer(Result,OOOOOCOOQ0*2);
end
{$ENDIF}
else
Result:=OOQ0OCOOQ0(OO0OOCOOQ0,OQ0OOCOOQ0,OC0OOCOOQ0,O0OOOCOOQ0);
end
else
Result:=OOQ0OCOOQ0(OO0OOCOOQ0,OQ0OOCOOQ0,OC0OOCOOQ0,O0OOOCOOQ0);
end;
var
OQOOOCOOQ0:integer;
OCOOOCOOQ0:WideString;
O0QOOCOOQ0:TBytes;
OOQOOCOOQ0:Cardinal;
OQQOOCOOQ0:Cardinal;
OCQOOCOOQ0:Encoding;
O0COOCOOQ0:Encoding;
OOCOOCOOQ0:OQ0OOQOOQ0;
OQCOOCOOQ0:OOO0CQQOQ0;
OCCOOCOOQ0:ub2;
O00Q0COOQ0:O0CQQ0COQ0;
OO0Q0COOQ0:Cardinal;
OQ0Q0COOQ0:Cardinal;
OC0Q0COOQ0:TBytes;
O0OQ0COOQ0:TBytes;
OOOQ0COOQ0:boolean;
OQOQ0COOQ0:Cardinal;
begin
OO0C0COOQ0;
SetLength(OC0Q0COOQ0,0);
SetLength(O0OQ0COOQ0,0);
OQCOOCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(O0CCOCOOQ0));
O00Q0COOQ0:=O0CQQ0COQ0(OQCOOCOOQ0.OOCCQOCOQ0);
OO0Q0COOQ0:=1;
OQ0Q0COOQ0:=1;
if(O000OCOOQ0>0)and(OCCCQ0QOQ0 in[SQLT_CLOB,SQLT_CFILEE])then begin
if(OC00OCOOQ0=1000)or O00Q0COOQ0.O00CQ0COQ0 then begin
OO0Q0COOQ0:=2;
OQ0Q0COOQ0:=2;
end
else if OC00OCOOQ0<>0 then begin
OO0Q0COOQ0:=GetFixedCharLength(OC00OCOOQ0);
OQ0Q0COOQ0:=GetMaxCharLength(OC00OCOOQ0);
end
else begin
OO0Q0COOQ0:=GetFixedCharLength(OQCOOCOOQ0.OQ0QO0QOQ0);
OQ0Q0COOQ0:=GetMaxCharLength(OQCOOCOOQ0.OQ0QO0QOQ0);
end;
if(OC00OCOOQ0=1000)or O00Q0COOQ0.O00CQ0COQ0 then
OOQOOCOOQ0:=OQ00OCOOQ0*2
else if OO0Q0COOQ0>1 then
OOQOOCOOQ0:=OQ00OCOOQ0*OO0Q0COOQ0
else
OOQOOCOOQ0:=OQ00OCOOQ0;
end
else
OOQOOCOOQ0:=OQ00OCOOQ0;
if OOQOOCOOQ0<O000OCOOQ0 then
O000OCOOQ0:=OOQOOCOOQ0;
O0QOOCOOQ0:=nil;
OQQOOCOOQ0:=OO00OCOOQ0;
if OCCCQ0QOQ0 in[SQLT_CLOB,SQLT_CFILEE]then begin
OCQOOCOOQ0:=OOO0OCOOQ0(OQCOOCOOQ0,O00Q0COOQ0,OC00OCOOQ0);
O0COOCOOQ0:=OCOQ0COOQ0(OQCOOCOOQ0,False,O0O0OCOOQ0,OCCOOCOOQ0);
if O000CQOOQ0 and
(OO0Q0COOQ0<>OQ0Q0COOQ0)and
(Length(O0Q0Q0QOQ0)>0)and
(OQCCOCOOQ0>0)and(OQCCOCOOQ0=OOQ0Q0QOQ0)
then begin
OQOQ0COOQ0:=Length(O0Q0Q0QOQ0);
SetLength(O0QOOCOOQ0,O000OCOOQ0+OQOQ0COOQ0);
ArrayCopy(O0Q0Q0QOQ0,0,O0QOOCOOQ0,0,OQOQ0COOQ0);
Marshal.Copy(OCCCOCOOQ0,O0QOOCOOQ0,OQOQ0COOQ0,O000OCOOQ0);
O000OCOOQ0:=O000OCOOQ0+OQOQ0COOQ0;
SetLength(O0Q0Q0QOQ0,0);
OOQ0Q0QOQ0:=0;
end
else
O0QOOCOOQ0:=nil;
if O000CQOOQ0 and(OO0Q0COOQ0<>OQ0Q0COOQ0)and(OCQOOCOOQ0<>O0COOCOOQ0)then begin
if O0QOOCOOQ0=nil then begin
SetLength(O0QOOCOOQ0,O000OCOOQ0);
Move(PtrOffset(OCCCOCOOQ0,OO00OCOOQ0)^,O0QOOCOOQ0[0],O000OCOOQ0);
end;
OCOOOCOOQ0:=OCQOOCOOQ0.{$IFDEF IS_UNICODE}GetString{$ELSE}GetWideString{$ENDIF}(O0QOOCOOQ0,OO00OCOOQ0,O000OCOOQ0);
if Length(OCOOOCOOQ0)>0 then begin
OC0Q0COOQ0:=OCQOOCOOQ0.GetBytes(OCOOOCOOQ0[Length(OCOOOCOOQ0)]);
OOOQ0COOQ0:=false;
for OQOOOCOOQ0:=Length(OC0Q0COOQ0)-1 downto 0 do
if OC0Q0COOQ0[OQOOOCOOQ0]<>O0QOOCOOQ0[Length(O0QOOCOOQ0)-Length(OC0Q0COOQ0)+OQOOOCOOQ0]then begin
OOOQ0COOQ0:=true;
break;
end;
if OOOQ0COOQ0 then begin
SetLength(OCOOOCOOQ0,Length(OCOOOCOOQ0)-1);
O0OQ0COOQ0:=OCQOOCOOQ0.GetBytes(OCOOOCOOQ0);
O0Q0Q0QOQ0:=copy(O0QOOCOOQ0,Length(O0OQ0COOQ0),Length(O0QOOCOOQ0)-Length(O0OQ0COOQ0));
end;
end;
O0QOOCOOQ0:=O0COOCOOQ0.GetBytes(OCOOOCOOQ0);
end
else if(OCQOOCOOQ0=Encoding.Unicode)and(O0COOCOOQ0=Encoding.BigEndianUnicode)then begin
SetLength(O0QOOCOOQ0,O000OCOOQ0);
Move(PtrOffset(OCCCOCOOQ0,OO00OCOOQ0)^,O0QOOCOOQ0[0],O000OCOOQ0);
ConvertBigEndianBuffer(IntPtr(O0QOOCOOQ0),Length(O0QOOCOOQ0));
end
else if OCQOOCOOQ0<>O0COOCOOQ0 then
O0QOOCOOQ0:=O00OOCOOQ0(OCQOOCOOQ0,O0COOCOOQ0,PtrOffset(OCCCOCOOQ0,OO00OCOOQ0),O000OCOOQ0);
if O0QOOCOOQ0<>nil then begin
OOQOOCOOQ0:=Length(O0QOOCOOQ0);
OQQOOCOOQ0:=0;
end;
end
else
OCCOOCOOQ0:=0;
OOCOOCOOQ0:=OQ0OOQOOQ0.Create(OQCOOCOOQ0,$40,OQCCQ0QOQ0,0,Length(OQCCQ0QOQ0));
try
if O0QOOCOOQ0<>nil then
OOCOOCOOQ0.OOOC0QOOQ0(@O0QOOCOOQ0[OQQOOCOOQ0],OOQOOCOOQ0)
else
OOCOOCOOQ0.OOOC0QOOQ0(OCCCOCOOQ0,O000OCOOQ0);
OOCOOCOOQ0.OOCC0QOOQ0:=true;
OOCOOCOOQ0.O0CC0QOOQ0:=0;
OOCOOCOOQ0.OCQC0QOOQ0:=OQCCOCOOQ0;
OOCOOCOOQ0.O0QC0QOOQ0:=OCCOOCOOQ0;
OOCOOCOOQ0.OQCQ0QOOQ0;
OOCOOCOOQ0.OOCQ0QOOQ0;
Result:=OOCOOCOOQ0.O00C0QOOQ0(OOCCOCOOQ0);
if OCCCQ0QOQ0 in[SQLT_CLOB,SQLT_CFILEE]then
OQ00OCOOQ0:=OOCOOCOOQ0.O0CC0QOOQ0
else
OQ00OCOOQ0:=OOQOOCOOQ0;
Inc(OQCCOCOOQ0,OQ00OCOOQ0);
if Length(O0Q0Q0QOQ0)<>0 then
OOQ0Q0QOQ0:=OQCCOCOOQ0;
finally
OOCOOCOOQ0.Free;
end;
end;
function OOCCQ0QOQ0.OCQ00COOQ0(O0C00COOQ0:pOCISvcCtx;OOC00COOQ0:pOCIError;var OQC00COOQ0:ub4;OCC00COOQ0:ub4;
O00O0COOQ0:IntPtr;OO0O0COOQ0:ub4;OQ0O0COOQ0:ub1;OC0O0COOQ0:ub2;O0OO0COOQ0:ub1):sword;
begin
Result:=OCQCOCOOQ0(O0C00COOQ0,OOC00COOQ0,OCC00COOQ0,O00O0COOQ0,OO0O0COOQ0,0,OQC00COOQ0,OC0O0COOQ0,O0OO0COOQ0);
end;
{$IFDEF FPC}
function StrNextChar(const OQC0CQC0Q0:PAChar):PAChar;
begin
Result:=OQC0CQC0Q0;
if(Result^)<>#0 then
Result:=Result+1;
end;
{$ENDIF}
{$IFDEF NEXTGEN}
function StrNextChar(const OQC0CQC0Q0:PAChar):PAChar;
begin
Result:=OQC0CQC0Q0;
if(Result^)<>#0 then
Result:=Result+1;
end;
{$ENDIF}
function OOCCQ0QOQ0.OOOO0COOQ0(OQOO0COOQ0:pOCISvcCtx;OCOO0COOQ0:pOCIError;var O0QO0COOQ0:ub4;OOQO0COOQ0:ub4;
OQQO0COOQ0:IntPtr;OCQO0COOQ0:ub4;O0CO0COOQ0:ub2):sword;
var
OOCO0COOQ0:OOO0CQQOQ0;
OQCO0COOQ0:O0CQQ0COQ0;
OCCO0COOQ0:OOCCQ0COQ0;
O00QCCOOQ0:pOCIStmt;
OO0QCCOOQ0:pOCIBind;
OQ0QCCOOQ0:OOQ0O0QOQ0;
OC0QCCOOQ0:string;
O0OQCCOOQ0,OOOQCCOOQ0,OQOQCCOOQ0,OCOQCCOOQ0,O0QQCCOOQ0,OOQQCCOOQ0,OQQQCCOOQ0:ub4;
OCQQCCOOQ0:ub2;
O0CQCCOOQ0:IntPtr;
OOCQCCOOQ0,OQCQCCOOQ0:sword;
OCCQCCOOQ0:IntPtr;
O00CCCOOQ0:Integer;
OO0CCCOOQ0:word;
OQ0CCCOOQ0:boolean;
OC0CCCOOQ0:ub2;
O0OCCCOOQ0:Byte;
OOOCCCOOQ0:string;
begin
OOCO0COOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OQOO0COOQ0));
OQCO0COOQ0:=O0CQQ0COQ0(OOCO0COOQ0.OOCCQOCOQ0);
O00CCCOOQ0:=O0QC0COOQ0(OQOO0COOQ0,OCOO0COOQ0,O0OQCCOOQ0);
if OCCCQ0QOQ0=SQLT_CLOB then begin
OCCO0COOQ0:=OOCO0COOQ0.OQCQQQQOQ0;
OC0QCCOOQ0:='declare a varchar2(32512); begin dbms_lob.read(:1,:2,:3,a); :4 := a; end;';
O0OCCCOOQ0:=GetMaxCharLength(OOO0CQQOQ0(GetGCHandleTarget(OQOO0COOQ0)).OCCOCQQOQ0);
if O0OCCCOOQ0>1 then
OCQQCCOOQ0:=SQLT_CHR
else
OCQQCCOOQ0:=SQLT_AFC
end
else begin
OCCO0COOQ0:=OOCO0COOQ0.OCCQQQQOQ0;
OC0QCCOOQ0:='begin dbms_lob.read(:1,:2,:3,:4); end;';
O0OCCCOOQ0:=1;
OCQQCCOOQ0:=SQLT_BIN;
end;
if O0OQCQOOQ0(OOO0CQQOQ0(GetGCHandleTarget(OQOO0COOQ0)).OOQOCQQOQ0)then
OO0CCCOOQ0:=3
else
OO0CCCOOQ0:=1;
if(O0QO0COOQ0=0)or(O0QO0COOQ0>OCQO0COOQ0)then begin
if OO00Q0QOQ0=0 then
OO00Q0QOQ0:=OOQO0COOQ0
else
OOQO0COOQ0:=OO00Q0QOQ0;
end
else
OO00Q0QOQ0:=0;
OQ0CCCOOQ0:=OCCO0COOQ0=nil;
if OQ0CCCOOQ0 then begin
OCCO0COOQ0:=OOCCQ0COQ0.Create(OQCO0COOQ0);
if OCCCQ0QOQ0=SQLT_CLOB then
OOCO0COOQ0.OQCQQQQOQ0:=OCCO0COOQ0
else
OOCO0COOQ0.OCCQQQQOQ0:=OCCO0COOQ0;
end;
O00QCCOOQ0:=OCCO0COOQ0.OQQOQOCOQ0;
if OQ0CCCOOQ0 then begin
OCCO0COOQ0.OCQ0Q0COQ0:=OC0QCCOOQ0;
OCCO0COOQ0.OOC0Q0COQ0:=OCI_STMT_BEGIN;
OQ0QCCOOQ0:=OOQ0O0QOQ0.Create(OCCO0COOQ0);
OCCO0COOQ0.OQO0Q0COQ0.Add(OQ0QCCOOQ0);
OQ0QCCOOQ0.OOCOQOCOQ0:='1';
OQ0QCCOOQ0:=OOQ0O0QOQ0.Create(OCCO0COOQ0);
OCCO0COOQ0.OQO0Q0COQ0.Add(OQ0QCCOOQ0);
OQ0QCCOOQ0.OOCOQOCOQ0:='2';
OQ0QCCOOQ0:=OOQ0O0QOQ0.Create(OCCO0COOQ0);
OCCO0COOQ0.OQO0Q0COQ0.Add(OQ0QCCOOQ0);
OQ0QCCOOQ0.OOCOQOCOQ0:='3';
OQ0QCCOOQ0:=OOQ0O0QOQ0.Create(OCCO0COOQ0);
OCCO0COOQ0.OQO0Q0COQ0.Add(OQ0QCCOOQ0);
OQ0QCCOOQ0.OOCOQOCOQ0:='4';
end;
OCCQCCOOQ0:=Self.OQQOQOCOQ0;
OCOO0QOOQ0(OCIBindByPos_(O00QCCOOQ0,OO0QCCOOQ0,OCOO0COOQ0,
1,@OCCQCCOOQ0,4,OCCCQ0QOQ0,nil,nil,nil,0,nil,OCI_DEFAULT),OQCO0COOQ0.O00CQ0COQ0,OCOO0COOQ0);
OCOQCCOOQ0:=0;
O0QQCCOOQ0:=0;
OQOQCCOOQ0:=OCQO0COOQ0;
while OQOQCCOOQ0>0 do begin
OQQQCCOOQ0:=OQOQCCOOQ0;
if OQQQCCOOQ0>O0CQQQOOQ0 div OO0CCCOOQ0 then
OQQQCCOOQ0:=O0CQQQOOQ0 div OO0CCCOOQ0;
OOQQCCOOQ0:=OOQO0COOQ0+OCOQCCOOQ0;
O0CQCCOOQ0:=PtrOffset(OQQO0COOQ0,O0QQCCOOQ0);
if O0OCCCOOQ0>1 then begin
OOOQCCOOQ0:=OQQQCCOOQ0 div O0OCCCOOQ0;
if OOOQCCOOQ0=0 then begin
OQOQCCOOQ0:=0;
break;
end;
end
else
OOOQCCOOQ0:=OQQQCCOOQ0;
O0OQCCOOQ0:=OOOQCCOOQ0;
OCOO0QOOQ0(OCIBindByPos_(O00QCCOOQ0,OO0QCCOOQ0,OCOO0COOQ0,
2,@O0OQCCOOQ0,4,SQLT_INT,nil,nil,nil,0,nil,OCI_DEFAULT),OQCO0COOQ0.O00CQ0COQ0,OCOO0COOQ0);
OCOO0QOOQ0(OCIBindByPos_(O00QCCOOQ0,OO0QCCOOQ0,OCOO0COOQ0,
3,@OOQQCCOOQ0,4,SQLT_INT,nil,nil,nil,0,nil,OCI_DEFAULT),OQCO0COOQ0.O00CQ0COQ0,OCOO0COOQ0);
OCOO0QOOQ0(OCIBindByPos_(O00QCCOOQ0,OO0QCCOOQ0,OCOO0COOQ0,
4,O0CQCCOOQ0,OQQQCCOOQ0,OCQQCCOOQ0,nil,@OC0CCCOOQ0,nil,0,nil,OCI_DEFAULT),OQCO0COOQ0.O00CQ0COQ0,OCOO0COOQ0);
if O0CO0COOQ0>0 then begin
O00CCCOOQ0:=Integer(O0CO0COOQ0);
OCOO0QOOQ0(OCIAttrSet2_(OO0QCCOOQ0,OCI_HTYPE_BIND,O00CCCOOQ0,0,OCI_ATTR_CHARSET_ID,OCOO0COOQ0),OQCO0COOQ0.O00CQ0COQ0,OCOO0COOQ0);
end;
OOCQCCOOQ0:=OCIStmtExecute_(OQOO0COOQ0,O00QCCOOQ0,OCOO0COOQ0,1,0,nil,nil,OCI_DEFAULT);
if O0OCCCOOQ0=1 then
OC0CCCOOQ0:=O0OQCCOOQ0;
if OOCQCCOOQ0<>OCI_SUCCESS then begin
OQCQCCOOQ0:=TOraError.GetOraError(@OCIErrorGet_,OOCQCCOOQ0,false,nil,OOOCCCOOQ0);
if OQCQCCOOQ0=1403 then
break
else
OCOO0QOOQ0(OOCQCCOOQ0,OQCO0COOQ0.O00CQ0COQ0,OCOO0COOQ0);
end;
if O0CO0COOQ0=OCI_UTF16ID then begin
if O0OQCCOOQ0>OQQQCCOOQ0 shr 1 then
O0OQCCOOQ0:=OQQQCCOOQ0 shr 1;
end
else begin
if OC0CCCOOQ0>OQQQCCOOQ0 then
OC0CCCOOQ0:=OQQQCCOOQ0;
end;
Inc(OCOQCCOOQ0,O0OQCCOOQ0);
Inc(O0QQCCOOQ0,OC0CCCOOQ0);
if O0CO0COOQ0=OCI_UTF16ID then begin
if(O0OQCCOOQ0*2<OQOQCCOOQ0)and(O0OQCCOOQ0*2<O0CQQQOOQ0 div OO0CCCOOQ0)then
break;
Dec(OQOQCCOOQ0,O0OQCCOOQ0*2);
end
else begin
if((O0OCCCOOQ0=1)and(OC0CCCOOQ0<OQOQCCOOQ0)and(OC0CCCOOQ0<O0CQQQOOQ0 div OO0CCCOOQ0))or
((O0OCCCOOQ0>1)and(OOOQCCOOQ0>O0OQCCOOQ0))
then
break;
Dec(OQOQCCOOQ0,OC0CCCOOQ0);
end;
end;
Result:=OCI_SUCCESS;
if(O0QO0COOQ0=0)or(O0QO0COOQ0>OCQO0COOQ0)then begin
OO00Q0QOQ0:=OOQO0COOQ0+OCOQCCOOQ0;
if((O0OCCCOOQ0=1)and(O0QQCCOOQ0=OCQO0COOQ0))or
((O0OCCCOOQ0<>1)and(OQOQCCOOQ0=0))
then
Result:=OCI_NEED_DATA
else
OO00Q0QOQ0:=0;
end;
if(O0OCCCOOQ0=1)or(O0CO0COOQ0=1000)or OQCO0COOQ0.O00CQ0COQ0 then
O0QO0COOQ0:=OCOQCCOOQ0
else
O0QO0COOQ0:=O0QQCCOOQ0;
end;
function OOCCQ0QOQ0.OQOCCCOOQ0(OCOCCCOOQ0:pOCISvcCtx;O0QCCCOOQ0:pOCIError;var OOQCCCOOQ0:ub4;OQQCCCOOQ0:ub4;
OCQCCCOOQ0:IntPtr;O0CCCCOOQ0:ub4;OOCCCCOOQ0:ub1;OQCCCCOOQ0:ub2):sword;
function OCCCCCOOQ0(O000CCOOQ0:IntPtr;OO00CCOOQ0:integer):integer;
var
OQ00CCOOQ0:word;
OC00CCOOQ0:integer;
O0O0CCOOQ0,OOO0CCOOQ0:PAChar;
OQO0CCOOQ0:integer;
begin
if OCCCQ0QOQ0<>SQLT_CLOB then begin
Result:=OO00CCOOQ0;
Exit;
end;
if OQCCCCOOQ0<>0 then
OQ00CCOOQ0:=OQCCCCOOQ0
else begin
OQ00CCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OCOCCCOOQ0)).OCCOCQQOQ0;
if O0OQCQOOQ0(OQ00CCOOQ0)then
OQ00CCOOQ0:=0;
end;
if OQ00CCOOQ0=OCI_UTF16ID then begin
Result:=OO00CCOOQ0*2;
end
else if OQ00CCOOQ0=OCI_UTF16ID then begin
Result:=OO00CCOOQ0*2;
end
else begin
OC00CCOOQ0:=GetMaxCharLength(OQ00CCOOQ0);
if OC00CCOOQ0=1 then begin
Result:=OO00CCOOQ0;
Exit;
end;
O0O0CCOOQ0:=PAChar(O000CCOOQ0);
OOO0CCOOQ0:=O0O0CCOOQ0;
for OQO0CCOOQ0:=1 to OO00CCOOQ0 do begin
OOO0CCOOQ0:=StrNextChar(O0O0CCOOQ0);
if OOO0CCOOQ0=O0O0CCOOQ0 then
break;
O0O0CCOOQ0:=OOO0CCOOQ0;
end;
Result:=PtrSubstract(OOO0CCOOQ0,O000CCOOQ0);
end;
end;
function OCO0CCOOQ0(O0Q0CCOOQ0:IntPtr;OOQ0CCOOQ0:Integer):TMbcsByteType;
var
OQQ0CCOOQ0:Byte;
begin
OQQ0CCOOQ0:=Marshal.ReadByte(O0Q0CCOOQ0,OOQ0CCOOQ0);
OQQ0CCOOQ0:=OQQ0CCOOQ0 and$C0;
if OQQ0CCOOQ0=$D0 then begin
Result:=mbSingleByte;
Exit;
end;
Result:=mbTrailByte;
end;
function OCQ0CCOOQ0(O0C0CCOOQ0:IntPtr):IntPtr;
var
OOC0CCOOQ0,OQC0CCOOQ0:Byte;
begin
Result:=O0C0CCOOQ0;
OOC0CCOOQ0:=Marshal.ReadByte(O0C0CCOOQ0);
O0C0CCOOQ0:=PtrOffset(O0C0CCOOQ0,1);
if(OOC0CCOOQ0 and$80)<>0 then begin
OOC0CCOOQ0:=OOC0CCOOQ0 and$3F;
if(OOC0CCOOQ0 and$20)<>0 then begin
OQC0CCOOQ0:=Marshal.ReadByte(O0C0CCOOQ0);
O0C0CCOOQ0:=PtrOffset(O0C0CCOOQ0,1);
if(OQC0CCOOQ0 and$C0)<>$80 then
Exit;
end;
OQC0CCOOQ0:=Marshal.ReadByte(O0C0CCOOQ0);
O0C0CCOOQ0:=PtrOffset(O0C0CCOOQ0,1);
if(OQC0CCOOQ0 and$C0)<>$80 then
Exit;
end;
Result:=O0C0CCOOQ0;
end;
function OCC0CCOOQ0(O00OCCOOQ0:IntPtr;var OO0OCCOOQ0:ub4;var OQ0OCCOOQ0:ub4):boolean;
var
OC0OCCOOQ0:word;
O0OOCCOOQ0:integer;
OOOOCCOOQ0,OQOOCCOOQ0,OCOOCCOOQ0:PAChar;
O0QOCCOOQ0:ub4;
OOQOCCOOQ0:Cardinal;
begin
if OQCCCCOOQ0<>0 then
OC0OCCOOQ0:=OQCCCCOOQ0
else begin
OC0OCCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OCOCCCOOQ0)).OCCOCQQOQ0;
if O0OQCQOOQ0(OC0OCCOOQ0)then
OC0OCCOOQ0:=0;
end;
Result:=false;
if OCCCQ0QOQ0<>SQLT_CLOB then begin
if OO0OCCOOQ0>O0CQQQOOQ0 then
OO0OCCOOQ0:=O0CQQQOOQ0;
OQ0OCCOOQ0:=OO0OCCOOQ0;
end
else begin
if OC0OCCOOQ0=OCI_UTF16ID then begin
if OO0OCCOOQ0>O0CQQQOOQ0 div 3 then
OO0OCCOOQ0:=O0CQQQOOQ0 div 3;
OQ0OCCOOQ0:=OO0OCCOOQ0*2;
Result:=true;
end
else begin
O0OOCCOOQ0:=GetMaxCharLength(OC0OCCOOQ0);
if O0OOCCOOQ0=1 then begin
if(OC0OCCOOQ0=0)and O0OQCQOOQ0(OOO0CQQOQ0(GetGCHandleTarget(OCOCCCOOQ0)).OCCOCQQOQ0)then
OOQOCCOOQ0:=O0CQQQOOQ0 div 3
else
OOQOCCOOQ0:=O0CQQQOOQ0;
if OO0OCCOOQ0>Cardinal(OOQOCCOOQ0)then
OO0OCCOOQ0:=OOQOCCOOQ0;
OQ0OCCOOQ0:=OO0OCCOOQ0;
end
else
if O0OQCQOOQ0(OC0OCCOOQ0)then begin
O0QOCCOOQ0:=OQ0OCCOOQ0;
OQ0OCCOOQ0:=0;
OO0OCCOOQ0:=0;
OCOOCCOOQ0:=nil;
OOOOCCOOQ0:=PAChar(O00OCCOOQ0);
while(OQ0OCCOOQ0<O0QOCCOOQ0)and(OQ0OCCOOQ0<O0CQQQOOQ0)do begin
OQOOCCOOQ0:=OCQ0CCOOQ0(OOOOCCOOQ0);
if OQOOCCOOQ0=OOOOCCOOQ0 then
break;
Inc(OQ0OCCOOQ0,PtrSubstract(OQOOCCOOQ0,OOOOCCOOQ0));
if(OQ0OCCOOQ0>O0QOCCOOQ0)or(OQ0OCCOOQ0>O0CQQQOOQ0)then begin
Dec(OQ0OCCOOQ0,PtrSubstract(OQOOCCOOQ0,OOOOCCOOQ0));
break;
end;
Inc(OO0OCCOOQ0);
OCOOCCOOQ0:=OOOOCCOOQ0;
OOOOCCOOQ0:=OQOOCCOOQ0;
end;
if(OCOOCCOOQ0<>nil)
and(OCO0CCOOQ0(OCOOCCOOQ0,PtrSubstract(OOOOCCOOQ0,OCOOCCOOQ0)-1)=mbLeadByte)then begin
Dec(OQ0OCCOOQ0,PtrSubstract(OOOOCCOOQ0,OCOOCCOOQ0));
Dec(OO0OCCOOQ0);
end;
end
else begin
O0QOCCOOQ0:=OQ0OCCOOQ0;
OQ0OCCOOQ0:=0;
OO0OCCOOQ0:=0;
OCOOCCOOQ0:=nil;
OOOOCCOOQ0:=PAChar(O00OCCOOQ0);
while(OQ0OCCOOQ0<O0QOCCOOQ0)and(OQ0OCCOOQ0<O0CQQQOOQ0)do begin
OQOOCCOOQ0:=StrNextChar(OOOOCCOOQ0);
if OQOOCCOOQ0=OOOOCCOOQ0 then
break;
Inc(OQ0OCCOOQ0,PtrSubstract(OQOOCCOOQ0,OOOOCCOOQ0));
if(OQ0OCCOOQ0>O0QOCCOOQ0)or(OQ0OCCOOQ0>O0CQQQOOQ0)then begin
Dec(OQ0OCCOOQ0,PtrSubstract(OQOOCCOOQ0,OOOOCCOOQ0));
break;
end;
Inc(OO0OCCOOQ0);
OCOOCCOOQ0:=OOOOCCOOQ0;
OOOOCCOOQ0:=OQOOCCOOQ0;
end;
if(OCOOCCOOQ0<>nil)
and(OCO0CCOOQ0(OCOOCCOOQ0,PtrSubstract(OOOOCCOOQ0,OCOOCCOOQ0)-1)=mbLeadByte)then begin
Dec(OQ0OCCOOQ0,PtrSubstract(OOOOCCOOQ0,OCOOCCOOQ0));
Dec(OO0OCCOOQ0);
end;
end;
end;
end;
end;
var
OQQOCCOOQ0:O0CQQ0COQ0;
OCQOCCOOQ0:OOO0CQQOQ0;
O0COCCOOQ0:pOCIStmt;
OOCOCCOOQ0:OOCCQ0COQ0;
OQCOCCOOQ0:pOCIBind;
OCCOCCOOQ0:string;
O00QQCOOQ0,OO0QQCOOQ0,OQ0QQCOOQ0,OC0QQCOOQ0,O0OQQCOOQ0,OOOQQCOOQ0,OQOQQCOOQ0:ub4;
OCOQQCOOQ0:ub2;
O0QQQCOOQ0:IntPtr;
OOQQQCOOQ0:IntPtr;
OQQQQCOOQ0:Integer;
OCQQQCOOQ0:boolean;
begin
OCQOCCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OCOCCCOOQ0));
OQQOCCOOQ0:=O0CQQ0COQ0(OCQOCCOOQ0.OOCCQOCOQ0);
OCCOCCOOQ0:='begin dbms_lob.write(:1,:2,:3,:4); end;';
if OCCCQ0QOQ0=SQLT_CLOB then begin
OCOQQCOOQ0:=SQLT_AFC;
end
else begin
OCOQQCOOQ0:=SQLT_BIN;
end;
OCOO0QOOQ0(OCIHandleAlloc_(OQQOCCOOQ0.OQQOQOCOQ0,O0COCCOOQ0,OCI_HTYPE_STMT,0,nil),OQQOCCOOQ0.O00CQ0COQ0,O0QCCCOOQ0);
try
OOCOCCOOQ0:=OOCCQ0COQ0(GetGCHandleTarget(O0COCCOOQ0));
OOCOCCOOQ0.OCQ0Q0COQ0:=OCCOCCOOQ0;
OOCOCCOOQ0.OQO0OQQOQ0(O0QCCCOOQ0);
OOQQQCOOQ0:=Self.OQQOQOCOQ0;
OCOO0QOOQ0(OCIBindByPos_(O0COCCOOQ0,OQCOCCOOQ0,O0QCCCOOQ0,
1,@OOQQQCOOQ0,4,OCCCQ0QOQ0,nil,nil,nil,0,nil,OCI_DEFAULT),OQQOCCOOQ0.O00CQ0COQ0,O0QCCCOOQ0);
OCQQQCOOQ0:=false;
OC0QQCOOQ0:=0;
O0OQQCOOQ0:=0;
OQ0QQCOOQ0:=OOQCCCOOQ0;
while OQ0QQCOOQ0>0 do begin
OOOQQCOOQ0:=OQQCCCOOQ0+OC0QQCOOQ0;
O0QQQCOOQ0:=PtrOffset(OCQCCCOOQ0,O0OQQCOOQ0);
OO0QQCOOQ0:=OQ0QQCOOQ0;
OQOQQCOOQ0:=OQ0QQCOOQ0;
OCQQQCOOQ0:=OCC0CCOOQ0(O0QQQCOOQ0,OO0QQCOOQ0,OQOQQCOOQ0);
O00QQCOOQ0:=OO0QQCOOQ0;
OCOO0QOOQ0(OCIBindByPos_(O0COCCOOQ0,OQCOCCOOQ0,O0QCCCOOQ0,
2,@OO0QQCOOQ0,4,SQLT_INT,nil,nil,nil,0,nil,OCI_DEFAULT),OQQOCCOOQ0.O00CQ0COQ0,O0QCCCOOQ0);
OCOO0QOOQ0(OCIBindByPos_(O0COCCOOQ0,OQCOCCOOQ0,O0QCCCOOQ0,
3,@OOOQQCOOQ0,4,SQLT_INT,nil,nil,nil,0,nil,OCI_DEFAULT),OQQOCCOOQ0.O00CQ0COQ0,O0QCCCOOQ0);
OCOO0QOOQ0(OCIBindByPos_(O0COCCOOQ0,OQCOCCOOQ0,O0QCCCOOQ0,
4,O0QQQCOOQ0,OQOQQCOOQ0,OCOQQCOOQ0,nil,nil,nil,0,nil,OCI_DEFAULT),OQQOCCOOQ0.O00CQ0COQ0,O0QCCCOOQ0);
if OQCCCCOOQ0>0 then begin
OQQQQCOOQ0:=Integer(OQCCCCOOQ0);
OCOO0QOOQ0(OCIAttrSet2_(OQCOCCOOQ0,OCI_HTYPE_BIND,OQQQQCOOQ0,0,OCI_ATTR_CHARSET_ID,O0QCCCOOQ0),OQQOCCOOQ0.O00CQ0COQ0,O0QCCCOOQ0);
end;
OCOO0QOOQ0(OCIStmtExecute_(OCOCCCOOQ0,O0COCCOOQ0,O0QCCCOOQ0,1,0,nil,nil,OCI_DEFAULT),OQQOCCOOQ0.O00CQ0COQ0,O0QCCCOOQ0);
Inc(OC0QQCOOQ0,OO0QQCOOQ0);
if O00QQCOOQ0=OO0QQCOOQ0 then
Inc(O0OQQCOOQ0,OQOQQCOOQ0)
else
Inc(O0OQQCOOQ0,OCCCCCOOQ0(O0QQQCOOQ0,OO0QQCOOQ0));
if OCQQQCOOQ0 then
Dec(OQ0QQCOOQ0,OO0QQCOOQ0)
else
Dec(OQ0QQCOOQ0,OQOQQCOOQ0);
end;
finally
OCOO0QOOQ0(OCIHandleFree_(O0COCCOOQ0,OCI_HTYPE_STMT),OQQOCCOOQ0.O00CQ0COQ0,O0QCCCOOQ0);
end;
if OCQQQCOOQ0 then
OOQCCCOOQ0:=OC0QQCOOQ0
else
OOQCCCOOQ0:=O0OQQCOOQ0;
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.O0CQQCOOQ0(OOCQQCOOQ0:pOCISvcCtx;OQCQQCOOQ0:pOCIError;OCCQQCOOQ0:ub4):sword;
var
O00CQCOOQ0:OOO0CQQOQ0;
OO0CQCOOQ0:O0CQQ0COQ0;
OQ0CQCOOQ0:pOCIStmt;
OC0CQCOOQ0:OOCCQ0COQ0;
O0OCQCOOQ0:pOCIBind;
OOOCQCOOQ0:string;
OQOCQCOOQ0:IntPtr;
OCOCQCOOQ0:Integer;
O0QCQCOOQ0:ub4;
begin
OO0C0COOQ0;
O00CQCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OOCQQCOOQ0));
OO0CQCOOQ0:=O0CQQ0COQ0(O00CQCOOQ0.OOCCQOCOQ0);
OCOO0QOOQ0(O0QC0COOQ0(OOCQQCOOQ0,OQCQQCOOQ0,O0QCQCOOQ0),OO0CQCOOQ0.O00CQ0COQ0,OQCQQCOOQ0);
if O0QCQCOOQ0=0 then
begin
Result:=OCI_SUCCESS;
exit;
end;
OOOCQCOOQ0:='begin dbms_lob.trim(:1,:2); end;';
OCOO0QOOQ0(OCIHandleAlloc_(OO0CQCOOQ0.OQQOQOCOQ0,OQ0CQCOOQ0,OCI_HTYPE_STMT,0,nil),OO0CQCOOQ0.O00CQ0COQ0,OQCQQCOOQ0);
OC0CQCOOQ0:=OOCCQ0COQ0(GetGCHandleTarget(OQ0CQCOOQ0));
OC0CQCOOQ0.OCQ0Q0COQ0:=OOOCQCOOQ0;
OC0CQCOOQ0.OQO0OQQOQ0(OQCQQCOOQ0);
OQOCQCOOQ0:=Self.OQQOQOCOQ0;
OCOO0QOOQ0(OCIBindByPos_(OQ0CQCOOQ0,O0OCQCOOQ0,OQCQQCOOQ0,
1,@OQOCQCOOQ0,4,OCCCQ0QOQ0,nil,nil,nil,0,nil,OCI_DEFAULT),OO0CQCOOQ0.O00CQ0COQ0,OQCQQCOOQ0);
OCOO0QOOQ0(OCIBindByPos_(OQ0CQCOOQ0,O0OCQCOOQ0,OQCQQCOOQ0,
2,@OCCQQCOOQ0,4,SQLT_INT,nil,nil,nil,0,nil,OCI_DEFAULT),OO0CQCOOQ0.O00CQ0COQ0,OQCQQCOOQ0);
OCOCQCOOQ0:=Integer(OQO0Q0QOQ0);
OCOO0QOOQ0(OCIAttrSet2_(O0OCQCOOQ0,OCI_HTYPE_BIND,OCOCQCOOQ0,0,OCI_ATTR_CHARSET_FORM,OQCQQCOOQ0),OO0CQCOOQ0.O00CQ0COQ0,OQCQQCOOQ0);
OCOO0QOOQ0(OCIStmtExecute_(OOCQQCOOQ0,OQ0CQCOOQ0,OQCQQCOOQ0,1,0,nil,nil,OCI_DEFAULT),OO0CQCOOQ0.O00CQ0COQ0,OQCQQCOOQ0);
OCOO0QOOQ0(OCIHandleFree_(OQ0CQCOOQ0,OCI_HTYPE_STMT),OO0CQCOOQ0.O00CQ0COQ0,OQCQQCOOQ0);
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.OOQCQCOOQ0(OQQCQCOOQ0:pOCISvcCtx;OCQCQCOOQ0:pOCIError;O0CCQCOOQ0:ub2;OOCCQCOOQ0:ub1;OQCCQCOOQ0:ub1;OCCCQCOOQ0:tbool;O000QCOOQ0:OCIDuration):sword;
var
OO00QCOOQ0:OOO0CQQOQ0;
OQ00QCOOQ0:OQ0OOQOOQ0;
OC00QCOOQ0:TBytes;
begin
SetLength(OQCCQ0QOQ0,$28);
OQCCQ0QOQ0[1]:=$54;
OO00QCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OQQCQCOOQ0));
OQ00QCOOQ0:=OQ0OOQOOQ0.Create(OO00QCOOQ0,$110,OQCCQ0QOQ0,0,Length(OQCCQ0QOQ0));
try
if OQCCQCOOQ0=OCI_TEMP_CLOB then begin
OCCCQ0QOQ0:=SQLT_CLOB;
if OOCCQCOOQ0=0 then
OQO0Q0QOQ0:=1
else
OQO0Q0QOQ0:=OOCCQCOOQ0;
if OQO0Q0QOQ0=2 then
O0CCQCOOQ0:=OO00QCOOQ0.O0OQO0QOQ0
else
O0CCQCOOQ0:=OO00QCOOQ0.OOQQO0QOQ0;
end
else begin
OCCCQ0QOQ0:=SQLT_BLOB;
OQO0Q0QOQ0:=0;
O0CCQCOOQ0:=1;
end;
if OCCCQCOOQ0<>0 then
O0O0Q0QOQ0:=True
else
O0O0Q0QOQ0:=False;
OC00Q0QOQ0:=O000QCOOQ0;
OQ00QCOOQ0.O0CC0QOOQ0:=OC00Q0QOQ0;
OQ00QCOOQ0.OOCC0QOOQ0:=True;
OQ00QCOOQ0.OCQC0QOOQ0:=OQO0Q0QOQ0;
if OCCCQ0QOQ0=SQLT_BLOB then
OQ00QCOOQ0.OQQC0QOOQ0:=$71
else
OQ00QCOOQ0.OQQC0QOOQ0:=$70;
OQ00QCOOQ0.OOQC0QOOQ0:=OC00Q0QOQ0;
OQ00QCOOQ0.OQCC0QOOQ0:=True;
OQ00QCOOQ0.O0QC0QOOQ0:=O0CCQCOOQ0;
if O0O0Q0QOQ0 then begin
SetLength(OC00QCOOQ0,1);
OC00QCOOQ0[0]:=1;
OQ00QCOOQ0.OCCC0QOOQ0:=OC00QCOOQ0;
end;
OO00QCOOQ0.OCCO0OQOQ0;
OQ00QCOOQ0.OQCQ0QOOQ0;
Result:=OQ00QCOOQ0.O00C0QOOQ0(OCQCQCOOQ0);
OQ00Q0QOQ0:=True;
finally
OQ00QCOOQ0.Free;
end;
end;
function OOCCQ0QOQ0.O0O0QCOOQ0(OOO0QCOOQ0:pOCISvcCtx;OQO0QCOOQ0:pOCIError;OCO0QCOOQ0:ub1;O0Q0QCOOQ0:ub1;OOQ0QCOOQ0:tbool;OQQ0QCOOQ0:OCIDuration):sword;
var
OCQ0QCOOQ0:OOO0CQQOQ0;
O0C0QCOOQ0:O0CQQ0COQ0;
OOC0QCOOQ0:smallint;
OQC0QCOOQ0:string;
OCC0QCOOQ0:OOCCQ0COQ0;
O00OQCOOQ0:string;
OO0OQCOOQ0:OOQ0O0QOQ0;
OQ0OQCOOQ0:IntPtr;
OC0OQCOOQ0:pOCIBind;
begin
OCQ0QCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OOO0QCOOQ0));
O0C0QCOOQ0:=O0CQQ0COQ0(OCQ0QCOOQ0.OOCCQOCOQ0);
if OOQ0QCOOQ0<>0 then begin
O0O0Q0QOQ0:=True;
O00OQCOOQ0:='true';
end
else begin
O0O0Q0QOQ0:=False;
O00OQCOOQ0:='false';
end;
OC00Q0QOQ0:=OQQ0QCOOQ0;
if O0Q0QCOOQ0=OCI_TEMP_CLOB then begin
OOC0QCOOQ0:=SQLT_CLOB;
OQC0QCOOQ0:='declare lob1 CLOB; begin dbms_lob.CreateTemporary (lob1, '+O00OQCOOQ0+'); :1 := lob1; end;';
end
else begin
OOC0QCOOQ0:=SQLT_BLOB;
OQC0QCOOQ0:='declare lob1 BLOB; begin dbms_lob.CreateTemporary (lob1, '+O00OQCOOQ0+'); :1 := lob1; end;';
end;
OCC0QCOOQ0:=OOCCQ0COQ0.Create(O0C0QCOOQ0);
try
OCC0QCOOQ0.OCQ0Q0COQ0:=OQC0QCOOQ0;
OCC0QCOOQ0.OOC0Q0COQ0:=OCI_STMT_BEGIN;
OO0OQCOOQ0:=OOQ0O0QOQ0.Create(OCC0QCOOQ0);
OCC0QCOOQ0.OQO0Q0COQ0.Add(OO0OQCOOQ0);
OO0OQCOOQ0.OOCOQOCOQ0:='1';
if OCO0QCOOQ0=0 then
OO0OQCOOQ0.O0OCO0COQ0:=1
else
OO0OQCOOQ0.O0OCO0COQ0:=OCO0QCOOQ0;
OQ0OQCOOQ0:=Self.OQQOQOCOQ0;
OCOO0QOOQ0(OCC0QCOOQ0.O0C00QQOQ0(OC0OQCOOQ0,OQO0QCOOQ0,1,@OQ0OQCOOQ0,4,OOC0QCOOQ0,nil,nil,0,nil),O0C0QCOOQ0.O00CQ0COQ0,OQO0QCOOQ0);
OCC0QCOOQ0.OCCCQ0COQ0:=OOO0CQQOQ0(GetGCHandleTarget(OOO0QCOOQ0));
OCOO0QOOQ0(OCC0QCOOQ0.OQQQCQQOQ0(OQO0QCOOQ0,1,0,OCI_DEFAULT),O0C0QCOOQ0.O00CQ0COQ0,OQO0QCOOQ0);
finally
OCC0QCOOQ0.Free;
end;
OQ00Q0QOQ0:=True;
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.O0OOQCOOQ0(OOOOQCOOQ0:pOCISvcCtx;OQOOQCOOQ0:pOCIError):sword;
var
OCOOQCOOQ0:OQ0OOQOOQ0;
O0QOQCOOQ0:OOO0CQQOQ0;
begin
if not OQ00Q0QOQ0 then begin
Result:=OCI_ERROR;
Exit;
end;
O0QOQCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OOOOQCOOQ0));
if O0QOQCOOQ0.OQQ00OQOQ0 then
O0QOQCOOQ0.OQC00OQOQ0(OQCCQ0QOQ0)
else begin
OCOOQCOOQ0:=OQ0OOQOOQ0.Create(O0QOQCOOQ0,$111,OQCCQ0QOQ0,0,Length(OQCCQ0QOQ0));
try
OCOOQCOOQ0.OQCQ0QOOQ0;
OCOOQCOOQ0.O00C0QOOQ0(OQOOQCOOQ0);
finally
OQ00Q0QOQ0:=False;
OCOOQCOOQ0.Free;
end;
end;
SetLength(OQCCQ0QOQ0,0);
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.OOQOQCOOQ0(OQQOQCOOQ0:pOCISvcCtx;OCQOQCOOQ0:pOCIError):sword;
var
O0COQCOOQ0:OOO0CQQOQ0;
OOCOQCOOQ0:O0CQQ0COQ0;
OQCOQCOOQ0:string;
OCCOQCOOQ0:OOCCQ0COQ0;
O00QOQOOQ0:OOQ0O0QOQ0;
OO0QOQOOQ0:IntPtr;
OQ0QOQOOQ0:pOCIBind;
OC0QOQOOQ0:Integer;
begin
if not OQ00Q0QOQ0 then begin
Result:=OCI_ERROR;
Exit;
end;
if OC00Q0QOQ0=OCI_DURATION_SESSION then begin
Result:=OCI_SUCCESS;
Exit;
end;
O0COQCOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OQQOQCOOQ0));
OOCOQCOOQ0:=O0CQQ0COQ0(O0COQCOOQ0.OOCCQOCOQ0);
OQCOQCOOQ0:='begin dbms_lob.freetemporary(:1); end;';
OCCOQCOOQ0:=OOCCQ0COQ0.Create(OOCOQCOOQ0);
try
OCCOQCOOQ0.OCQ0Q0COQ0:=OQCOQCOOQ0;
OCCOQCOOQ0.OOC0Q0COQ0:=OCI_STMT_BEGIN;
O00QOQOOQ0:=OOQ0O0QOQ0.Create(OCCOQCOOQ0);
OCCOQCOOQ0.OQO0Q0COQ0.Add(O00QOQOOQ0);
O00QOQOOQ0.OOCOQOCOQ0:='1';
OO0QOQOOQ0:=Self.OQQOQOCOQ0;
OCOO0QOOQ0(OCCOQCOOQ0.O0C00QQOQ0(OQ0QOQOOQ0,OCQOQCOOQ0,1,@OO0QOQOOQ0,4,OCCCQ0QOQ0,nil,nil,0,nil),OOCOQCOOQ0.O00CQ0COQ0,OCQOQCOOQ0);
OC0QOQOOQ0:=Integer(OQO0Q0QOQ0);
OCOO0QOOQ0(OCIAttrSet2_(OQ0QOQOOQ0,OCI_HTYPE_BIND,OC0QOQOOQ0,0,OCI_ATTR_CHARSET_FORM,OCQOQCOOQ0),OOCOQCOOQ0.O00CQ0COQ0,OCQOQCOOQ0);
OCCOQCOOQ0.OCCCQ0COQ0:=OOO0CQQOQ0(GetGCHandleTarget(OQQOQCOOQ0));
OCOO0QOOQ0(OCCOQCOOQ0.OQQQCQQOQ0(OCQOQCOOQ0,1,0,OCI_DEFAULT),OOCOQCOOQ0.O00CQ0COQ0,OCQOQCOOQ0);
finally
OQ00Q0QOQ0:=false;
OCCOQCOOQ0.Free;
end;
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.O0OQOQOOQ0(OOOQOQOOQ0:pOCIEnv;OQOQOQOOQ0:pOCIError;var OCOQOQOOQ0:LongBool):sword;
begin
OCOQOQOOQ0:=OQ00Q0QOQ0;
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.O0QQOQOOQ0(OOQQOQOOQ0:pOCISvcCtx;OQQQOQOOQ0:pOCIError;var OCQQOQOOQ0:tbool):sword;
var
O0CQOQOOQ0:OOO0CQQOQ0;
OOCQOQOOQ0:OQ0OOQOOQ0;
begin
if(OCCCQ0QOQ0<>SQLT_BFILEE)and(OCCCQ0QOQ0<>SQLT_CFILEE)then begin
Result:=OCI_ERROR;
Exit;
end;
SetLength(OQCCQ0QOQ0,$56);
OQCCQ0QOQ0[1]:=$54;
O0CQOQOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OOQQOQOOQ0));
OOCQOQOOQ0:=OQ0OOQOOQ0.Create(O0CQOQOOQ0,$800,OQCCQ0QOQ0,0,Length(OQCCQ0QOQ0));
try
OOCQOQOOQ0.OQCC0QOOQ0:=true;
OOCQOQOOQ0.OQCQ0QOOQ0;
Result:=OOCQOQOOQ0.O00C0QOOQ0(OQQQOQOOQ0);
OCQQOQOOQ0:=OOCQOQOOQ0.OCQOOQOOQ0;
finally
OOCQOQOOQ0.Free;
end;
end;
function OOCCQ0QOQ0.OQCQOQOOQ0(OCCQOQOOQ0:pOCISvcCtx;O00COQOOQ0:pOCIError;var OO0COQOOQ0:tbool):sword;
begin
if(OCCCQ0QOQ0<>SQLT_BFILEE)and(OCCCQ0QOQ0<>SQLT_CFILEE)then begin
Result:=OCI_ERROR;
Exit;
end;
if OCQ0Q0QOQ0 then
OO0COQOOQ0:=1
else
OO0COQOOQ0:=0;
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.OQ0COQOOQ0(OC0COQOOQ0:pOCISvcCtx;O0OCOQOOQ0:pOCIError):sword;
var
OOOCOQOOQ0:OOO0CQQOQ0;
OQOCOQOOQ0:OQ0OOQOOQ0;
begin
if(OCCCQ0QOQ0<>SQLT_BFILEE)and(OCCCQ0QOQ0<>SQLT_CFILEE)then begin
Result:=OCI_ERROR;
Exit;
end;
OOOCOQOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(OC0COQOOQ0));
OQOCOQOOQ0:=OQ0OOQOOQ0.Create(OOOCOQOOQ0,256,OQCCQ0QOQ0,0,Length(OQCCQ0QOQ0));
try
OQOCOQOOQ0.OOCC0QOOQ0:=true;
OQOCOQOOQ0.O0CC0QOOQ0:=11;
OQOCOQOOQ0.OQCQ0QOOQ0;
Result:=OQOCOQOOQ0.O00C0QOOQ0(O0OCOQOOQ0);
if Result=OCI_SUCCESS then
OCQ0Q0QOQ0:=True
else
OCQ0Q0QOQ0:=False;
finally
OQOCOQOOQ0.Free;
end;
end;
function OOCCQ0QOQ0.OCOCOQOOQ0(O0QCOQOOQ0:pOCISvcCtx;OOQCOQOOQ0:pOCIError):sword;
var
OQQCOQOOQ0:OOO0CQQOQ0;
OCQCOQOOQ0:OQ0OOQOOQ0;
begin
if(OCCCQ0QOQ0<>SQLT_BFILEE)and(OCCCQ0QOQ0<>SQLT_CFILEE)then begin
Result:=OCI_ERROR;
Exit;
end;
OQQCOQOOQ0:=OOO0CQQOQ0(GetGCHandleTarget(O0QCOQOOQ0));
OCQCOQOOQ0:=OQ0OOQOOQ0.Create(OQQCOQOOQ0,512,OQCCQ0QOQ0,0,Length(OQCCQ0QOQ0));
try
OCQCOQOOQ0.OQCQ0QOOQ0;
Result:=OCQCOQOOQ0.O00C0QOOQ0(OOQCOQOOQ0);
finally
OCQ0Q0QOQ0:=False;
OCQCOQOOQ0.Free;
end;
end;
function OOCCQ0QOQ0.O0CCOQOOQ0(OOCCOQOOQ0:IntPtr;OQCCOQOOQ0:pub2;OCCCOQOOQ0:IntPtr;O000OQOOQ0:pub2):sword;
var
OO00OQOOQ0:ub2;
OQ00OQOOQ0:ub2;
OC00OQOOQ0:ub2;
begin
if(OCCCQ0QOQ0<>SQLT_BFILEE)and(OCCCQ0QOQ0<>SQLT_CFILEE)then begin
Result:=OCI_ERROR;
Exit;
end;
OQ00OQOOQ0:=ub2(OQCCQ0QOQ0[16])shl 8+OQCCQ0QOQ0[17];
if(OOCCOQOOQ0<>nil)and(OQCCOQOOQ0<>nil)then begin
OO00OQOOQ0:=OQCCOQOOQ0^;
OQCCOQOOQ0^:=OQ00OQOOQ0;
if OQ00OQOOQ0>OO00OQOOQ0 then begin
Result:=OCI_ERROR;
Exit;
end
else if OQ00OQOOQ0>0 then
Move(OQCCQ0QOQ0[18],OOCCOQOOQ0^,OQ00OQOOQ0);
end;
OC00OQOOQ0:=ub2(OQCCQ0QOQ0[18+OQ00OQOOQ0])shl 8+OQCCQ0QOQ0[19+OQ00OQOOQ0];
if(OCCCOQOOQ0<>nil)and(O000OQOOQ0<>nil)then begin
OO00OQOOQ0:=O000OQOOQ0^;
O000OQOOQ0^:=OC00OQOOQ0;
if OC00OQOOQ0>OO00OQOOQ0 then begin
Result:=OCI_ERROR;
Exit;
end
else if OC00OQOOQ0>0 then
Move(OQCCQ0QOQ0[20+OQ00OQOOQ0],OCCCOQOOQ0^,OC00OQOOQ0);
end;
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.O0O0OQOOQ0(OOO0OQOOQ0:IntPtr;OQO0OQOOQ0:ub2;OCO0OQOOQ0:IntPtr;O0Q0OQOOQ0:ub2):sword;
var
OOQ0OQOOQ0:IntPtr;
OQQ0OQOOQ0:ub2;
OCQ0OQOOQ0:IntPtr;
O0C0OQOOQ0:ub2;
OOC0OQOOQ0:TBytes;
begin
if(OCCCQ0QOQ0<>SQLT_BFILEE)and(OCCCQ0QOQ0<>SQLT_CFILEE)then begin
Result:=OCI_ERROR;
Exit;
end;
if Length(OQCCQ0QOQ0)=0 then begin
SetLength(OQCCQ0QOQ0,20);
		OQCCQ0QOQ0[0]:=Length(OQCCQ0QOQ0)shr 8;
		OQCCQ0QOQ0[1]:=Length(OQCCQ0QOQ0)and$FF;
		OQCCQ0QOQ0[3]:=1;
		OQCCQ0QOQ0[4]:=8;
		OQCCQ0QOQ0[5]:=8;
		OQCCQ0QOQ0[9]:=1;
end;
OQQ0OQOOQ0:=ub2(OQCCQ0QOQ0[16])shl 8+OQCCQ0QOQ0[17];
OOQ0OQOOQ0:=@OQCCQ0QOQ0[18];
O0C0OQOOQ0:=ub2(OQCCQ0QOQ0[18+OQQ0OQOOQ0])shl 8+OQCCQ0QOQ0[19+OQQ0OQOOQ0];
OCQ0OQOOQ0:=@OQCCQ0QOQ0[20+OQQ0OQOOQ0];
if OOO0OQOOQ0<>nil then begin
OQQ0OQOOQ0:=OQO0OQOOQ0;
OOQ0OQOOQ0:=OOO0OQOOQ0;
end;
if OCO0OQOOQ0<>nil then begin
O0C0OQOOQ0:=O0Q0OQOOQ0;
OCQ0OQOOQ0:=OCO0OQOOQ0;
end;
SetLength(OOC0OQOOQ0,20+OQQ0OQOOQ0+O0C0OQOOQ0);
Move(OQCCQ0QOQ0[0],OOC0OQOOQ0[0],15);
OOC0OQOOQ0[16]:=OQQ0OQOOQ0 shr 8;
OOC0OQOOQ0[17]:=OQQ0OQOOQ0 and$FF;
if OQQ0OQOOQ0>0 then
Move(OOQ0OQOOQ0^,OOC0OQOOQ0[18],OQQ0OQOOQ0);
OOC0OQOOQ0[18+OQQ0OQOOQ0]:=O0C0OQOOQ0 shr 8;
OOC0OQOOQ0[19+OQQ0OQOOQ0]:=O0C0OQOOQ0 and$FF;
if O0C0OQOOQ0>0 then
Move(OCQ0OQOOQ0^,OOC0OQOOQ0[20+OQQ0OQOOQ0],O0C0OQOOQ0);
	OOC0OQOOQ0[0]:=(Length(OOC0OQOOQ0)-2)shr 8;
	OOC0OQOOQ0[1]:=(Length(OOC0OQOOQ0)-2)and$FF;
OQCCQ0QOQ0:=OOC0OQOOQ0;
Result:=OCI_SUCCESS;
end;
function OOCCQ0QOQ0.OO0OQOCOQ0(OQ0OQOCOQ0:IntPtr;OC0OQOCOQ0:ub4;O0OOQOCOQ0:ub4;OOOOQOCOQ0:pOCIError):sword;
begin
Result:=OCI_SUCCESS;
case O0OOQOCOQ0 of
OCI_ATTR_LOBEMPTY:
if OQ0OQOCOQ0=nil then
O000Q0QOQ0:=0
else
O000Q0QOQ0:=ub4(Marshal.ReadInt32(OQ0OQOCOQ0));
else
Result:=inherited OO0OQOCOQ0(OQ0OQOCOQ0,OC0OQOCOQ0,O0OOQOCOQ0,OOOOQOCOQ0);
end;
end;
constructor OQ0OOQOOQ0.Create(O0QQ0QOOQ0:OOO0CQQOQ0;OOQQ0QOOQ0:Integer;const OQQQ0QOOQ0:TBytes;OCQQ0QOOQ0:Integer;O0CQ0QOOQ0:Integer);
begin
inherited Create;
O0OOOQOOQ0:=O0QQ0QOOQ0;
OC0OOQOOQ0:=O0QQ0QOOQ0.O0Q0CQQOQ0;
OOCOOQOOQ0:=OOQQ0QOOQ0;
OCCOOQOOQ0:=OQQQ0QOOQ0;
OO0Q0QOOQ0:=OCQQ0QOOQ0;
O00Q0QOOQ0:=O0CQ0QOOQ0;
O0QOOQOOQ0:=nil;
OQQOOQOOQ0:=0;
OQ0Q0QOOQ0:=0;
OOQOOQOOQ0:=0;
OQOOOQOOQ0:=false;
OOOOOQOOQ0:=false;
OCOOOQOOQ0:=0;
O0COOQOOQ0:=0;
OCQOOQOOQ0:=0;
end;
function OQ0OOQOOQ0.OQOQ0QOOQ0(OOOQOCQOQ0:pOCIError):sword;
begin
Result:=O0OOOQOOQ0.OCO0COQOQ0(OOOQOCQOQ0);
end;
procedure OQ0OOQOOQ0.OOCQ0QOOQ0;
begin
OC0OOQOOQ0.OOCOCQCOQ0(byte(OQQC0OCOQ0));
OC0OOQOOQ0.O0OCQQCOQ0(OC0Q0QOOQ0,O0OQ0QOOQ0);
end;
procedure OQ0OOQOOQ0.OQCQ0QOOQ0;
var
OCCQ0QOOQ0:Integer;
begin
OC0OOQOOQ0.OOCOCQCOQ0(OO0C0OCOQ0);
OC0OOQOOQ0.OOCOCQCOQ0(OCOO0OCOQ0);
OC0OOQOOQ0.OOCOCQCOQ0(0);
if(OCCOOQOOQ0<>nil)then begin
OC0OOQOOQ0.O0QQQQCOQ0(O00Q0QOOQ0>0);
OC0OOQOOQ0.OC0QQQCOQ0(O00Q0QOOQ0);
end
else begin
OC0OOQOOQ0.O0QQQQCOQ0(false);
OC0OOQOOQ0.OOCOCQCOQ0(0);
end;
if(O0QOOQOOQ0<>nil)then begin
OC0OOQOOQ0.O0QQQQCOQ0(Length(O0QOOQOOQ0)>0);
OQQOOQOOQ0:=Length(O0QOOQOOQ0);
end
else
OC0OOQOOQ0.O0QQQQCOQ0(false);
OC0OOQOOQ0.OC0QQQCOQ0(OQQOOQOOQ0);
if O0OOOQOOQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
OC0OOQOOQ0.OC0QQQCOQ0(0);
OC0OOQOOQ0.OC0QQQCOQ0(0);
end
else begin
OC0OOQOOQ0.OOOQQQCOQ0(ub4(OQ0Q0QOOQ0));
OC0OOQOOQ0.OC0QQQCOQ0(OOQOOQOOQ0);
end;
if OCOOOQOOQ0<>0 then
OC0OOQOOQ0.OOO0QQCOQ0
else
OC0OOQOOQ0.OQO0QQCOQ0;
if O0OOOQOOQ0.OCQ0CQQOQ0<OQC0COCOQ0 then
OC0OOQOOQ0.O0QQQQCOQ0(OQOOOQOOQ0)
else
OC0OOQOOQ0.OQO0QQCOQ0;
if OOOOOQOOQ0 then
OC0OOQOOQ0.OOO0QQCOQ0
else
OC0OOQOOQ0.OQO0QQCOQ0;
OC0OOQOOQ0.OC0QQQCOQ0(OOCOOQOOQ0);
if Length(OQCOOQOOQ0)>0 then
OC0OOQOOQ0.OOO0QQCOQ0
else
OC0OOQOOQ0.OQO0QQCOQ0;
OC0OOQOOQ0.OC0QQQCOQ0(Length(OQCOOQOOQ0));
if O0OOOQOOQ0.OCQ0CQQOQ0>=OQC0COCOQ0 then begin
OC0OOQOOQ0.OOOQQQCOQ0(ub4(OQ0Q0QOOQ0));
OC0OOQOOQ0.OC0QQQCOQ0(OOQOOQOOQ0);
OC0OOQOOQ0.O0QQQQCOQ0(OQOOOQOOQ0);
if O0OOOQOOQ0.OCQ0CQQOQ0>=OCC0COCOQ0 then
OC0OOQOOQ0.OCO0QQCOQ0(6);
end;
if OCCOOQOOQ0<>nil then
OC0OOQOOQ0.OOQ0CQCOQ0(@OCCOOQOOQ0[OO0Q0QOOQ0],O00Q0QOOQ0);
if O0QOOQOOQ0<>nil then
OC0OOQOOQ0.O0CCQQCOQ0(O0QOOQOOQ0);
if(OCOOOQOOQ0<>0)then
OC0OOQOOQ0.OC0QQQCOQ0(OCOOOQOOQ0);
if OQOOOQOOQ0 and(O0OOOQOOQ0.OCQ0CQQOQ0<OQC0COCOQ0)then
OC0OOQOOQ0.OOOQQQCOQ0(ub4(O0COOQOOQ0));
for OCCQ0QOOQ0:=0 to Length(OQCOOQOOQ0)-1 do
OC0OOQOOQ0.OOOQQQCOQ0(OQCOOQOOQ0[OCCQ0QOOQ0]);
if OQOOOQOOQ0 and(O0OOOQOOQ0.OCQ0CQQOQ0>=OQC0COCOQ0)then
OC0OOQOOQ0.OOOQQQCOQ0(ub4(O0COOQOOQ0));
end;
function OQ0OOQOOQ0.O00C0QOOQ0(OO0C0QOOQ0:pOCIError):sword;
var
OQ0C0QOOQ0:byte;
OC0C0QOOQ0:boolean;
O0OC0QOOQ0:sb4;
begin
Result:=OCI_SUCCESS;
O0OC0QOOQ0:=O0OQ0QOOQ0;
O0OQ0QOOQ0:=0;
try
OC0C0QOOQ0:=false;
while not OC0C0QOOQ0 do begin
OQ0C0QOOQ0:=OC0OOQOOQ0.OOC0QQCOQ0;
case OQ0C0QOOQ0 of
OQQC0OCOQ0:begin
if OC0Q0QOOQ0<>nil then
O0OQ0QOOQ0:=OC0OOQOOQ0.O0OQOOCOQ0(OC0Q0QOOQ0,O0OC0QOOQ0)
else begin
OOOQ0QOOQ0:=OC0OOQOOQ0.O0OQOOCOQ0;
O0OQ0QOOQ0:=Length(OOOQ0QOOQ0);
end;
end;
OOOC0OCOQ0:begin
if OCCOOQOOQ0<>nil then
OC0OOQOOQ0.O00OCQCOQ0(@OCCOOQOOQ0[OO0Q0QOOQ0],O00Q0QOOQ0);
if O0QOOQOOQ0<>nil then
OC0OOQOOQ0.O00OCQCOQ0(@O0QOOQOOQ0[0],Length(O0QOOQOOQ0));
if OCOOOQOOQ0<>0 then
OCOOOQOOQ0:=OC0OOQOOQ0.OCC0QQCOQ0;
if OQOOOQOOQ0 then
O0COOQOOQ0:=OC0OOQOOQ0.O00OQQCOQ0;
if OOOOOQOOQ0 then
OCQOOQOOQ0:=OC0OOQOOQ0.OCC0QQCOQ0;
end;
OQ0C0OCOQ0:begin
OQOQ0QOOQ0(OO0C0QOOQ0);
Exit;
end;
OQOC0OCOQ0:begin
OC0C0QOOQ0:=True;
end;
else begin
OQ0QCQOOQ0(1);
end;
end;
end;
except
on E:Exception do
Result:=O0OOOQOOQ0.OOOCQOQOQ0(E,OO0C0QOOQ0);
end;
end;
procedure OQ0OOQOOQ0.OOOC0QOOQ0(OQOC0QOOQ0:IntPtr;OCOC0QOOQ0:integer);
begin
self.OC0Q0QOOQ0:=OQOC0QOOQ0;
self.O0OQ0QOOQ0:=OCOC0QOOQ0;
self.OOOQ0QOOQ0:=nil;
end;
class function OQ000QOOQ0.OC000QOOQ0(const O0O00QOOQ0:TBytes):Single;
var
OOO00QOOQ0:TBytes;
begin
SetLength(OOO00QOOQ0,4);
if O0O00QOOQ0[0]and$80<>0 then begin
OOO00QOOQ0[3]:=O0O00QOOQ0[0]and$7F;
OOO00QOOQ0[2]:=O0O00QOOQ0[1];
OOO00QOOQ0[1]:=O0O00QOOQ0[2];
OOO00QOOQ0[0]:=O0O00QOOQ0[3];
end
else begin
OOO00QOOQ0[3]:=not O0O00QOOQ0[0];
OOO00QOOQ0[2]:=not O0O00QOOQ0[1];
OOO00QOOQ0[1]:=not O0O00QOOQ0[2];
OOO00QOOQ0[0]:=not O0O00QOOQ0[3];
end;
Result:=BitConverter.ToSingle(OOO00QOOQ0,0);
end;
class function OQ000QOOQ0.OQO00QOOQ0(OCO00QOOQ0:Single):TBytes;
var
O0Q00QOOQ0:TBytes;
begin
SetLength(Result,4);
O0Q00QOOQ0:=BitConverter.GetBytes(OCO00QOOQ0);
if O0Q00QOOQ0[3]and$80=0 then begin
Result[0]:=O0Q00QOOQ0[3]or$80;
Result[1]:=O0Q00QOOQ0[2];
Result[2]:=O0Q00QOOQ0[1];
Result[3]:=O0Q00QOOQ0[0];
end
else begin
Result[0]:=not O0Q00QOOQ0[3];
Result[1]:=not O0Q00QOOQ0[2];
Result[2]:=not O0Q00QOOQ0[1];
Result[3]:=not O0Q00QOOQ0[0];
end;
end;
class function OOQ00QOOQ0.OQQ00QOOQ0(const OCQ00QOOQ0:TBytes):Double;
var
O0C00QOOQ0:TBytes;
begin
SetLength(O0C00QOOQ0,8);
if OCQ00QOOQ0[0]and$80<>0 then begin
O0C00QOOQ0[7]:=OCQ00QOOQ0[0]and$7F;
O0C00QOOQ0[6]:=OCQ00QOOQ0[1];
O0C00QOOQ0[5]:=OCQ00QOOQ0[2];
O0C00QOOQ0[4]:=OCQ00QOOQ0[3];
O0C00QOOQ0[3]:=OCQ00QOOQ0[4];
O0C00QOOQ0[2]:=OCQ00QOOQ0[5];
O0C00QOOQ0[1]:=OCQ00QOOQ0[6];
O0C00QOOQ0[0]:=OCQ00QOOQ0[7];
end
else begin
O0C00QOOQ0[7]:=not OCQ00QOOQ0[0];
O0C00QOOQ0[6]:=not OCQ00QOOQ0[1];
O0C00QOOQ0[5]:=not OCQ00QOOQ0[2];
O0C00QOOQ0[4]:=not OCQ00QOOQ0[3];
O0C00QOOQ0[3]:=not OCQ00QOOQ0[4];
O0C00QOOQ0[2]:=not OCQ00QOOQ0[5];
O0C00QOOQ0[1]:=not OCQ00QOOQ0[6];
O0C00QOOQ0[0]:=not OCQ00QOOQ0[7];
end;
Result:=BitConverter.ToDouble(O0C00QOOQ0,0);
end;
class function OOQ00QOOQ0.OOC00QOOQ0(OQC00QOOQ0:Double):TBytes;
var
OCC00QOOQ0:TBytes;
begin
SetLength(Result,8);
OCC00QOOQ0:=BitConverter.GetBytes(OQC00QOOQ0);
if OCC00QOOQ0[7]and$80=0 then begin
Result[0]:=OCC00QOOQ0[7]or$80;
Result[1]:=OCC00QOOQ0[6];
Result[2]:=OCC00QOOQ0[5];
Result[3]:=OCC00QOOQ0[4];
Result[4]:=OCC00QOOQ0[3];
Result[5]:=OCC00QOOQ0[2];
Result[6]:=OCC00QOOQ0[1];
Result[7]:=OCC00QOOQ0[0];
end
else begin
Result[0]:=not OCC00QOOQ0[7];
Result[1]:=not OCC00QOOQ0[6];
Result[2]:=not OCC00QOOQ0[5];
Result[3]:=not OCC00QOOQ0[4];
Result[4]:=not OCC00QOOQ0[3];
Result[5]:=not OCC00QOOQ0[2];
Result[6]:=not OCC00QOOQ0[1];
Result[7]:=not OCC00QOOQ0[0];
end;
end;
function OOO0CQQOQ0.O0QQQQQOQ0:word;
begin
if OOCOCQQOQ0=0 then
OOCOCQQOQ0:=OQCCQOQOQ0(OO00QOQOQ0,OOQQO0QOQ0);
Result:=OOCOCQQOQ0;
end;
function OOO0CQQOQ0.OOQQQQQOQ0:Encoding;
begin
if OQCOCQQOQ0=nil then
OQCOCQQOQ0:=OQ00QOQOQ0(O0QQQQQOQ0);
Result:=OQCOCQQOQ0;
end;
function OOO0CQQOQ0.OQQQQQQOQ0:word;
begin
if OCCOCQQOQ0=0 then
OCCOCQQOQ0:=O0QQQQQOQ0;
Result:=OCCOCQQOQ0;
end;
function OOO0CQQOQ0.OCQQQQQOQ0:Encoding;
begin
if O00QQQQOQ0=nil then
O00QQQQOQ0:=OQ00QOQOQ0(OQQQQQQOQ0);
Result:=O00QQQQOQ0;
end;
function OOO0CQQOQ0.O0CQQQQOQ0:Encoding;
begin
if OQQOCQQOQ0=nil then
OQQOCQQOQ0:=OQ00QOQOQ0(OOQOCQQOQ0);
Result:=OQQOCQQOQ0;
end;
function OOO0CQQOQ0.OOCQQQQOQ0:Encoding;
begin
if O0COCQQOQ0=nil then
if OCQ0CQQOQ0>=OQ0OCOCOQ0 then
O0COCQQOQ0:=Encoding.BigEndianUnicode
else if OCQ0CQQOQ0>=OOC0COCOQ0 then
O0COCQQOQ0:=OQ00QOQOQ0(OCQOCQQOQ0)
else
O0COCQQOQ0:=OQ00QOQOQ0(OCCOCQQOQ0);
Result:=O0COCQQOQ0;
end;
function OOO0CQQOQ0.O0CCQOQOQ0(OOCCQOQOQ0:word):Integer;
begin
case(OOCCQOQOQ0)of
1:
Result:=20127;
4:
Result:=437;
5:
Result:=37;
6:
Result:=500;
7:
Result:=1140;
8:
Result:=20285;
9:
Result:=1146;
10:
Result:=850;
11:
Result:=20106;
15:
Result:=20107;
$1b:
Result:=1148;
$1c:
Result:=858;
$1f:
Result:=28591;
$20:
Result:=28592;
$21:
Result:=28593;
$22:
Result:=28594;
$23:
Result:=28595;
$24:
Result:=28596;
$25:
Result:=28597;
$26:
Result:=38598;
$27:
Result:=28599;
$29:
Result:=874;
$2d:
Result:=1258;
$2e:
Result:=28605;
$2f:
Result:=28603;
$33:
Result:=21866;
70:
Result:=20420;
90:
Result:=37;
$5b:
Result:=500;
$5c:
Result:=20424;
$5d:
Result:=1026;
$5e:
Result:=20871;
$5f:
Result:=20284;
$61:
Result:=1140;
$62:
Result:=1145;
$63:
Result:=1148;
$65:
Result:=20924;
150:
Result:=852;
$98:
Result:=866;
$9a:
Result:=862;
$9b:
Result:=855;
$9c:
Result:=857;
160:
Result:=860;
$a1:
Result:=861;
170:
Result:=1250;
$ab:
Result:=1251;
$ae:
Result:=1253;
$af:
Result:=1255;
$b1:
Result:=1254;
$b2:
Result:=1252;
$b3:
Result:=1257;
180:
Result:=20273;
$b5:
Result:=20280;
$b6:
Result:=20277;
$b7:
Result:=20278;
$b8:
Result:=870;
$ba:
Result:=20297;
$bd:
Result:=1141;
190:
Result:=865;
$c4:
Result:=20866;
$c6:
Result:=1142;
$c7:
Result:=1143;
200:
Result:=1144;
$cc:
Result:=20108;
$cd:
Result:=20108;
$cf:
Result:=20106;
$d0:
Result:=1147;
$12d:
Result:=870;
$138:
Result:=1026;
$13b:
Result:=20424;
$13c:
Result:=870;
320:
Result:=20420;
$147:
Result:=20423;
$33d:
Result:=51932;
830:
Result:=51932;
$33f:
Result:=51932;
$340:
Result:=932;
$342:
Result:=932;
$345:
Result:=51932;
$346:
Result:=932;
840:
Result:=51949;
560:
Result:=1256;
390:
Result:=863;
$15f:
Result:=10000;
$160:
Result:=10000;
$181:
Result:=869;
850:
Result:=936;
$354:
Result:=936;
$356:
Result:=54936;
$34e:
Result:=51949;
$361:
Result:=950;
$363:
Result:=950;
$364:
Result:=950;
$367:
Result:=65001;
$369:
Result:=65001;
$3e8:
Result:=1200;
$7d0:
Result:=1201;
else
Result:=OO00QOQOQ0;
end
end;
function OOO0CQQOQ0.OO00QOQOQ0:sb4;
begin
{$IFDEF NEXTGEN}
Result:=Encoding.Default.CodePage;
{$ELSE}
{$IFNDEF MSWINDOWS}
Result:=0;
{$ELSE}
{$IFDEF VER12P}
Result:=DefaultSystemCodePage;
{$ELSE}
{$IFDEF FPC}
Result:=65001;
{$ELSE}
Result:=sb4(GetACP());
{$ENDIF}
{$ENDIF}
{$ENDIF}
{$ENDIF}
end;
function OOO0CQQOQ0.OQ00QOQOQ0(OC00QOQOQ0:word):Encoding;
begin
if O0OQCQOOQ0(OC00QOQOQ0)then
Result:=Encoding.UTF8
else if OC00QOQOQ0=OOQQO0QOQ0 then
Result:=Encoding.Default
else if OC00QOQOQ0=1000 then
Result:=Encoding.Unicode
else if OC00QOQOQ0=2000 then
Result:=Encoding.BigEndianUnicode
else
Result:={$IFDEF NEXTGEN}Encoding{$ENDIF}(Encoding.GetEncoding(O0CCQOQOQ0(OC00QOQOQ0)));
end;
function OOO0CQQOQ0.OQCCQOQOQ0(OCCCQOQOQ0:sb4;O000QOQOQ0:Word):Word;
begin
Result:=GetCodePageCharset(OCCCQOQOQ0,O0C0CQQOQ0);
if Result=0 then
Result:=O000QOQOQ0;
end;
initialization
{$IFDEF NETDIAG}
NetWriteCallback:=nil;
NetReadCallback:=nil;
{$ENDIF}
O000CQOOQ0:=False;
OCCCCQOOQ0:=TIntValueStringList.Create;
OCCCCQOOQ0.Add('DEFAULT',-1);
OCCCCQOOQ0.Add('ASCII',1);
OCCCCQOOQ0.Add('ISO_LATIN_1',31);
OCCCCQOOQ0.Add('UNICODE_1',870);
OCCCCQOOQ0.Add('US7ASCII',1);
OCCCCQOOQ0.Add('WE8DEC',2);
OCCCCQOOQ0.Add('WE8HP',3);
OCCCCQOOQ0.Add('US8PC437',4);
OCCCCQOOQ0.Add('WE8EBCDIC37',5);
OCCCCQOOQ0.Add('WE8EBCDIC500',6);
OCCCCQOOQ0.Add('WE8EBCDIC285',8);
OCCCCQOOQ0.Add('WE8PC850',10);
OCCCCQOOQ0.Add('D7DEC',11);
OCCCCQOOQ0.Add('F7DEC',12);
OCCCCQOOQ0.Add('S7DEC',13);
OCCCCQOOQ0.Add('E7DEC',14);
OCCCCQOOQ0.Add('SF7ASCII',15);
OCCCCQOOQ0.Add('NDK7DEC',16);
OCCCCQOOQ0.Add('I7DEC',17);
OCCCCQOOQ0.Add('NL7DEC',18);
OCCCCQOOQ0.Add('CH7DEC',19);
OCCCCQOOQ0.Add('YUG7ASCII',20);
OCCCCQOOQ0.Add('SF7DEC',21);
OCCCCQOOQ0.Add('TR7DEC',22);
OCCCCQOOQ0.Add('IW7IS960',23);
OCCCCQOOQ0.Add('IN8ISCII',25);
OCCCCQOOQ0.Add('WE8ISO8859P1',31);
OCCCCQOOQ0.Add('EE8ISO8859P2',32);
OCCCCQOOQ0.Add('SE8ISO8859P3',33);
OCCCCQOOQ0.Add('NEE8ISO8859P4',34);
OCCCCQOOQ0.Add('CL8ISO8859P5',35);
OCCCCQOOQ0.Add('AR8ISO8859P6',36);
OCCCCQOOQ0.Add('EL8ISO8859P7',37);
OCCCCQOOQ0.Add('IW8ISO8859P8',38);
OCCCCQOOQ0.Add('WE8ISO8859P9',39);
OCCCCQOOQ0.Add('NE8ISO8859P10',40);
OCCCCQOOQ0.Add('TH8TISASCII',41);
OCCCCQOOQ0.Add('TH8TISEBCDIC',42);
OCCCCQOOQ0.Add('BN8BSCII',43);
OCCCCQOOQ0.Add('VN8VN3',44);
OCCCCQOOQ0.Add('VN8MSWIN1258',45);
OCCCCQOOQ0.Add('WE8ISO8859P15',46);
OCCCCQOOQ0.Add('BLT8ISO8859P13',47);
OCCCCQOOQ0.Add('CEL8ISO8859P14',48);
OCCCCQOOQ0.Add('CL8ISOIR111',49);
OCCCCQOOQ0.Add('WE8NEXTSTEP',50);
OCCCCQOOQ0.Add('AR8ASMO708PLUS',61);
OCCCCQOOQ0.Add('AR8EBCDICX',70);
OCCCCQOOQ0.Add('AR8XBASIC',72);
OCCCCQOOQ0.Add('EL8DEC',81);
OCCCCQOOQ0.Add('TR8DEC',82);
OCCCCQOOQ0.Add('WE8EBCDIC37C',90);
OCCCCQOOQ0.Add('WE8EBCDIC500C',91);
OCCCCQOOQ0.Add('IW8EBCDIC424',92);
OCCCCQOOQ0.Add('TR8EBCDIC1026',93);
OCCCCQOOQ0.Add('WE8EBCDIC871',94);
OCCCCQOOQ0.Add('WE8EBCDIC284',95);
OCCCCQOOQ0.Add('WE8EBCDIC1047',96);
OCCCCQOOQ0.Add('EEC8EUROASCI',110);
OCCCCQOOQ0.Add('EEC8EUROPA3',113);
OCCCCQOOQ0.Add('LA8PASSPORT',114);
OCCCCQOOQ0.Add('BG8PC437S',140);
OCCCCQOOQ0.Add('EE8PC852',150);
OCCCCQOOQ0.Add('RU8PC866',152);
OCCCCQOOQ0.Add('RU8BESTA',153);
OCCCCQOOQ0.Add('IW8PC1507',154);
OCCCCQOOQ0.Add('RU8PC855',155);
OCCCCQOOQ0.Add('TR8PC857',156);
OCCCCQOOQ0.Add('CL8MACCYRILLIC',158);
OCCCCQOOQ0.Add('CL8MACCYRILLICS',159);
OCCCCQOOQ0.Add('WE8PC860',160);
OCCCCQOOQ0.Add('IS8PC861',161);
OCCCCQOOQ0.Add('EE8MACCES',162);
OCCCCQOOQ0.Add('EE8MACCROATIANS',163);
OCCCCQOOQ0.Add('TR8MACTURKISHS',164);
OCCCCQOOQ0.Add('IS8MACICELANDICS',165);
OCCCCQOOQ0.Add('EL8MACGREEKS',166);
OCCCCQOOQ0.Add('IW8MACHEBREWS',167);
OCCCCQOOQ0.Add('EE8MSWIN1250',170);
OCCCCQOOQ0.Add('CL8MSWIN1251',171);
OCCCCQOOQ0.Add('ET8MSWIN923',172);
OCCCCQOOQ0.Add('BG8MSWIN',173);
OCCCCQOOQ0.Add('EL8MSWIN1253',174);
OCCCCQOOQ0.Add('IW8MSWIN1255',175);
OCCCCQOOQ0.Add('LT8MSWIN921',176);
OCCCCQOOQ0.Add('TR8MSWIN1254',177);
OCCCCQOOQ0.Add('WE8MSWIN1252',178);
OCCCCQOOQ0.Add('BLT8MSWIN1257',179);
OCCCCQOOQ0.Add('D8EBCDIC273',180);
OCCCCQOOQ0.Add('I8EBCDIC280',181);
OCCCCQOOQ0.Add('DK8EBCDIC277',182);
OCCCCQOOQ0.Add('S8EBCDIC278',183);
OCCCCQOOQ0.Add('EE8EBCDIC870',184);
OCCCCQOOQ0.Add('CL8EBCDIC1025',185);
OCCCCQOOQ0.Add('F8EBCDIC297',186);
OCCCCQOOQ0.Add('IW8EBCDIC1086',187);
OCCCCQOOQ0.Add('CL8EBCDIC1025X',188);
OCCCCQOOQ0.Add('N8PC865',190);
OCCCCQOOQ0.Add('BLT8CP921',191);
OCCCCQOOQ0.Add('LV8PC1117',192);
OCCCCQOOQ0.Add('LV8PC8LR',193);
OCCCCQOOQ0.Add('BLT8EBCDIC1112',194);
OCCCCQOOQ0.Add('LV8RST104090',195);
OCCCCQOOQ0.Add('CL8KOI8R',196);
OCCCCQOOQ0.Add('BLT8PC775',197);
OCCCCQOOQ0.Add('F7SIEMENS9780X',201);
OCCCCQOOQ0.Add('E7SIEMENS9780X',202);
OCCCCQOOQ0.Add('S7SIEMENS9780X',203);
OCCCCQOOQ0.Add('DK7SIEMENS9780X',204);
OCCCCQOOQ0.Add('N7SIEMENS9780X',205);
OCCCCQOOQ0.Add('I7SIEMENS9780X',206);
OCCCCQOOQ0.Add('D7SIEMENS9780X',207);
OCCCCQOOQ0.Add('WE8GCOS7',210);
OCCCCQOOQ0.Add('EL8GCOS7',211);
OCCCCQOOQ0.Add('US8BS2000',221);
OCCCCQOOQ0.Add('D8BS2000',222);
OCCCCQOOQ0.Add('F8BS2000',223);
OCCCCQOOQ0.Add('E8BS2000',224);
OCCCCQOOQ0.Add('DK8BS2000',225);
OCCCCQOOQ0.Add('S8BS2000',226);
OCCCCQOOQ0.Add('WE8BS2000',231);
OCCCCQOOQ0.Add('CL8BS2000',235);
OCCCCQOOQ0.Add('WE8BS2000L5',239);
OCCCCQOOQ0.Add('WE8DG',241);
OCCCCQOOQ0.Add('WE8NCR4970',251);
OCCCCQOOQ0.Add('WE8ROMAN8',261);
OCCCCQOOQ0.Add('EE8MACCE',262);
OCCCCQOOQ0.Add('EE8MACCROATIAN',263);
OCCCCQOOQ0.Add('TR8MACTURKISH',264);
OCCCCQOOQ0.Add('IS8MACICELANDIC',265);
OCCCCQOOQ0.Add('EL8MACGREEK',266);
OCCCCQOOQ0.Add('IW8MACHEBREW',267);
OCCCCQOOQ0.Add('US8ICL',277);
OCCCCQOOQ0.Add('WE8ICL',278);
OCCCCQOOQ0.Add('WE8ISOICLUK',279);
OCCCCQOOQ0.Add('WE8MACROMAN8',351);
OCCCCQOOQ0.Add('WE8MACROMAN8S',352);
OCCCCQOOQ0.Add('TH8MACTHAI',353);
OCCCCQOOQ0.Add('TH8MACTHAIS',354);
OCCCCQOOQ0.Add('HU8CWI2',368);
OCCCCQOOQ0.Add('EL8PC437S',380);
OCCCCQOOQ0.Add('EL8EBCDIC875',381);
OCCCCQOOQ0.Add('EL8PC737',382);
OCCCCQOOQ0.Add('LT8PC772',383);
OCCCCQOOQ0.Add('LT8PC774',384);
OCCCCQOOQ0.Add('EL8PC869',385);
OCCCCQOOQ0.Add('EL8PC851',386);
OCCCCQOOQ0.Add('CDN8PC863',390);
OCCCCQOOQ0.Add('HU8ABMOD',401);
OCCCCQOOQ0.Add('AR8ASMO8X',500);
OCCCCQOOQ0.Add('AR8NAFITHA711T',504);
OCCCCQOOQ0.Add('AR8SAKHR707T',505);
OCCCCQOOQ0.Add('AR8MUSSAD768T',506);
OCCCCQOOQ0.Add('AR8ADOS710T',507);
OCCCCQOOQ0.Add('AR8ADOS720T',508);
OCCCCQOOQ0.Add('AR8APTEC715T',509);
OCCCCQOOQ0.Add('AR8NAFITHA721T',511);
OCCCCQOOQ0.Add('AR8HPARABIC8T',514);
OCCCCQOOQ0.Add('AR8NAFITHA711',554);
OCCCCQOOQ0.Add('AR8SAKHR707',555);
OCCCCQOOQ0.Add('AR8MUSSAD768',556);
OCCCCQOOQ0.Add('AR8ADOS710',557);
OCCCCQOOQ0.Add('AR8ADOS720',558);
OCCCCQOOQ0.Add('AR8APTEC715',559);
OCCCCQOOQ0.Add('AR8MSAWIN',560);
OCCCCQOOQ0.Add('AR8NAFITHA721',561);
OCCCCQOOQ0.Add('AR8SAKHR706',563);
OCCCCQOOQ0.Add('AR8ARABICMAC',565);
OCCCCQOOQ0.Add('AR8ARABICMACS',566);
OCCCCQOOQ0.Add('AR8ARABICMACT',567);
OCCCCQOOQ0.Add('LA8ISO6937',590);
OCCCCQOOQ0.Add('US8NOOP',797);
OCCCCQOOQ0.Add('WE8DECTST',798);
OCCCCQOOQ0.Add('JA16VMS',829);
OCCCCQOOQ0.Add('JA16EUC',830);
OCCCCQOOQ0.Add('JA16EUCYEN',831);
OCCCCQOOQ0.Add('JA16SJIS',832);
OCCCCQOOQ0.Add('JA16DBCS',833);
OCCCCQOOQ0.Add('JA16SJISYEN',834);
OCCCCQOOQ0.Add('JA16EBCDIC930',835);
OCCCCQOOQ0.Add('JA16MACSJIS',836);
OCCCCQOOQ0.Add('JA16EUCTILDE',837);
OCCCCQOOQ0.Add('JA16SJISTILDE',838);
OCCCCQOOQ0.Add('KO16KSC5601',840);
OCCCCQOOQ0.Add('KO16DBCS',842);
OCCCCQOOQ0.Add('KO16KSCCS',845);
OCCCCQOOQ0.Add('KO16MSWIN949',846);
OCCCCQOOQ0.Add('ZHS16CGB231280',850);
OCCCCQOOQ0.Add('ZHS16MACCGB231280',851);
OCCCCQOOQ0.Add('ZHS16GBK',852);
OCCCCQOOQ0.Add('ZHS16DBCS',853);
OCCCCQOOQ0.Add('ZHS32GB18030',854);
OCCCCQOOQ0.Add('ZHS16MSWIN936',854);
OCCCCQOOQ0.Add('ZHT32EUC',860);
OCCCCQOOQ0.Add('ZHT32SOPS',861);
OCCCCQOOQ0.Add('ZHT16DBT',862);
OCCCCQOOQ0.Add('ZHT32TRIS',863);
OCCCCQOOQ0.Add('ZHT16DBCS',864);
OCCCCQOOQ0.Add('ZHT16BIG5',865);
OCCCCQOOQ0.Add('ZHT16CCDC',866);
OCCCCQOOQ0.Add('ZHT16MSWIN950',867);
OCCCCQOOQ0.Add('AL24UTFFSS',870);
OCCCCQOOQ0.Add('UTF8',871);
OCCCCQOOQ0.Add('UTFE',872);
OCCCCQOOQ0.Add('AL32UTF8',873);
OCCCCQOOQ0.Add('KO16TSTSET',996);
OCCCCQOOQ0.Add('JA16TSTSET2',997);
OCCCCQOOQ0.Add('JA16TSTSET',998);
OCCCCQOOQ0.Add('US16TSTFIXED',1001);
OCCCCQOOQ0.Add('JA16EUCFIXED',1830);
OCCCCQOOQ0.Add('JA16SJISFIXED',1832);
OCCCCQOOQ0.Add('JA16DBCSFIXED',1833);
OCCCCQOOQ0.Add('KO16KSC5601FIXED',1840);
OCCCCQOOQ0.Add('KO16DBCSFIXED',1842);
OCCCCQOOQ0.Add('ZHS16CGB231280FIXED',1850);
OCCCCQOOQ0.Add('ZHS16GBKFIXED',1852);
OCCCCQOOQ0.Add('ZHS16DBCSFIXED',1853);
OCCCCQOOQ0.Add('ZHT32EUCFIXED',1860);
OCCCCQOOQ0.Add('ZHT32TRISFIXED',1863);
OCCCCQOOQ0.Add('ZHT16DBCSFIXED',1864);
OCCCCQOOQ0.Add('ZHT16BIG5FIXED',1865);
OCCCCQOOQ0.Add('AL16UTF16',2000);
OCCCCQOOQ0.Add('AL16UTF16LE',2002);
OCCCCQOOQ0.Add('UNICODE_2',871);
OCCCCQOOQ0.Sort;
finalization
OCCCCQOOQ0.Free;
OO00CQOOQ0.Free;
end.
