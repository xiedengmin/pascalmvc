{$I ASEDac.inc}
unit Tds5ProtocolUni;
interface
uses
{$IFDEF MSWINDOWS}
Windows,
{$ELSE}
{$ENDIF}
Classes,SysUtils,TypInfo,DateUtils,Variants,FmtBcd,{$IFNDEF FPC}SqlTimSt,{$ENDIF}
{$IFDEF NEXTGEN}
Generics.Collections,
{$ENDIF}
{$IFDEF LOG_PACKETS}
LogHandler,
{$ENDIF}
CRTypes,CRFunctions,CRTimeStamp,CRNumeric,CRAccess,CLRClasses,CRParser,
MemData,
{$IFNDEF UNIDACPRO}
{$IFDEF USE_SSL}TdsSSLTypes,TdsLayers,TdsCipherSuites,TdsBridge,TdsCertificateExts,{$ENDIF}
ASEParser,SqlClasses,TdsTypes,TdsConsts,Tds5Consts,
TdsPackets,Tds5Packets,TdsNet,TdsProtocol,Tds5ASEEncryption;
{$ELSE}
{$IFDEF USE_SSL}TdsSSLTypesUni,TdsLayersUni,TdsCipherSuitesUni,TdsBridgeUni,TdsCertificateExtsUni,{$ENDIF}
ASEParserUni,SqlClassesUni,TdsTypesUni,TdsConstsUni,Tds5ConstsUni,
TdsPacketsUni,Tds5PacketsUni,TdsNetUni,TdsProtocolUni,Tds5ASEEncryptionUni;
{$ENDIF}
type
OQQ0QQ00Q0=class(OOQQ0QQOQ0)
private
OCQ0QQ00Q0:OO0QOOCOQ0;
O0C0QQ00Q0:Boolean;
OOC0QQ00Q0:OOOCQCQOQ0;
OQC0QQ00Q0:TParamDescs;
OCC0QQ00Q0:TIntArr;
function O00OQQ00Q0(OO0OQQ00Q0:Byte;OQ0OQQ00Q0:Cardinal;OC0OQQ00Q0:O00CCQCOQ0):Byte;
function O0OOQQ00Q0(const OOOOQQ00Q0:string):Integer;
procedure OCOOQQ00Q0(O0QOQQ00Q0:Integer;OOQOQQ00Q0:integer;const OQQOQQ00Q0:boolean);
procedure OCQOQQ00Q0(O0COQQ00Q0:Integer;OOCOQQ00Q0:integer;const OQCOQQ00Q0:Variant);
function OCCOQQ00Q0(O00QOO00Q0:Integer;OO0QOO00Q0:integer):PVariant;
function OQ0QOO00Q0(OC0QOO00Q0:Integer;O0OQOO00Q0:integer):TSharedObject;
procedure OOOQOO00Q0(OQOQOO00Q0:OCO0QQCOQ0;OCOQOO00Q0:Integer;O0QQOO00Q0:Boolean=False);
function OQQQOO00Q0(const OCQQOO00Q0:string):string;
class procedure O0OCOO00Q0(var OOOCOO00Q0:TDBNumeric);
class procedure OQQCOO00Q0(const OCQCOO00Q0:TSQLTimeStamp;O0CCOO00Q0:Pointer);
class procedure O000OO00Q0(const OO00OO00Q0:TDateTime;OQ00OO00Q0:Pointer);
procedure OQO0OO00Q0;
procedure OQQ0OO00Q0;
procedure O0OOOO00Q0(OOOOOO00Q0:integer);
procedure OCOOOO00Q0(O0QOOO00Q0:integer);
procedure O0COOO00Q0;
procedure OOOQ0O00Q0;
procedure OQ0C0O00Q0(OC0C0O00Q0:Boolean);
procedure OQQC0O00Q0;
procedure OQQOCQQOQ0;overload;
procedure OQ000O00Q0(OC000O00Q0:OQQCC0COQ0;const O0O00O00Q0:OCOQQCQOQ0;OOO00O00Q0:Byte;const OQO00O00Q0:Variant);
procedure OCQ00O00Q0(const O0C00O00Q0:OCOQQCQOQ0;OOC00O00Q0:Boolean;const OQC00O00Q0:Variant);
procedure OCQO0O00Q0(O0CO0O00Q0:Boolean=True);
procedure OQOQCO00Q0(OCOQCO00Q0:Boolean;const O0QQCO00Q0:Variant);
procedure OOCQCO00Q0(OQCQCO00Q0:Boolean;const OCCQCO00Q0:Variant);
procedure O0OCCO00Q0(OOOCCO00Q0:Boolean;const OQOCCO00Q0:Variant);
procedure OCQCCO00Q0(const O0CCCO00Q0:OCOQQCQOQ0;const OOCCCO00Q0:Variant);
procedure OCCCCO00Q0(const O000CO00Q0:OCOQQCQOQ0;OO00CO00Q0:Boolean;const OQ00CO00Q0:Variant);
procedure OCC0CO00Q0(const O00OCO00Q0:OCOQQCQOQ0;OO0OCO00Q0:Boolean;const OQ0OCO00Q0:Variant);
procedure OOOOCO00Q0(const OQOOCO00Q0:OCOQQCQOQ0;OCOOCO00Q0:Boolean;const O0QOCO00Q0:Variant);
protected
function OCC00QQOQ0:byte;override;
function O0OO0QQOQ0(const OCQOCO00Q0:O00CQQCOQ0):Encoding;override;
function OQOO0QQOQ0(const O0COCO00Q0:O00CQQCOQ0):Encoding;override;
function O0QO0QQOQ0:Encoding;override;
function O0QQCQQOQ0(const OOCOCO00Q0:O0Q0QQCOQ0;OQCOCO00Q0:Pointer;OCCOCO00Q0:Integer):Variant;override;
function O0CQCQQOQ0():Boolean;override;
procedure OQOCCQQOQ0(OC0QQO00Q0:OCO0QQCOQ0);override;
procedure O0QCCQQOQ0(const O0OQQO00Q0:O0Q0QQCOQ0;var OOOQQO00Q0:OQ00QQCOQ0;OQOQQO00Q0:Boolean);override;
procedure O000CQQOQ0(O0QQQO00Q0:OC0OCCQOQ0;OOQQQO00Q0:OCOOCCQOQ0;OQQQQO00Q0:O00QQCQOQ0;
const OCQQQO00Q0:OCOQQCQOQ0;const O0CQQO00Q0:O0Q0QQCOQ0;const OOCQQO00Q0:OQ00QQCOQ0);override;
procedure OQC0CQQOQ0(out O0OCQO00Q0:boolean);override;
public
constructor Create(OCQCQO00Q0:OQOCQCQOQ0);override;
destructor Destroy;override;
class function O0QOQQQOQ0(O0CCQO00Q0:Byte;OOCCQO00Q0:Word;OQCCQO00Q0:Pointer;OCCCQO00Q0:Integer):TDateTime;override;
class function OQ0COOQOQ0(OC00QO00Q0,O0O0QO00Q0:Word;OOO0QO00Q0:Pointer;OQO0QO00Q0:Integer):TDBNumeric;override;
class procedure OCOCOOQOQ0(OCO0QO00Q0:Byte;O0Q0QO00Q0:Word;OOQ0QO00Q0:Integer;OQQ0QO00Q0,OCQ0QO00Q0:Pointer);override;
function OOC0QO00Q0(const OQC0QO00Q0:string):AnsiString;
function OO0OQO00Q0(const OQ0OQO00Q0:AnsiString):AnsiString;
procedure OOQC0OQOQ0(OOOOQO00Q0:Boolean);override;
procedure OOCC0OQOQ0(O0QOQO00Q0:Integer;var OOQOQO00Q0:Integer);override;
procedure OCQC0OQOQ0(const OQCOQO00Q0:string);override;
function O0000OQOQ0(const OQ0QO000Q0:string):string;override;
end;
OOOCO000Q0=array[0..$D]of Byte;
OQOCO000Q0=class(OQOCQCQOQ0)
private
OCOCO000Q0,O0QCO000Q0:Byte;
OOQCO000Q0:Byte;
OQQCO000Q0:Word;
OCQCO000Q0:Boolean;
O0CCO000Q0,OOCCO000Q0:OOOCO000Q0;
{$IFDEF USE_SSL}
OQCCO000Q0:O0CQOOC0Q0;
{$ENDIF}
OCCCO000Q0:OQQ0QQ00Q0;
function O000O000Q0:integer;
procedure OO00O000Q0;
procedure O00OO000Q0(const OO0OO000Q0:O00QCOQOQ0);
procedure OQCOO000Q0(OCCOO000Q0:OCQOO0COQ0);
procedure O00Q0000Q0(OO0Q0000Q0:OCQOO0COQ0);
procedure OOQQ0000Q0(OQQQ0000Q0:OCQOO0COQ0);
procedure OCCQ0000Q0(O00C0000Q0:OCQOO0COQ0);
protected
class procedure O0OC0000Q0(var OOOC0000Q0:OOOCO000Q0;OQOC0000Q0:Integer;OCOC0000Q0:Boolean);
public
constructor Create;override;
destructor Destroy;override;
procedure OCO0OQQOQ0(const O0CC0000Q0:O00QCOQOQ0;OOCC0000Q0:boolean;
OQCC0000Q0:OOQ0CCQOQ0;OCCC0000Q0:OOC0CCQOQ0;O0000000Q0:O00OCCQOQ0);override;
procedure OO000000Q0;
function OQ000000Q0(OC000000Q0:integer):boolean;
function O0Q00000Q0(OOQ00000Q0:integer):boolean;
function OQOOOQQOQ0:boolean;override;
function O00OOQQOQ0(const OQC00000Q0:string):Encoding;overload;
property O00O0000Q0:Integer read O000O000Q0;
end;
implementation
uses
DAConsts,CRVioTcp;
var
OO0O0000Q0:variant;
OQ0O0000Q0:Encoding;
const
OC0O0000Q0=MinsPerHour*SecsPerMin;
O0OO0000Q0=OC0O0000Q0*MSecsPerSec;
OOOO0000Q0=SecsPerMin*MSecsPerSec;
OQOO0000Q0=SecsPerDay*300;
var
OCOO0000Q0:OOOCO000Q0;
O0QO0000Q0:OOOCO000Q0;
procedure OOQO0000Q0;
begin
FillChar(OCOO0000Q0[0],Length(OCOO0000Q0),0);
FillChar(O0QO0000Q0[0],Length(O0QO0000Q0),0);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OC0O0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0OO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQOO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0QO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOQO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQQO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCQO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0CO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOCO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQCO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCCO0OCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O00QCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OO0QCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQ0QCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OC0QCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0OQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOOQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQOQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCOQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0QQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOQQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQQQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCQQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0CQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOCQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQCQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCCQCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O00CCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OO0CCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQ0CCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOQCCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQQCCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0CCCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCCCCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O000COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQ00COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OC00COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0O0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOO0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOQ0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQQ0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCQ0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0C0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOC0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQC0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCC0COCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O00OCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OO0OCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQ0OCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0OOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOOOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQOOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCOOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0QOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOQOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQQOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCQOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0COCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQCOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCCOCOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OO0QQOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OQ0QQOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OOOQQOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,OCOQQOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(OCOO0000Q0,O0QQQOCOQ0,True);
OCOO0000Q0[High(OCOO0000Q0)-11]:=$60;
OQOCO000Q0.O0OC0000Q0(O0QO0000Q0,O0Q0QOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(O0QO0000Q0,OCQ0QOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(O0QO0000Q0,OO0OQOCOQ0,True);
OQOCO000Q0.O0OC0000Q0(O0QO0000Q0,OCOQO0COQ0,True);
end;
constructor OQQ0QQ00Q0.Create(OCQCQO00Q0:OQOCQCQOQ0);
begin
inherited;
OQ0C0QQOQ0:=@O0CCO0COQ0;
end;
destructor OQQ0QQ00Q0.Destroy;
begin
OQC0QQ00Q0.Free;
inherited;
end;
function OQQ0QQ00Q0.OCC00QQOQ0:byte;
begin
Result:=OO0COOCOQ0;
end;
function OQQ0QQ00Q0.O0OO0QQOQ0(const OCQOCO00Q0:O00CQQCOQ0):Encoding;
begin
Result:=OQOCO000Q0(O0CQ0QQOQ0).OQO0QCQOQ0;
end;
function OQQ0QQ00Q0.OQOO0QQOQ0(const O0COCO00Q0:O00CQQCOQ0):Encoding;
begin
Result:=Encoding.Default
end;
function OQQ0QQ00Q0.O0QO0QQOQ0:Encoding;
begin
Result:=OQ0O0000Q0;
end;
function OQQ0QQ00Q0.O0OOQQ00Q0(const OOOOQQ00Q0:string):Integer;
var
OQOOQQ00Q0:Integer;
begin
for OQOOQQ00Q0:=0 to High(OOC0QQ00Q0)do
if OOC0QQ00Q0[OQOOQQ00Q0].O0QQQCQOQ0=OOOOQQ00Q0 then begin
Result:=OQOOQQ00Q0;
Exit;
end;
raise Exception.CreateFmt('GetMessageParamIndex: param %s not found',[OOOOQQ00Q0]);
end;
procedure OQQ0QQ00Q0.OCOOQQ00Q0(O0QOQQ00Q0:Integer;OOQOQQ00Q0:integer;const OQQOQQ00Q0:boolean);
begin
OQC0QQ00Q0[O0QOQQ00Q0].ItemNull[OOQOQQ00Q0]:=OQQOQQ00Q0;
end;
procedure OQQ0QQ00Q0.OCQOQQ00Q0(O0COQQ00Q0:Integer;OOCOQQ00Q0:integer;const OQCOQQ00Q0:Variant);
begin
OQC0QQ00Q0[O0COQQ00Q0].ItemValue[OOCOQQ00Q0]:=OQCOQQ00Q0;
end;
function OQQ0QQ00Q0.OCCOQQ00Q0(O00QOO00Q0:Integer;OO0QOO00Q0:integer):PVariant;
begin
if OQC0QQ00Q0[O00QOO00Q0].ItemNull[OO0QOO00Q0]then
Result:=@OO0O0000Q0
else
Result:=OQC0QQ00Q0[O00QOO00Q0].GetItemPtr(OO0QOO00Q0);
end;
function OQQ0QQ00Q0.OQ0QOO00Q0(OC0QOO00Q0:Integer;O0OQOO00Q0:integer):TSharedObject;
begin
Result:=OQC0QQ00Q0[OC0QOO00Q0].GetObject;
end;
class function OQQ0QQ00Q0.O0QOQQQOQ0(O0CCQO00Q0:Byte;OOCCQO00Q0:Word;OQCCQO00Q0:Pointer;OCCCQO00Q0:Integer):TDateTime;
var
O000QO00Q0:Integer;
OO00QO00Q0:Int64;
OQ00QO00Q0:Integer;
begin
case O0CCQO00Q0 of
OOCQOQCOQ0,OQCQOQCOQ0:begin
Assert(OCCCQO00Q0=8);
Assert(OOCCQO00Q0=6);
Move(OQCCQO00Q0^,OO00QO00Q0,OCCCQO00Q0);
Result:=IncMilliSecond(0,OO00QO00Q0 div MSecsPerSec);
if Trunc(Result)<>0 then
Result:=IncDay(Result,-693959);
end;
OQCOQCCOQ0,OO0QOQCOQ0,O0QQOQCOQ0:begin
case OCCCQO00Q0 of
4:begin
Result:=OO0QQQCOQ0(OQCCQO00Q0).O0OQQQCOQ0/O00C0QCOQ0;
OQ00QO00Q0:=(OO0QQQCOQ0(OQCCQO00Q0).OC0QQQCOQ0+2);
if OQ00QO00Q0>=0 then
Result:=OQ00QO00Q0+Result
else
Result:=OQ00QO00Q0-Result;
end;
8:begin
Result:=(OOQOCQCOQ0(OQCCQO00Q0).O0COCQCOQ0*10 div 3)/MSecsPerDay;
OQ00QO00Q0:=OOQOCQCOQ0(OQCCQO00Q0).OCQOCQCOQ0+2;
if OQ00QO00Q0>=0 then
Result:=OQ00QO00Q0+Result
else
Result:=OQ00QO00Q0-Result;
end;
else
raise Exception.CreateFmt('Packet reading error: Wrong TDS_DATETIMNTYPE size %d',[OCCCQO00Q0]);
end;
end;
OQQQOQCOQ0:begin
Assert(OCCCQO00Q0=4);
Move(OQCCQO00Q0^,O000QO00Q0,OCCCQO00Q0);
Result:=O000QO00Q0+2;
end;
O0CQOQCOQ0:begin
Assert(OCCCQO00Q0=4);
Move(OQCCQO00Q0^,O000QO00Q0,OCCCQO00Q0);
Result:=(O000QO00Q0*10 div 3)/MSecsPerDay;
end;
OOQOQCCOQ0:begin
Assert(OCCCQO00Q0=4);
Result:=(PInteger(OQCCQO00Q0)^+2);
end;
OQQOQCCOQ0:begin
Assert(OCCCQO00Q0=4);
Result:=(PInteger(OQCCQO00Q0)^*10 div 3)/MSecsPerDay;
end;
else
Result:=inherited O0QOQQQOQ0(O0CCQO00Q0,OOCCQO00Q0,OQCCQO00Q0,OCCCQO00Q0);
end;
end;
class procedure OQQ0QQ00Q0.O0OCOO00Q0(var OOOCOO00Q0:TDBNumeric);
var
OQOCOO00Q0,OCOCOO00Q0:Integer;
O0QCOO00Q0:PByte;
OOQCOO00Q0:Byte;
begin
if OOOCOO00Q0.sign=0 then
OOOCOO00Q0.sign:=1
else
OOOCOO00Q0.sign:=0;
O0QCOO00Q0:=@OOOCOO00Q0.val[0];
OCOCOO00Q0:=OOQCO0COQ0[OOOCOO00Q0.Precision]-1;
for OQOCOO00Q0:=0 to(OCOCOO00Q0 shr 1)-1 do begin
OOQCOO00Q0:=PByteArray(O0QCOO00Q0)[OQOCOO00Q0];
PByteArray(O0QCOO00Q0)[OQOCOO00Q0]:=PByteArray(O0QCOO00Q0)[OCOCOO00Q0-OQOCOO00Q0-1];
PByteArray(O0QCOO00Q0)[OCOCOO00Q0-OQOCOO00Q0-1]:=OOQCOO00Q0;
end;
end;
class function OQQ0QQ00Q0.OQ0COOQOQ0(OC00QO00Q0,O0O0QO00Q0:Word;OOO0QO00Q0:Pointer;OQO0QO00Q0:Integer):TDBNumeric;
begin
Result:=inherited OQ0COOQOQ0(OC00QO00Q0,O0O0QO00Q0,OOO0QO00Q0,OQO0QO00Q0);
O0OCOO00Q0(Result);
end;
class procedure OQQ0QQ00Q0.OCOCOOQOQ0(OCO0QO00Q0:Byte;O0Q0QO00Q0:Word;OOQ0QO00Q0:Integer;OQQ0QO00Q0,OCQ0QO00Q0:Pointer);
var
O0C0QO00Q0:Int64;
begin
case OCO0QO00Q0 of
OOCQOQCOQ0,OQCQOQCOQ0:begin
Assert(OOQ0QO00Q0=8);
Assert(O0Q0QO00Q0=6);
Move(OQQ0QO00Q0^,O0C0QO00Q0,OOQ0QO00Q0);
O0C0QO00Q0:=(O0C0QO00Q0+500)div 1000;
PSQLTimeStamp(OCQ0QO00Q0).Fractions:=O0C0QO00Q0 mod 1000;
O0C0QO00Q0:=O0C0QO00Q0 div 1000;
PSQLTimeStamp(OCQ0QO00Q0).Second:=O0C0QO00Q0 mod 60;
O0C0QO00Q0:=O0C0QO00Q0 div 60;
PSQLTimeStamp(OCQ0QO00Q0).Minute:=O0C0QO00Q0 mod 60;
O0C0QO00Q0:=O0C0QO00Q0 div 60;
PSQLTimeStamp(OCQ0QO00Q0).Hour:=O0C0QO00Q0 mod 24;
O0C0QO00Q0:=O0C0QO00Q0 div 24;
Dec(O0C0QO00Q0,693959);
DecodeDate(O0C0QO00Q0,Word(PSQLTimeStamp(OCQ0QO00Q0).Year),PSQLTimeStamp(OCQ0QO00Q0).Month,PSQLTimeStamp(OCQ0QO00Q0).Day);
end;
else
inherited;
end;
end;
class procedure OQQ0QQ00Q0.OQQCOO00Q0(const OCQCOO00Q0:TSQLTimeStamp;O0CCOO00Q0:Pointer);
var
OOCCOO00Q0,OQCCOO00Q0:Integer;
OCCCOO00Q0:Int64;
begin
OOCCOO00Q0:=Trunc(EncodeDate(Word(OCQCOO00Q0.Year),OCQCOO00Q0.Month,OCQCOO00Q0.Day));
if OOCCOO00Q0<>0 then
Inc(OOCCOO00Q0,693959);
OCCCOO00Q0:=OOCCOO00Q0;
OCCCOO00Q0:=OCCCOO00Q0*SecsPerDay+OCQCOO00Q0.Hour*OC0O0000Q0+OCQCOO00Q0.Minute*SecsPerMin+OCQCOO00Q0.Second;
OQCCOO00Q0:=OCQCOO00Q0.Fractions;
if OQCCOO00Q0<1000 then
OQCCOO00Q0:=OQCCOO00Q0*1000
else begin
while OQCCOO00Q0<1000000 do
OQCCOO00Q0:=OQCCOO00Q0*10;
while OQCCOO00Q0>10000000 do
OQCCOO00Q0:=OQCCOO00Q0 div 10;
if OQCCOO00Q0>1000000 then
OQCCOO00Q0:=(OQCCOO00Q0+5)div 10;
end;
OCCCOO00Q0:=OCCCOO00Q0*1000000+OQCCOO00Q0;
Move(OCCCOO00Q0,O0CCOO00Q0^,8);
end;
class procedure OQQ0QQ00Q0.O000OO00Q0(const OO00OO00Q0:TDateTime;OQ00OO00Q0:Pointer);
var
OC00OO00Q0:Int64;
O0O0OO00Q0,OOO0OO00Q0:Integer;
begin
O0O0OO00Q0:=Trunc(OO00OO00Q0);
if O0O0OO00Q0<>0 then
Inc(O0O0OO00Q0,693959);
OC00OO00Q0:=O0O0OO00Q0;
OOO0OO00Q0:=Round(Abs(Frac(OO00OO00Q0))*MSecsPerDay);
OC00OO00Q0:=(OC00OO00Q0*MSecsPerDay+OOO0OO00Q0)*1000;
Move(OC00OO00Q0,OQ00OO00Q0^,8);
end;
function OQQ0QQ00Q0.O0QQCQQOQ0(const OOCOCO00Q0:O0Q0QQCOQ0;OQCOCO00Q0:Pointer;OCCOCO00Q0:Integer):Variant;
var
O00QQO00Q0:Boolean;
OO0QQO00Q0:AnsiString;
OQ0QQO00Q0:WideString;
begin
O00QQO00Q0:=OOCOCO00Q0.OOOOQQCOQ0.OCQCCQCOQ0 or(OOCOCO00Q0.O0OOQQCOQ0 in[OQQ0OQCOQ0,OCQ0OQCOQ0]);
if not O00QQO00Q0 then begin
SetLengthA(OO0QQO00Q0,OCCOCO00Q0);
if OCCOCO00Q0>0 then begin
Move(OQCOCO00Q0^,PAnsiChar(OO0QQO00Q0)^,OCCOCO00Q0);
if OC0C0QQOQ0 and OOCOCO00Q0.OOOOQQCOQ0.OQQCCQCOQ0 then
OO0QQO00Q0:=OO0OQO00Q0(OO0QQO00Q0);
end;
Result:=OO0QQO00Q0;
end
else begin
SetLength(OQ0QQO00Q0,OCCOCO00Q0 shr 1);
if OCCOCO00Q0>0 then
Move(OQCOCO00Q0^,PWideChar(OQ0QQO00Q0)^,OCCOCO00Q0);
Result:=OQ0QQO00Q0;
end;
end;
function OQQ0QQ00Q0.O0CQCQQOQ0():Boolean;
begin
Result:=True;
end;
function OQQ0QQ00Q0.OOC0QO00Q0(const OQC0QO00Q0:string):AnsiString;
var
{$IFDEF ODBC_UTF8}
AStr:AnsiString;
{$ENDIF}
OCC0QO00Q0,O00OQO00Q0:TBytes;
begin
{$IFDEF ODBC_UTF8}
AStr:=AnsiString(Str);
SetLength(TempS,LengthA(AStr));
if Length(TempS)>0 then
Move(AStr[1],TempS[0],Length(TempS));
{$ELSE}
OCC0QO00Q0:=OQ0O0000Q0.GetBytes(OQC0QO00Q0);
{$ENDIF}
O00OQO00Q0:=Encoding.Convert(OQ0O0000Q0,OQOCO000Q0(O0CQ0QQOQ0).OQO0QCQOQ0,OCC0QO00Q0,0,Length(OCC0QO00Q0));
SetLengthA(Result,Length(O00OQO00Q0));
if Length(O00OQO00Q0)>0 then
Move(O00OQO00Q0[0],PAnsiChar(Result)^,Length(O00OQO00Q0));
end;
function OQQ0QQ00Q0.OO0OQO00Q0(const OQ0OQO00Q0:AnsiString):AnsiString;
var
OC0OQO00Q0,O0OOQO00Q0:TBytes;
begin
OC0OQO00Q0:=OOQO0QQOQ0(OQ0OQO00Q0);
O0OOQO00Q0:=Encoding.Convert(OQOCO000Q0(O0CQ0QQOQ0).OQO0QCQOQ0,OQ0O0000Q0,OC0OQO00Q0,0,Length(OC0OQO00Q0));
SetLengthA(Result,Length(O0OOQO00Q0));
if Length(O0OOQO00Q0)>0 then
Move(O0OOQO00Q0[0],PAnsiChar(Result)^,Length(O0OOQO00Q0));
end;
procedure OQQ0QQ00Q0.OQOCCQQOQ0(OC0QQO00Q0:OCO0QQCOQ0);
begin
inherited;
case OC0QQO00Q0.OC0OQQCOQ0 of
OCQQOQCOQ0:begin
OC0QQO00Q0.OC0OQQCOQ0:=OQ0OOOCOQ0;
end;
OQCOQCCOQ0:
OC0QQO00Q0.OOC0QQCOQ0:=0;
OO0QOQCOQ0:
OC0QQO00Q0.OOC0QQCOQ0:=3;
end;
end;
procedure OQQ0QQ00Q0.O0QCCQQOQ0(const O0OQQO00Q0:O0Q0QQCOQ0;var OOOQQO00Q0:OQ00QQCOQ0;
OQOQQO00Q0:Boolean);
var
OCOQQO00Q0:Integer;
begin
if(O0OQQO00Q0.OCCOQQCOQ0 and OQ0C0OCOQ0)<>0 then begin
OQQQ0QQOQ0.O0OO00COQ0;
raise Exception.Create('Finally we got Status param!!! Analyze it.');
end;
if O0OQQO00Q0.OOOOQQCOQ0.OQ00CQCOQ0 then begin
OCOQQO00Q0:=OQQQ0QQOQ0.O0OO00COQ0;
if OCOQQO00Q0=0 then begin
OOOQQO00Q0.OC00QQCOQ0:=True;
Exit;
end;
OOOQQO00Q0.OC00QQCOQ0:=False;
OQQQ0QQOQ0.O0C000COQ0(SizeOf(OCQQQQCOQ0)+OCOQQO00Q0);
end;
case O0OQQO00Q0.OOOOQQCOQ0.OOOCCQCOQ0 of
O0OQ0QCOQ0:begin
OCOQQO00Q0:=OQQQ0QQOQ0.O0OO00COQ0;
OOOQQO00Q0.OC00QQCOQ0:=OCOQQO00Q0=0;
end;
OOOQ0QCOQ0:begin
OCOQQO00Q0:=OQQQ0QQOQ0.OQOO00COQ0;
OOOQQO00Q0.OC00QQCOQ0:=OCOQQO00Q0=0;
end;
OQOQ0QCOQ0:begin
OCOQQO00Q0:=OQQQ0QQOQ0.OCOO00COQ0;
OOOQQO00Q0.OC00QQCOQ0:=OCOQQO00Q0=0;
end;
else
OCOQQO00Q0:=O0OQQO00Q0.OCQ0QQCOQ0;
OOOQQO00Q0.OC00QQCOQ0:=False;
end;
if not OOOQQO00Q0.OC00QQCOQ0 then begin
if OCOQQO00Q0>Integer(O0OQQO00Q0.OCQ0QQCOQ0)then
raise Exception.CreateFmt('Broken packet, data length %d exceeds field length %d',[OCOQQO00Q0,O0OQQO00Q0.OCQ0QQCOQ0]);
if OQOQQO00Q0 then
OQQQ0QQOQ0.O0C000COQ0(OCOQQO00Q0)
else begin
SetLength(OOOQQO00Q0.OOO0QQCOQ0,OCOQQO00Q0);
if OCOQQO00Q0>0 then
OQQQ0QQOQ0.OCC000COQ0(@OOOQQO00Q0.OOO0QQCOQ0[0],OCOQQO00Q0);
end;
end;
end;
procedure OQQ0QQ00Q0.OOOQOO00Q0(OQOQOO00Q0:OCO0QQCOQ0;OCOQOO00Q0:Integer;O0QQOO00Q0:Boolean);
var
OOQQOO00Q0:Byte;
begin
OQOQOO00Q0.OQC0QQCOQ0:=OCOQOO00Q0;
OQOQOO00Q0.O00OQQCOQ0:=OCOQOO00Q0;
if O0QQOO00Q0 then
OQOQOO00Q0.OQOOQQCOQ0:=OQQQ0QQOQ0.O0QO00COQ0
else
OQOQOO00Q0.OQOOQQCOQ0:=OQQQ0QQOQ0.O0OO00COQ0;
OQOQOO00Q0.O0OOQQCOQ0:=OQQQ0QQOQ0.O0QO00COQ0;
OQOQOO00Q0.OQ0OQQCOQ0:=fdkData;
OQOQOO00Q0.OQQOQQCOQ0:=OQOQOO00Q0.O0OOQQCOQ0=OQ0Q0QCOQ0;
OOQQOO00Q0:=OQQQ0QQOQ0.O0OO00COQ0;
OQOQOO00Q0.OC0OQQCOQ0:=OOQQOO00Q0;
OQOQOO00Q0.OOOOQQCOQ0:=@OQ0C0QQOQ0[OOQQOO00Q0];
if OQOQOO00Q0.OOOOQQCOQ0.OQ0CCQCOQ0='' then
raise Exception.CreateFmt('Unknown Sql type %X',[OOQQOO00Q0]);
OQOCCQQOQ0(OQOQOO00Q0);
end;
procedure OQQ0QQ00Q0.OQC0CQQOQ0(out O0OCQO00Q0:boolean);
const
OOOCQO00Q0='Token %.2X Not implemented yet';
OQOCQO00Q0='Unknown Token %.2X';
var
OCOCQO00Q0,O0QCQO00Q0:byte;
OOQCQO00Q0:NativeInt;
OQQCQO00Q0:TBytes;
begin
O0OCQO00Q0:=False;
if OOQC0QQOQ0<O0C0CCCOQ0 then
raise Exception.CreateFmt('Token %.2X below minimal',[OOQC0QQOQ0]);
OCOCQO00Q0:=(OOQC0QQOQ0 shr 4)and 3;
{$IFDEF LOG_PACKETS}
AddToLog(Format('ProcessCurrentToken: marker %X %s, size_type %d',[OOQC0QQOQ0,O0QQC0OCQ0[OOQC0QQOQ0],OCOCQO00Q0]));
{$ENDIF}
O0CC0QQOQ0:=OOQC0QQOQ0=O0OQQCCOQ0;
OOCC0QQOQ0:=OOCC0QQOQ0 or O0CC0QQOQ0;
OQCC0QQOQ0:=OQCC0QQOQ0 or O0CC0QQOQ0;
if(O0CC0QQOQ0 or O0000QQOQ0)and not OCCC0QQOQ0 then begin
O0OCQO00Q0:=True;
Exit;
end;
case OCOCQO00Q0 of
O0OCQCCOQ0:begin
raise Exception.CreateFmt(OQOCQO00Q0,[OOQC0QQOQ0]);
end;
OOOCQCCOQ0:begin
case OOQC0QQOQ0 of
O0OQQCCOQ0:begin
SetLength(OO0C0QQOQ0,Length(OO00QQQOQ0));
O00OCQQOQ0(OO0C0QQOQ0,True);
end;
OQOQQCCOQ0:
raise Exception.CreateFmt(OOOCQO00Q0,[OOQC0QQOQ0]);
OCOQQCCOQ0:
OQQC0O00Q0();
else
raise Exception.CreateFmt(OQOCQO00Q0,[OOQC0QQOQ0]);
end;
end;
OQOCQCCOQ0:begin
if OOQC0QQOQ0=O00OCCCOQ0 then
OOQCQO00Q0:=OQQQ0QQOQ0.O0OO00COQ0
else
if OOQC0QQOQ0 in[OCC0CCCOQ0,O0C0CCCOQ0]then
OOQCQO00Q0:=OQQQ0QQOQ0.O0QO00COQ0
else
OOQCQO00Q0:=OQQQ0QQOQ0.OQOO00COQ0;
if OOQC0QQOQ0<>OQCOCCCOQ0 then
OQQQ0QQOQ0.O0OCC0COQ0(OQQQ0QQOQ0.O0QCC0COQ0+OOQCQO00Q0)
else
OQQQ0QQOQ0.O0OCC0COQ0(OQQQ0QQOQ0.O0QCC0COQ0);
case OOQC0QQOQ0 of
OOQOCCCOQ0:
O0OOOO00Q0(OOQCQO00Q0);
OQQOCCCOQ0:
O0COOO00Q0();
OQCOCCCOQ0:
OCOOOO00Q0(OOQCQO00Q0);
OCCOCCCOQ0,
O00QQCCOQ0:
OCOOCQQOQ0();
OQ0QQCCOQ0:
OQOCO000Q0(O0CQ0QQOQ0).O00Q0000Q0(OQQQ0QQOQ0);
OOQQQCCOQ0:
OQOCO000Q0(O0CQ0QQOQ0).OOQQ0000Q0(OQQQ0QQOQ0);
OQQQQCCOQ0:
OOOQ0O00Q0();
OCCQQCCOQ0:
OQO0OO00Q0();
OCC0CCCOQ0:
OQQ0OO00Q0();
OC0QQCCOQ0:begin
SetLength(OQQCQO00Q0,OOQCQO00Q0);
OQQQ0QQOQ0.OCC000COQ0(@OQQCQO00Q0[0],OOQCQO00Q0);
end;
O00OCCCOQ0:
OQOCO000Q0(O0CQ0QQOQ0).OQCOO000Q0(OQQQ0QQOQ0);
OOCQQCCOQ0:
OQ0C0O00Q0(False);
O0C0CCCOQ0:
OQ0C0O00Q0(True);
O0QQQCCOQ0:
OQOCO000Q0(O0CQ0QQOQ0).OCCQ0000Q0(OQQQ0QQOQ0);
O0CQQCCOQ0:begin
end;
OO0QQCCOQ0,
OOC0CCCOQ0,
OQC0CCCOQ0,
OQOOCCCOQ0,
OCOOCCCOQ0,
O0QOCCCOQ0,
OCQOCCCOQ0,
O0COCCCOQ0,
OOCOCCCOQ0,
OCQQQCCOQ0,
OQCQQCCOQ0:
raise Exception.CreateFmt(OOOCQO00Q0,[OOQC0QQOQ0]);
else
raise Exception.CreateFmt(OQOCQO00Q0,[OOQC0QQOQ0]);
end;
OQQQ0QQOQ0.OQOCC0COQ0;
end;
OCOCQCCOQ0:begin
case OOQC0QQOQ0 of
OO0OCCCOQ0,
OC0OCCCOQ0:
raise Exception.CreateFmt(OOOCQO00Q0,[OOQC0QQOQ0]);
OQ0OCCCOQ0:begin
OQ000QQOQ0:=OQQQ0QQOQ0.O0QO00COQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('Status: %d',[OQ000QQOQ0]));
{$ENDIF}
end;
O00CQCCOQ0,
OO0CQCCOQ0:begin
OQQOCQQOQ0();
if OCQC0QQOQ0 and(OO00QQQOQ0<>nil)then
O0OCQO00Q0:=True;
end;
OQ0CQCCOQ0:begin
OQQOCQQOQ0();
O0QCQO00Q0:=OQQQ0QQOQ0.OCCQC0COQ0;
if(O0QCQO00Q0 in[OCCQQCCOQ0,OCC0CCCOQ0])and OCQC0QQOQ0 and(OO00QQQOQ0<>nil)then
O0OCQO00Q0:=True;
end;
else
raise Exception.CreateFmt(OQOCQO00Q0,[OOQC0QQOQ0]);
end;
end;
end;
end;
procedure OQQ0QQ00Q0.OQO0OO00Q0;
var
OCO0OO00Q0,O0Q0OO00Q0:Integer;
OOQ0OO00Q0:OCO0QQCOQ0;
begin
OOCC0QQOQ0:=False;
O0Q0OO00Q0:=OQQQ0QQOQ0.OQOO00COQ0;
if O0Q0OO00Q0=0 then
Exit;
OCQC0QQOQ0:=OCQC0QQOQ0 or(O0Q0OO00Q0>0);
OO00QQQOQ0:=nil;
SetLength(OO00QQQOQ0,O0Q0OO00Q0);
for OCO0OO00Q0:=0 to O0Q0OO00Q0-1 do begin
OOQ0OO00Q0:=@OO00QQQOQ0[OCO0OO00Q0];
OOQ0OO00Q0.OOQ0QQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0(True);
OOOQOO00Q0(OOQ0OO00Q0,OCO0OO00Q0);
if OOQ0OO00Q0.OOOOQQCOQ0.O000CQCOQ0 then
OOQ0OO00Q0.OO0OQQCOQ0:=OQQQ0QQOQ0.O0OQC0COQ0(True);
OQQQ0QQOQ0.OO0QC0COQ0(True);
{$IFDEF LOG_PACKETS}
AddToLog(Format('Field %d name %s, type %s, UserType $%.4X, flag $%.2X, len %d, precision %d, scale %d',
[OCO0OO00Q0,OOQ0OO00Q0.OOQ0QQCOQ0,OOQ0OO00Q0.OOOOQQCOQ0.OQ0CCQCOQ0,OOQ0OO00Q0.O0OOQQCOQ0,OOQ0OO00Q0.OQOOQQCOQ0,OOQ0OO00Q0.OCQ0QQCOQ0,OOQ0OO00Q0.O0C0QQCOQ0,OOQ0OO00Q0.OOC0QQCOQ0]));
{$ENDIF}
end;
{$IFDEF LOG_PACKETS}
AddToLog('');
{$ENDIF}
end;
procedure OQQ0QQ00Q0.OQQ0OO00Q0;
function OCQ0OO00Q0(const O0C0OO00Q0:string):Integer;
var
OOC0OO00Q0:Integer;
begin
Result:=-1;
for OOC0OO00Q0:=0 to High(OQ00QQQOQ0)do
if OQ00QQQOQ0[OOC0OO00Q0]=O0C0OO00Q0 then begin
Result:=OOC0OO00Q0;
Break;
end;
end;
var
OQC0OO00Q0,OCC0OO00Q0,O00OOO00Q0:Integer;
OO0OOO00Q0:OCO0QQCOQ0;
OQ0OOO00Q0,OC0OOO00Q0:string;
begin
OOCC0QQOQ0:=False;
OCC0OO00Q0:=OQQQ0QQOQ0.OQOO00COQ0;
if OCC0OO00Q0=0 then
Exit;
OCQC0QQOQ0:=OCQC0QQOQ0 or(OCC0OO00Q0>0);
OO00QQQOQ0:=nil;
SetLength(OO00QQQOQ0,OCC0OO00Q0);
SetLength(OQ00QQQOQ0,0);
for OQC0OO00Q0:=0 to OCC0OO00Q0-1 do begin
OO0OOO00Q0:=@OO00QQQOQ0[OQC0OO00Q0];
OO0OOO00Q0.OOQ0QQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0(True);
OQQQ0QQOQ0.OO0QC0COQ0(True);
OQQQ0QQOQ0.OO0QC0COQ0(True);
OQ0OOO00Q0:=OQQQ0QQOQ0.OO0QC0COQ0(True);
OC0OOO00Q0:=OQQQ0QQOQ0.OO0QC0COQ0(True);
if(OC0OOO00Q0<>'')and(OO0OOO00Q0.OOQ0QQCOQ0='')then
OO0OOO00Q0.OOQ0QQCOQ0:=OC0OOO00Q0;
O00OOO00Q0:=OCQ0OO00Q0(OQ0OOO00Q0)+1;
if O00OOO00Q0<=0 then begin
SetLength(OQ00QQQOQ0,Length(OQ00QQQOQ0)+1);
OQ00QQQOQ0[High(OQ00QQQOQ0)]:=OQ0OOO00Q0;
O00OOO00Q0:=Length(OQ00QQQOQ0);
end;
OO0OOO00Q0.OCC0QQCOQ0:=O00OOO00Q0;
OOOQOO00Q0(OO0OOO00Q0,OQC0OO00Q0,True);
if OO0OOO00Q0.OOOOQQCOQ0.O000CQCOQ0 then
OO0OOO00Q0.OO0OQQCOQ0:=OQQQ0QQOQ0.O0OQC0COQ0(True);
OQQQ0QQOQ0.OO0QC0COQ0(True);
{$IFDEF LOG_PACKETS}
AddToLog(Format('Field %d name %s, type %s, UserType $%.4X, flag $%.2X, len %d, precision %d, scale %d',
[OQC0OO00Q0,OO0OOO00Q0.OOQ0QQCOQ0,OO0OOO00Q0.OOOOQQCOQ0.OQ0CCQCOQ0,OO0OOO00Q0.O0OOQQCOQ0,OO0OOO00Q0.OQOOQQCOQ0,OO0OOO00Q0.OCQ0QQCOQ0,OO0OOO00Q0.O0C0QQCOQ0,OO0OOO00Q0.OOC0QQCOQ0]));
{$ENDIF}
end;
{$IFDEF LOG_PACKETS}
AddToLog('');
{$ENDIF}
end;
procedure OQQ0QQ00Q0.O0OOOO00Q0(OOOOOO00Q0:integer);
var
OQOOOO00Q0:string;
begin
OQOOOO00Q0:=OQQQ0QQOQ0.OO0QC0COQ0(True);
Dec(OOOOOO00Q0,1+Length(OQOOOO00Q0));
if(OQOCO000Q0(O0CQ0QQOQ0).OCOCO000Q0>=15)and(OOOOOO00Q0>0)then
OQQQ0QQOQ0.OO0QC0COQ0(True);
SetLength(OQ00QQQOQ0,Length(OQ00QQQOQ0)+1);
OQ00QQQOQ0[High(OQ00QQQOQ0)]:=OQOOOO00Q0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('TableName %s',[OQOOOO00Q0]));
{$ENDIF}
end;
procedure OQQ0QQ00Q0.OCOOOO00Q0(O0QOOO00Q0:integer);
var
OOQOOO00Q0:integer;
OQQOOO00Q0:Word;
OCQOOO00Q0:OCO0QQCOQ0;
begin
for OOQOOO00Q0:=0 to O0QOOO00Q0-1 do begin
OQQOOO00Q0:=OQQQ0QQOQ0.O0OO00COQ0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('ColNum %d',[OQQOOO00Q0]));
{$ENDIF}
if OQQOOO00Q0=0 then
Continue;
OQQOOO00Q0:=OQQOOO00Q0-1;
if OQQOOO00Q0<=High(OO00QQQOQ0)then begin
OCQOOO00Q0:=@OO00QQQOQ0[OQQOOO00Q0];
OCQOOO00Q0.OCQOQQCOQ0:=True;
end;
end;
end;
procedure OQQ0QQ00Q0.O0COOO00Q0;
var
OOCOOO00Q0:Integer;
OQCOOO00Q0,OCCOOO00Q0:Byte;
O00Q0O00Q0:OCO0QQCOQ0;
const
OO0Q0O00Q0=$4;
OQ0Q0O00Q0=$8;
OC0Q0O00Q0=$10;
O0OQ0O00Q0=$20;
begin
for OOCOOO00Q0:=0 to High(OO00QQQOQ0)do begin
OQCOOO00Q0:=OQQQ0QQOQ0.O0OO00COQ0-1;
if OQCOOO00Q0>High(OO00QQQOQ0)then
raise Exception.CreateFmt('ColNum %d exceeds columns',[OQCOOO00Q0]);
O00Q0O00Q0:=@OO00QQQOQ0[OQCOOO00Q0];
O00Q0O00Q0.OCC0QQCOQ0:=OQQQ0QQOQ0.O0OO00COQ0;
OCCOOO00Q0:=OQQQ0QQOQ0.O0OO00COQ0;
O00Q0O00Q0.OOQOQQCOQ0:=(OCCOOO00Q0 and OO0Q0O00Q0)<>0;
O00Q0O00Q0.O0QOQQCOQ0:=(OCCOOO00Q0 and OQ0Q0O00Q0)<>0;
O00Q0O00Q0.OCOOQQCOQ0:=(OCCOOO00Q0 and OC0Q0O00Q0)<>0;
if(OCCOOO00Q0 and O0OQ0O00Q0)<>0 then
O00Q0O00Q0.OQQ0QQCOQ0:=OQQQ0QQOQ0.OO0QC0COQ0(True);
{$IFDEF LOG_PACKETS}
AddToLog(Format('Colinfo: %d, TableNum %d, Status %.2X, ActualName %s',
[OOCOOO00Q0,O00Q0O00Q0.OCC0QQCOQ0,OCCOOO00Q0,O00Q0O00Q0.OQQ0QQCOQ0]));
{$ENDIF}
end;
end;
procedure OQQ0QQ00Q0.OOOQ0O00Q0;
var
{$IFDEF LOG_PACKETS}
OQQQC0OCQ0:Integer;
OCQQC0OCQ0:string;
{$ENDIF}
OQOQ0O00Q0,OCOQ0O00Q0:Byte;
O0QQ0O00Q0:string;
OOQQ0O00Q0:Boolean;
OQQQ0O00Q0,OCQQ0O00Q0:integer;
O0CQ0O00Q0:OCO0QQCOQ0;
OOCQ0O00Q0:OCOQQCQOQ0;
OQCQ0O00Q0:PVariant;
const
OCCQ0O00Q0=0;
O00C0O00Q0=1;
OO0C0O00Q0=2;
begin
{$IFDEF LOG_PACKETS}OQQQC0OCQ0:={$ENDIF} OQQQ0QQOQ0.O0QO00COQ0;
SetLength(OQCQ0QQOQ0,1);
OQCQ0QQOQ0[0].OO00CCQOQ0:=OQQQ0QQOQ0.O0OO00COQ0;
OQOQ0O00Q0:=OQQQ0QQOQ0.O0OO00COQ0;
if OQCQ0QQOQ0[0].OQ00CCQOQ0<OQOQ0O00Q0 then
OQCQ0QQOQ0[0].OQ00CCQOQ0:=OQOQ0O00Q0;
{$IFDEF LOG_PACKETS}OCQQC0OCQ0:={$ENDIF} OQQQ0QQOQ0.OO0QC0COQ0(True);
OCOQ0O00Q0:=OQQQ0QQOQ0.O0OO00COQ0;
OQQQ0QQOQ0.OQOO00COQ0;
O0QQ0O00Q0:=OQQQ0QQOQ0.O0OQC0COQ0(True);
if OQCQ0QQOQ0[0].OC00CCQOQ0<>'' then
OQCQ0QQOQ0[0].OC00CCQOQ0:=OQCQ0QQOQ0[0].OC00CCQOQ0+sLineBreak;
OQCQ0QQOQ0[0].OC00CCQOQ0:=OQCQ0QQOQ0[0].OC00CCQOQ0+O0QQ0O00Q0;
OQCQ0QQOQ0[0].O0O0CCQOQ0:=OQQQ0QQOQ0.OO0QC0COQ0(True);
OQCQ0QQOQ0[0].OOO0CCQOQ0:=OQQQ0QQOQ0.OO0QC0COQ0(True);
OQCQ0QQOQ0[0].O000CCQOQ0:=OQQQ0QQOQ0.OQOO00COQ0;
if Pos('duplicate key',OQCQ0QQOQ0[0].OC00CCQOQ0)>0 then
OQCQ0QQOQ0[0].OCCCCCQOQ0:=2627;
case OCOQ0O00Q0 of
OCCQ0O00Q0:;
O00C0O00Q0:begin
O0C0QQ00Q0:=True;
OQC0QQ00Q0:=TParamDescs.Create;
try
OOQC0QQOQ0:=OQQQ0QQOQ0.O0OO00COQ0;
Assert(OOQC0QQOQ0=OOCQQCCOQ0);
OQC0CQQOQ0(OOQQ0O00Q0);
OOQC0QQOQ0:=OQQQ0QQOQ0.O0OO00COQ0;
Assert(OOQC0QQOQ0=OCOQQCCOQ0);
OQC0CQQOQ0(OOQQ0O00Q0);
for OQQQ0O00Q0:=0 to High(OCQ0QQ00Q0)do begin
O0CQ0O00Q0:=@OCQ0QQ00Q0[OQQQ0O00Q0];
OCQQ0O00Q0:=O0OOQQ00Q0(O0CQ0O00Q0.OOQ0QQCOQ0);
if(OCQQ0O00Q0>=0)and(OOC0QQ00Q0[OCQQ0O00Q0].OCQQQCQOQ0<>pdInput)then begin
OOCQ0O00Q0:=OOC0QQ00Q0[OCQQ0O00Q0];
OQCQ0O00Q0:=OCCOQQ00Q0(OOCQ0O00Q0.OOQQQCQOQ0,OOCQ0O00Q0.OQQQQCQOQ0);
OQCQ0QQOQ0[0].OC00CCQOQ0:=OQCQ0QQOQ0[0].OC00CCQOQ0+sLineBreak+Format('%s: %s',[O0CQ0O00Q0.OOQ0QQCOQ0,string(OQCQ0O00Q0^)]);
end;
end;
finally
O0C0QQ00Q0:=False;
OOC0QQ00Q0:=nil;
FreeAndNil(OQC0QQ00Q0);
end;
end;
OO0C0O00Q0:;
else
raise Exception.CreateFmt('Unknown EedStatus %X',[OCOQ0O00Q0]);
end;
{$IFDEF LOG_PACKETS}
AddToLog(Format('Number %d, SqlState %s, State %X, Class %X, MsgText "%s", ServerName "%s", ProcName "%s", LineNumber %d',
[OQQQC0OCQ0,OCQQC0OCQ0,OQCQ0QQOQ0[0].OO00CCQOQ0,OQOQ0O00Q0,O0QQ0O00Q0,
OQCQ0QQOQ0[0].O0O0CCQOQ0,OQCQ0QQOQ0[0].OOO0CCQOQ0,OQCQ0QQOQ0[0].O000CCQOQ0]));
{$ENDIF}
end;
procedure OQQ0QQ00Q0.OQ0C0O00Q0(OC0C0O00Q0:Boolean);
var
O0OC0O00Q0,OOOC0O00Q0:Integer;
OQOC0O00Q0:Byte;
OCOC0O00Q0:OCO0QQCOQ0;
O0QC0O00Q0:OQOQQCQOQ0;
OOQC0O00Q0:TParamDesc;
begin
OOOC0O00Q0:=OQQQ0QQOQ0.OQOO00COQ0;
OCQ0QQ00Q0:=nil;
SetLength(OCQ0QQ00Q0,OOOC0O00Q0);
if O0C0QQ00Q0 then
SetLength(OOC0QQ00Q0,OOOC0O00Q0);
for O0OC0O00Q0:=0 to OOOC0O00Q0-1 do begin
OCOC0O00Q0:=@OCQ0QQ00Q0[O0OC0O00Q0];
OCOC0O00Q0.OOQ0QQCOQ0:=GetParamNameWODog(OQQQ0QQOQ0.OO0QC0COQ0(True));
if not OC0C0O00Q0 then
OCOC0O00Q0.OCCOQQCOQ0:=OQQQ0QQOQ0.O0OO00COQ0
else
OCOC0O00Q0.OCCOQQCOQ0:=OQQQ0QQOQ0.O0QO00COQ0;
OCOC0O00Q0.OQC0QQCOQ0:=O0OC0O00Q0;
OCOC0O00Q0.O00OQQCOQ0:=O0OC0O00Q0;
OCOC0O00Q0.O0OOQQCOQ0:=OQQQ0QQOQ0.O0QO00COQ0;
OCOC0O00Q0.OQ0OQQCOQ0:=fdkData;
OQOC0O00Q0:=OQQQ0QQOQ0.O0OO00COQ0;
OCOC0O00Q0.OC0OQQCOQ0:=OQOC0O00Q0;
OCOC0O00Q0.OOOOQQCOQ0:=@OQ0C0QQOQ0[OQOC0O00Q0];
if OCOC0O00Q0.OOOOQQCOQ0.OQ0CCQCOQ0='' then
raise Exception.CreateFmt('Unknown Sql type %X',[OQOC0O00Q0]);
OQOCCQQOQ0(OCOC0O00Q0);
if OCOC0O00Q0.OOOOQQCOQ0.OQ00CQCOQ0 then
OQQQ0QQOQ0.O0OQC0COQ0(True);
OQQQ0QQOQ0.OO0QC0COQ0(True);
if O0C0QQ00Q0 then begin
O0QC0O00Q0:=@OOC0QQ00Q0[O0OC0O00Q0];
O0QC0O00Q0.O0QQQCQOQ0:=OCOC0O00Q0.OOQ0QQCOQ0;
O0QC0O00Q0.OOQQQCQOQ0:=O0OC0O00Q0;
O0QC0O00Q0.O0CQQCQOQ0:=Integer(OCOC0O00Q0.OCQ0QQCOQ0);
O0QC0O00Q0.O00CQCQOQ0:=OCOC0O00Q0.OC0OQQCOQ0;
O0QC0O00Q0.OO0CQCQOQ0:=OCOC0O00Q0.O0OOQQCOQ0;
OOQC0O00Q0:=TParamDesc.Create;
OOQC0O00Q0.SetParamType(pdUnknown);
OOQC0O00Q0.SetName(OCOC0O00Q0.OOQ0QQCOQ0);
OOQC0O00Q0.SetSize(OCOC0O00Q0.OCQ0QQCOQ0);
OOQC0O00Q0.SetNull(False);
OQC0QQ00Q0.Add(OOQC0O00Q0);
end;
end;
end;
procedure OQQ0QQ00Q0.OQQC0O00Q0;
var
OCQC0O00Q0:Integer;
O0CC0O00Q0:Integer;
OOCC0O00Q0:OCO0QQCOQ0;
OQCC0O00Q0:OQ00QQCOQ0;
OCCC0O00Q0:OCOQQCQOQ0;
begin
for OCQC0O00Q0:=0 to High(OCQ0QQ00Q0)do begin
OOCC0O00Q0:=@OCQ0QQ00Q0[OCQC0O00Q0];
if O0C0QQ00Q0 then begin
if OOCC0O00Q0.OOQ0QQCOQ0<>'' then
O0CC0O00Q0:=O0OOQQ00Q0(OOCC0O00Q0.OOQ0QQCOQ0)
else
O0CC0O00Q0:=OCQC0O00Q0;
if(O0CC0O00Q0>=0)and(OOC0QQ00Q0[O0CC0O00Q0].OCQQQCQOQ0<>pdInput)then begin
OCCC0O00Q0:=OOC0QQ00Q0[O0CC0O00Q0];
O0QCCQQOQ0(OOCC0O00Q0^,OQCC0O00Q0,False);
O000CQQOQ0(OCOOQQ00Q0,OCQOQQ00Q0,OQ0QOO00Q0,
OCCC0O00Q0,OOCC0O00Q0^,OQCC0O00Q0);
end
else
raise Exception.CreateFmt('ParamIdx %d param is pdInput or wrong index',[O0CC0O00Q0]);
end
else begin
if OOCC0O00Q0.OOQ0QQCOQ0<>'' then
O0CC0O00Q0:=OO0O0QQOQ0(OOCC0O00Q0.OOQ0QQCOQ0)
else begin
if OCQC0O00Q0<Length(OCC0QQ00Q0)then
O0CC0O00Q0:=OCC0QQ00Q0[OCQC0O00Q0]
else
O0CC0O00Q0:=-1;
end;
O0QCCQQOQ0(OOCC0O00Q0^,OQCC0O00Q0,False);
if(O0CC0O00Q0>=0)and(OC00QQQOQ0[O0CC0O00Q0].OCQQQCQOQ0<>pdInput)then begin
OCCC0O00Q0:=OC00QQQOQ0[O0CC0O00Q0];
O000CQQOQ0(OCO00QQOQ0,O0Q00QQOQ0,OQQ00QQOQ0,OCCC0O00Q0,OOCC0O00Q0^,OQCC0O00Q0);
end;
end;
end;
end;
procedure OQQ0QQ00Q0.OQQOCQQOQ0;
var
O0000O00Q0:OQQOCQ00Q0;
OO000O00Q0:Int64;
begin
OQQQ0QQOQ0.OCC000COQ0(@O0000O00Q0,SizeOf(OQQOCQ00Q0));
{$IFDEF LOG_PACKETS}
AddToLog(Format('Status: %.4X, CurCmd: %.4X, Count: %d',[O0000O00Q0.OCQOCQ00Q0,O0000O00Q0.O0COCQ00Q0,O0000O00Q0.OOCOCQ00Q0]));
{$ENDIF}
OO000O00Q0:=O0000O00Q0.OOCOCQ00Q0;
OQQOCQQOQ0(O0000O00Q0.OCQOCQ00Q0,O0000O00Q0.O0COCQ00Q0,OO000O00Q0);
end;
procedure OQQ0QQ00Q0.OQ000O00Q0(OC000O00Q0:OQQCC0COQ0;
const O0O00O00Q0:OCOQQCQOQ0;OOO00O00Q0:Byte;const OQO00O00Q0:Variant);
var
OCO00O00Q0:O00CCQCOQ0;
O0Q00O00Q0:Integer;
OOQ00O00Q0:TBcd;
OQQ00O00Q0:TDBNumeric;
begin
OC000O00Q0.OC00C0COQ0(Length(O0O00O00Q0.O0QQQCQOQ0));
OC000O00Q0.O0COC0COQ0(OOC0QO00Q0(O0O00O00Q0.O0QQQCQOQ0));
if not OQOCO000Q0(O0CQ0QQOQ0).OQ000000Q0(OCC0QOCOQ0)then
OC000O00Q0.OC00C0COQ0(OOO00O00Q0);
OC000O00Q0.OCQ0C0COQ0(O0O00O00Q0.OO0CQCQOQ0);
OC000O00Q0.OC00C0COQ0(O0O00O00Q0.O00CQCQOQ0);
if O0O00O00Q0.O00CQCQOQ0=OCQ0QCCOQ0 then
Exit;
OCO00O00Q0:=@OQ0C0QQOQ0[O0O00O00Q0.O00CQCQOQ0];
Assert(OCO00O00Q0.OQ0CCQCOQ0<>'');
if O0O00O00Q0.O00CQCQOQ0=OOO0OOCOQ0 then begin
case O0O00O00Q0.OO0CQCQOQ0 of
O00COQCOQ0:begin
OC000O00Q0.OC00C0COQ0(O0CQO0COQ0);
OC000O00Q0.OCO0C0COQ0(0);
end;
OCQ0OQCOQ0:begin
OC000O00Q0.OC00C0COQ0(OQCQO0COQ0);
OC000O00Q0.OCO0C0COQ0(0);
end;
else
OC000O00Q0.OC00C0COQ0(OOCQO0COQ0);
OC000O00Q0.OCO0C0COQ0(0);
end;
end
else begin
O0Q00O00Q0:=O00OQQ00Q0(O0O00O00Q0.O00CQCQOQ0,O0O00O00Q0.OO0CQCQOQ0,OCO00O00Q0);
if OCO00O00Q0.OQOCCQCOQ0>O0Q00O00Q0 then
O0Q00O00Q0:=OCO00O00Q0.OQOCCQCOQ0;
case OCO00O00Q0.OOOCCQCOQ0 of
O0OQ0QCOQ0:
if O0O00O00Q0.O00CQCQOQ0 in[O0OQOQCOQ0,OOOQOQCOQ0]then begin
OOQ00O00Q0:=VarToBcd(OQO00O00Q0);
{$IFDEF FPC}
if(OOQ00O00Q0.Precision=0)and(OOQ00O00Q0.SignSpecialPlaces=0)then begin
OOQ00O00Q0.Precision:=10;
OOQ00O00Q0.SignSpecialPlaces:=2;
end;
{$ENDIF}
OQQ00O00Q0:=BcdToDBNumeric(OOQ00O00Q0);
OC000O00Q0.OC00C0COQ0(OOQCO0COQ0[OQQ00O00Q0.precision]);
OC000O00Q0.OC00C0COQ0(OQQ00O00Q0.precision);
OC000O00Q0.OC00C0COQ0(OQQ00O00Q0.scale);
end
else if O0O00O00Q0.O00CQCQOQ0 in[OOCQOQCOQ0,OQCQOQCOQ0]then begin
OC000O00Q0.OC00C0COQ0(8);
OC000O00Q0.OC00C0COQ0(6);
end
else
OC000O00Q0.OC00C0COQ0(O0Q00O00Q0);
OOOQ0QCOQ0:
OC000O00Q0.OCO0C0COQ0(O0Q00O00Q0);
OQOQ0QCOQ0:
OC000O00Q0.OCQ0C0COQ0(O0Q00O00Q0);
end;
end;
OC000O00Q0.OC00C0COQ0(0);
end;
procedure OQQ0QQ00Q0.OCQ00O00Q0(const O0C00O00Q0:OCOQQCQOQ0;OOC00O00Q0:Boolean;const OQC00O00Q0:Variant);
function OCC00O00Q0:Boolean;
begin
Result:=False;
if OOC00O00Q0 then begin
if VarIsNull(OQC00O00Q0)then begin
OCQQ0QQOQ0.OC00C0COQ0(OOOC0OCOQ0);
Exit;
end;
if VarIsEmpty(OQC00O00Q0)then begin
OCQQ0QQOQ0.OC00C0COQ0(OQOC0OCOQ0);
Exit;
end;
OCQQ0QQOQ0.OC00C0COQ0(O0OC0OCOQ0);
end;
Result:=True;
end;
function O00O0O00Q0(OO0O0O00Q0:Integer):Variant;
var
OQ0O0O00Q0:AnsiString;
begin
if OO0O0O00Q0>0 then begin
SetLengthA(OQ0O0O00Q0,OO0O0O00Q0);
FillChar(OQ0O0O00Q0[1]{$IFDEF NEXTGEN}^{$ENDIF},OO0O0O00Q0,0);
Result:=OQ0O0O00Q0;
end
else begin
OQ0O0O00Q0:=' ';
Result:=OQ0O0O00Q0;
end;
end;
function OC0O0O00Q0(O0OO0O00Q0:Integer):Variant;
var
OOOO0O00Q0:WideString;
begin
if O0OO0O00Q0>0 then begin
SetLength(OOOO0O00Q0,O0OO0O00Q0);
FillChar(OOOO0O00Q0[1],O0OO0O00Q0*2,0);
Result:=OOOO0O00Q0;
end
else begin
OOOO0O00Q0:=' ';
Result:=OOOO0O00Q0;
end;
end;
function OQOO0O00Q0(OCOO0O00Q0:Integer):Variant;
begin
if OCOO0O00Q0>0 then begin
Result:=VarArrayCreate([0,OCOO0O00Q0-1],varByte);
FillChar(TVarData(Result).VArray.Data^,OCOO0O00Q0,0);
end
else begin
Result:=VarArrayCreate([0,0],varByte);
Result[0]:=0;
end;
end;
var
O0QO0O00Q0:O00CCQCOQ0;
OOQO0O00Q0:Boolean;
OQQO0O00Q0:Variant;
begin
if O0C00O00Q0.O00CQCQOQ0=OCQ0QCCOQ0 then
Exit;
O0QO0O00Q0:=@OQ0C0QQOQ0[O0C00O00Q0.O00CQCQOQ0];
Assert(O0QO0O00Q0.OQ0CCQCOQ0<>'');
OOQO0O00Q0:=O0QO0O00Q0.OCQCCQCOQ0 or(O0C00O00Q0.OO0CQCQOQ0 in[OQQ0OQCOQ0,OCQ0OQCOQ0]);
OQQO0O00Q0:=OQC00O00Q0;
if(VarIsNull(OQQO0O00Q0)or VarIsEmpty(OQQO0O00Q0))then
if O0C00O00Q0.OCQQQCQOQ0=pdOutput then
case O0C00O00Q0.O00CQCQOQ0 of
OCQOQCCOQ0,
O00OQCCOQ0:
OQQO0O00Q0:=0;
OQOQOQCOQ0:
OQQO0O00Q0:=0.0;
OCOQOQCOQ0:
OQQO0O00Q0:=0.0;
O0QQOQCOQ0:
OQQO0O00Q0:=0.0;
OOCQOQCOQ0,
OQCQOQCOQ0:
OQQO0O00Q0:=VarSQLTimeStampCreate(DateTimeToSQLTimeStamp(1.0));
OO0OQCCOQ0,
O00OOOCOQ0:
OQQO0O00Q0:=O00O0O00Q0(O0C00O00Q0.O0CQQCQOQ0);
OCC0QCCOQ0,
OC0OOOCOQ0,
OOO0OOCOQ0:
if OOQO0O00Q0 then
OQQO0O00Q0:=OC0O0O00Q0(O0C00O00Q0.O0CQQCQOQ0)
else
OQQO0O00Q0:=OQOO0O00Q0(O0C00O00Q0.O0CQQCQOQ0);
end
else if not O0QO0O00Q0.OCQ0CQCOQ0 then
if(O0C00O00Q0.O00CQCQOQ0=OCQOQCCOQ0)and(O0C00O00Q0.OCQQQCQOQ0 in[pdOutput,pdInputOutput,pdResult])then
OQQO0O00Q0:=False
else if O0C00O00Q0.O0QQQCQOQ0<>'' then
raise Exception.CreateFmt('Null value is not allowed in %s, param %s',[O0QO0O00Q0.OQ0CCQCOQ0,O0C00O00Q0.O0QQQCQOQ0])
else
raise Exception.CreateFmt('Null value is not allowed in %s',[O0QO0O00Q0.OQ0CCQCOQ0]);
case O0QO0O00Q0.OOOCCQCOQ0 of
OC0Q0QCOQ0:
OCQCCO00Q0(O0C00O00Q0,OQQO0O00Q0);
O0OQ0QCOQ0:
if OCC00O00Q0 then
OCCCCO00Q0(O0C00O00Q0,OOQO0O00Q0,OQQO0O00Q0);
OOOQ0QCOQ0:
if OCC00O00Q0 then
OCC0CO00Q0(O0C00O00Q0,OOQO0O00Q0,OQQO0O00Q0);
OQOQ0QCOQ0:
if OCC00O00Q0 then
OOOOCO00Q0(O0C00O00Q0,OOQO0O00Q0,OQQO0O00Q0);
end;
end;
procedure OQQ0QQ00Q0.OCQO0O00Q0(O0CO0O00Q0:Boolean=True);
var
OOCO0O00Q0,OQCO0O00Q0,OCCO0O00Q0:Integer;
O00QCO00Q0:NativeInt;
OO0QCO00Q0:array of OCOQQCQOQ0;
OQ0QCO00Q0:array of PVariant;
OC0QCO00Q0:array of Byte;
O0OQCO00Q0:array of Boolean;
OOOQCO00Q0:Byte;
begin
OQCO0O00Q0:=Length(OC00QQQOQ0);
SetLength(OO0QCO00Q0,OQCO0O00Q0);
SetLength(OQ0QCO00Q0,OQCO0O00Q0);
SetLength(OC0QCO00Q0,OQCO0O00Q0);
SetLength(O0OQCO00Q0,OQCO0O00Q0);
OCQQ0QQOQ0.OC00C0COQ0(OOCQQCCOQ0);
O00QCO00Q0:=OCQQ0QQOQ0.OOQOO0COQ0;
OCQQ0QQOQ0.OCO0C0COQ0(0);
OCQQ0QQOQ0.OCO0C0COQ0(Word(OQCO0O00Q0));
OQCO0O00Q0:=0;
for OOCO0O00Q0:=0 to Length(OC00QQQOQ0)-1 do begin
OO0QCO00Q0[OOCO0O00Q0]:=OC00QQQOQ0[OOCO0O00Q0];
Assert(Assigned(OOQ00QQOQ0));
OQ0QCO00Q0[OOCO0O00Q0]:=OOQ00QQOQ0(OO0QCO00Q0[OOCO0O00Q0].OOQQQCQOQ0,OO0QCO00Q0[OOCO0O00Q0].OQQQQCQOQ0);
if O0CO0O00Q0 and(OO0QCO00Q0[OOCO0O00Q0].O0QQQCQOQ0<>'')then
OO0QCO00Q0[OOCO0O00Q0].O0QQQCQOQ0:='@'+OO0QCO00Q0[OOCO0O00Q0].O0QQQCQOQ0
else
OO0QCO00Q0[OOCO0O00Q0].O0QQQCQOQ0:='';
if(OO0QCO00Q0[OOCO0O00Q0].O00CQCQOQ0=OCQ0QCCOQ0)and(OOCO0O00Q0<Length(OCQ0QQ00Q0))then begin
OOOQCO00Q0:=OCQ0QQ00Q0[OOCO0O00Q0].OC0OQQCOQ0;
OO0QCO00Q0[OOCO0O00Q0].O00CQCQOQ0:=OOOQCO00Q0;
if O000O0COQ0[OOOQCO00Q0]<>0 then begin
OO0QCO00Q0[OOCO0O00Q0].O00CQCQOQ0:=O000O0COQ0[OOOQCO00Q0];
OO0QCO00Q0[OOCO0O00Q0].OO0CQCQOQ0:=OO00O0COQ0[OOOQCO00Q0];
end;
end;
OC0QCO00Q0[OOCO0O00Q0]:=0;
if OO0QCO00Q0[OOCO0O00Q0].OCQQQCQOQ0 in[pdResult,pdOutput,pdInputOutput]then
OC0QCO00Q0[OOCO0O00Q0]:=OC0QCO00Q0[OOCO0O00Q0]or OO0C0OCOQ0;
O0OQCO00Q0[OOCO0O00Q0]:=False;
if OO0QCO00Q0[OOCO0O00Q0].OCQQQCQOQ0<>pdResult then begin
OQ000O00Q0(OCQQ0QQOQ0,OO0QCO00Q0[OOCO0O00Q0],OC0QCO00Q0[OOCO0O00Q0],OQ0QCO00Q0[OOCO0O00Q0]^);
Inc(OQCO0O00Q0);
end;
end;
OCCO0O00Q0:=OCQQ0QQOQ0.OOQOO0COQ0-O00QCO00Q0-2;
OCQQ0QQOQ0.O0Q0Q0COQ0(@OCCO0O00Q0,SizeOf(Word),O00QCO00Q0);
Inc(O00QCO00Q0,SizeOf(Word));
OCQQ0QQOQ0.O0Q0Q0COQ0(@OQCO0O00Q0,SizeOf(Word),O00QCO00Q0);
OCQQ0QQOQ0.OC00C0COQ0(OCOQQCCOQ0);
for OOCO0O00Q0:=0 to Length(OC00QQQOQ0)-1 do
if OO0QCO00Q0[OOCO0O00Q0].OCQQQCQOQ0<>pdResult then
OCQ00O00Q0(OO0QCO00Q0[OOCO0O00Q0],O0OQCO00Q0[OOCO0O00Q0],OQ0QCO00Q0[OOCO0O00Q0]^);
end;
procedure OQQ0QQ00Q0.O000CQQOQ0(O0QQQO00Q0:OC0OCCQOQ0;OOQQQO00Q0:OCOOCCQOQ0;OQQQQO00Q0:O00QQCQOQ0;
const OCQQQO00Q0:OCOQQCQOQ0;const O0CQQO00Q0:O0Q0QQCOQ0;const OOCQQO00Q0:OQ00QQCOQ0);
var
OQCQQO00Q0:integer;
OCCQQO00Q0:Pointer;
O00CQO00Q0:TBlob;
OO0CQO00Q0:Variant;
OQ0CQO00Q0:TSQLTimeStamp;
OC0CQO00Q0:OOCCCCQOQ0;
begin
if Assigned(O0QQQO00Q0)then
O0QQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,OOCQQO00Q0.OC00QQCOQ0);
if OOCQQO00Q0.OC00QQCOQ0 or not Assigned(OOQQQO00Q0)then
Exit;
OQCQQO00Q0:=Length(OOCQQO00Q0.OOO0QQCOQ0);
if OQCQQO00Q0>0 then
OCCQQO00Q0:=@OOCQQO00Q0.OOO0QQCOQ0[0]
else
OCCQQO00Q0:=nil;
case O0CQQO00Q0.OC0OQQCOQ0 of
OO0OOOCOQ0:
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,PShortInt(OCCQQO00Q0)^);
OCO0OOCOQ0:
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,PByte(OCCQQO00Q0)^);
O0Q0OOCOQ0:
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,PWord(OCCQQO00Q0)^);
OOQ0OOCOQ0:
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,PCardinal(OCCQQO00Q0)^);
OQ0OOOCOQ0:
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,PInt64(OCCQQO00Q0)^);
OQQ0OOCOQ0:
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,PUInt64(OCCQQO00Q0)^);
OQQQOQCOQ0,O0CQOQCOQ0,OOQOQCCOQ0,OQQOQCCOQ0:
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,O0QOQQQOQ0(O0CQQO00Q0.OC0OQQCOQ0,O0CQQO00Q0.OOC0QQCOQ0,OCCQQO00Q0,OQCQQO00Q0));
OOCQOQCOQ0,OQCQOQCOQ0:begin
OCOCOOQOQ0(O0CQQO00Q0.OC0OQQCOQ0,O0CQQO00Q0.OOC0QQCOQ0,OQCQQO00Q0,OCCQQO00Q0,@OQ0CQO00Q0);
{$IFNDEF FPC}
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,VarSQLTimeStampCreate(OQ0CQO00Q0));
{$ELSE}
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,EncodeDateTime(OQ0CQO00Q0.Year,OQ0CQO00Q0.Month,OQ0CQO00Q0.Day,OQ0CQO00Q0.Hour,OQ0CQO00Q0.Minute,OQ0CQO00Q0.Second,OQ0CQO00Q0.Fractions));
{$ENDIF}
end;
O00OOOCOQ0:begin
OO0CQO00Q0:=O0QQCQQOQ0(O0CQQO00Q0,OCCQQO00Q0,OQCQQO00Q0);
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,OO0CQO00Q0);
end;
OC0OOOCOQ0:begin
OO0CQO00Q0:=Unassigned;
if O0CQQO00Q0.O0OOQQCOQ0 in[OQO0OQCOQ0,OQQ0OQCOQ0,OCQ0OQCOQ0]then
OO0CQO00Q0:=O0QQCQQOQ0(O0CQQO00Q0,OCCQQO00Q0,OQCQQO00Q0)
else
if OQCQQO00Q0>0 then begin
OO0CQO00Q0:=VarArrayCreate([0,OQCQQO00Q0-1],varByte);
Move(OCCQQO00Q0^,TVarData(OO0CQO00Q0).VArray.Data^,OQCQQO00Q0);
end;
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,OO0CQO00Q0);
end;
OOO0OOCOQ0:
if Assigned(OQQQQO00Q0)then begin
O00CQO00Q0:=TBlob(OQQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0));
if O00CQO00Q0=nil then begin
O00CQO00Q0:=TBlob.Create;
OOQQQO00Q0(OCQQQO00Q0.OOQQQCQOQ0,OCQQQO00Q0.OQQQQCQOQ0,O00CQO00Q0.ToVariant);
end;
if O0CQQO00Q0.OOOOQQCOQ0.OCQCCQCOQ0 or(O0CQQO00Q0.O0OOQQCOQ0 in[OQQ0OQCOQ0,OCQ0OQCOQ0])then
OC0CQO00Q0:=OCQCCCQOQ0
else if O0CQQO00Q0.OOOOQQCOQ0.OQQCCQCOQ0 then
OC0CQO00Q0:=OQQCCCQOQ0
else
OC0CQO00Q0:=O0CCCCQOQ0;
O00CQO00Q0.RollbackEnabled:=False;
OOQ0OOQOQ0(OOCQQO00Q0,O00CQO00Q0,O0CQQO00Q0.OQCOQQCOQ0,OC0CQO00Q0);
O00CQO00Q0.RollbackEnabled:=True;
end;
else
inherited;
end;
end;
function OQQ0QQ00Q0.O00OQQ00Q0(OO0OQQ00Q0:Byte;OQ0OQQ00Q0:Cardinal;OC0OQQ00Q0:O00CCQCOQ0):Byte;
begin
if OC0OQQ00Q0.O0O0CQCOQ0 then begin
case OO0OQQ00Q0 of
O00OQCCOQ0:begin
case OQ0OQQ00Q0 of
OC0COQCOQ0:
Result:=1;
O0OCOQCOQ0,OC0OOQCOQ0:
Result:=2;
OOOCOQCOQ0,OQQOOQCOQ0,O0OOOQCOQ0:
Result:=4;
OQ0OOQCOQ0,OOOOOQCOQ0:
Result:=8;
else
raise Exception.CreateFmt('GetVarlenSize wrong user type %d',[OQ0OQQ00Q0]);
end;
end;
OC0QOQCOQ0:
Result:=1;
OQOQOQCOQ0,OCOQOQCOQ0:begin
case OQ0OQQ00Q0 of
O0O0OQCOQ0:
Result:=4
else
Result:=8;
end;
end;
O0QQOQCOQ0:begin
case OQ0OQQ00Q0 of
OC00OQCOQ0:
Result:=4;
else
Result:=8;
end;
end;
else
raise Exception.CreateFmt('GetVarlenSize unknown param type %X',[OO0OQQ00Q0]);
end;
end
else
case OO0OQQ00Q0 of
OOOQOQCOQ0:
Result:=OQ0C0QCOQ0;
else
Result:=1;
end;
end;
procedure OQQO0000Q0(var OCQO0000Q0:string);
begin
if OCQO0000Q0='' then
OCQO0000Q0:=' ';
end;
procedure O0CO0000Q0(var OOCO0000Q0:WideString);
begin
if OOCO0000Q0='' then
OOCO0000Q0:=' ';
end;
procedure OQQ0QQ00Q0.OQOQCO00Q0(OCOQCO00Q0:Boolean;const O0QQCO00Q0:Variant);
var
OOQQCO00Q0:TBlob;
OQQQCO00Q0:Word;
OCQQCO00Q0:string;
O0CQCO00Q0:WideString;
begin
OQQQCO00Q0:=TVarData(O0QQCO00Q0).VType;
if(OQQQCO00Q0 and varByRef)<>0 then begin
OOQQCO00Q0:=TVarData(O0QQCO00Q0).VPointer;
if OOQQCO00Q0.IsEmpty then begin
if OCOQCO00Q0 then
OCQQ0QQOQ0.O0CQQ0COQ0(WideString(#0))
else
OCQQ0QQOQ0.OOQQQ0COQ0(AnsiString(#0));
end
else
OCQQ0QQOQ0.OQ0QQ0COQ0(OOQQCO00Q0);
end
else
if OQQQCO00Q0=varArray+varByte then begin
OCQQ0QQOQ0.OCO0C0COQ0(Word(TVarData(O0QQCO00Q0).VArray.Bounds[0].ElementCount and$FF));
OCQQ0QQOQ0.OOOOC0COQ0(TVarData(O0QQCO00Q0).VArray.Data,TVarData(O0QQCO00Q0).VArray.Bounds[0].ElementCount and$FF);
end
else begin
if OCOQCO00Q0 then begin
O0CQCO00Q0:=WideString(O0QQCO00Q0);
O0CO0000Q0(O0CQCO00Q0);
OCQQ0QQOQ0.OOO0Q0COQ0(O0CQCO00Q0);
end
else begin
OCQQCO00Q0:=string(O0QQCO00Q0);
OQQO0000Q0(OCQQCO00Q0);
OCQQ0QQOQ0.O000Q0COQ0(OOC0QO00Q0(OCQQCO00Q0));
end;
end;
end;
procedure OQQ0QQ00Q0.OOCQCO00Q0(OQCQCO00Q0:Boolean;const OCCQCO00Q0:Variant);
var
O00CCO00Q0:TBlob;
OO0CCO00Q0:Word;
OQ0CCO00Q0:string;
OC0CCO00Q0:WideString;
begin
OO0CCO00Q0:=TVarData(OCCQCO00Q0).VType;
if(OO0CCO00Q0 and varByRef)<>0 then begin
O00CCO00Q0:=TVarData(OCCQCO00Q0).VPointer;
if O00CCO00Q0.IsEmpty then begin
if OQCQCO00Q0 then
OCQQ0QQOQ0.O0CCQ0COQ0(WideString(#0))
else
OCQQ0QQOQ0.OQOCQ0COQ0(AnsiString(#0));
end
else
OCQQ0QQOQ0.OC0CQ0COQ0(O00CCO00Q0);
end
else
if OO0CCO00Q0=varArray+varByte then begin
OCQQ0QQOQ0.OCO0C0COQ0(Word(TVarData(OCCQCO00Q0).VArray.Bounds[0].ElementCount));
OCQQ0QQOQ0.OOOOC0COQ0(TVarData(OCCQCO00Q0).VArray.Data,TVarData(OCCQCO00Q0).VArray.Bounds[0].ElementCount and$FFFF);
end
else begin
if OQCQCO00Q0 then begin
OC0CCO00Q0:=WideString(OCCQCO00Q0);
O0CO0000Q0(OC0CCO00Q0);
OCQQ0QQOQ0.OOO0Q0COQ0(OC0CCO00Q0);
end
else begin
OQ0CCO00Q0:=string(OCCQCO00Q0);
OQQO0000Q0(OQ0CCO00Q0);
OCQQ0QQOQ0.O000Q0COQ0(OOC0QO00Q0(OQ0CCO00Q0));
end;
end;
end;
procedure OQQ0QQ00Q0.O0OCCO00Q0(OOOCCO00Q0:Boolean;const OQOCCO00Q0:Variant);
var
OCOCCO00Q0:TBlob;
O0QCCO00Q0:Word;
OOQCCO00Q0:string;
OQQCCO00Q0:WideString;
begin
O0QCCO00Q0:=TVarData(OQOCCO00Q0).VType;
if(O0QCCO00Q0 and varByRef)<>0 then begin
OCOCCO00Q0:=TVarData(OQOCCO00Q0).VPointer;
if OCOCCO00Q0.IsEmpty then begin
if OOOCCO00Q0 then
OCQQ0QQOQ0.OOO0Q0COQ0(WideString(#0))
else
OCQQ0QQOQ0.O000Q0COQ0(AnsiString(#0));
end
else
OCQQ0QQOQ0.OCOQQ0COQ0(OCOCCO00Q0);
end
else
if O0QCCO00Q0=varArray+varByte then begin
OCQQ0QQOQ0.OCQ0C0COQ0(TVarData(OQOCCO00Q0).VArray.Bounds[0].ElementCount);
OCQQ0QQOQ0.OOOOC0COQ0(TVarData(OQOCCO00Q0).VArray.Data,TVarData(OQOCCO00Q0).VArray.Bounds[0].ElementCount);
end
else begin
if OOOCCO00Q0 then begin
OQQCCO00Q0:=WideString(OQOCCO00Q0);
O0CO0000Q0(OQQCCO00Q0);
OCQQ0QQOQ0.OOO0Q0COQ0(OQQCCO00Q0);
end
else begin
OOQCCO00Q0:=string(OQOCCO00Q0);
OQQO0000Q0(OOQCCO00Q0);
OCQQ0QQOQ0.O000Q0COQ0(OOC0QO00Q0(OOQCCO00Q0));
end;
end;
end;
procedure OQQ0QQ00Q0.OCQCCO00Q0(const O0CCCO00Q0:OCOQQCQOQ0;const OOCCCO00Q0:Variant);
var
OQCCCO00Q0:Int64;
begin
case O0CCCO00Q0.O00CQCQOQ0 of
OCQOQCCOQ0:begin
OQCCCO00Q0:=0;
if OOCCCO00Q0 then
OQCCCO00Q0:=1;
OCQQ0QQOQ0.OC00C0COQ0(Byte(OQCCCO00Q0));
end;
else
raise Exception.CreateFmt('FIXED_LENGTH_TYPE: TdsFieldType %X not implemented yet',[O0CCCO00Q0.O00CQCQOQ0]);
end;
end;
procedure OQQ0QQ00Q0.OCCCCO00Q0(const O000CO00Q0:OCOQQCQOQ0;OO00CO00Q0:Boolean;const OQ00CO00Q0:Variant);
var
OC00CO00Q0:OQQOCQCOQ0;
O0O0CO00Q0:TDateTime;
OOO0CO00Q0:Single;
OQO0CO00Q0:Double;
OCO0CO00Q0:Currency;
O0Q0CO00Q0:Int64;
OOQ0CO00Q0:OC0OCQCOQ0;
OQQ0CO00Q0:Integer;
OCQ0CO00Q0:TBcd;
O0C0CO00Q0:TDBNumeric;
OOC0CO00Q0:Byte;
OQC0CO00Q0:TSQLTimeStamp;
begin
if(VarIsEmpty(OQ00CO00Q0)or VarIsNull(OQ00CO00Q0))and not(O000CO00Q0.O00CQCQOQ0 in[O0OQOQCOQ0,OOOQOQCOQ0])then
OCQQ0QQOQ0.OCCOC0COQ0(nil,0)
else
case O000CO00Q0.O00CQCQOQ0 of
O00OQCCOQ0:
case O000CO00Q0.OO0CQCQOQ0 of
OC0COQCOQ0:begin
O0Q0CO00Q0:=Byte(OQ00CO00Q0);
OCQQ0QQOQ0.OCCOC0COQ0(@O0Q0CO00Q0,1);
end;
O0OCOQCOQ0:begin
O0Q0CO00Q0:=Smallint(OQ00CO00Q0);
OCQQ0QQOQ0.OCCOC0COQ0(@O0Q0CO00Q0,2);
end;
OC0OOQCOQ0:begin
O0Q0CO00Q0:=Word(OQ00CO00Q0);
OCQQ0QQOQ0.OCCOC0COQ0(@O0Q0CO00Q0,2);
end;
OOOCOQCOQ0:begin
O0Q0CO00Q0:=Integer(OQ00CO00Q0);
OCQQ0QQOQ0.OCCOC0COQ0(@O0Q0CO00Q0,4);
end;
OQQOOQCOQ0,O0OOOQCOQ0:begin
O0Q0CO00Q0:=VarAsType(OQ00CO00Q0,varLongWord);
OCQQ0QQOQ0.OCCOC0COQ0(@O0Q0CO00Q0,4);
end;
OQ0OOQCOQ0:begin
O0Q0CO00Q0:=OQ00CO00Q0;
OCQQ0QQOQ0.OCCOC0COQ0(@O0Q0CO00Q0,8);
end;
OOOOOQCOQ0:begin
O0Q0CO00Q0:=OQ00CO00Q0;
OCQQ0QQOQ0.OCCOC0COQ0(@O0Q0CO00Q0,8);
end;
else
raise Exception.CreateFmt('Unknown UserType %d',[O000CO00Q0.OO0CQCQOQ0]);
end;
OQOQOQCOQ0:
if O000CO00Q0.OO0CQCQOQ0=O0O0OQCOQ0 then begin
OOO0CO00Q0:=Single(OQ00CO00Q0);
OCQQ0QQOQ0.OCCOC0COQ0(@OOO0CO00Q0,4);
end
else
if O000CO00Q0.OO0CQCQOQ0=OCO0OQCOQ0 then begin
OQO0CO00Q0:=Currency(OQ00CO00Q0);
OCQQ0QQOQ0.OCCOC0COQ0(@OQO0CO00Q0,8);
end
else begin
OQO0CO00Q0:=Double(OQ00CO00Q0);
OCQQ0QQOQ0.OCCOC0COQ0(@OQO0CO00Q0,8);
end;
OO0OQCCOQ0,O00OOOCOQ0:begin
if((VarType(OQ00CO00Q0)and varArray)<>0)and(VarArrayDimCount(OQ00CO00Q0)>0)then
OCQQ0QQOQ0.OCCOC0COQ0(TVarData(OQ00CO00Q0).VArray.Data,VarArrayHighBound(OQ00CO00Q0,1)+1)
else
OQOQCO00Q0(OO00CO00Q0,OQ00CO00Q0);
end;
O0QQOQCOQ0:begin
O0O0CO00Q0:=TDateTime(OQ00CO00Q0);
OC00CO00Q0.OCQOCQCOQ0:=Trunc(O0O0CO00Q0);
Assert(OC00CO00Q0.OCQOCQCOQ0>=-53688);
Dec(OC00CO00Q0.OCQOCQCOQ0,2);
OQQ0CO00Q0:=Round(Abs(Frac(O0O0CO00Q0))*OQOO0000Q0);
if OQQ0CO00Q0>=OQOO0000Q0 then
OQQ0CO00Q0:=OQOO0000Q0-1;
OC00CO00Q0.O0COCQCOQ0:=OQQ0CO00Q0;
OCQQ0QQOQ0.OCCOC0COQ0(@OC00CO00Q0,SizeOf(OC00CO00Q0));
end;
OOCQOQCOQ0,OQCQOQCOQ0:begin
if VarIsSQLTimeStamp(OQ00CO00Q0)then begin
OQC0CO00Q0:=VarToSQLTimeStamp(OQ00CO00Q0);
OQQCOO00Q0(OQC0CO00Q0,@O0Q0CO00Q0);
end
else
O000OO00Q0(TDateTime(OQ00CO00Q0),@O0Q0CO00Q0);
OCQQ0QQOQ0.OCCOC0COQ0(@O0Q0CO00Q0,SizeOf(O0Q0CO00Q0));
end;
OCOQOQCOQ0:begin
OCO0CO00Q0:=Currency(OQ00CO00Q0);
Move(OCO0CO00Q0,O0Q0CO00Q0,8);
OOQ0CO00Q0.O0OOCQCOQ0:=Int64Rec(O0Q0CO00Q0).Hi;
OOQ0CO00Q0.OOOOCQCOQ0:=Int64Rec(O0Q0CO00Q0).Lo;
OCQQ0QQOQ0.OCCOC0COQ0(@OOQ0CO00Q0,8);
end;
O0OQOQCOQ0,OOOQOQCOQ0:begin
if VarIsEmpty(OQ00CO00Q0)or VarIsNull(OQ00CO00Q0)then begin
OCQQ0QQOQ0.OC00C0COQ0(0);
end
else begin
OCQ0CO00Q0:=VarToBcd(OQ00CO00Q0);
O0C0CO00Q0:=BcdToDBNumeric(OCQ0CO00Q0);
OOC0CO00Q0:=OOQCO0COQ0[O0C0CO00Q0.precision];
OCQQ0QQOQ0.OC00C0COQ0(OOC0CO00Q0);
O0OCOO00Q0(O0C0CO00Q0);
OCQQ0QQOQ0.OOOOC0COQ0(@O0C0CO00Q0.sign,OOC0CO00Q0);
end;
end;
OCC0QCCOQ0:begin
if((VarType(OQ00CO00Q0)and varArray)<>0)and(VarArrayDimCount(OQ00CO00Q0)>0)then
OCQQ0QQOQ0.OCCOC0COQ0(TVarData(OQ00CO00Q0).VArray.Data,VarArrayHighBound(OQ00CO00Q0,1)+1)
else if O000CO00Q0.OO0CQCQOQ0 in[OQO0OQCOQ0,OCQ0OQCOQ0]then
OQOQCO00Q0(OO00CO00Q0,OQ00CO00Q0)
else
raise Exception.Create('Not an array or Blob');
end;
else
raise Exception.CreateFmt('LENGTH_TYPE_BYTE: TdsFieldType %d not implemented yet',[O000CO00Q0.O00CQCQOQ0]);
end;
end;
procedure OQQ0QQ00Q0.OCC0CO00Q0(const O00OCO00Q0:OCOQQCQOQ0;OO0OCO00Q0:Boolean;const OQ0OCO00Q0:Variant);
var
OC0OCO00Q0:Word;
O0OOCO00Q0:TBlob;
begin
if VarIsEmpty(OQ0OCO00Q0)or VarIsNull(OQ0OCO00Q0)then
OCQQ0QQOQ0.OCCQQ0COQ0(nil,0)
else begin
OC0OCO00Q0:=VarType(OQ0OCO00Q0);
case O00OCO00Q0.O00CQCQOQ0 of
O00OOOCOQ0:begin
if((OC0OCO00Q0 and varArray)<>0)and(VarArrayDimCount(OQ0OCO00Q0)>0)then
OCQQ0QQOQ0.OCCQQ0COQ0(TVarData(OQ0OCO00Q0).VArray.Data,VarArrayHighBound(OQ0OCO00Q0,1)+1)
else
OOCQCO00Q0(OO0OCO00Q0,OQ0OCO00Q0);
end;
OC0OOOCOQ0:begin
if O00OCO00Q0.OO0CQCQOQ0=OCQ0OQCOQ0 then
OOCQCO00Q0(OO0OCO00Q0,OQ0OCO00Q0)
else if((OC0OCO00Q0 and varArray)<>0)and(VarArrayDimCount(OQ0OCO00Q0)>0)then
OCQQ0QQOQ0.OCCQQ0COQ0(TVarData(OQ0OCO00Q0).VArray.Data,VarArrayHighBound(OQ0OCO00Q0,1)+1)
else if TVarData(OQ0OCO00Q0).VPointer<>nil then begin
O0OOCO00Q0:=TVarData(OQ0OCO00Q0).VPointer;
OCQQ0QQOQ0.OC0CQ0COQ0(O0OOCO00Q0);
end
else
raise Exception.Create('Not an array or Blob');
end;
OOO0OOCOQ0:begin
Assert((OC0OCO00Q0 and varByRef)<>0);
Assert(TVarData(OQ0OCO00Q0).VPointer<>nil);
O0OOCO00Q0:=TVarData(OQ0OCO00Q0).VPointer;
OCQQ0QQOQ0.OC0CQ0COQ0(O0OOCO00Q0);
end;
else
raise Exception.CreateFmt('LENGTH_TYPE_USHORT: TdsFieldType %d not implemented yet',[O00OCO00Q0.O00CQCQOQ0]);
end;
end;
end;
procedure OQQ0QQ00Q0.OOOOCO00Q0(const OQOOCO00Q0:OCOQQCQOQ0;OCOOCO00Q0:Boolean;const O0QOCO00Q0:Variant);
var
OOQOCO00Q0:Word;
OQQOCO00Q0:TBlob;
begin
OOQOCO00Q0:=VarType(O0QOCO00Q0);
case OQOOCO00Q0.O00CQCQOQ0 of
O00OOOCOQ0,OC0OOOCOQ0,OQC0OOCOQ0:begin
if VarIsEmpty(O0QOCO00Q0)or VarIsNull(O0QOCO00Q0)then
OCQQ0QQOQ0.OCQ0C0COQ0(0)
else
if(OOQOCO00Q0 and varArray)<>0 then begin
OCQQ0QQOQ0.OCQ0C0COQ0(TVarData(O0QOCO00Q0).VArray.Bounds[0].ElementCount);
OCQQ0QQOQ0.OOOOC0COQ0(TVarData(O0QOCO00Q0).VArray.Data,TVarData(O0QOCO00Q0).VArray.Bounds[0].ElementCount);
end
else
O0OCCO00Q0(OCOOCO00Q0,O0QOCO00Q0);
end;
OOO0OOCOQ0:begin
OCQQ0QQOQ0.OC00C0COQ0(0);
OCQQ0QQOQ0.OCO0C0COQ0(0);
if VarIsEmpty(O0QOCO00Q0)or VarIsNull(O0QOCO00Q0)then begin
end
else
if(OOQOCO00Q0 and varArray)<>0 then begin
OCQQ0QQOQ0.OOQ0C0COQ0(Integer(Cardinal(TVarData(O0QOCO00Q0).VArray.Bounds[0].ElementCount)or OOOCO0COQ0));
OCQQ0QQOQ0.OOOOC0COQ0(TVarData(O0QOCO00Q0).VArray.Data,TVarData(O0QOCO00Q0).VArray.Bounds[0].ElementCount);
end
else
if(OOQOCO00Q0 and varByRef)<>0 then begin
Assert(TVarData(O0QOCO00Q0).VPointer<>nil);
OQQOCO00Q0:=TVarData(O0QOCO00Q0).VPointer;
if OQQOCO00Q0<>nil then begin
if OQQOCO00Q0.Size>0 then begin
OCQQ0QQOQ0.OOQ0C0COQ0(Integer(OQQOCO00Q0.Size or OOOCO0COQ0));
OCQQ0QQOQ0.O0C0Q0COQ0(OQQOCO00Q0);
end;
end;
end;
OCQQ0QQOQ0.OCQ0C0COQ0(0);
end;
else
raise Exception.CreateFmt('LENGTH_TYPE_LONG: TdsFieldType %d not implemented yet',[OQOOCO00Q0.O00CQCQOQ0]);
end;
end;
procedure OQQ0QQ00Q0.OOQC0OQOQ0(OOOOQO00Q0:Boolean);
var
OQOOQO00Q0:string;
OCOOQO00Q0:AnsiString;
begin
SetLength(OCC0QQ00Q0,0);
if O00C0QQOQ0='' then
raise Exception.Create(SEmptySQLStatement);
OQOOQO00Q0:=O0000OQOQ0(O00C0QQOQ0);
if OOOOQO00Q0 then
if not OCOQQQQOQ0(OQOOQO00Q0,[lxTOP])then
OQOOQO00Q0:=OO0QQQQOQ0(OQOOQO00Q0);
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OCQQ0QQOQ0.OC00C0COQ0(OOC0CCCOQ0);
OCOOQO00Q0:=OOC0QO00Q0(OQOOQO00Q0);
OCQQ0QQOQ0.OOQ0C0COQ0(LengthA(OCOOQO00Q0)+1);
if OC00QQQOQ0=nil then
OCQQ0QQOQ0.OC00C0COQ0(0)
else
OCQQ0QQOQ0.OC00C0COQ0(1);
OCQQ0QQOQ0.O0COC0COQ0(OCOOQO00Q0);
if OC00QQQOQ0<>nil then
OCQO0O00Q0(False);
OOCCQQQOQ0(OOCCCCCOQ0);
OCCCQQQOQ0;
end;
function OQQ0QQ00Q0.OQQQOO00Q0(const OCQQOO00Q0:string):string;
var
O0CQOO00Q0:Integer;
OOCQOO00Q0:TSQLParser;
OQCQOO00Q0:integer;
OCCQOO00Q0:string;
O00COO00Q0:array of integer;
OO0COO00Q0:array of integer;
OQ0COO00Q0:Integer;
OC0COO00Q0:StringBuilder;
begin
SetLength(O00COO00Q0,8);
SetLength(OO0COO00Q0,8);
OQ0COO00Q0:=0;
OOCQOO00Q0:=O0OC0QQOQ0.Create(OCQQOO00Q0);
try
OOCQOO00Q0.OmitBlank:=False;
OOCQOO00Q0.OmitComment:=True;
OOCQOO00Q0.QuotedString:=True;
repeat
OQCQOO00Q0:=OOCQOO00Q0.GetNext(OCCQOO00Q0);
if OQCQOO00Q0=lxAt then begin
OQCQOO00Q0:=OOCQOO00Q0.GetNext(OCCQOO00Q0);
if(OQCQOO00Q0=lcIdent)or(OQCQOO00Q0=lcNumber)or(OQCQOO00Q0>=lxSQLFirst)then begin
if OQ0COO00Q0>=Length(O00COO00Q0)then begin
SetLength(O00COO00Q0,Length(O00COO00Q0)*2);
SetLength(OO0COO00Q0,Length(OO0COO00Q0)*2);
end;
O00COO00Q0[OQ0COO00Q0]:=OOCQOO00Q0.PrevPos;
OO0COO00Q0[OQ0COO00Q0]:=OOCQOO00Q0.CurrPos;
Inc(OQ0COO00Q0);
end;
end;
until OQCQOO00Q0=lcEnd;
if OQ0COO00Q0>0 then begin
OC0COO00Q0:=StringBuilder.Create(Length(OCQQOO00Q0)+OQ0COO00Q0*3);
try
OC0COO00Q0.Append(copy(OCQQOO00Q0,1,O00COO00Q0[0]-1));
OC0COO00Q0.Append('?');
for O0CQOO00Q0:=1 to OQ0COO00Q0-1 do begin
OC0COO00Q0.Append(copy(OCQQOO00Q0,OO0COO00Q0[O0CQOO00Q0-1]+1,O00COO00Q0[O0CQOO00Q0]-OO0COO00Q0[O0CQOO00Q0-1]-1));
OC0COO00Q0.Append('?');
end;
OC0COO00Q0.Append(copy(OCQQOO00Q0,OO0COO00Q0[OQ0COO00Q0-1]+1,Length(OCQQOO00Q0)));
Result:=OC0COO00Q0.ToString;
finally
OC0COO00Q0.Free;
end;
end
else
Result:=OCQQOO00Q0;
finally
OOCQOO00Q0.Free;
end;
end;
procedure OQQ0QQ00Q0.OOCC0OQOQ0(O0QOQO00Q0:Integer;var OOQOQO00Q0:Integer);
var
OQQOQO00Q0:OQCOCQ00Q0;
OCQOQO00Q0:NativeInt;
O0COQO00Q0,OOCOQO00Q0:AnsiString;
begin
O0COQO00Q0:=AnsiString('dyn'+IntToStr(OOQOQO00Q0));
OOCOQO00Q0:='';
OQQOQO00Q0.OCCOCQ00Q0:=O0QOQO00Q0;
OQQOQO00Q0.O00QQQ00Q0:=OOO00OCOQ0;
OQQOQO00Q0.OO0QQQ00Q0:=LengthA(O0COQO00Q0);
case O0QOQO00Q0 of
OOCC0OCOQ0:begin
OOCOQO00Q0:=OOC0QO00Q0(Format('create proc %s as %s',[string(O0COQO00Q0),OQQQOO00Q0(O00C0QQOQ0)]));
end;
O0000OCOQ0:begin
OQQOQO00Q0.O00QQQ00Q0:=OOO00OCOQ0;
end;
OQCC0OCOQ0:
if Length(OC00QQQOQ0)>0 then begin
OQQOQO00Q0.O00QQQ00Q0:=OQO00OCOQ0;
end;
OCCC0OCOQ0:;
end;
OCQOQO00Q0:=SizeOf(OQCOCQ00Q0)+LengthA(O0COQO00Q0)+2+LengthA(OOCOQO00Q0);
Assert(OCQOQO00Q0<=$FFFF);
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OCQQ0QQOQ0.OC00C0COQ0(O0CQQCCOQ0);
OCQQ0QQOQ0.OCO0C0COQ0(Word(OCQOQO00Q0));
OCQQ0QQOQ0.OOOOC0COQ0(@OQQOQO00Q0,SizeOf(OQQOQO00Q0));
if LengthA(O0COQO00Q0)>0 then
OCQQ0QQOQ0.OOOOC0COQ0(PAnsiChar(O0COQO00Q0),LengthA(O0COQO00Q0));
OCQQ0QQOQ0.OCO0C0COQ0(LengthA(OOCOQO00Q0));
if LengthA(OOCOQO00Q0)>0 then
OCQQ0QQOQ0.OOOOC0COQ0(PAnsiChar(OOCOQO00Q0),LengthA(OOCOQO00Q0));
if(O0QOQO00Q0=OQCC0OCOQ0)and(Length(OC00QQQOQ0)>0)then
OCQO0O00Q0(False);
OOCCQQQOQ0(OOCCCCCOQ0);
OQCCQQQOQ0;
end;
procedure OQQ0QQ00Q0.OCQC0OQOQ0(const OQCOQO00Q0:string);
procedure OCCOQO00Q0;
var
O00QO000Q0:Integer;
OO0QO000Q0:Integer;
begin
OO0QO000Q0:=0;
for O00QO000Q0:=0 to Length(OC00QQQOQ0)-1 do
if OC00QQQOQ0[O00QO000Q0].OCQQQCQOQ0 in[pdOutput,pdInputOutput]then
Inc(OO0QO000Q0);
SetLength(OCC0QQ00Q0,OO0QO000Q0);
OO0QO000Q0:=0;
for O00QO000Q0:=0 to Length(OC00QQQOQ0)-1 do
if OC00QQQOQ0[O00QO000Q0].OCQQQCQOQ0 in[pdOutput,pdInputOutput]then begin
OCC0QQ00Q0[OO0QO000Q0]:=O00QO000Q0;
Inc(OO0QO000Q0);
end;
end;
begin
OQ000QQOQ0:=0;
OCQQ0QQOQ0.OQ0OO0COQ0;
OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OCQQ0QQOQ0.OC00C0COQ0(OCQQQCCOQ0);
OCQQ0QQOQ0.OCO0C0COQ0(1+Length(OQCOQO00Q0)+2);
OCQQ0QQOQ0.OOQQQ0COQ0(OOC0QO00Q0(OQCOQO00Q0));
OCQQ0QQOQ0.OCO0C0COQ0(O0QCO0COQ0);
SetLength(OCC0QQ00Q0,0);
if OC00QQQOQ0<>nil then begin
OCCOQO00Q0;
OCQO0O00Q0(False);
end;
OOCCQQQOQ0(OOCCCCCOQ0);
OQCCQQQOQ0;
O00O0QQOQ0;
end;
function OQQ0QQ00Q0.O0000OQOQ0(const OQ0QO000Q0:string):string;
procedure OC0QO000Q0(var O0OQO000Q0:TIntArr;var OOOQO000Q0:Integer;OQOQO000Q0:Integer);
begin
if OOOQO000Q0>=Length(O0OQO000Q0)then
SetLength(O0OQO000Q0,Length(O0OQO000Q0)*2);
O0OQO000Q0[OOOQO000Q0]:=OQOQO000Q0;
Inc(OOOQO000Q0);
end;
type
OQQQO000Q0=(OCOQO000Q0,O0QQO000Q0,OOQQO000Q0);
var
OCQQO000Q0:StringBuilder;
O0CQO000Q0:TSQLParser;
OOCQO000Q0:Integer;
OQCQO000Q0:string;
OCCQO000Q0:Integer;
O00CO000Q0:Integer;
OO0CO000Q0:string;
OQ0CO000Q0:TStringList;
OC0CO000Q0:Integer;
O0OCO000Q0:OQQQO000Q0;
begin
if OC00QQQOQ0=nil then begin
Result:=OQ0QO000Q0;
Exit;
end;
O00CO000Q0:=0;
OCQQO000Q0:=StringBuilder.Create(Length(OQ0QO000Q0)+Length(OQ0QO000Q0)div 2);
OQ0CO000Q0:=TStringList.Create;
OC0CO000Q0:=0;
SetLength(OCC0QQ00Q0,32);
try
O0CQO000Q0:=O0OC0QQOQ0.Create(OQ0QO000Q0);
try
O0CQO000Q0.OmitBlank:=False;
O0CQO000Q0.OmitComment:=True;
O0CQO000Q0.QuotedString:=True;
O0CQO000Q0.DecSeparator:='.';
O0CQO000Q0.ToBegin;
OCCQO000Q0:=O0CQO000Q0.CurrPos;
O0OCO000Q0:=OCOQO000Q0;
OOCQO000Q0:=O0CQO000Q0.GetNext(OQCQO000Q0);
while OOCQO000Q0<>lcEnd do begin
case OOCQO000Q0 of
lxQuestion:begin
OCQQO000Q0.Append(Copy(OQ0QO000Q0,OCCQO000Q0+1,O0CQO000Q0.CurrPos-OCCQO000Q0-1));
if O00CO000Q0>=Length(OC00QQQOQ0)then
raise Exception.CreateFmt('ParamIndex %d out of range',[O00CO000Q0]);
OO0CO000Q0:=OC00QQQOQ0[O00CO000Q0].O0QQQCQOQ0;
if(Length(OO0CO000Q0)>1)and(OO0CO000Q0[1]='[')and(OO0CO000Q0[Length(OO0CO000Q0)]=']')then
OO0CO000Q0:='P'+IntToStr(O00CO000Q0);
if OQ0CO000Q0.IndexOf(OO0CO000Q0)>=0 then
OO0CO000Q0:=OO0CO000Q0+'_'+IntToStr(O00CO000Q0);
OC00QQQOQ0[O00CO000Q0].O0QQQCQOQ0:=OO0CO000Q0;
OCQQO000Q0.Append('@'+OO0CO000Q0);
OQ0CO000Q0.Add(OO0CO000Q0);
Inc(O00CO000Q0);
OCCQO000Q0:=O0CQO000Q0.CurrPos;
O0OCO000Q0:=O0QQO000Q0;
end;
lxAt:begin
OOCQO000Q0:=O0CQO000Q0.GetNext(OQCQO000Q0);
if(OOCQO000Q0=lcIdent)or(OOCQO000Q0=lcNumber)or(OOCQO000Q0>=lxSQLFirst)then
if(O00CO000Q0<Length(OC00QQQOQ0))and(OQCQO000Q0=OC00QQQOQ0[O00CO000Q0].O0QQQCQOQ0)then begin
Inc(O00CO000Q0);
O0OCO000Q0:=O0QQO000Q0;
end
else
O0OCO000Q0:=OOQQO000Q0;
end;
end;
OOCQO000Q0:=O0CQO000Q0.GetNext(OQCQO000Q0);
if O0OCO000Q0<>OCOQO000Q0 then begin
if OOCQO000Q0=lcBlank then begin
OOCQO000Q0:=O0CQO000Q0.GetNext(OQCQO000Q0);
if(OOCQO000Q0=lxOUT)or(OOCQO000Q0=lxOUTPUT)then
case O0OCO000Q0 of
O0QQO000Q0:
OC0QO000Q0(OCC0QQ00Q0,OC0CO000Q0,O00CO000Q0-1);
OOQQO000Q0:
OC0QO000Q0(OCC0QQ00Q0,OC0CO000Q0,-1);
end;
end;
O0OCO000Q0:=OCOQO000Q0;
end;
end;
if OCQQO000Q0.Length>0 then
OCQQO000Q0.Append(Copy(OQ0QO000Q0,OCCQO000Q0+1,O0CQO000Q0.CurrPos-OCCQO000Q0));
finally
O0CQO000Q0.Free;
end;
if OCQQO000Q0.Length>0 then
Result:=OCQQO000Q0.ToString
else
Result:=OQ0QO000Q0;
finally
SetLength(OCC0QQ00Q0,OC0CO000Q0);
OQ0CO000Q0.Free;
OCQQO000Q0.Free;
end;
end;
constructor OQOCO000Q0.Create;
begin
inherited;
OOO0QCQOQ0:=OQ00CCCOQ0;
OCCCO000Q0:=OQQ0QQ00Q0.Create(Self);
OCCCO000Q0.O0C0QQ00Q0:=True;
OCCCO000Q0.OQC0QQ00Q0:=TParamDescs.Create;
end;
destructor OQOCO000Q0.Destroy;
begin
OCCCO000Q0.Free;
{$IFDEF USE_SSL}
OQCCO000Q0.Free;
{$ENDIF}
inherited;
end;
function OQOCO000Q0.O000O000Q0:integer;
begin
Result:=OQ0O0000Q0.GetMaxByteCount(1);
end;
procedure OQOCO000Q0.O00OO000Q0(const OO0OO000Q0:O00QCOQOQ0);
procedure OQ0OO000Q0(const OC0OO000Q0:string;O0OOO000Q0:Pointer);
var
OOOOO000Q0:TBytes;
begin
OOOOO000Q0:=Encoding.UTF8.GetBytes(OC0OO000Q0);
if Length(OOOOO000Q0)>0 then
Move(OOOOO000Q0[0],O0OOO000Q0^,Length(OOOOO000Q0));
end;
var
OQOOO000Q0:OQQQCQ00Q0;
OCOOO000Q0:string;
O0QOO000Q0:string;
const
OOQOO000Q0='DevartTds';
OQQOO000Q0='us_english';
OCQOO000Q0='utf8';
O0COO000Q0='5064';
OOCOO000Q0='DBISQL';
begin
OQO0QCQOQ0:=O00OOQQOQ0(OCQOO000Q0);
if Length(OO0OO000Q0.OO0QCOQOQ0)>OO0QCQ00Q0 then
raise Exception.CreateFmt('UserName %s length exceeds maxlength %d',[OO0OO000Q0.OO0QCOQOQ0,OO0QCQ00Q0]);
if Length(OO0OO000Q0.OQ0QCOQOQ0)>OO0QCQ00Q0 then
raise Exception.CreateFmt('Password %s length exceeds maxlength %d',[OO0OO000Q0.OQ0QCOQOQ0,OO0QCQ00Q0]);
if Length(OO0OO000Q0.OC0QCOQOQ0)>OO0QCQ00Q0 then
raise Exception.CreateFmt('AppName %s length exceeds maxlength %d',[OO0OO000Q0.OC0QCOQOQ0,OO0QCQ00Q0]);
if Length(OO0OO000Q0.O0OQCOQOQ0)>OO0QCQ00Q0 then
raise Exception.CreateFmt('ServerName %s length exceeds maxlength %d',[OO0OO000Q0.O0OQCOQOQ0,OO0QCQ00Q0]);
if Length(OO0OO000Q0.OQOQCOQOQ0)>OO0QCQ00Q0 then
raise Exception.CreateFmt('Language %s length exceeds maxlength %d',[OO0OO000Q0.OQOQCOQOQ0,OO0QCQ00Q0]);
FillChar(OQOOO000Q0,SizeOf(OQOOO000Q0),0);
O0QOO000Q0:=GetHostName;
OQ0OO000Q0(O0QOO000Q0,@OQOOO000Q0.OCQQCQ00Q0[0]);
OQOOO000Q0.O0CQCQ00Q0:=Length(O0QOO000Q0);
OQ0OO000Q0(OO0OO000Q0.OO0QCOQOQ0,@OQOOO000Q0.OOCQCQ00Q0[0]);
OQOOO000Q0.OQCQCQ00Q0:=Length(OO0OO000Q0.OO0QCOQOQ0);
OQ0OO000Q0(O0COO000Q0,@OQOOO000Q0.OO0CCQ00Q0[0]);
OQOOO000Q0.OQ0CCQ00Q0:=Length(O0COO000Q0);
OQOOO000Q0.OC0CCQ00Q0:=OC0QQQ00Q0;
OQOOO000Q0.O0OCCQ00Q0:=OOOQQQ00Q0;
OQOOO000Q0.OOOCCQ00Q0:=OQOQQQ00Q0;
OQOOO000Q0.OQOCCQ00Q0:=OQQQQQ00Q0;
OQOOO000Q0.OCOCCQ00Q0:=OOCQQQ00Q0;
OQOOO000Q0.O0QCCQ00Q0:=1;
OQOOO000Q0.OOQCCQ00Q0:=0;
OQOOO000Q0.OQQCCQ00Q0:=OQCQQQ00Q0;
OQOOO000Q0.OCQCCQ00Q0:=0;
OQ0OO000Q0(OOCOO000Q0,@OQOOO000Q0.OQCCCQ00Q0[0]);
OQOOO000Q0.OCCCCQ00Q0:=Length(OOCOO000Q0);
OQOOO000Q0.O0O0CQ00Q0[0]:=5;
OQ0OO000Q0(OOQOO000Q0,@OQOOO000Q0.OOO0CQ00Q0[0]);
OQOOO000Q0.OQO0CQ00Q0:=Length(OOQOO000Q0);
OQOOO000Q0.OCO0CQ00Q0[0]:=1;
OQOOO000Q0.O0Q0CQ00Q0:=OCQCQQ00Q0;
OQOOO000Q0.OOQ0CQ00Q0:=OOCCQQ00Q0;
OQOOO000Q0.OQQ0CQ00Q0:=OO00QQ00Q0;
OQ0OO000Q0(OQQOO000Q0,@OQOOO000Q0.OCQ0CQ00Q0[0]);
OQOOO000Q0.O0C0CQ00Q0:=Length(OQQOO000Q0);
OQOOO000Q0.OOC0CQ00Q0:=OC00QQ00Q0;
{$IFDEF USE_SSL}
OQOOO000Q0.OCC0CQ00Q0:=$A1;
{$ELSE}
OQOOO000Q0.OCC0CQ00Q0:=$01;
{$ENDIF}
OQOOO000Q0.OQOOCQ00Q0:=OC00QQ00Q0;
OCOQ0QQOQ0:=512;
OCOOO000Q0:=IntToStr(OCOQ0QQOQ0);
OQ0OO000Q0(OCOOO000Q0,@OQOOO000Q0.OCOOCQ00Q0[0]);
OQOOO000Q0.O0QOCQ00Q0:=Length(OCOOO000Q0);
OCCCO000Q0.OCQQ0QQOQ0.OQ0OO0COQ0;
OCCCO000Q0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OCCCO000Q0.OCQQ0QQOQ0.OOOOC0COQ0(@OQOOO000Q0,SizeOf(OQOOO000Q0));
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(O0QQQCCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OCO0C0COQ0(Length(OCOO0000Q0)+Length(O0QO0000Q0)+4);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(O00O0OCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(Length(OCOO0000Q0));
OCCCO000Q0.OCQQ0QQOQ0.OOOOC0COQ0(@OCOO0000Q0[0],Length(OCOO0000Q0));
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(OO0O0OCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(Length(O0QO0000Q0));
OCCCO000Q0.OCQQ0QQOQ0.OOOOC0COQ0(@O0QO0000Q0[0],Length(O0QO0000Q0));
OCCCO000Q0.OOCCQQQOQ0(OCOCCCCOQ0);
end;
function OQOCO000Q0.OQ000000Q0(OC000000Q0:integer):boolean;
var
O0O00000Q0,OOO00000Q0,OQO00000Q0:Integer;
OCO00000Q0:Byte;
begin
O0O00000Q0:=OC000000Q0-1;
Assert(O0O00000Q0>=0);
OOO00000Q0:=High(OOCCO000Q0)-O0O00000Q0 shr 3;
OQO00000Q0:=O0O00000Q0 and$7;
OCO00000Q0:=1 shl OQO00000Q0;
Result:=(OOCCO000Q0[OOO00000Q0]and OCO00000Q0)<>0;
end;
function OQOCO000Q0.O0Q00000Q0(OOQ00000Q0:integer):boolean;
var
OQQ00000Q0,OCQ00000Q0,O0C00000Q0:Integer;
OOC00000Q0:Byte;
begin
OQQ00000Q0:=OOQ00000Q0-1;
Assert(OQQ00000Q0>=0);
OCQ00000Q0:=High(O0QO0000Q0)-OQQ00000Q0 shr 3;
O0C00000Q0:=OQQ00000Q0 and$7;
OOC00000Q0:=1 shl O0C00000Q0;
Result:=(O0QO0000Q0[OCQ00000Q0]and OOC00000Q0)<>0;
end;
class procedure OQOCO000Q0.O0OC0000Q0(var OOOC0000Q0:OOOCO000Q0;OQOC0000Q0:Integer;OCOC0000Q0:Boolean);
var
O0QC0000Q0,OOQC0000Q0,OQQC0000Q0:Integer;
OCQC0000Q0:Byte;
begin
O0QC0000Q0:=OQOC0000Q0-1;
Assert(O0QC0000Q0>=0);
OOQC0000Q0:=High(OOOC0000Q0)-O0QC0000Q0 shr 3;
OQQC0000Q0:=O0QC0000Q0 and$7;
OCQC0000Q0:=1 shl OQQC0000Q0;
if OCOC0000Q0 then
OOOC0000Q0[OOQC0000Q0]:=OOOC0000Q0[OOQC0000Q0]or OCQC0000Q0
else
OOOC0000Q0[OOQC0000Q0]:=OOOC0000Q0[OOQC0000Q0]and not OCQC0000Q0;
end;
procedure OQOCO000Q0.OO00O000Q0;
var
OQ00O000Q0:OQQCC0COQ0;
OC00O000Q0:TMemoryStream;
O0O0O000Q0,OOO0O000Q0:TBytes;
OQO0O000Q0:AnsiString;
OCO0O000Q0,O0Q0O000Q0:Byte;
OOQ0O000Q0:Variant;
OQQ0O000Q0:Integer;
OCQ0O000Q0:OQ0QOCCOQ0;
O0C0O000Q0,OOC0O000Q0:TBytes;
OQC0O000Q0,OCC0O000Q0:OCOQQCQOQ0;
begin
Assert((OQQCO000Q0=OQOOOOCOQ0)or(OQQCO000Q0=OC0Q0OCOQ0)or(OQQCO000Q0=OOCQ0OCOQ0),'Message ID should be either MSG_SEC_ENCRYPT (1), MSG_SEC_ENCRYPT2 (14), or MSG_SEC_ENCRYPT3 (30)');
OQ00O000Q0:=OQQCC0COQ0.Create;
try
if(OQQCO000Q0=OC0Q0OCOQ0)or(OQQCO000Q0=OOCQ0OCOQ0)then begin
Assert(OCCCO000Q0.OQC0QQ00Q0.Count>1);
OOQ0O000Q0:=OCCCO000Q0.OQC0QQ00Q0[1].Value;
end
else begin
Assert(OCCCO000Q0.OQC0QQ00Q0.Count>0);
OOQ0O000Q0:=OCCCO000Q0.OQC0QQ00Q0[0].Value;
end;
Assert(not VarIsNull(OOQ0O000Q0)and not VarIsEmpty(OOQ0O000Q0));
Assert(TVarData(OOQ0O000Q0).VType=varArray or varByte);
SetLength(O0C0O000Q0,TVarData(OOQ0O000Q0).VArray.Bounds[0].ElementCount);
Move(TVarData(OOQ0O000Q0).VArray.Data^,O0C0O000Q0[0],TVarData(OOQ0O000Q0).VArray.Bounds[0].ElementCount);
OQO0O000Q0:=OCCCO000Q0.OOC0QO00Q0(OO00QCQOQ0.OQ0QCOQOQ0);
SetLength(OOC0O000Q0,LengthA(OQO0O000Q0));
if LengthA(OQO0O000Q0)>0 then
Move(PAnsiChar(OQO0O000Q0)^,OOC0O000Q0[0],LengthA(OQO0O000Q0));
OCO0O000Q0:=2;
O0Q0O000Q0:=3;
FillChar(OQC0O000Q0,SizeOf(OQC0O000Q0),0);
OQC0O000Q0.O00CQCQOQ0:=OCC0QCCOQ0;
if(OQQCO000Q0=OC0Q0OCOQ0)or(OQQCO000Q0=OOCQ0OCOQ0)then begin
OC00O000Q0:=TMemoryStream.Create;
try
OC00O000Q0.Write(O0C0O000Q0[0],Length(O0C0O000Q0));
OC00O000Q0.Position:=0;
{$IFDEF USE_SSL}
OQCCO000Q0.OOQQOCQ0Q0(OC00O000Q0);
{$ELSE}
raise Exception.Create('Requires encryption but USE_SSL not defined');
{$ENDIF}
finally
OC00O000Q0.Free;
end;
if OQQCO000Q0=OOCQ0OCOQ0 then begin
OCO0O000Q0:=OQCQ0OCOQ0;
O0Q0O000Q0:=OCCQ0OCOQ0;
OQC0O000Q0.O00CQCQOQ0:=OC0OOOCOQ0;
Assert(OCCCO000Q0.OQC0QQ00Q0.Count>2);
OOQ0O000Q0:=OCCCO000Q0.OQC0QQ00Q0[2].Value;
Assert(not VarIsNull(OOQ0O000Q0)and not VarIsEmpty(OOQ0O000Q0));
Assert(TVarData(OOQ0O000Q0).VType=varArray or varByte);
SetLength(O0O0O000Q0,TVarData(OOQ0O000Q0).VArray.Bounds[0].ElementCount+Length(OOC0O000Q0));
Move(TVarData(OOQ0O000Q0).VArray.Data^,O0O0O000Q0[0],TVarData(OOQ0O000Q0).VArray.Bounds[0].ElementCount);
if Length(OOC0O000Q0)>0 then
Move(OOC0O000Q0[0],O0O0O000Q0[TVarData(OOQ0O000Q0).VArray.Bounds[0].ElementCount],Length(OOC0O000Q0));
end
else begin
OCO0O000Q0:=O0OQ0OCOQ0;
O0Q0O000Q0:=OCQQ0OCOQ0;
SetLength(O0O0O000Q0,Length(OOC0O000Q0));
if Length(OOC0O000Q0)>0 then
Move(OOC0O000Q0[0],O0O0O000Q0[0],Length(OOC0O000Q0));
end;
{$IFDEF USE_SSL}
OOO0O000Q0:=OQCCO000Q0.O00OOCQ0Q0(O0O0O000Q0,OCCOOOOOQ0);
{$ENDIF}
end
else begin
SetLength(OOO0O000Q0,33);
OCQ0O000Q0:=OQ0QOCCOQ0.Create;
try
OQQ0O000Q0:=OCQ0O000Q0.OOQO0CCOQ0(O0C0O000Q0,OOC0O000Q0,OOO0O000Q0);
OOO0O000Q0[32]:=OQQ0O000Q0 and$FF;
finally
OCQ0O000Q0.Free;
end;
end;
{$IFDEF LOG_PACKETS}
AddDump(@OOO0O000Q0[0],Length(OOO0O000Q0),'EncBuf');
{$ENDIF}
OCCCO000Q0.OCQQ0QQOQ0.OQ0OO0COQ0;
OCCCO000Q0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(O00OCCCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(3);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(OOOOOOCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OCO0C0COQ0(OCO0O000Q0);
OCCCO000Q0.OQ000O00Q0(OQ00O000Q0,OQC0O000Q0,0,OOO0O000Q0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(OOCQQCCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OCO0C0COQ0(Word(OQ00O000Q0.OOQOO0COQ0+2));
OCCCO000Q0.OCQQ0QQOQ0.OCO0C0COQ0(1);
OCCCO000Q0.OCQQ0QQOQ0.OOOOC0COQ0(OQ00O000Q0.OCOOO0COQ0,OQ00O000Q0.OOQOO0COQ0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(OCOQQCCOQ0);
OCCCO000Q0.OCQ00O00Q0(OQC0O000Q0,False,OOO0O000Q0);
OQ00O000Q0.OO0OO0COQ0;
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(O00OCCCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(3);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(OOOOOOCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OCO0C0COQ0(O0Q0O000Q0);
FillChar(OCC0O000Q0,SizeOf(OCC0O000Q0),0);
OCC0O000Q0.O00CQCQOQ0:=OO0OQCCOQ0;
OCCCO000Q0.OQ000O00Q0(OQ00O000Q0,OCC0O000Q0,OC0C0OCOQ0,Null);
OCCCO000Q0.OQ000O00Q0(OQ00O000Q0,OQC0O000Q0,0,OOO0O000Q0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(OOCQQCCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OCO0C0COQ0(Word(OQ00O000Q0.OOQOO0COQ0+2));
OCCCO000Q0.OCQQ0QQOQ0.OCO0C0COQ0(2);
OCCCO000Q0.OCQQ0QQOQ0.OOOOC0COQ0(OQ00O000Q0.OCOOO0COQ0,OQ00O000Q0.OOQOO0COQ0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(OCOQQCCOQ0);
OCCCO000Q0.OCQ00O00Q0(OCC0O000Q0,False,Null);
OCCCO000Q0.OCQ00O00Q0(OQC0O000Q0,False,OOO0O000Q0);
OCCCO000Q0.OOCCQQQOQ0(OOCCCCCOQ0);
finally
OQ00O000Q0.Free;
end;
end;
procedure OQOCO000Q0.OCO0OQQOQ0(const O0CC0000Q0:O00QCOQOQ0;OOCC0000Q0:boolean;
OQCC0000Q0:OOQ0CCQOQ0;OCCC0000Q0:OOC0CCQOQ0;O0000000Q0:O00OCCQOQ0);
begin
inherited;
OCQCO000Q0:=False;
{$IFDEF USE_SSL}
if OQCCO000Q0<>nil then
FreeAndNil(OQCCO000Q0);
OQCCO000Q0:=O0CQOOC0Q0.Create();
{$ENDIF}
O00OO000Q0(O0CC0000Q0);
OCCCO000Q0.OQCCQQQOQ0;
if OCQCO000Q0 then begin
OO00O000Q0;
OCCCO000Q0.OQCCQQQOQ0;
end;
end;
procedure OQOCO000Q0.OO000000Q0;
begin
OCCCO000Q0.OCQQ0QQOQ0.OQ0OO0COQ0;
OCCCO000Q0.OCQQ0QQOQ0.OOCCC0COQ0(SizeOf(OC0QOOCOQ0));
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(OO0OCCCOQ0);
OCCCO000Q0.OCQQ0QQOQ0.OC00C0COQ0(0);
OCCCO000Q0.OOCCQQQOQ0(OOCCCCCOQ0);
OCCCO000Q0.OQCCQQQOQ0;
end;
procedure OQOCO000Q0.OQCOO000Q0(OCCOO000Q0:OCQOO0COQ0);
begin
OOQCO000Q0:=OCCOO000Q0.O0OO00COQ0;
OQQCO000Q0:=OCCOO000Q0.OQOO00COQ0;
end;
procedure OQOCO000Q0.O00Q0000Q0(OO0Q0000Q0:OCQOO0COQ0);
const
OQ0Q0000Q0=5;
OC0Q0000Q0=6;
O0OQ0000Q0=7;
var
OOOQ0000Q0:Byte;
OQOQ0000Q0,OCOQ0000Q0:Byte;
O0QQ0000Q0:string;
begin
OOOQ0000Q0:=OO0Q0000Q0.O0OO00COQ0;
OCQCO000Q0:=OOOQ0000Q0=O0OQ0000Q0;
OOO0QCQOQ0:=OCQCOCQOQ0(OO0Q0000Q0.O0QO00COQ0);
O0QQ0000Q0:=OO0Q0000Q0.OO0QC0COQ0(True);
OCOCO000Q0:=OO0Q0000Q0.O0OO00COQ0;
O0QCO000Q0:=OO0Q0000Q0.O0OO00COQ0;
OQOQ0000Q0:=OO0Q0000Q0.O0OO00COQ0;
OCOQ0000Q0:=OO0Q0000Q0.O0OO00COQ0;
if Assigned(O00Q0QQOQ0)then
O00Q0QQOQ0([O0QQ0000Q0,Format('%d.%d.%d',[OCOCO000Q0,O0QCO000Q0,(OQOQ0000Q0 shl 8)or OCOQ0000Q0]),OCOCO000Q0,O0QCO000Q0]);
{$IFDEF LOG_PACKETS}
AddToLog(Format('Status %X, TDSVersion %X, ProgName "%s", Ver %.2X%.2X%.2X%.2X',
[OOOQ0000Q0,OOO0QCQOQ0,O0QQ0000Q0,OCOCO000Q0,O0QCO000Q0,OQOQ0000Q0,OCOQ0000Q0]));
{$ENDIF}
end;
procedure OQOCO000Q0.OOQQ0000Q0(OQQQ0000Q0:OCQOO0COQ0);
var
OCQQ0000Q0:Byte;
O0CQ0000Q0,OOCQ0000Q0:string;
OQCQ0000Q0:Integer;
begin
OCQQ0000Q0:=OQQQ0000Q0.O0OO00COQ0;
{$IFDEF LOG_PACKETS}
Assert((OCQQ0000Q0>=Low(OQQ0QCCOQ0))and(OCQQ0000Q0<=High(OQQ0QCCOQ0)));
AddToLog(OQQ0QCCOQ0[OCQQ0000Q0]);
{$ENDIF}
case OCQQ0000Q0 of
O0QCQCCOQ0:begin
O0CQ0000Q0:=OQQQ0000Q0.OO0QC0COQ0(True);
OOCQ0000Q0:=OQQQ0000Q0.OO0QC0COQ0(True);
{$IFDEF LOG_PACKETS}
AddToLog(Format('new value "%s", old value "%s"',[O0CQ0000Q0,OOCQ0000Q0]));
{$ENDIF}
if Assigned(OCQ0QCQOQ0)then
OCQ0QCQOQ0([O0CQ0000Q0,OOCQ0000Q0]);
end;
OOQCQCCOQ0:begin
O0CQ0000Q0:=OQQQ0000Q0.OO0QC0COQ0(True);
OOCQ0000Q0:=OQQQ0000Q0.OO0QC0COQ0(True);
{$IFDEF LOG_PACKETS}
AddToLog(Format('new value "%s", old value "%s"',[O0CQ0000Q0,OOCQ0000Q0]));
{$ENDIF}
if Assigned(O0C0QCQOQ0)then
O0C0QCQOQ0([O0CQ0000Q0,OOCQ0000Q0]);
end;
OQQCQCCOQ0:begin
O0CQ0000Q0:=OQQQ0000Q0.OO0QC0COQ0(True);
OOCQ0000Q0:=OQQQ0000Q0.OO0QC0COQ0(True);
{$IFDEF LOG_PACKETS}
AddToLog(Format('new value "%s", old value "%s"',[O0CQ0000Q0,OOCQ0000Q0]));
{$ENDIF}
OQO0QCQOQ0:=O00OOQQOQ0(O0CQ0000Q0);
if Assigned(OOC0QCQOQ0)then
OOC0QCQOQ0([O0CQ0000Q0,OOCQ0000Q0]);
end;
OCQCQCCOQ0:begin
O0CQ0000Q0:=OQQQ0000Q0.OO0QC0COQ0(True);
OOCQ0000Q0:=OQQQ0000Q0.OO0QC0COQ0(True);
OQCQ0000Q0:=StrToInt64Def(O0CQ0000Q0,0);
if OQCQ0000Q0>0 then
OCOQ0QQOQ0:=OQCQ0000Q0;
{$IFDEF LOG_PACKETS}
AddToLog(Format('new value "%s", old value "%s"',[O0CQ0000Q0,OOCQ0000Q0]));
{$ENDIF}
if Assigned(OQC0QCQOQ0)then
OQC0QCQOQ0([O0CQ0000Q0,OOCQ0000Q0]);
end;
end;
end;
procedure OQOCO000Q0.OCCQ0000Q0(O00C0000Q0:OCQOO0COQ0);
var
OO0C0000Q0,OQ0C0000Q0:Byte;
OC0C0000Q0:TBytes;
begin
OO0C0000Q0:=O00C0000Q0.O0OO00COQ0;
case OO0C0000Q0 of
O00O0OCOQ0:begin
OQ0C0000Q0:=O00C0000Q0.O0OO00COQ0;
SetLength(OC0C0000Q0,OQ0C0000Q0);
O00C0000Q0.OCC000COQ0(@OC0C0000Q0[0],OQ0C0000Q0);
FillChar(O0CCO000Q0,Length(O0CCO000Q0),0);
if OQ0C0000Q0>Length(O0CCO000Q0)then
OQ0C0000Q0:=Length(O0CCO000Q0);
Move(OC0C0000Q0[0],O0CCO000Q0[0],OQ0C0000Q0);
end;
OO0O0OCOQ0:begin
OQ0C0000Q0:=O00C0000Q0.O0OO00COQ0;
SetLength(OC0C0000Q0,OQ0C0000Q0);
O00C0000Q0.OCC000COQ0(@OC0C0000Q0[0],OQ0C0000Q0);
FillChar(OOCCO000Q0,Length(OOCCO000Q0),0);
if OQ0C0000Q0>Length(OOCCO000Q0)then
OQ0C0000Q0:=Length(OOCCO000Q0);
Move(OC0C0000Q0[0],OOCCO000Q0[0],OQ0C0000Q0);
end;
end;
end;
function OQOCO000Q0.OQOOOQQOQ0:boolean;
begin
Result:=not OQ000000Q0(OOO0QOCOQ0)and
not O0Q00000Q0(OOO0QOCOQ0);
end;
function OQOCO000Q0.O00OOQQOQ0(const OQC00000Q0:string):Encoding;
var
OCC00000Q0:Integer;
begin
if not OCCCO0COQ0.TryGetValue(OQC00000Q0,OCC00000Q0)then
OCC00000Q0:=OQQCO0COQ0;
Result:={$IFDEF NEXTGEN}Encoding{$ENDIF}(Encoding.GetEncoding(OCC00000Q0));
end;
initialization
OO0O0000Q0:=Unassigned;
OOQO0000Q0;
{$IFDEF ODBC_UTF8}
ClientEncoding:=Encoding.UTF8;
{$ELSE}
OQ0O0000Q0:=Encoding.Default;
{$ENDIF}
end.
