//////////////////////////////////////////////////
//  SecureBridge Components
//  Copyright © 2018-2021 Devart. All right reserved.
//////////////////////////////////////////////////
{$I Tds.inc}
unit TdsPipeUni;
interface
uses
{$IFDEF MSWINDOWS}
Windows,
{$ENDIF}
Classes,SysUtils,SyncObjs,
CRTypes,CRFunctions,CLRClasses,
{$IFNDEF UNIDACPRO}
TdsUtils,TdsSSLConsts,TdsThread;
{$ELSE}
TdsUtilsUni,TdsSSLConstsUni,TdsThreadUni;
{$ENDIF}
const
OQ0CQQO0Q0=64;
OC0CQQO0Q0=4;
O0OCQQO0Q0=16;
OOOCQQO0Q0=256;
OQOCQQO0Q0=4096;
type
OCOCQQO0Q0=procedure(O0QCQQO0Q0:Exception)of object;
OOQCQQO0Q0=procedure(OQQCQQO0Q0:Exception)of object;
OCQCQQO0Q0=class;
OCC00OO0Q0=record
O00O0OO0Q0:PByteArray;
OO0O0OO0Q0:integer;
OQ0O0OO0Q0:integer;
end;
OC0O0OO0Q0=class
class function O0OO0OO0Q0(const OOOO0OO0Q0:OCC00OO0Q0;const OQOO0OO0Q0:Byte):integer;overload;
class function O0OO0OO0Q0(const OOOO0OO0Q0:OCC00OO0Q0;O0QO0OO0Q0,OOQO0OO0Q0:integer;const OQOO0OO0Q0:Byte):integer;overload;
class function OQQO0OO0Q0(const OCQO0OO0Q0:OCC00OO0Q0;O0CO0OO0Q0,OOCO0OO0Q0:integer):OCC00OO0Q0;overload;
class function OQQO0OO0Q0(const OCQO0OO0Q0:OCC00OO0Q0;O0CO0OO0Q0:integer):OCC00OO0Q0;overload;
class procedure OQCO0OO0Q0(const OCCO0OO0Q0:OCC00OO0Q0;const O00QCOO0Q0:OCC00OO0Q0);overload;
class procedure OQCO0OO0Q0(OCCO0OO0Q0:Pointer;OO0QCOO0Q0:integer;const O00QCOO0Q0:OCC00OO0Q0);overload;
class procedure OQCO0OO0Q0(const OCCO0OO0Q0:OCC00OO0Q0;OQ0QCOO0Q0:integer;O00QCOO0Q0:Pointer;OC0QCOO0Q0:integer);overload;
end;
O0OQCOO0Q0=record
OOOQCOO0Q0:Pointer;
OQOQCOO0Q0:integer;
end;
OCOQCOO0Q0=class
private
O0QQCOO0Q0:array[0..OC0CQQO0Q0-1,0..OQ0CQQO0Q0-1]of O0OQCOO0Q0;
OOQQCOO0Q0:array[0..OC0CQQO0Q0-1]of integer;
OQQQCOO0Q0:TCriticalSection;
class function OCQQCOO0Q0(O0CQCOO0Q0:integer):integer;
class function OOCQCOO0Q0(OQCQCOO0Q0:integer):integer;
public
constructor Create;
destructor Destroy;override;
function OC0CCOO0Q0(O0OCCOO0Q0:integer):O0OQCOO0Q0;
procedure OCOCCOO0Q0(const O0QCCOO0Q0:O0OQCOO0Q0);
end;
OCQCCOO0Q0=class
private
O0CCCOO0Q0:O0OQCOO0Q0;
OOCCCOO0Q0:OCC00OO0Q0;
OQCCCOO0Q0:OCC00OO0Q0;
OCCCCOO0Q0:OCQCCOO0Q0;
O000COO0Q0:integer;
OO00COO0Q0:Int64;
procedure OQ00COO0Q0(OC00COO0Q0:integer);
function O0O0COO0Q0:integer;
public
destructor Destroy;override;
procedure OQO0COO0Q0(const OCO0COO0Q0:O0OQCOO0Q0);
procedure O0Q0COO0Q0;
procedure OOQ0COO0Q0(OQQ0COO0Q0:OCQCCOO0Q0);
class function OCQ0COO0Q0(O0C0COO0Q0:OCQCCOO0Q0;OOC0COO0Q0:integer;OQC0COO0Q0:OCQCCOO0Q0;OCC0COO0Q0:integer):Int64;overload;
class function OCQ0COO0Q0(O00OCOO0Q0:Int64;OQC0COO0Q0:OCQCCOO0Q0;OCC0COO0Q0:integer):Int64;overload;
property OO0OCOO0Q0:OCC00OO0Q0 read OOCCCOO0Q0;
property OQ0OCOO0Q0:OCC00OO0Q0 read OQCCCOO0Q0;
property OC0OCOO0Q0:integer read O000COO0Q0 write OQ00COO0Q0;
property O0OOCOO0Q0:OCQCCOO0Q0 read OCCCCOO0Q0 write OCCCCOO0Q0;
property OOOOCOO0Q0:integer read O0O0COO0Q0;
property OQOOCOO0Q0:Int64 read OO00COO0Q0 write OO00COO0Q0;
end;
OCOOCOO0Q0=class
private
O0QOCOO0Q0:array of OCQCCOO0Q0;
OOQOCOO0Q0:integer;
public
constructor Create(OCQOCOO0Q0:integer);
destructor Destroy;override;
function OOCOCOO0Q0(out OQCOCOO0Q0:OCQCCOO0Q0):boolean;
procedure O00QQOO0Q0(OO0QQOO0Q0:OCQCCOO0Q0);
property OQ0QQOO0Q0:integer read OOQOCOO0Q0;
end;
OC0QQOO0Q0=record
O0OQQOO0Q0:TObject;
OOOQQOO0Q0:integer;
end;
OQOQQOO0Q0=class
private
OCOQQOO0Q0:TObject;
O0QQQOO0Q0:integer;
OOQQQOO0Q0:TObject;
OQQQQOO0Q0:integer;
function OCQQQOO0Q0:Int64;
function O0CQQOO0Q0:OCC00OO0Q0;
function OQCQQOO0Q0:OC0QQOO0Q0;
function OCCQQOO0Q0:OC0QQOO0Q0;
class function O00CQOO0Q0(const OO0CQOO0Q0:OC0QQOO0Q0):integer;
function OQ0CQOO0Q0(OC0CQOO0Q0:OCQCCOO0Q0;O0OCQOO0Q0:TObject;OOOCQOO0Q0:integer;
OQOCQOO0Q0:TObject;OCOCQOO0Q0:integer;O0QCQOO0Q0:Int64):OC0QQOO0Q0;
class function OQQCQOO0Q0(OCQCQOO0Q0:OCQCCOO0Q0;
O0CCQOO0Q0:TObject;OOCCQOO0Q0:integer;OQCCQOO0Q0:Int64):OC0QQOO0Q0;
procedure O000QOO0Q0(const OO00QOO0Q0:OC0QQOO0Q0;OQ00QOO0Q0:boolean);overload;
procedure O000QOO0Q0(OOO0QOO0Q0:cardinal;OCO0QOO0Q0:TObject;O0Q0QOO0Q0:cardinal;OOQ0QOO0Q0:TObject);overload;
function O0C0QOO0Q0(const OOC0QOO0Q0,OQC0QOO0Q0:OC0QQOO0Q0):OQOQQOO0Q0;
function OCC0QOO0Q0(O00OQOO0Q0:Int64):OC0QQOO0Q0;overload;
function OCC0QOO0Q0(const OO0OQOO0Q0:OC0QQOO0Q0;O00OQOO0Q0:Int64):OC0QQOO0Q0;overload;
public
constructor Create(O0QOQOO0Q0:TObject;OOQOQOO0Q0:integer;OQQOQOO0Q0:TObject;OCQOQOO0Q0:integer);
function O0COQOO0Q0(OOCOQOO0Q0:Int64):OC0QQOO0Q0;overload;
function O0COQOO0Q0(OOCOQOO0Q0:Int64;const OQCOQOO0Q0:OC0QQOO0Q0):OC0QQOO0Q0;overload;
function OCCOQOO0Q0(O00QO0O0Q0:Byte):OC0QQOO0Q0;
function OC0QO0O0Q0(var O0OQO0O0Q0:OC0QQOO0Q0;out OOOQO0O0Q0:OCC00OO0Q0):boolean;
function OQQQO0O0Q0(OCQQO0O0Q0,OOCO0OO0Q0:Int64):OQOQQOO0Q0;overload;
function OQQQO0O0Q0(OCQQO0O0Q0:Int64;const OOCQO0O0Q0:OC0QQOO0Q0):OQOQQOO0Q0;overload;
function OQQQO0O0Q0(const OCQQO0O0Q0:OC0QQOO0Q0;OOCO0OO0Q0:Int64):OQOQQOO0Q0;overload;
function OQQQO0O0Q0(const OOCCO0O0Q0,OOCQO0O0Q0:OC0QQOO0Q0):OQOQQOO0Q0;overload;
function OQQQO0O0Q0(const OCQQO0O0Q0:OC0QQOO0Q0):OQOQQOO0Q0;overload;
function OQQQO0O0Q0(OCQQO0O0Q0:Int64):OQOQQOO0Q0;overload;
function OCCCO0O0Q0:TBytes;
function OC00O0O0Q0:boolean;
function O0O0O0O0Q0:boolean;
property OOO0O0O0Q0:Int64 read OCQQQOO0Q0;
property OQO0O0O0Q0:OCC00OO0Q0 read O0CQQOO0Q0;
property OCO0O0O0Q0:OC0QQOO0Q0 read OQCQQOO0Q0;
property O0Q0O0O0Q0:OC0QQOO0Q0 read OCCQQOO0Q0;
end;
OOQ0O0O0Q0=class(TStream)
private
OQQ0O0O0Q0:OQOQQOO0Q0;
OCQ0O0O0Q0:OC0QQOO0Q0;
O0C0O0O0Q0:Int64;
protected
function GetSize:Int64;{$IFDEF VER7P}override;{$ENDIF}{$IFDEF FPC}override;{$ENDIF}
public
constructor Create(OQC0O0O0Q0:OQOQQOO0Q0);
function Read(var O00OO0O0Q0;OO0OO0O0Q0:Longint):Longint;override;
function Write(const OQOOO0O0Q0;OCOOO0O0Q0:Longint):Longint;override;
function Seek(const O00OQOO0Q0:Int64;OOQOO0O0Q0:TSeekOrigin):Int64;override;
end;
O0COO0O0Q0=class(OCOOCQO0Q0)
private
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OOCOO0O0Q0:OCQCQQO0Q0;
OQCOO0O0Q0:TThreadMethod;
protected
procedure OOQOCQO0Q0;override;
public
constructor Create(O00Q00O0Q0:OCQCQQO0Q0;OO0Q00O0Q0:TThreadMethod);
end;
OQ0Q00O0Q0=class(OCOOCQO0Q0)
private
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OC0Q00O0Q0:OCQCQQO0Q0;
O0OQ00O0Q0:OCOCQQO0Q0;
OOOQ00O0Q0:Exception;
protected
procedure OOQOCQO0Q0;override;
public
constructor Create(O00Q00O0Q0:OCQCQQO0Q0;OCOQ00O0Q0:OCOCQQO0Q0;O0QQ00O0Q0:Exception);
destructor Destroy;override;
end;
OOQQ00O0Q0=record
OQQQ00O0Q0:boolean;
OCQQ00O0Q0:boolean;
end;
O0CQ00O0Q0=record
OOCQ00O0Q0:boolean;
OQCQ00O0Q0:boolean;
OCCQ00O0Q0:OQOQQOO0Q0;
end;
O00C00O0Q0=class
private
OO0C00O0Q0:OCQCQQO0Q0;
public
constructor Create(OC0C00O0Q0:OCQCQQO0Q0);
function O0OC00O0Q0(var OOOC00O0Q0:O0CQ00O0Q0):boolean;
function OCOC00O0Q0(O0QC00O0Q0:cardinal=INFINITE;O0CC0OO0Q0:TScCancellationToken=nil):O0CQ00O0Q0;
function OOQC00O0Q0:O0CQ00O0Q0;
procedure OQQC00O0Q0(const OCQC00O0Q0:OC0QQOO0Q0);overload;
procedure OQQC00O0Q0(const OCQC00O0Q0,O0CC00O0Q0:OC0QQOO0Q0);overload;
procedure OOCC00O0Q0;
procedure OQCC00O0Q0(OCCC00O0Q0:Exception=nil);
procedure O00000O0Q0(OCCC0OO0Q0:TThreadMethod);
procedure OO0000O0Q0(O0QC0OO0Q0:OOQCQQO0Q0);
end;
OQ0000O0Q0=class
private
OC0000O0Q0:OCQCQQO0Q0;
public
constructor Create(OC0C00O0Q0:OCQCQQO0Q0);
function OOO000O0Q0(const O00Q0OO0Q0:integer=0):OCC00OO0Q0;
function OQO000O0Q0(OCO000O0Q0:cardinal=INFINITE;O0OQ0OO0Q0:TScCancellationToken=nil):OOQQ00O0Q0;
function O0Q000O0Q0(const O0QQ0OO0Q0:OCC00OO0Q0;OOQ000O0Q0:cardinal=INFINITE;OOQQ0OO0Q0:TScCancellationToken=nil):OOQQ00O0Q0;
function OQQ000O0Q0:OOQQ00O0Q0;
procedure OCQ000O0Q0(const OQ0Q0OO0Q0:integer);
procedure O0C000O0Q0;
procedure OOC000O0Q0(OCCC00O0Q0:Exception=nil);
procedure OQC000O0Q0(OO0C0OO0Q0:TThreadMethod);
procedure OCC000O0Q0(OQO00OO0Q0:OOQCQQO0Q0);
end;
OC0O00O0Q0=(O00O00O0Q0,OO0O00O0Q0,OQ0O00O0Q0);
TScPipeStates=set of OC0O00O0Q0;
OCOO00O0Q0=(O0OO00O0Q0,OOOO00O0Q0,OQOO00O0Q0);
TScPipeStateOperations=set of OCOO00O0Q0;
O0QO00O0Q0=record
OOQO00O0Q0:integer;
OQQO00O0Q0:Int64;
OCQO00O0Q0:Int64;
end;
OCQCQQO0Q0=class
private
O0CCQQO0Q0:boolean;
OOCCQQO0Q0:O00CO0QOQ0;
OQCCQQO0Q0:TCriticalSection;
OCCCQQO0Q0:integer;
O000QQO0Q0:Int64;
OO00QQO0Q0:Int64;
OQ00QQO0Q0:TScCancellationToken;
OC00QQO0Q0:TScCancellationToken;
O0O0QQO0Q0:TScPipeStates;
OOO0QQO0Q0:TScPipeStates;
OQO0QQO0Q0:TThreadMethod;
OCO0QQO0Q0:TThreadMethod;
O0Q0QQO0Q0:TEvent;
OOQ0QQO0Q0:TEvent;
OQQ0QQO0Q0:OCOCQQO0Q0;
OCQ0QQO0Q0:OCOCQQO0Q0;
O0C0QQO0Q0:Exception;
OOC0QQO0Q0:Exception;
OQC0QQO0Q0:TScPipeStateOperations;
OCC0QQO0Q0:O00C00O0Q0;
O00OQQO0Q0:OQ0000O0Q0;
OO0OQQO0Q0:Int64;
OQ0OQQO0Q0:Int64;
OC0OQQO0Q0:Int64;
O0OOQQO0Q0:OCOOCOO0Q0;
OOOOQQO0Q0:OCQCCOO0Q0;
OQOOQQO0Q0:integer;
OCOOQQO0Q0:OCQCCOO0Q0;
O0QOQQO0Q0:integer;
OOQOQQO0Q0:OCQCCOO0Q0;
OQQOQQO0Q0:OCC00OO0Q0;
OCQOQQO0Q0:integer;
function O0COQQO0Q0:boolean;{$IFDEF USE_INLINE}inline;{$ENDIF}
function OOCOQQO0Q0:boolean;{$IFDEF USE_INLINE}inline;{$ENDIF}
function OQCOQQO0Q0:boolean;{$IFDEF USE_INLINE}inline;{$ENDIF}
function OCCOQQO0Q0:boolean;{$IFDEF USE_INLINE}inline;{$ENDIF}
procedure O00QOOO0Q0;
procedure OO0QOOO0Q0;
procedure OQ0QOOO0Q0;
procedure OC0QOOO0Q0;
procedure O0OQOOO0Q0;
function OOOQOOO0Q0:boolean;
function OQOQOOO0Q0:boolean;
procedure OCOQOOO0Q0;
procedure O0QQOOO0Q0;
procedure OCQQOOO0Q0(O0CQOOO0Q0:integer);
function OQCQOOO0Q0(OCCQOOO0Q0:integer):OCQCCOO0Q0;
procedure OQ0COOO0Q0(OC0COOO0Q0:OCQCCOO0Q0);
procedure O0OCOOO0Q0(OOOCOOO0Q0:integer);
function OQOCOOO0Q0:boolean;
procedure O0QCOOO0Q0(out OOQCOOO0Q0:boolean;out OQQCOOO0Q0:boolean;
out OCQCOOO0Q0:OOQQ00O0Q0;O0CCOOO0Q0:TScCancellationToken);
procedure OOCCOOO0Q0(var OQCCOOO0Q0:OOQQ00O0Q0);
procedure O000OOO0Q0(OO00OOO0Q0:OCQCCOO0Q0;OQ00OOO0Q0:integer;
OC00OOO0Q0:OCQCCOO0Q0;O0O0OOO0Q0:integer);overload;
procedure OQC0OOO0Q0(out OCC0OOO0Q0:O0CQ00O0Q0);
procedure OQ0OOOO0Q0;
procedure O0OOOOO0Q0;
procedure OQOOOOO0Q0;
procedure O0QOOOO0Q0;
procedure OQQOOOO0Q0(OCQOOOO0Q0:OCOCQQO0Q0;O0COOOO0Q0:Exception);overload;
procedure OQQOOOO0Q0(OCQOOOO0Q0:TThreadMethod);overload;
protected
function OCCOOOO0Q0(O00Q0OO0Q0:integer):OCC00OO0Q0;
procedure OO0Q0OO0Q0(OQ0Q0OO0Q0:integer);
function OC0Q0OO0Q0(O0OQ0OO0Q0:TScCancellationToken;out OOOQ0OO0Q0:boolean):OOQQ00O0Q0;
function OCOQ0OO0Q0(const O0QQ0OO0Q0:OCC00OO0Q0;OOQQ0OO0Q0:TScCancellationToken;out OQQQ0OO0Q0:boolean):OOQQ00O0Q0;
procedure O00C0OO0Q0(OO0C0OO0Q0:TThreadMethod);
function OQ0C0OO0Q0:OOQQ00O0Q0;
procedure O0OC0OO0Q0;
procedure OOOC0OO0Q0(OQOC0OO0Q0:Exception);
procedure OCOC0OO0Q0(O0QC0OO0Q0:OOQCQQO0Q0);
procedure O000OOO0Q0(const OOQC0OO0Q0:OC0QQOO0Q0);overload;
procedure O000OOO0Q0(const OOQC0OO0Q0,OQQC0OO0Q0:OC0QQOO0Q0);overload;
function OCQC0OO0Q0(O0CC0OO0Q0:TScCancellationToken;out OOCC0OO0Q0:boolean):O0CQ00O0Q0;
procedure OQCC0OO0Q0(OCCC0OO0Q0:TThreadMethod);
function O0000OO0Q0:O0CQ00O0Q0;
procedure OQ000OO0Q0;
procedure OC000OO0Q0(O0O00OO0Q0:Exception);
procedure OOO00OO0Q0(OQO00OO0Q0:OOQCQQO0Q0);
public
constructor Create(const O0Q00OO0Q0:O0QO00O0Q0);
destructor Destroy;override;
procedure OQQ00OO0Q0;
property OCQ00OO0Q0:Int64 read OO0OQQO0Q0;
property O0C00OO0Q0:O00C00O0Q0 read OCC0QQO0Q0;
property OOC00OO0Q0:OQ0000O0Q0 read O00OQQO0Q0;
property OQC00OO0Q0:O00CO0QOQ0 read OOCCQQO0Q0 write OOCCQQO0Q0;
end;
O0CO00O0Q0=class(TStream)
private
OOCO00O0Q0:OQ0000O0Q0;
protected
function GetSize:Int64;{$IFDEF VER7P}override;{$ENDIF}{$IFDEF FPC}override;{$ENDIF}
public
constructor Create(OCCO00O0Q0:OQ0000O0Q0);
function Read(var O00OO0O0Q0;OO0OO0O0Q0:Longint):Longint;override;
function Write(const OQOOO0O0Q0;OCOOO0O0Q0:Longint):Longint;override;
function Seek(const O00OQOO0Q0:Int64;OOQOO0O0Q0:TSeekOrigin):Int64;override;
end;
O0OQC0O0Q0=class;
OC0CC0O0Q0=record
O0OCC0O0Q0:O0OQC0O0Q0;
OOOCC0O0Q0:O0OQC0O0Q0;
end;
O0OQC0O0Q0=class
private
OOOQC0O0Q0:OCQCQQO0Q0;
OQOQC0O0Q0:O00C00O0Q0;
OCOQC0O0Q0:OQ0000O0Q0;
public
constructor Create(OOQQC0O0Q0:OCQCQQO0Q0;OQQQC0O0Q0:O00C00O0Q0;OCQQC0O0Q0:OQ0000O0Q0);
destructor Destroy;override;
class function OOCQC0O0Q0(const OQCQC0O0Q0:O0QO00O0Q0):OC0CC0O0Q0;
property OO0CC0O0Q0:O00C00O0Q0 read OQOQC0O0Q0;
property OQ0CC0O0Q0:OQ0000O0Q0 read OCOQC0O0Q0;
end;
const
OQOCC0O0Q0:OCC00OO0Q0=(
O00O0OO0Q0:nil;
OO0O0OO0Q0:0;
OQ0O0OO0Q0:0);
OCOCC0O0Q0:OC0QQOO0Q0=(
O0OQQOO0Q0:nil;
OOOQQOO0Q0:0);
O0QCC0O0Q0:OOQQ00O0Q0=(
OQQQ00O0Q0:False;
OCQQ00O0Q0:False);
OOQCC0O0Q0:O0CQ00O0Q0=(
OOCQ00O0Q0:False;
OQCQ00O0Q0:False;
OCCQ00O0Q0:nil);
OQQCC0O0Q0:O0QO00O0Q0=(
OOQO00O0Q0:OQOCQQO0Q0;
OQQO00O0Q0:-1;
OCQO00O0Q0:-1);
implementation
uses
Math;
resourcestring
SWritingAfterCompleted='Writing is not allowed after writer was completed';
SReadingAfterCompleted='Reading is not allowed after reader was completed';
SInvalidExaminedOrConsumedPosition='The examined position must be greater than or equal to the consumed position';
SInvalidExaminedPosition='The examined position cannot be less than the previously examined position';
SAdvanceToInvalidCursor='The PipeReader has already advanced past the provided position';
SReadingIsInProgress='Reading is already in progress';
SConcurrentOperationsNotSupported='Concurrent reads or writes are not supported';
SGetResultBeforeCompleted='Can not GetResult unless awaiter is completed';
SReaderAndWriterHasToBeCompleted='Both reader and writer has to be completed to be able to reset the pipe';
SNoReadingOperationToComplete='No reading operation to complete';
SUnconsumedCountNegative='Unconsumed count is negative';
SPositionOutOfRange='Position out of range';
SEndPositionNotReached='End position was not reached during enumeration';
const
OCQCC0O0Q0:array[0..OC0CQQO0Q0-1]of integer=
(4096,16384,32768,65536);
var
O0CCC0O0Q0:OCOQCOO0Q0;
constructor OCOQCOO0Q0.Create;
begin
inherited;
OQQQCOO0Q0:=TCriticalSection.Create;
end;
destructor OCOQCOO0Q0.Destroy;
var
OO0CCOO0Q0,OQ0CCOO0Q0:integer;
begin
for OO0CCOO0Q0:=Low(O0QQCOO0Q0)to High(O0QQCOO0Q0)do
for OQ0CCOO0Q0:=Low(O0QQCOO0Q0[OO0CCOO0Q0])to High(O0QQCOO0Q0[OO0CCOO0Q0])do begin
if O0QQCOO0Q0[OO0CCOO0Q0,OQ0CCOO0Q0].OOOQCOO0Q0<>nil then
FreeMem(O0QQCOO0Q0[OO0CCOO0Q0,OQ0CCOO0Q0].OOOQCOO0Q0);
end;
OQQQCOO0Q0.Free;
inherited;
end;
class function OCOQCOO0Q0.OCQQCOO0Q0(O0CQCOO0Q0:integer):integer;
begin
if O0CQCOO0Q0=OCQCC0O0Q0[0]then
Result:=0
else
if O0CQCOO0Q0=OCQCC0O0Q0[1]then
Result:=1
else
if O0CQCOO0Q0=OCQCC0O0Q0[2]then
Result:=2
else
if O0CQCOO0Q0=OCQCC0O0Q0[3]then
Result:=3
else
Result:=-1;
end;
class function OCOQCOO0Q0.OOCQCOO0Q0(OQCQCOO0Q0:integer):integer;
begin
if OQCQCOO0Q0<=OCQCC0O0Q0[0]then
Result:=OCQCC0O0Q0[0]
else
if OQCQCOO0Q0<=OCQCC0O0Q0[1]then
Result:=OCQCC0O0Q0[1]
else
if OQCQCOO0Q0<=OCQCC0O0Q0[2]then
Result:=OCQCC0O0Q0[2]
else
if OQCQCOO0Q0<=OCQCC0O0Q0[3]then
Result:=OCQCC0O0Q0[3]
else
Result:=OQCQCOO0Q0;
end;
function OCOQCOO0Q0.OC0CCOO0Q0(O0OCCOO0Q0:integer):O0OQCOO0Q0;
var
OOOCCOO0Q0:integer;
OQOCCOO0Q0:integer;
begin
O0OCCOO0Q0:=OOCQCOO0Q0(O0OCCOO0Q0);
OOOCCOO0Q0:=OCQQCOO0Q0(O0OCCOO0Q0);
if OOOCCOO0Q0>=0 then begin
OQQQCOO0Q0.Enter;
try
OQOCCOO0Q0:=OOQQCOO0Q0[OOOCCOO0Q0];
if OQOCCOO0Q0>0 then begin
Assert(O0QQCOO0Q0[OOOCCOO0Q0,OQOCCOO0Q0-1].OOOQCOO0Q0<>nil);
Result.OOOQCOO0Q0:=O0QQCOO0Q0[OOOCCOO0Q0,OQOCCOO0Q0-1].OOOQCOO0Q0;
Result.OQOQCOO0Q0:=O0QQCOO0Q0[OOOCCOO0Q0,OQOCCOO0Q0-1].OQOQCOO0Q0;
O0QQCOO0Q0[OOOCCOO0Q0,OQOCCOO0Q0-1].OOOQCOO0Q0:=nil;
Dec(OOQQCOO0Q0[OOOCCOO0Q0]);
Exit;
end;
finally
OQQQCOO0Q0.Leave;
end;
end;
GetMem(Result.OOOQCOO0Q0,O0OCCOO0Q0);
Result.OQOQCOO0Q0:=O0OCCOO0Q0;
end;
procedure OCOQCOO0Q0.OCOCCOO0Q0(const O0QCCOO0Q0:O0OQCOO0Q0);
var
OOQCCOO0Q0:integer;
OQQCCOO0Q0:integer;
begin
if O0QCCOO0Q0.OOOQCOO0Q0=nil then
Exit;
OOQCCOO0Q0:=OCQQCOO0Q0(O0QCCOO0Q0.OQOQCOO0Q0);
if OOQCCOO0Q0>=0 then begin
OQQQCOO0Q0.Enter;
try
OQQCCOO0Q0:=OOQQCOO0Q0[OOQCCOO0Q0];
if OQQCCOO0Q0<Length(O0QQCOO0Q0[OOQCCOO0Q0])then begin
Assert(O0QQCOO0Q0[OOQCCOO0Q0,OQQCCOO0Q0].OOOQCOO0Q0=nil);
O0QQCOO0Q0[OOQCCOO0Q0,OQQCCOO0Q0].OOOQCOO0Q0:=O0QCCOO0Q0.OOOQCOO0Q0;
O0QQCOO0Q0[OOQCCOO0Q0,OQQCCOO0Q0].OQOQCOO0Q0:=O0QCCOO0Q0.OQOQCOO0Q0;
Inc(OOQQCOO0Q0[OOQCCOO0Q0]);
Exit;
end;
finally
OQQQCOO0Q0.Leave;
end;
end;
FreeMem(O0QCCOO0Q0.OOOQCOO0Q0);
end;
class function OC0O0OO0Q0.O0OO0OO0Q0(const OOOO0OO0Q0:OCC00OO0Q0;const OQOO0OO0Q0:Byte):integer;
var
OCOO0OO0Q0:integer;
begin
Result:=-1;
if OOOO0OO0Q0.O00O0OO0Q0=nil then
Exit;
for OCOO0OO0Q0:=OOOO0OO0Q0.OO0O0OO0Q0 to OOOO0OO0Q0.OO0O0OO0Q0+OOOO0OO0Q0.OQ0O0OO0Q0-1 do begin
if OOOO0OO0Q0.O00O0OO0Q0[OCOO0OO0Q0]=OQOO0OO0Q0 then begin
Result:=OCOO0OO0Q0-OOOO0OO0Q0.OO0O0OO0Q0;
Exit;
end;
end;
end;
class function OC0O0OO0Q0.O0OO0OO0Q0(const OOOO0OO0Q0:OCC00OO0Q0;O0QO0OO0Q0,OOQO0OO0Q0:integer;const OQOO0OO0Q0:Byte):integer;
var
OCOO0OO0Q0:integer;
begin
Result:=-1;
if OOOO0OO0Q0.O00O0OO0Q0=nil then
Exit;
Inc(O0QO0OO0Q0,OOOO0OO0Q0.OO0O0OO0Q0);
for OCOO0OO0Q0:=O0QO0OO0Q0 to O0QO0OO0Q0+OOQO0OO0Q0-1 do begin
if OOOO0OO0Q0.O00O0OO0Q0[OCOO0OO0Q0]=OQOO0OO0Q0 then begin
Result:=OCOO0OO0Q0-O0QO0OO0Q0;
Exit;
end;
end;
end;
class function OC0O0OO0Q0.OQQO0OO0Q0(const OCQO0OO0Q0:OCC00OO0Q0;O0CO0OO0Q0,OOCO0OO0Q0:integer):OCC00OO0Q0;
begin
if(O0CO0OO0Q0>OCQO0OO0Q0.OQ0O0OO0Q0)or(OOCO0OO0Q0>OCQO0OO0Q0.OQ0O0OO0Q0-O0CO0OO0Q0)then
raise ArgumentException.Create('Offset');
Result.O00O0OO0Q0:=OCQO0OO0Q0.O00O0OO0Q0;
Result.OO0O0OO0Q0:=OCQO0OO0Q0.OO0O0OO0Q0+O0CO0OO0Q0;
Result.OQ0O0OO0Q0:=OOCO0OO0Q0;
end;
class function OC0O0OO0Q0.OQQO0OO0Q0(const OCQO0OO0Q0:OCC00OO0Q0;O0CO0OO0Q0:integer):OCC00OO0Q0;
begin
if O0CO0OO0Q0>OCQO0OO0Q0.OQ0O0OO0Q0 then
raise ArgumentException.Create('Offset');
Result.O00O0OO0Q0:=OCQO0OO0Q0.O00O0OO0Q0;
Result.OO0O0OO0Q0:=OCQO0OO0Q0.OO0O0OO0Q0+O0CO0OO0Q0;
Result.OQ0O0OO0Q0:=OCQO0OO0Q0.OQ0O0OO0Q0-O0CO0OO0Q0;
end;
class procedure OC0O0OO0Q0.OQCO0OO0Q0(const OCCO0OO0Q0:OCC00OO0Q0;const O00QCOO0Q0:OCC00OO0Q0);
begin
if(OCCO0OO0Q0.O00O0OO0Q0=nil)or(O00QCOO0Q0.O00O0OO0Q0=nil)then
raise ArgumentException.Create('Memory');
if OCCO0OO0Q0.OQ0O0OO0Q0>O00QCOO0Q0.OQ0O0OO0Q0 then
raise ArgumentException.Create('Destination too short');
Move(OCCO0OO0Q0.O00O0OO0Q0[OCCO0OO0Q0.OO0O0OO0Q0],O00QCOO0Q0.O00O0OO0Q0[O00QCOO0Q0.OO0O0OO0Q0],OCCO0OO0Q0.OQ0O0OO0Q0);
end;
class procedure OC0O0OO0Q0.OQCO0OO0Q0(OCCO0OO0Q0:Pointer;OO0QCOO0Q0:integer;const O00QCOO0Q0:OCC00OO0Q0);
begin
if(OCCO0OO0Q0=nil)or(O00QCOO0Q0.O00O0OO0Q0=nil)then
raise ArgumentException.Create('Memory');
if OO0QCOO0Q0>O00QCOO0Q0.OQ0O0OO0Q0 then
raise ArgumentException.Create('Destination too short');
Move(OCCO0OO0Q0^,O00QCOO0Q0.O00O0OO0Q0[O00QCOO0Q0.OO0O0OO0Q0],OO0QCOO0Q0);
end;
class procedure OC0O0OO0Q0.OQCO0OO0Q0(const OCCO0OO0Q0:OCC00OO0Q0;OQ0QCOO0Q0:integer;O00QCOO0Q0:Pointer;OC0QCOO0Q0:integer);
begin
if(OCCO0OO0Q0.O00O0OO0Q0=nil)or(O00QCOO0Q0=nil)then
raise ArgumentException.Create('Memory');
Move(PtrOffset(OCCO0OO0Q0.O00O0OO0Q0,OCCO0OO0Q0.OO0O0OO0Q0+OQ0QCOO0Q0)^,O00QCOO0Q0^,OC0QCOO0Q0);
end;
destructor OCQCCOO0Q0.Destroy;
begin
if(O0CCCOO0Q0.OOOQCOO0Q0<>nil)and(O0CCC0O0Q0<>nil)then
O0CCC0O0Q0.OCOCCOO0Q0(O0CCCOO0Q0);
inherited;
end;
procedure OCQCCOO0Q0.OQ00COO0Q0(OC00COO0Q0:integer);
begin
if OC00COO0Q0>OQCCCOO0Q0.OQ0O0OO0Q0 then
raise ArgumentException.Create;
O000COO0Q0:=OC00COO0Q0;
OOCCCOO0Q0:=OC0O0OO0Q0.OQQO0OO0Q0(OQCCCOO0Q0,0,OC00COO0Q0);
end;
procedure OCQCCOO0Q0.OQO0COO0Q0(const OCO0COO0Q0:O0OQCOO0Q0);
begin
O0CCCOO0Q0:=OCO0COO0Q0;
OQCCCOO0Q0.O00O0OO0Q0:=OCO0COO0Q0.OOOQCOO0Q0;
OQCCCOO0Q0.OO0O0OO0Q0:=0;
OQCCCOO0Q0.OQ0O0OO0Q0:=OCO0COO0Q0.OQOQCOO0Q0;
end;
procedure OCQCCOO0Q0.O0Q0COO0Q0;
begin
if O0CCC0O0Q0<>nil then
O0CCC0O0Q0.OCOCCOO0Q0(O0CCCOO0Q0);
O0CCCOO0Q0.OOOQCOO0Q0:=nil;
OCCCCOO0Q0:=nil;
OO00COO0Q0:=0;
O000COO0Q0:=0;
OOCCCOO0Q0:=OQOCC0O0Q0;
OQCCCOO0Q0:=OQOCC0O0Q0;
end;
function OCQCCOO0Q0.O0O0COO0Q0:integer;
begin
Result:=OQCCCOO0Q0.OQ0O0OO0Q0-O000COO0Q0;
end;
procedure OCQCCOO0Q0.OOQ0COO0Q0(OQQ0COO0Q0:OCQCCOO0Q0);
begin
OCCCCOO0Q0:=OQQ0COO0Q0;
OQQ0COO0Q0:=Self;
while OQQ0COO0Q0.O0OOCOO0Q0<>nil do begin
OQQ0COO0Q0.O0OOCOO0Q0.OQOOCOO0Q0:=OQQ0COO0Q0.OQOOCOO0Q0+OQQ0COO0Q0.OC0OCOO0Q0;
OQQ0COO0Q0:=OQQ0COO0Q0.O0OOCOO0Q0;
end;
end;
class function OCQCCOO0Q0.OCQ0COO0Q0(O0C0COO0Q0:OCQCCOO0Q0;OOC0COO0Q0:integer;
OQC0COO0Q0:OCQCCOO0Q0;OCC0COO0Q0:integer):Int64;
begin
Result:=(OQC0COO0Q0.OQOOCOO0Q0+OCC0COO0Q0)-(O0C0COO0Q0.OQOOCOO0Q0+OOC0COO0Q0);
end;
class function OCQCCOO0Q0.OCQ0COO0Q0(O00OCOO0Q0:Int64;OQC0COO0Q0:OCQCCOO0Q0;OCC0COO0Q0:integer):Int64;
begin
Result:=OQC0COO0Q0.OQOOCOO0Q0+OCC0COO0Q0-O00OCOO0Q0;
end;
constructor OCOOCOO0Q0.Create(OCQOCOO0Q0:integer);
begin
inherited Create;
if OCQOCOO0Q0<4 then
OCQOCOO0Q0:=4;
SetLength(O0QOCOO0Q0,OCQOCOO0Q0);
OOQOCOO0Q0:=0;
end;
destructor OCOOCOO0Q0.Destroy;
var
OO0CCOO0Q0:integer;
begin
for OO0CCOO0Q0:=0 to OOQOCOO0Q0-1 do
O0QOCOO0Q0[OO0CCOO0Q0].Free;
inherited;
end;
function OCOOCOO0Q0.OOCOCOO0Q0(out OQCOCOO0Q0:OCQCCOO0Q0):boolean;
var
OCCOCOO0Q0:integer;
begin
OCCOCOO0Q0:=OOQOCOO0Q0-1;
if cardinal(OCCOCOO0Q0)>=cardinal(Length(O0QOCOO0Q0))then begin
OQCOCOO0Q0:=nil;
Result:=False;
Exit;
end;
OOQOCOO0Q0:=OCCOCOO0Q0;
OQCOCOO0Q0:=O0QOCOO0Q0[OCCOCOO0Q0];
O0QOCOO0Q0[OCCOCOO0Q0]:=nil;
Result:=True;
end;
procedure OCOOCOO0Q0.O00QQOO0Q0(OO0QQOO0Q0:OCQCCOO0Q0);
begin
if cardinal(OOQOCOO0Q0)>=cardinal(Length(O0QOCOO0Q0))then
SetLength(O0QOCOO0Q0,2*Length(O0QOCOO0Q0));
O0QOCOO0Q0[OOQOCOO0Q0]:=OO0QQOO0Q0;
Inc(OOQOCOO0Q0);
end;
constructor OQOQQOO0Q0.Create(O0QOQOO0Q0:TObject;OOQOQOO0Q0:integer;OQQOQOO0Q0:TObject;OCQOQOO0Q0:integer);
begin
inherited Create;
if(O0QOQOO0Q0=nil)or(OQQOQOO0Q0=nil)or(OOQOQOO0Q0<0)or(OCQOQOO0Q0<0)then
raise ArgumentException.Create;
OCOQQOO0Q0:=O0QOQOO0Q0;
O0QQQOO0Q0:=OOQOQOO0Q0;
OOQQQOO0Q0:=OQQOQOO0Q0;
OQQQQOO0Q0:=OCQOQOO0Q0;
end;
class function OQOQQOO0Q0.O00CQOO0Q0(const OO0CQOO0Q0:OC0QQOO0Q0):integer;
begin
Result:=OO0CQOO0Q0.OOOQQOO0Q0;
end;
function OQOQQOO0Q0.O0COQOO0Q0(OOCOQOO0Q0:Int64):OC0QQOO0Q0;
begin
if OOCOQOO0Q0<0 then
raise ArgumentException.Create('Offset');
Result:=OCC0QOO0Q0(OOCOQOO0Q0);
end;
function OQOQQOO0Q0.O0COQOO0Q0(OOCOQOO0Q0:Int64;const OQCOQOO0Q0:OC0QQOO0Q0):OC0QQOO0Q0;
begin
if OOCOQOO0Q0<0 then
raise ArgumentException.Create('Offset');
Result:=OCC0QOO0Q0(OQCOQOO0Q0,OOCOQOO0Q0);
end;
function OQOQQOO0Q0.OCCOQOO0Q0(O00QO0O0Q0:Byte):OC0QQOO0Q0;
var
OO0QO0O0Q0:integer;
OQ0QO0O0Q0:OCQCCOO0Q0;
begin
Result:=OCOCC0O0Q0;
if OCOQQOO0Q0=OOQQQOO0Q0 then begin
OO0QO0O0Q0:=OC0O0OO0Q0.O0OO0OO0Q0(OCQCCOO0Q0(OCOQQOO0Q0).OO0OCOO0Q0,O0QQQOO0Q0,OQQQQOO0Q0-O0QQQOO0Q0,O00QO0O0Q0);
if OO0QO0O0Q0<>-1 then begin
Result.O0OQQOO0Q0:=OCOQQOO0Q0;
Result.OOOQQOO0Q0:=O0QQQOO0Q0+OO0QO0O0Q0;
end;
end
else begin
OQ0QO0O0Q0:=OCQCCOO0Q0(OCOQQOO0Q0);
OO0QO0O0Q0:=OC0O0OO0Q0.O0OO0OO0Q0(OQ0QO0O0Q0.OO0OCOO0Q0,O0QQQOO0Q0,OQ0QO0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0-O0QQQOO0Q0,O00QO0O0Q0);
if OO0QO0O0Q0<>-1 then begin
Result.O0OQQOO0Q0:=OQ0QO0O0Q0;
Result.OOOQQOO0Q0:=O0QQQOO0Q0+OO0QO0O0Q0;
Exit;
end;
OQ0QO0O0Q0:=OQ0QO0O0Q0.O0OOCOO0Q0;
while(OQ0QO0O0Q0<>nil)and(OQ0QO0O0Q0<>OOQQQOO0Q0)do begin
OO0QO0O0Q0:=OC0O0OO0Q0.O0OO0OO0Q0(OQ0QO0O0Q0.OO0OCOO0Q0,O00QO0O0Q0);
if OO0QO0O0Q0<>-1 then begin
Result.O0OQQOO0Q0:=OQ0QO0O0Q0;
Result.OOOQQOO0Q0:=OO0QO0O0Q0;
Exit;
end;
OQ0QO0O0Q0:=OQ0QO0O0Q0.O0OOCOO0Q0;
end;
if OQ0QO0O0Q0<>nil then begin
OO0QO0O0Q0:=OC0O0OO0Q0.O0OO0OO0Q0(OQ0QO0O0Q0.OO0OCOO0Q0,0,OQQQQOO0Q0,O00QO0O0Q0);
if OO0QO0O0Q0<>-1 then begin
Result.O0OQQOO0Q0:=OQ0QO0O0Q0;
Result.OOOQQOO0Q0:=OO0QO0O0Q0;
end;
end;
end;
end;
function OQOQQOO0Q0.OCC0QOO0Q0(O00OQOO0Q0:Int64):OC0QQOO0Q0;
begin
Result:=OCC0QOO0Q0(OQCQQOO0Q0,O00OQOO0Q0);
end;
function OQOQQOO0Q0.OCC0QOO0Q0(const OO0OQOO0Q0:OC0QQOO0Q0;O00OQOO0Q0:Int64):OC0QQOO0Q0;
var
OQ0OQOO0Q0:TObject;
OC0OQOO0Q0,O0OOQOO0Q0:integer;
OOOOQOO0Q0:OCQCCOO0Q0;
OQOOQOO0Q0:integer;
begin
OQ0OQOO0Q0:=OO0OQOO0Q0.O0OQQOO0Q0;
OC0OQOO0Q0:=O00CQOO0Q0(OO0OQOO0Q0);
O0OOQOO0Q0:=OQQQQOO0Q0;
if OQ0OQOO0Q0<>OOQQQOO0Q0 then begin
Assert(OQ0OQOO0Q0<>nil);
OOOOQOO0Q0:=OCQCCOO0Q0(OQ0OQOO0Q0);
OQOOQOO0Q0:=OOOOQOO0Q0.OO0OCOO0Q0.OQ0O0OO0Q0-OC0OQOO0Q0;
if OQOOQOO0Q0>O00OQOO0Q0 then begin
Result.O0OQQOO0Q0:=OQ0OQOO0Q0;
Result.OOOQQOO0Q0:=OC0OQOO0Q0+integer(O00OQOO0Q0);
end
else begin
if OQOOQOO0Q0<0 then
raise ArgumentException.Create(SPositionOutOfRange);
Result:=OQQCQOO0Q0(OOOOQOO0Q0.O0OOCOO0Q0,OOQQQOO0Q0,O0OOQOO0Q0,O00OQOO0Q0-OQOOQOO0Q0);
end;
end
else begin
if O0OOQOO0Q0-OC0OQOO0Q0<O00OQOO0Q0 then
raise ArgumentException.Create('Offset');
Result.O0OQQOO0Q0:=OQ0OQOO0Q0;
Result.OOOQQOO0Q0:=OC0OQOO0Q0+integer(O00OQOO0Q0);
end;
end;
function OQOQQOO0Q0.OC0QO0O0Q0(var O0OQO0O0Q0:OC0QQOO0Q0;out OOOQO0O0Q0:OCC00OO0Q0):boolean;
var
OQOQO0O0Q0:OC0QQOO0Q0;
OCOQO0O0Q0:integer;
O0QQO0O0Q0,OOQQO0O0Q0:OCQCCOO0Q0;
begin
if O0OQO0O0Q0.O0OQQOO0Q0=nil then begin
OOOQO0O0Q0:=OQOCC0O0Q0;
Result:=False;
Exit;
end;
OQOQO0O0Q0:=OCOCC0O0Q0;
OCOQO0O0Q0:=O00CQOO0Q0(O0OQO0O0Q0);
O0QQO0O0Q0:=OCQCCOO0Q0(O0OQO0O0Q0.O0OQQOO0Q0);
if O0QQO0O0Q0<>OOQQQOO0Q0 then begin
OOQQO0O0Q0:=O0QQO0O0Q0.O0OOCOO0Q0;
if OOQQO0O0Q0=nil then
raise InvalidOperationException.Create(SEndPositionNotReached);
OQOQO0O0Q0.O0OQQOO0Q0:=OOQQO0O0Q0;
OOOQO0O0Q0:=OC0O0OO0Q0.OQQO0OO0Q0(O0QQO0O0Q0.OO0OCOO0Q0,OCOQO0O0Q0);
end
else
OOOQO0O0Q0:=OC0O0OO0Q0.OQQO0OO0Q0(O0QQO0O0Q0.OO0OCOO0Q0,OCOQO0O0Q0,OQQQQOO0Q0-OCOQO0O0Q0);
O0OQO0O0Q0:=OQOQO0O0Q0;
Result:=True;
end;
function OQOQQOO0Q0.OQQQO0O0Q0(OCQQO0O0Q0,OOCO0OO0Q0:Int64):OQOQQOO0Q0;
var
O0CQO0O0Q0,OOCQO0O0Q0:OC0QQOO0Q0;
OQCQO0O0Q0,OCCQO0O0Q0:integer;
O00CO0O0Q0:OCQCCOO0Q0;
OO0CO0O0Q0:integer;
OQ0CO0O0Q0:integer;
OC0CO0O0Q0:TObject;
begin
if(OCQQO0O0Q0<0)or(OOCO0OO0Q0<0)then
raise ArgumentException.Create('Start, Count');
OQCQO0O0Q0:=O0QQQOO0Q0;
OCCQO0O0Q0:=OQQQQOO0Q0;
if OCOQQOO0Q0<>OOQQQOO0Q0 then begin
if OCOQQOO0Q0=nil then
raise ArgumentException.Create('StartObject');
O00CO0O0Q0:=OCQCCOO0Q0(OCOQQOO0Q0);
OO0CO0O0Q0:=O00CO0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0-OQCQO0O0Q0;
if OO0CO0O0Q0>OCQQO0O0Q0 then begin
OQCQO0O0Q0:=OQCQO0O0Q0+integer(OCQQO0O0Q0);
O0CQO0O0Q0.O0OQQOO0Q0:=OCOQQOO0Q0;
O0CQO0O0Q0.OOOQQOO0Q0:=OQCQO0O0Q0;
OOCQO0O0Q0:=OQ0CQOO0Q0(O00CO0O0Q0,OCOQQOO0Q0,OQCQO0O0Q0,OOQQQOO0Q0,OCCQO0O0Q0,OOCO0OO0Q0);
end
else begin
if OO0CO0O0Q0<0 then
raise ArgumentException.Create(SPositionOutOfRange);
O0CQO0O0Q0:=OQQCQOO0Q0(O00CO0O0Q0.O0OOCOO0Q0,OOQQQOO0Q0,OCCQO0O0Q0,OCQQO0O0Q0-OO0CO0O0Q0);
OC0CO0O0Q0:=O0CQO0O0Q0.O0OQQOO0Q0;
OQ0CO0O0Q0:=O00CQOO0Q0(O0CQO0O0Q0);
if OC0CO0O0Q0<>OOQQQOO0Q0 then begin
if OC0CO0O0Q0=nil then
raise ArgumentException.Create('BeginObject');
OOCQO0O0Q0:=OQ0CQOO0Q0(OCQCCOO0Q0(OC0CO0O0Q0),OC0CO0O0Q0,OQ0CO0O0Q0,OOQQQOO0Q0,OCCQO0O0Q0,OOCO0OO0Q0);
end
else begin
if OCCQO0O0Q0-OQ0CO0O0Q0<OOCO0OO0Q0 then
raise ArgumentException.Create('Count');
OOCQO0O0Q0.O0OQQOO0Q0:=OC0CO0O0Q0;
OOCQO0O0Q0.OOOQQOO0Q0:=OQ0CO0O0Q0+integer(OOCO0OO0Q0);
end;
end
end
else begin
if OCCQO0O0Q0-OQCQO0O0Q0<OCQQO0O0Q0 then
raise ArgumentException.Create('Start');
if OCCQO0O0Q0-OQCQO0O0Q0<OOCO0OO0Q0 then
raise ArgumentException.Create('Count');
OQCQO0O0Q0:=OQCQO0O0Q0+integer(OCQQO0O0Q0);
O0CQO0O0Q0.O0OQQOO0Q0:=OCOQQOO0Q0;
O0CQO0O0Q0.OOOQQOO0Q0:=OQCQO0O0Q0;
OOCQO0O0Q0.O0OQQOO0Q0:=OCOQQOO0Q0;
OOCQO0O0Q0.OOOQQOO0Q0:=OQCQO0O0Q0+integer(OOCO0OO0Q0);
end;
Result:=O0C0QOO0Q0(O0CQO0O0Q0,OOCQO0O0Q0);
end;
function OQOQQOO0Q0.OQQQO0O0Q0(OCQQO0O0Q0:Int64;const OOCQO0O0Q0:OC0QQOO0Q0):OQOQQOO0Q0;
var
O0OCO0O0Q0:TObject;
OQCQO0O0Q0,OCCQO0O0Q0,OOOCO0O0Q0:integer;
O00CO0O0Q0:OCQCCOO0Q0;
OQOCO0O0Q0,OCOCO0O0Q0:Int64;
OO0CO0O0Q0:integer;
O0CQO0O0Q0,O0QCO0O0Q0:OC0QQOO0Q0;
begin
if OCQQO0O0Q0<0 then
raise ArgumentException.Create('Start');
OQCQO0O0Q0:=O0QQQOO0Q0;
OCCQO0O0Q0:=OQQQQOO0Q0;
O0OCO0O0Q0:=OOCQO0O0Q0.O0OQQOO0Q0;
OOOCO0O0Q0:=O00CQOO0Q0(OOCQO0O0Q0);
if OOOCO0O0Q0<0 then
raise ArgumentException.Create('EndPos');
if O0OCO0O0Q0=nil then begin
O0OCO0O0Q0:=OCOQQOO0Q0;
OOOCO0O0Q0:=OQCQO0O0Q0;
end;
if OCOQQOO0Q0=OOQQQOO0Q0 then begin
if not InRange(OOOCO0O0Q0,OQCQO0O0Q0,OCCQO0O0Q0)then
raise ArgumentException.Create(SPositionOutOfRange);
if OOOCO0O0Q0-OQCQO0O0Q0<OCQQO0O0Q0 then
raise ArgumentException.Create('Start');
O0CQO0O0Q0.O0OQQOO0Q0:=OCOQQOO0Q0;
O0CQO0O0Q0.OOOQQOO0Q0:=OQCQO0O0Q0+integer(OCQQO0O0Q0);
O0QCO0O0Q0.O0OQQOO0Q0:=O0OCO0O0Q0;
O0QCO0O0Q0.OOOQQOO0Q0:=OOOCO0O0Q0;
Result:=O0C0QOO0Q0(O0CQO0O0Q0,O0QCO0O0Q0);
end
else begin
O00CO0O0Q0:=OCQCCOO0Q0(OCOQQOO0Q0);
OQOCO0O0Q0:=O00CO0O0Q0.OQOOCOO0Q0+OQCQO0O0Q0;
OCOCO0O0Q0:=OCQCCOO0Q0(O0OCO0O0Q0).OQOOCOO0Q0+OOOCO0O0Q0;
if not InRange(OCOCO0O0Q0,OQOCO0O0Q0,OCQCCOO0Q0(OOQQQOO0Q0).OQOOCOO0Q0+OCCQO0O0Q0)then
raise ArgumentException.Create(SPositionOutOfRange);
if OQOCO0O0Q0+OCQQO0O0Q0>OCOCO0O0Q0 then
raise ArgumentException.Create('Start');
OO0CO0O0Q0:=O00CO0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0-OQCQO0O0Q0;
if OO0CO0O0Q0<=OCQQO0O0Q0 then begin
if OO0CO0O0Q0<0 then
raise ArgumentException.Create(SPositionOutOfRange);
O0CQO0O0Q0:=OQQCQOO0Q0(O00CO0O0Q0.O0OOCOO0Q0,O0OCO0O0Q0,OOOCO0O0Q0,OCQQO0O0Q0-OO0CO0O0Q0);
Result:=O0C0QOO0Q0(O0CQO0O0Q0,OOCQO0O0Q0);
end
else begin
O0CQO0O0Q0.O0OQQOO0Q0:=OCOQQOO0Q0;
O0CQO0O0Q0.OOOQQOO0Q0:=OQCQO0O0Q0+integer(OCQQO0O0Q0);
O0QCO0O0Q0.O0OQQOO0Q0:=O0OCO0O0Q0;
O0QCO0O0Q0.OOOQQOO0Q0:=OOOCO0O0Q0;
Result:=O0C0QOO0Q0(O0CQO0O0Q0,O0QCO0O0Q0);
end;
end;
end;
function OQOQQOO0Q0.OQQQO0O0Q0(const OCQQO0O0Q0:OC0QQOO0Q0;OOCO0OO0Q0:Int64):OQOQQOO0Q0;
var
OOQCO0O0Q0:TObject;
OQCQO0O0Q0,OCCQO0O0Q0,OQQCO0O0Q0:integer;
OCQCO0O0Q0:OCQCCOO0Q0;
OQOCO0O0Q0,OCOCO0O0Q0,O0CCO0O0Q0:Int64;
OO0CO0O0Q0:integer;
OOCCO0O0Q0,OOCQO0O0Q0:OC0QQOO0Q0;
begin
if OOCO0OO0Q0<0 then
raise ArgumentException.Create('Count');
OQCQO0O0Q0:=O0QQQOO0Q0;
OCCQO0O0Q0:=OQQQQOO0Q0;
OOQCO0O0Q0:=OCQQO0O0Q0.O0OQQOO0Q0;
OQQCO0O0Q0:=O00CQOO0Q0(OCQQO0O0Q0);
if OQQCO0O0Q0<0 then
raise ArgumentException.Create('Start');
if OOQCO0O0Q0=nil then begin
OOQCO0O0Q0:=OCOQQOO0Q0;
OQQCO0O0Q0:=OQCQO0O0Q0;
end;
if OCOQQOO0Q0=OOQQQOO0Q0 then begin
if not InRange(OQQCO0O0Q0,OQCQO0O0Q0,OCCQO0O0Q0)then
raise ArgumentException.Create(SPositionOutOfRange);
if OCCQO0O0Q0-OQQCO0O0Q0<OOCO0OO0Q0 then
raise ArgumentException.Create('Count');
OOCCO0O0Q0.O0OQQOO0Q0:=OOQCO0O0Q0;
OOCCO0O0Q0.OOOQQOO0Q0:=OQQCO0O0Q0;
OOCQO0O0Q0.O0OQQOO0Q0:=OOQCO0O0Q0;
OOCQO0O0Q0.OOOQQOO0Q0:=OQQCO0O0Q0+integer(OOCO0OO0Q0);
Result:=O0C0QOO0Q0(OOCCO0O0Q0,OOCQO0O0Q0);
end
else begin
OCQCO0O0Q0:=OCQCCOO0Q0(OOQCO0O0Q0);
OCOCO0O0Q0:=OCQCO0O0Q0.OQOOCOO0Q0+OQQCO0O0Q0;
OQOCO0O0Q0:=OCQCCOO0Q0(OCOQQOO0Q0).OQOOCOO0Q0+OQCQO0O0Q0;
O0CCO0O0Q0:=OCQCCOO0Q0(OOQQQOO0Q0).OQOOCOO0Q0+OCCQO0O0Q0;
if not InRange(OCOCO0O0Q0,OQOCO0O0Q0,O0CCO0O0Q0)then
raise ArgumentException.Create(SPositionOutOfRange);
if OCOCO0O0Q0+OOCO0OO0Q0>O0CCO0O0Q0 then
raise ArgumentException.Create('Count');
OO0CO0O0Q0:=OCQCO0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0-OQQCO0O0Q0;
if OO0CO0O0Q0<OOCO0OO0Q0 then begin
if OO0CO0O0Q0<0 then
raise ArgumentException.Create(SPositionOutOfRange);
OOCQO0O0Q0:=OQQCQOO0Q0(OCQCO0O0Q0.O0OOCOO0Q0,OOQQQOO0Q0,OCCQO0O0Q0,OOCO0OO0Q0-OO0CO0O0Q0);
Result:=O0C0QOO0Q0(OCQQO0O0Q0,OOCQO0O0Q0);
end
else begin
OOCCO0O0Q0.O0OQQOO0Q0:=OOQCO0O0Q0;
OOCCO0O0Q0.OOOQQOO0Q0:=OQQCO0O0Q0;
OOCQO0O0Q0.O0OQQOO0Q0:=OOQCO0O0Q0;
OOCQO0O0Q0.OOOQQOO0Q0:=OQQCO0O0Q0+OOCO0OO0Q0;
Result:=O0C0QOO0Q0(OOCCO0O0Q0,OOCQO0O0Q0);
end;
end;
end;
function OQOQQOO0Q0.OQQQO0O0Q0(const OOCCO0O0Q0,OOCQO0O0Q0:OC0QQOO0Q0):OQOQQOO0Q0;
begin
O000QOO0Q0(cardinal(O00CQOO0Q0(OOCCO0O0Q0)),OOCCO0O0Q0.O0OQQOO0Q0,cardinal(O00CQOO0Q0(OOCQO0O0Q0)),OOCQO0O0Q0.O0OQQOO0Q0);
Result:=O0C0QOO0Q0(OOCCO0O0Q0,OOCQO0O0Q0);
end;
function OQOQQOO0Q0.OQQQO0O0Q0(const OCQQO0O0Q0:OC0QQOO0Q0):OQOQQOO0Q0;
var
OQCCO0O0Q0:boolean;
begin
OQCCO0O0Q0:=OCQQO0O0Q0.O0OQQOO0Q0<>nil;
O000QOO0Q0(OCQQO0O0Q0,OQCCO0O0Q0);
if OQCCO0O0Q0 then
Result:=OQOQQOO0Q0.Create(OCQQO0O0Q0.O0OQQOO0Q0,OCQQO0O0Q0.OOOQQOO0Q0,OOQQQOO0Q0,OQQQQOO0Q0)
else
Result:=OQOQQOO0Q0.Create(OCOQQOO0Q0,O0QQQOO0Q0,OOQQQOO0Q0,OQQQQOO0Q0);
end;
function OQOQQOO0Q0.OQQQO0O0Q0(OCQQO0O0Q0:Int64):OQOQQOO0Q0;
var
OOCCO0O0Q0:OC0QQOO0Q0;
begin
if OCQQO0O0Q0<0 then
raise ArgumentException.Create('Start');
if OCQQO0O0Q0=0 then
Result:=OQOQQOO0Q0.Create(OCOQQOO0Q0,O0QQQOO0Q0,OOQQQOO0Q0,OQQQQOO0Q0)
else begin
OOCCO0O0Q0:=OCC0QOO0Q0(OCQQO0O0Q0);
Result:=OQOQQOO0Q0.Create(OOCCO0O0Q0.O0OQQOO0Q0,OOCCO0O0Q0.OOOQQOO0Q0,OOQQQOO0Q0,OQQQQOO0Q0);
end;
end;
function OQOQQOO0Q0.O0C0QOO0Q0(const OOC0QOO0Q0,OQC0QOO0Q0:OC0QQOO0Q0):OQOQQOO0Q0;
begin
Result:=OQOQQOO0Q0.Create(OOC0QOO0Q0.O0OQQOO0Q0,OOC0QOO0Q0.OOOQQOO0Q0,OQC0QOO0Q0.O0OQQOO0Q0,OQC0QOO0Q0.OOOQQOO0Q0);
end;
function OQOQQOO0Q0.OQ0CQOO0Q0(OC0CQOO0Q0:OCQCCOO0Q0;O0OCQOO0Q0:TObject;OOOCQOO0Q0:integer;
OQOCQOO0Q0:TObject;OCOCQOO0Q0:integer;O0QCQOO0Q0:Int64):OC0QQOO0Q0;
var
OOQCQOO0Q0:integer;
begin
OOQCQOO0Q0:=OC0CQOO0Q0.OO0OCOO0Q0.OQ0O0OO0Q0-OOOCQOO0Q0;
if OOQCQOO0Q0>O0QCQOO0Q0 then begin
Result.O0OQQOO0Q0:=O0OCQOO0Q0;
Result.OOOQQOO0Q0:=OOOCQOO0Q0+integer(O0QCQOO0Q0);
end
else begin
if OOQCQOO0Q0<0 then
raise ArgumentException.Create(SPositionOutOfRange);
Result:=OQQCQOO0Q0(OC0CQOO0Q0.O0OOCOO0Q0,OQOCQOO0Q0,OCOCQOO0Q0,O0QCQOO0Q0-OOQCQOO0Q0);
end;
end;
class function OQOQQOO0Q0.OQQCQOO0Q0(OCQCQOO0Q0:OCQCCOO0Q0;
O0CCQOO0Q0:TObject;OOCCQOO0Q0:integer;OQCCQOO0Q0:Int64):OC0QQOO0Q0;
var
OCCCQOO0Q0:integer;
begin
Assert(OCQCQOO0Q0<>nil);
Assert(OQCCQOO0Q0>=0);
while(OCQCQOO0Q0<>nil)and(OCQCQOO0Q0<>O0CCQOO0Q0)do begin
OCCCQOO0Q0:=OCQCQOO0Q0.OO0OCOO0Q0.OQ0O0OO0Q0;
if OCCCQOO0Q0>OQCCQOO0Q0 then begin
Result.O0OQQOO0Q0:=OCQCQOO0Q0;
Result.OOOQQOO0Q0:=OQCCQOO0Q0;
Exit;
end;
OQCCQOO0Q0:=OQCCQOO0Q0-OCCCQOO0Q0;
OCQCQOO0Q0:=OCQCQOO0Q0.O0OOCOO0Q0;
end;
if(OCQCQOO0Q0=nil)or(OOCCQOO0Q0<OQCCQOO0Q0)then
raise ArgumentException.Create;
Result.O0OQQOO0Q0:=OCQCQOO0Q0;
Result.OOOQQOO0Q0:=OQCCQOO0Q0;
end;
procedure OQOQQOO0Q0.O000QOO0Q0(const OO00QOO0Q0:OC0QQOO0Q0;OQ00QOO0Q0:boolean);
var
OC00QOO0Q0,O0O0QOO0Q0,OOO0QOO0Q0:integer;
OQO0QOO0Q0:Int64;
begin
OOO0QOO0Q0:=O00CQOO0Q0(OO00QOO0Q0);
OC00QOO0Q0:=O0QQQOO0Q0;
O0O0QOO0Q0:=OQQQQOO0Q0;
if OCOQQOO0Q0=OOQQQOO0Q0 then begin
if not InRange(OOO0QOO0Q0,OC00QOO0Q0,O0O0QOO0Q0)then
raise ArgumentException.Create(SPositionOutOfRange);
end
else begin
if OQ00QOO0Q0 then begin
Assert(OO00QOO0Q0.O0OQQOO0Q0<>nil);
OQO0QOO0Q0:=OCQCCOO0Q0(OO00QOO0Q0.O0OQQOO0Q0).OQOOCOO0Q0;
end
else
OQO0QOO0Q0:=0;
Assert(OCOQQOO0Q0<>nil);
Assert(OOQQQOO0Q0<>nil);
if not InRange(OQO0QOO0Q0+OOO0QOO0Q0,OCQCCOO0Q0(OCOQQOO0Q0).OQOOCOO0Q0+OC00QOO0Q0,OCQCCOO0Q0(OOQQQOO0Q0).OQOOCOO0Q0+O0O0QOO0Q0)then
raise ArgumentException.Create(SPositionOutOfRange);
end;
end;
procedure OQOQQOO0Q0.O000QOO0Q0(OOO0QOO0Q0:cardinal;OCO0QOO0Q0:TObject;O0Q0QOO0Q0:cardinal;OOQ0QOO0Q0:TObject);
var
OC00QOO0Q0,O0O0QOO0Q0:cardinal;
OQQ0QOO0Q0,OCQ0QOO0Q0:Int64;
begin
OC00QOO0Q0:=cardinal(O0QQQOO0Q0);
O0O0QOO0Q0:=cardinal(OQQQQOO0Q0);
if OCOQQOO0Q0=OOQQQOO0Q0 then begin
if(OCO0QOO0Q0<>OOQ0QOO0Q0)or(OCO0QOO0Q0<>OCOQQOO0Q0)or
(OOO0QOO0Q0>O0Q0QOO0Q0)or(OOO0QOO0Q0<OC00QOO0Q0)or(O0Q0QOO0Q0>O0O0QOO0Q0)then
raise ArgumentException.Create(SPositionOutOfRange);
end
else begin
OQQ0QOO0Q0:=OOO0QOO0Q0;
OCQ0QOO0Q0:=O0Q0QOO0Q0;
if OCO0QOO0Q0<>nil then
OQQ0QOO0Q0:=OQQ0QOO0Q0+OCQCCOO0Q0(OCO0QOO0Q0).OQOOCOO0Q0;
if OOQ0QOO0Q0<>nil then
OCQ0QOO0Q0:=OCQ0QOO0Q0+OCQCCOO0Q0(OOQ0QOO0Q0).OQOOCOO0Q0;
if OQQ0QOO0Q0>OCQ0QOO0Q0 then
raise ArgumentException.Create(SPositionOutOfRange);
if(OQQ0QOO0Q0<OCQCCOO0Q0(OCOQQOO0Q0).OQOOCOO0Q0+OC00QOO0Q0)or
(OCQ0QOO0Q0>OCQCCOO0Q0(OOQQQOO0Q0).OQOOCOO0Q0+O0O0QOO0Q0)then
raise ArgumentException.Create(SPositionOutOfRange);
end;
end;
function OQOQQOO0Q0.OCCCO0O0Q0:TBytes;
var
O000O0O0Q0:OCQCCOO0Q0;
OO00O0O0Q0,OQ00O0O0Q0:Int64;
begin
OQ00O0O0Q0:=OCQQQOO0Q0;
SetLength(Result,OQ00O0O0Q0);
if OQ00O0O0Q0=0 then
Exit;
O000O0O0Q0:=OCQCCOO0Q0(OCOQQOO0Q0);
if OCOQQOO0Q0=OOQQQOO0Q0 then
OC0O0OO0Q0.OQCO0OO0Q0(O000O0O0Q0.OO0OCOO0Q0,O0QQQOO0Q0,@Result[0],OQ00O0O0Q0)
else begin
OC0O0OO0Q0.OQCO0OO0Q0(O000O0O0Q0.OO0OCOO0Q0,O0QQQOO0Q0,@Result[0],O000O0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0);
OO00O0O0Q0:=O000O0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0;
Dec(OQ00O0O0Q0,O000O0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0);
O000O0O0Q0:=O000O0O0Q0.O0OOCOO0Q0;
while(OQ00O0O0Q0>0)and(O000O0O0Q0<>nil)and(O000O0O0Q0<>OOQQQOO0Q0)do begin
OC0O0OO0Q0.OQCO0OO0Q0(O000O0O0Q0.OO0OCOO0Q0,0,@Result[OO00O0O0Q0],O000O0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0);
Inc(OO00O0O0Q0,O000O0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0);
Dec(OQ00O0O0Q0,O000O0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0);
O000O0O0Q0:=O000O0O0Q0.O0OOCOO0Q0;
end;
if O000O0O0Q0=nil then
raise InvalidOperationException.Create(SEndPositionNotReached);
OC0O0OO0Q0.OQCO0OO0Q0(O000O0O0Q0.OO0OCOO0Q0,0,@Result[OO00O0O0Q0],OQQQQOO0Q0);
end;
end;
function OQOQQOO0Q0.OQCQQOO0Q0:OC0QQOO0Q0;
begin
Result.O0OQQOO0Q0:=OCOQQOO0Q0;
Result.OOOQQOO0Q0:=O0QQQOO0Q0;
end;
function OQOQQOO0Q0.OCCQQOO0Q0:OC0QQOO0Q0;
begin
Result.O0OQQOO0Q0:=OOQQQOO0Q0;
Result.OOOQQOO0Q0:=OQQQQOO0Q0;
end;
function OQOQQOO0Q0.OCQQQOO0Q0:Int64;
begin
if OCOQQOO0Q0<>OOQQQOO0Q0 then
Result:=(OCQCCOO0Q0(OOQQQOO0Q0).OQOOCOO0Q0+OQQQQOO0Q0)-(OCQCCOO0Q0(OCOQQOO0Q0).OQOOCOO0Q0+O0QQQOO0Q0)
else
Result:=OQQQQOO0Q0-O0QQQOO0Q0;
end;
function OQOQQOO0Q0.OC00O0O0Q0:boolean;
begin
Result:=OOO0O0O0Q0=0;
end;
function OQOQQOO0Q0.O0O0O0O0Q0:boolean;
begin
Result:=OCOQQOO0Q0=OOQQQOO0Q0;
end;
function OQOQQOO0Q0.O0CQQOO0Q0:OCC00OO0Q0;
var
OOCQQOO0Q0:OCC00OO0Q0;
begin
if OCOQQOO0Q0=nil then begin
Result:=OQOCC0O0Q0;
Exit;
end;
OOCQQOO0Q0:=OCQCCOO0Q0(OCOQQOO0Q0).OO0OCOO0Q0;
if OCOQQOO0Q0<>OOQQQOO0Q0 then
Result:=OC0O0OO0Q0.OQQO0OO0Q0(OOCQQOO0Q0,O0QQQOO0Q0)
else
Result:=OC0O0OO0Q0.OQQO0OO0Q0(OOCQQOO0Q0,O0QQQOO0Q0,OQQQQOO0Q0-O0QQQOO0Q0);
end;
constructor OOQ0O0O0Q0.Create(OQC0O0O0Q0:OQOQQOO0Q0);
begin
inherited Create;
if OQC0O0O0Q0=nil then
raise ArgumentException.Create('ReadOnlySequence');
OQQ0O0O0Q0:=OQC0O0O0Q0;
OCQ0O0O0Q0.O0OQQOO0Q0:=OQQ0O0O0Q0.OCOQQOO0Q0;
OCQ0O0O0Q0.OOOQQOO0Q0:=OQQ0O0O0Q0.O0QQQOO0Q0;
O0C0O0O0Q0:=OCQCCOO0Q0(OQQ0O0O0Q0.OCOQQOO0Q0).OQOOCOO0Q0+OQQ0O0O0Q0.O0QQQOO0Q0;
end;
function OOQ0O0O0Q0.Write(const OQOOO0O0Q0;OCOOO0O0Q0:Longint):Longint;
begin
{$IFDEF FPC}
Result:=0;
{$ENDIF}
raise Exception.Create('The stream is read-only');
end;
function OOQ0O0O0Q0.GetSize:Int64;
begin
Result:=OQQ0O0O0Q0.OCQQQOO0Q0;
end;
function OOQ0O0O0Q0.Read(var O00OO0O0Q0;OO0OO0O0Q0:Longint):Longint;
var
OQ0OO0O0Q0:OCQCCOO0Q0;
OC0OO0O0Q0,O0OOO0O0Q0:integer;
begin
Result:=0;
OQ0OO0O0Q0:=OCQCCOO0Q0(OCQ0O0O0Q0.O0OQQOO0Q0);
OC0OO0O0Q0:=OCQ0O0O0Q0.OOOQQOO0Q0;
while(OO0OO0O0Q0>0)and(OQ0OO0O0Q0<>nil)do begin
if OQ0OO0O0Q0=OQQ0O0O0Q0.OOQQQOO0Q0 then
O0OOO0O0Q0:=OQQ0O0O0Q0.OQQQQOO0Q0-OC0OO0O0Q0
else
O0OOO0O0Q0:=OQ0OO0O0Q0.OO0OCOO0Q0.OQ0O0OO0Q0-OC0OO0O0Q0;
if O0OOO0O0Q0>0 then begin
if O0OOO0O0Q0>OO0OO0O0Q0 then
O0OOO0O0Q0:=OO0OO0O0Q0;
OC0O0OO0Q0.OQCO0OO0Q0(OQ0OO0O0Q0.OO0OCOO0Q0,OC0OO0O0Q0,PtrOffset(@O00OO0O0Q0,Result),O0OOO0O0Q0);
OCQ0O0O0Q0.O0OQQOO0Q0:=OQ0OO0O0Q0;
OCQ0O0O0Q0.OOOQQOO0Q0:=OC0OO0O0Q0+O0OOO0O0Q0;
Inc(Result,O0OOO0O0Q0);
Dec(OO0OO0O0Q0,O0OOO0O0Q0);
end;
OQ0OO0O0Q0:=OQ0OO0O0Q0.O0OOCOO0Q0;
OC0OO0O0Q0:=0;
end;
end;
function OOQ0O0O0Q0.Seek(const O00OQOO0Q0:Int64;OOQOO0O0Q0:TSeekOrigin):Int64;
var
OQQOO0O0Q0,OCQOO0O0Q0:Int64;
begin
if O00OQOO0Q0<0 then
raise ArgumentException.Create('Offset');
OCQOO0O0Q0:=OQQ0O0O0Q0.OCQQQOO0Q0;
OQQOO0O0Q0:=OCQCCOO0Q0(OCQ0O0O0Q0.O0OQQOO0Q0).OQOOCOO0Q0+OCQ0O0O0Q0.OOOQQOO0Q0-O0C0O0O0Q0;
case OOQOO0O0Q0 of
soBeginning:
Result:=O00OQOO0Q0;
soCurrent:
Result:=OQQOO0O0Q0+O00OQOO0Q0;
soEnd:
Result:=OCQOO0O0Q0+O00OQOO0Q0;
else
Result:=OQQOO0O0Q0;
end;
if Result>=OCQOO0O0Q0 then
raise EScError.Create(sePositionMoreSize);
if OQQOO0O0Q0<>Result then
OCQ0O0O0Q0:=OQQ0O0O0Q0.OCC0QOO0Q0(Result);
end;
constructor O0COO0O0Q0.Create(O00Q00O0Q0:OCQCQQO0Q0;OO0Q00O0Q0:TThreadMethod);
begin
inherited Create;
OOCOO0O0Q0:=O00Q00O0Q0;
OQCOO0O0Q0:=OO0Q00O0Q0;
end;
procedure O0COO0O0Q0.OOQOCQO0Q0;
begin
if Assigned(OQCOO0O0Q0)then
OQCOO0O0Q0();
end;
constructor OQ0Q00O0Q0.Create(O00Q00O0Q0:OCQCQQO0Q0;
OCOQ00O0Q0:OCOCQQO0Q0;O0QQ00O0Q0:Exception);
begin
inherited Create;
OC0Q00O0Q0:=O00Q00O0Q0;
O0OQ00O0Q0:=OCOQ00O0Q0;
OOOQ00O0Q0:=O0QQ00O0Q0;
end;
destructor OQ0Q00O0Q0.Destroy;
begin
OOOQ00O0Q0.Free;
inherited;
end;
procedure OQ0Q00O0Q0.OOQOCQO0Q0;
begin
if Assigned(O0OQ00O0Q0)then
O0OQ00O0Q0(OOOQ00O0Q0);
end;
constructor O00C00O0Q0.Create(OC0C00O0Q0:OCQCQQO0Q0);
begin
inherited Create;
OO0C00O0Q0:=OC0C00O0Q0;
end;
function O00C00O0Q0.O0OC00O0Q0(var OOOC00O0Q0:O0CQ00O0Q0):boolean;
var
OQOC00O0Q0:boolean;
begin
OOOC00O0Q0:=OO0C00O0Q0.OCQC0OO0Q0(nil,OQOC00O0Q0);
Result:=not OQOC00O0Q0;
end;
function O00C00O0Q0.OCOC00O0Q0(O0QC00O0Q0:cardinal=INFINITE;O0CC0OO0Q0:TScCancellationToken=nil):O0CQ00O0Q0;
var
OOCC0OO0Q0:boolean;
begin
Result:=OO0C00O0Q0.OCQC0OO0Q0(O0CC0OO0Q0,OOCC0OO0Q0);
if OOCC0OO0Q0 then begin
if OO0C00O0Q0.O0Q0QQO0Q0.WaitFor(O0QC00O0Q0)=wrTimeout then
raise OperationCanceledException.CreateFmt(SReadingTimedOut,[O0QC00O0Q0]);
Result:=OO0C00O0Q0.O0000OO0Q0;
end;
end;
function O00C00O0Q0.OOQC00O0Q0:O0CQ00O0Q0;
begin
Result:=OO0C00O0Q0.O0000OO0Q0;
end;
procedure O00C00O0Q0.OQQC00O0Q0(const OCQC00O0Q0:OC0QQOO0Q0);
begin
OO0C00O0Q0.O000OOO0Q0(OCQC00O0Q0);
end;
procedure O00C00O0Q0.OQQC00O0Q0(const OCQC00O0Q0,O0CC00O0Q0:OC0QQOO0Q0);
begin
OO0C00O0Q0.O000OOO0Q0(OCQC00O0Q0,O0CC00O0Q0);
end;
procedure O00C00O0Q0.OOCC00O0Q0;
begin
OO0C00O0Q0.OQ000OO0Q0;
end;
procedure O00C00O0Q0.OQCC00O0Q0(OCCC00O0Q0:Exception=nil);
begin
OO0C00O0Q0.OC000OO0Q0(OCCC00O0Q0);
end;
procedure O00C00O0Q0.O00000O0Q0(OCCC0OO0Q0:TThreadMethod);
begin
OO0C00O0Q0.OQCC0OO0Q0(OCCC0OO0Q0);
end;
procedure O00C00O0Q0.OO0000O0Q0(O0QC0OO0Q0:OOQCQQO0Q0);
begin
OO0C00O0Q0.OCOC0OO0Q0(O0QC0OO0Q0);
end;
constructor OQ0000O0Q0.Create(OC0C00O0Q0:OCQCQQO0Q0);
begin
inherited Create;
OC0000O0Q0:=OC0C00O0Q0;
end;
function OQ0000O0Q0.OOO000O0Q0(const O00Q0OO0Q0:integer=0):OCC00OO0Q0;
begin
Result:=OC0000O0Q0.OCCOOOO0Q0(O00Q0OO0Q0);
end;
function OQ0000O0Q0.OQO000O0Q0(OCO000O0Q0:cardinal=INFINITE;O0OQ0OO0Q0:TScCancellationToken=nil):OOQQ00O0Q0;
var
OOOQ0OO0Q0:boolean;
begin
Result:=OC0000O0Q0.OC0Q0OO0Q0(O0OQ0OO0Q0,OOOQ0OO0Q0);
if OOOQ0OO0Q0 then begin
if OC0000O0Q0.OOQ0QQO0Q0.WaitFor(OCO000O0Q0)=wrTimeout then
raise OperationCanceledException.CreateFmt(SWritingTimedOut,[OCO000O0Q0]);
Result:=OC0000O0Q0.OQ0C0OO0Q0;
end;
end;
function OQ0000O0Q0.O0Q000O0Q0(const O0QQ0OO0Q0:OCC00OO0Q0;OOQ000O0Q0:cardinal=INFINITE;OOQQ0OO0Q0:TScCancellationToken=nil):OOQQ00O0Q0;
var
OQQQ0OO0Q0:boolean;
begin
Result:=OC0000O0Q0.OCOQ0OO0Q0(O0QQ0OO0Q0,OOQQ0OO0Q0,OQQQ0OO0Q0);
if OQQQ0OO0Q0 then begin
if OC0000O0Q0.OOQ0QQO0Q0.WaitFor(OOQ000O0Q0)=wrTimeout then
raise OperationCanceledException.CreateFmt(SWritingTimedOut,[OOQ000O0Q0]);
Result:=OC0000O0Q0.OQ0C0OO0Q0;
end;
end;
function OQ0000O0Q0.OQQ000O0Q0:OOQQ00O0Q0;
begin
Result:=OC0000O0Q0.OQ0C0OO0Q0;
end;
procedure OQ0000O0Q0.OCQ000O0Q0(const OQ0Q0OO0Q0:integer);
begin
OC0000O0Q0.OO0Q0OO0Q0(OQ0Q0OO0Q0);
end;
procedure OQ0000O0Q0.O0C000O0Q0;
begin
OC0000O0Q0.O0OC0OO0Q0;
end;
procedure OQ0000O0Q0.OOC000O0Q0(OCCC00O0Q0:Exception=nil);
begin
OC0000O0Q0.OOOC0OO0Q0(OCCC00O0Q0);
end;
procedure OQ0000O0Q0.OQC000O0Q0(OO0C0OO0Q0:TThreadMethod);
begin
OC0000O0Q0.O00C0OO0Q0(OO0C0OO0Q0);
end;
procedure OQ0000O0Q0.OCC000O0Q0(OQO00OO0Q0:OOQCQQO0Q0);
begin
OC0000O0Q0.OOO00OO0Q0(OQO00OO0Q0);
end;
constructor OCQCQQO0Q0.Create(const O0Q00OO0Q0:O0QO00O0Q0);
begin
inherited Create;
OQCCQQO0Q0:=TCriticalSection.Create;
O0OOQQO0Q0:=OCOOCOO0Q0.Create(O0OCQQO0Q0);
O0Q0QQO0Q0:=CreateEvent;
OOQ0QQO0Q0:=CreateEvent(True);
OCCCQQO0Q0:=O0Q00OO0Q0.OOQO00O0Q0;
if O0Q00OO0Q0.OQQO00O0Q0=-1 then
O000QQO0Q0:=OCCCQQO0Q0*O0OCQQO0Q0*4
else
O000QQO0Q0:=O0Q00OO0Q0.OQQO00O0Q0;
if O0Q00OO0Q0.OCQO00O0Q0=-1 then
OO00QQO0Q0:=OCCCQQO0Q0*O0OCQQO0Q0
else
OO00QQO0Q0:=O0Q00OO0Q0.OCQO00O0Q0;
O0O0QQO0Q0:=[O00O00O0Q0];
OOO0QQO0Q0:=[];
OC0OQQO0Q0:=-1;
OOCCQQO0Q0:=OCCQO0QOQ0;
OCC0QQO0Q0:=O00C00O0Q0.Create(Self);
O00OQQO0Q0:=OQ0000O0Q0.Create(Self);
end;
destructor OCQCQQO0Q0.Destroy;
begin
O0QQOOO0Q0;
O0Q0QQO0Q0.SetEvent;
OOQ0QQO0Q0.SetEvent;
OCC0QQO0Q0.Free;
O00OQQO0Q0.Free;
O0C0QQO0Q0.Free;
OOC0QQO0Q0.Free;
OQCCQQO0Q0.Free;
O0OOQQO0Q0.Free;
O0Q0QQO0Q0.Free;
OOQ0QQO0Q0.Free;
inherited;
end;
procedure OCQCQQO0Q0.OCOQOOO0Q0;
begin
FreeAndNil(O0C0QQO0Q0);
FreeAndNil(OOC0QQO0Q0);
OQ00QQO0Q0:=nil;
OC00QQO0Q0:=nil;
O0O0QQO0Q0:=[O00O00O0Q0];
O0Q0QQO0Q0.ResetEvent;
OOO0QQO0Q0:=[];
OOQ0QQO0Q0.SetEvent;
OQO0QQO0Q0:=nil;
OCO0QQO0Q0:=nil;
OQC0QQO0Q0:=[];
O0QOQQO0Q0:=0;
OQOOQQO0Q0:=0;
OC0OQQO0Q0:=-1;
OQ0OQQO0Q0:=0;
OO0OQQO0Q0:=0;
end;
procedure OCQCQQO0Q0.OQQ00OO0Q0;
begin
OQCCQQO0Q0.Enter;
try
if not O0CCQQO0Q0 then
raise InvalidOperationException.Create(SReaderAndWriterHasToBeCompleted);
O0CCQQO0Q0:=False;
OCOQOOO0Q0;
finally
OQCCQQO0Q0.Leave;
end;
end;
function OCQCQQO0Q0.O0COQQO0Q0:boolean;
begin
Result:=(O00O00O0Q0 in O0O0QQO0Q0)and not(OO0O00O0Q0 in O0O0QQO0Q0);
end;
function OCQCQQO0Q0.OOCOQQO0Q0:boolean;
begin
Result:=(O00O00O0Q0 in OOO0QQO0Q0)and not(OO0O00O0Q0 in OOO0QQO0Q0);
end;
function OCQCQQO0Q0.OQCOQQO0Q0:boolean;
begin
Result:=OQ0O00O0Q0 in O0O0QQO0Q0;
end;
function OCQCQQO0Q0.OCCOQQO0Q0:boolean;
begin
Result:=OQ0O00O0Q0 in OOO0QQO0Q0;
end;
procedure OCQCQQO0Q0.O00QOOO0Q0;
begin
if O0OO00O0Q0 in OQC0QQO0Q0 then
raise InvalidOperationException.Create(SReadingIsInProgress);
Include(OQC0QQO0Q0,O0OO00O0Q0);
end;
procedure OCQCQQO0Q0.OO0QOOO0Q0;
begin
if O0OO00O0Q0 in OQC0QQO0Q0 then
raise InvalidOperationException.Create(SReadingIsInProgress);
Include(OQC0QQO0Q0,OOOO00O0Q0);
end;
procedure OCQCQQO0Q0.OQ0QOOO0Q0;
begin
if(OQC0QQO0Q0*[O0OO00O0Q0,OOOO00O0Q0])=[]then
raise InvalidOperationException.Create(SNoReadingOperationToComplete);
Exclude(OQC0QQO0Q0,O0OO00O0Q0);
Exclude(OQC0QQO0Q0,OOOO00O0Q0);
end;
procedure OCQCQQO0Q0.OC0QOOO0Q0;
begin
Include(OQC0QQO0Q0,OQOO00O0Q0);
end;
procedure OCQCQQO0Q0.O0OQOOO0Q0;
begin
Exclude(OQC0QQO0Q0,OQOO00O0Q0);
end;
function OCQCQQO0Q0.OOOQOOO0Q0:boolean;
begin
Result:=OQOO00O0Q0 in OQC0QQO0Q0;
end;
function OCQCQQO0Q0.OQOQOOO0Q0:boolean;
begin
Result:=O0OO00O0Q0 in OQC0QQO0Q0;
end;
procedure OCQCQQO0Q0.O0QQOOO0Q0;
var
OOQQOOO0Q0,OQQQOOO0Q0:OCQCCOO0Q0;
begin
OQCCQQO0Q0.Enter;
try
if O0CCQQO0Q0 then
Exit;
O0CCQQO0Q0:=True;
if OOOOQQO0Q0<>nil then
OOQQOOO0Q0:=OOOOQQO0Q0
else
OOQQOOO0Q0:=OCOOQQO0Q0;
OQQQOOO0Q0:=nil;
while OOQQOOO0Q0<>nil do begin
OQQQOOO0Q0:=OOQQOOO0Q0;
OOQQOOO0Q0:=OOQQOOO0Q0.O0OOCOO0Q0;
OQQQOOO0Q0.O0Q0COO0Q0;
OQQQOOO0Q0.Free;
end;
if OQQQOOO0Q0<>OCOOQQO0Q0 then
OCOOQQO0Q0.Free;
if(OQQQOOO0Q0<>OOQOQQO0Q0)and(OCOOQQO0Q0<>OOQOQQO0Q0)then
OOQOQQO0Q0.Free;
OOQOQQO0Q0:=nil;
OOOOQQO0Q0:=nil;
OCOOQQO0Q0:=nil;
OC0OQQO0Q0:=-1;
finally
OQCCQQO0Q0.Leave;
end;
end;
function OCQCQQO0Q0.OCCOOOO0Q0(O00Q0OO0Q0:integer):OCC00OO0Q0;
begin
if OCCOQQO0Q0 then
raise InvalidOperationException.Create(SWritingAfterCompleted);
if O00Q0OO0Q0<0 then
raise ArgumentException.Create('SizeHint');
OCQQOOO0Q0(O00Q0OO0Q0);
Result:=OQQOQQO0Q0;
end;
procedure OCQCQQO0Q0.OCQQOOO0Q0(O0CQOOO0Q0:integer);
var
OOCQOOO0Q0:OCQCCOO0Q0;
begin
if OOOQOOO0Q0 and(OQQOQQO0Q0.OQ0O0OO0Q0>0)and(OQQOQQO0Q0.OQ0O0OO0Q0>=O0CQOOO0Q0)then
Exit;
OQCCQQO0Q0.Enter;
try
OC0QOOO0Q0;
if OOQOQQO0Q0=nil then begin
OOCQOOO0Q0:=OQCQOOO0Q0(O0CQOOO0Q0);
OCOOQQO0Q0:=OOCQOOO0Q0;
OOOOQQO0Q0:=OOCQOOO0Q0;
OOQOQQO0Q0:=OOCQOOO0Q0;
OC0OQQO0Q0:=0;
end
else
if(OQQOQQO0Q0.OQ0O0OO0Q0=0)or(O0CQOOO0Q0>OQQOQQO0Q0.OQ0O0OO0Q0)then begin
if OCQOQQO0Q0>0 then begin
OOQOQQO0Q0.OC0OCOO0Q0:=OOQOQQO0Q0.OC0OCOO0Q0+OCQOQQO0Q0;
OCQOQQO0Q0:=0;
end;
OOCQOOO0Q0:=OQCQOOO0Q0(O0CQOOO0Q0);
OOQOQQO0Q0.OOQ0COO0Q0(OOCQOOO0Q0);
OOQOQQO0Q0:=OOCQOOO0Q0;
end;
finally
OQCCQQO0Q0.Leave;
end;
end;
function OCQCQQO0Q0.OQCQOOO0Q0(OCCQOOO0Q0:integer):OCQCCOO0Q0;
var
O00COOO0Q0:OCQCCOO0Q0;
OO0COOO0Q0:integer;
begin
if not O0OOQQO0Q0.OOCOCOO0Q0(O00COOO0Q0)then
O00COOO0Q0:=OCQCCOO0Q0.Create;
if O0CCC0O0Q0=nil then
raise InvalidOperationException.Create(SInternalError);
OO0COOO0Q0:=Max(OCCCQQO0Q0,OCCQOOO0Q0);
O00COOO0Q0.OQO0COO0Q0(O0CCC0O0Q0.OC0CCOO0Q0(OO0COOO0Q0));
OQQOQQO0Q0:=O00COOO0Q0.OQ0OCOO0Q0;
Result:=O00COOO0Q0;
end;
procedure OCQCQQO0Q0.OQ0COOO0Q0(OC0COOO0Q0:OCQCCOO0Q0);
begin
Assert(OC0COOO0Q0<>OOOOQQO0Q0);
Assert(OC0COOO0Q0<>OCOOQQO0Q0);
Assert(OC0COOO0Q0<>OOQOQQO0Q0);
if O0OOQQO0Q0.OQ0QQOO0Q0<OOOCQQO0Q0 then
O0OOQQO0Q0.O00QQOO0Q0(OC0COOO0Q0)
else
OC0COOO0Q0.Free;
end;
procedure OCQCQQO0Q0.OO0Q0OO0Q0(OQ0Q0OO0Q0:integer);
begin
OQCCQQO0Q0.Enter;
try
if cardinal(OQ0Q0OO0Q0)>cardinal(OQQOQQO0Q0.OQ0O0OO0Q0)then
raise ArgumentException.Create('Count');
O0OCOOO0Q0(OQ0Q0OO0Q0);
finally
OQCCQQO0Q0.Leave;
end;
end;
procedure OCQCQQO0Q0.O0OCOOO0Q0(OOOCOOO0Q0:integer);
begin
Inc(OQ0OQQO0Q0,OOOCOOO0Q0);
Inc(OCQOQQO0Q0,OOOCOOO0Q0);
OQQOQQO0Q0:=OC0O0OO0Q0.OQQO0OO0Q0(OQQOQQO0Q0,OOOCOOO0Q0);
end;
function OCQCQQO0Q0.OQOCOOO0Q0:boolean;
var
OCOCOOO0Q0:Int64;
begin
O0OQOOO0Q0;
if OQ0OQQO0Q0=0 then begin
Result:=False;
Exit;
end;
OOQOQQO0Q0.OC0OCOO0Q0:=OOQOQQO0Q0.OC0OCOO0Q0+OCQOQQO0Q0;
OCOOQQO0Q0:=OOQOQQO0Q0;
O0QOQQO0Q0:=OOQOQQO0Q0.OC0OCOO0Q0;
OCOCOOO0Q0:=OO0OQQO0Q0;
OO0OQQO0Q0:=OO0OQQO0Q0+OQ0OQQO0Q0;
if(O000QQO0Q0>0)and(OCOCOOO0Q0<O000QQO0Q0)and(OO0OQQO0Q0>=O000QQO0Q0)and
not OQCOQQO0Q0 then
begin
Include(OOO0QQO0Q0,O00O00O0Q0);
OOQ0QQO0Q0.ResetEvent;
end;
OQ0OQQO0Q0:=0;
OCQOQQO0Q0:=0;
Result:=True;
Exclude(O0O0QQO0Q0,O00O00O0Q0);
O0Q0QQO0Q0.SetEvent;
end;
procedure OCQCQQO0Q0.O0QCOOO0Q0(out OOQCOOO0Q0:boolean;out OQQCOOO0Q0:boolean;
out OCQCOOO0Q0:OOQQ00O0Q0;O0CCOOO0Q0:TScCancellationToken);
begin
OOQCOOO0Q0:=OQOCOOO0Q0;
if O0CCOOO0Q0<>nil then
O0CCOOO0Q0.ThrowIfCancellationRequested;
OQQCOOO0Q0:=OOCOQQO0Q0;
if not OQQCOOO0Q0 then
OOCCOOO0Q0(OCQCOOO0Q0)
else begin
OCQCOOO0Q0:=O0QCC0O0Q0;
if(O0CCOOO0Q0<>nil)and O0CCOOO0Q0.CanBeCanceled then begin
OC00QQO0Q0:=O0CCOOO0Q0;
O0CCOOO0Q0.Register(O0OC0OO0Q0);
end;
end;
end;
function OCQCQQO0Q0.OC0Q0OO0Q0(O0OQ0OO0Q0:TScCancellationToken;out OOOQ0OO0Q0:boolean):OOQQ00O0Q0;
var
OQOQ0OO0Q0:boolean;
begin
OQCCQQO0Q0.Enter;
try
O0QCOOO0Q0(OQOQ0OO0Q0,OOOQ0OO0Q0,Result,O0OQ0OO0Q0);
finally
OQCCQQO0Q0.Leave;
end;
if OQOQ0OO0Q0 then
OQ0OOOO0Q0;
end;
function OCQCQQO0Q0.OCOQ0OO0Q0(const O0QQ0OO0Q0:OCC00OO0Q0;OOQQ0OO0Q0:TScCancellationToken;out OQQQ0OO0Q0:boolean):OOQQ00O0Q0;
var
OCQQ0OO0Q0:boolean;
O0CQ0OO0Q0,OOCQ0OO0Q0:OCC00OO0Q0;
OQCQ0OO0Q0:integer;
OCCQ0OO0Q0:OCQCCOO0Q0;
begin
if OCCOQQO0Q0 then
raise InvalidOperationException.Create(SWritingAfterCompleted);
OQCCQQO0Q0.Enter;
try
OCQQOOO0Q0(0);
if O0QQ0OO0Q0.OQ0O0OO0Q0<=OQQOQQO0Q0.OQ0O0OO0Q0 then begin
OC0O0OO0Q0.OQCO0OO0Q0(O0QQ0OO0Q0,OQQOQQO0Q0);
O0OCOOO0Q0(O0QQ0OO0Q0.OQ0O0OO0Q0);
end
else begin
O0CQ0OO0Q0:=O0QQ0OO0Q0;
while True do begin
OQCQ0OO0Q0:=Min(OQQOQQO0Q0.OQ0O0OO0Q0,O0CQ0OO0Q0.OQ0O0OO0Q0);
OOCQ0OO0Q0:=OC0O0OO0Q0.OQQO0OO0Q0(O0CQ0OO0Q0,0,OQCQ0OO0Q0);
OC0O0OO0Q0.OQCO0OO0Q0(OOCQ0OO0Q0,OQQOQQO0Q0);
O0CQ0OO0Q0:=OC0O0OO0Q0.OQQO0OO0Q0(O0CQ0OO0Q0,OQCQ0OO0Q0);
O0OCOOO0Q0(OQCQ0OO0Q0);
if O0CQ0OO0Q0.OQ0O0OO0Q0=0 then
break;
OOQOQQO0Q0.OC0OCOO0Q0:=OOQOQQO0Q0.OC0OCOO0Q0+OQCQ0OO0Q0;
OCQOQQO0Q0:=0;
OCCQ0OO0Q0:=OQCQOOO0Q0(0);
OOQOQQO0Q0.OOQ0COO0Q0(OCCQ0OO0Q0);
OOQOQQO0Q0:=OCCQ0OO0Q0;
end;
end;
O0QCOOO0Q0(OCQQ0OO0Q0,OQQQ0OO0Q0,Result,OOQQ0OO0Q0);
finally
OQCCQQO0Q0.Leave;
end;
if OCQQ0OO0Q0 then
OQ0OOOO0Q0;
end;
procedure OCQCQQO0Q0.O00C0OO0Q0(OO0C0OO0Q0:TThreadMethod);
begin
OQCCQQO0Q0.Enter;
try
if OOCOQQO0Q0 then begin
OCO0QQO0Q0:=OO0C0OO0Q0;
OO0C0OO0Q0:=nil;
end;
finally
OQCCQQO0Q0.Leave;
end;
OQQOOOO0Q0(OO0C0OO0Q0);
end;
function OCQCQQO0Q0.OQ0C0OO0Q0:OOQQ00O0Q0;
var
OC0C0OO0Q0:TScCancellationToken;
begin
OC0C0OO0Q0:=nil;
try
OQCCQQO0Q0.Enter;
try
if OOCOQQO0Q0 then
raise InvalidOperationException.Create(SGetResultBeforeCompleted);
OC0C0OO0Q0:=OC00QQO0Q0;
OC00QQO0Q0:=nil;
OOCCOOO0Q0(Result);
finally
OQCCQQO0Q0.Leave;
end;
finally
if OC0C0OO0Q0<>nil then begin
OC0C0OO0Q0.Unregister(O0OC0OO0Q0);
OC0C0OO0Q0.ThrowIfCancellationRequested;
end;
end;
end;
procedure OCQCQQO0Q0.OOCCOOO0Q0(var OQCCOOO0Q0:OOQQ00O0Q0);
var
OCCCOOO0Q0:Exception;
begin
OQCCOOO0Q0.OQQQ00O0Q0:=OO0O00O0Q0 in OOO0QQO0Q0;
Exclude(OOO0QQO0Q0,OO0O00O0Q0);
OQCCOOO0Q0.OCQQ00O0Q0:=OQCOQQO0Q0;
if OQCCOOO0Q0.OCQQ00O0Q0 then
if O0C0QQO0Q0<>nil then begin
OCCCOOO0Q0:=O0C0QQO0Q0;
O0C0QQO0Q0:=nil;
raise OCCCOOO0Q0;
end;
end;
procedure OCQCQQO0Q0.O0OC0OO0Q0;
begin
OQCCQQO0Q0.Enter;
try
Include(OOO0QQO0Q0,OO0O00O0Q0);
OOQ0QQO0Q0.SetEvent;
finally
OQCCQQO0Q0.Leave;
end;
O0OOOOO0Q0;
end;
procedure OCQCQQO0Q0.OOOC0OO0Q0(OQOC0OO0Q0:Exception);
begin
OQCCQQO0Q0.Enter;
try
OQOCOOO0Q0;
OOC0QQO0Q0:=OQOC0OO0Q0;
Include(OOO0QQO0Q0,OQ0O00O0Q0);
Exclude(O0O0QQO0Q0,O00O00O0Q0);
O0Q0QQO0Q0.SetEvent;
finally
OQCCQQO0Q0.Leave;
end;
if OQCOQQO0Q0 then
O0QQOOO0Q0;
O0QOOOO0Q0;
OQ0OOOO0Q0;
end;
procedure OCQCQQO0Q0.OCOC0OO0Q0(O0QC0OO0Q0:OOQCQQO0Q0);
begin
if not Assigned(O0QC0OO0Q0)then
raise ArgumentException.Create('Event');
OQCCQQO0Q0.Enter;
try
if not OCCOQQO0Q0 then begin
OCQ0QQO0Q0:=O0QC0OO0Q0;
O0QC0OO0Q0:=nil;
end;
finally
OQCCQQO0Q0.Leave;
end;
if Assigned(O0QC0OO0Q0)then
OQQOOOO0Q0(O0QC0OO0Q0,nil);
end;
procedure OCQCQQO0Q0.O000OOO0Q0(const OOQC0OO0Q0:OC0QQOO0Q0);
begin
O000OOO0Q0(OOQC0OO0Q0,OOQC0OO0Q0);
end;
procedure OCQCQQO0Q0.O000OOO0Q0(const OOQC0OO0Q0,OQQC0OO0Q0:OC0QQOO0Q0);
begin
if OQCOQQO0Q0 then
raise InvalidOperationException.Create(SReadingAfterCompleted);
O000OOO0Q0(OCQCCOO0Q0(OOQC0OO0Q0.O0OQQOO0Q0),OOQC0OO0Q0.OOOQQOO0Q0,OCQCCOO0Q0(OQQC0OO0Q0.O0OQQOO0Q0),OQQC0OO0Q0.OOOQQOO0Q0);
end;
procedure OCQCQQO0Q0.O000OOO0Q0(OO00OOO0Q0:OCQCCOO0Q0;OQ00OOO0Q0:integer;
OC00OOO0Q0:OCQCCOO0Q0;O0O0OOO0Q0:integer);
var
OOO0OOO0Q0,OQO0OOO0Q0:OCQCCOO0Q0;
procedure OCO0OOO0Q0;
var
O0Q0OOO0Q0:OCQCCOO0Q0;
begin
O0Q0OOO0Q0:=OQO0OOO0Q0.O0OOCOO0Q0;
if OCOOQQO0Q0=OQO0OOO0Q0 then begin
OCOOQQO0Q0:=O0Q0OOO0Q0;
O0QOQQO0Q0:=0;
end;
OOOOQQO0Q0:=O0Q0OOO0Q0;
OQOOQQO0Q0:=0;
OQO0OOO0Q0:=O0Q0OOO0Q0;
end;
var
OOQ0OOO0Q0:boolean;
OQQ0OOO0Q0,OCQ0OOO0Q0:Int64;
O0C0OOO0Q0:boolean;
OOC0OOO0Q0:OCQCCOO0Q0;
begin
if(OO00OOO0Q0<>nil)and(OC00OOO0Q0<>nil)and
(OCQCCOO0Q0.OCQ0COO0Q0(OO00OOO0Q0,OQ00OOO0Q0,OC00OOO0Q0,O0O0OOO0Q0)<0)then
raise InvalidOperationException.Create(SInvalidExaminedOrConsumedPosition);
OOO0OOO0Q0:=nil;
OQO0OOO0Q0:=nil;
OOQ0OOO0Q0:=False;
OQCCQQO0Q0.Enter;
try
O0C0OOO0Q0:=(OC00OOO0Q0=OCOOQQO0Q0)and(O0O0OOO0Q0=O0QOQQO0Q0);
if(OC00OOO0Q0<>nil)and(OC0OQQO0Q0>=0)then begin
OCQ0OOO0Q0:=OCQCCOO0Q0.OCQ0COO0Q0(OC0OQQO0Q0,OC00OOO0Q0,O0O0OOO0Q0);
if OCQ0OOO0Q0<0 then
raise InvalidOperationException.Create(SInvalidExaminedPosition);
if OCQ0OOO0Q0>OO0OQQO0Q0 then
raise InvalidOperationException.Create(SInvalidExaminedPosition);
OQQ0OOO0Q0:=OO0OQQO0Q0;
OO0OQQO0Q0:=OO0OQQO0Q0-OCQ0OOO0Q0;
OC0OQQO0Q0:=OC00OOO0Q0.OQOOCOO0Q0+O0O0OOO0Q0;
if(OQQ0OOO0Q0>=OO00QQO0Q0)and(OO0OQQO0Q0<OO00QQO0Q0)then begin
OOQ0OOO0Q0:=True;
Exclude(OOO0QQO0Q0,O00O00O0Q0);
OOQ0QQO0Q0.SetEvent;
end;
end;
if OO00OOO0Q0<>nil then begin
if OOOOQQO0Q0=nil then begin
raise InvalidOperationException.Create(SAdvanceToInvalidCursor);
Exit;
end;
OOO0OOO0Q0:=OOOOQQO0Q0;
OQO0OOO0Q0:=OO00OOO0Q0;
if OQ00OOO0Q0=OQO0OOO0Q0.OC0OCOO0Q0 then begin
if OOQOQQO0Q0<>OQO0OOO0Q0 then
OCO0OOO0Q0
else
if OCQOQQO0Q0=0 then begin
if not OOOQOOO0Q0 then begin
OOQOQQO0Q0:=nil;
OQQOQQO0Q0:=OQOCC0O0Q0;
OCO0OOO0Q0;
end
else begin
OC0OQQO0Q0:=O0QOQQO0Q0;
OOQOQQO0Q0.OQOOCOO0Q0:=0;
OOOOQQO0Q0:=OO00OOO0Q0;
OQOOQQO0Q0:=OQ00OOO0Q0;
end;
end
else begin
OOOOQQO0Q0:=OO00OOO0Q0;
OQOOQQO0Q0:=OQ00OOO0Q0;
end;
end
else begin
OOOOQQO0Q0:=OO00OOO0Q0;
OQOOQQO0Q0:=OQ00OOO0Q0;
end;
end;
if O0C0OOO0Q0 and not OCCOQQO0Q0 then begin
Include(O0O0QQO0Q0,O00O00O0Q0);
O0Q0QQO0Q0.ResetEvent;
end;
while(OOO0OOO0Q0<>nil)and(OOO0OOO0Q0<>OQO0OOO0Q0)do begin
OOC0OOO0Q0:=OOO0OOO0Q0.O0OOCOO0Q0;
OOO0OOO0Q0.O0Q0COO0Q0;
OQ0COOO0Q0(OOO0OOO0Q0);
OOO0OOO0Q0:=OOC0OOO0Q0;
end;
OQ0QOOO0Q0;
finally
OQCCQQO0Q0.Leave;
end;
if OOQ0OOO0Q0 then
O0OOOOO0Q0;
end;
function OCQCQQO0Q0.OCQC0OO0Q0(O0CC0OO0Q0:TScCancellationToken;out OOCC0OO0Q0:boolean):O0CQ00O0Q0;
begin
if OQCOQQO0Q0 then
raise InvalidOperationException.Create(SReadingAfterCompleted);
if O0CC0OO0Q0<>nil then
O0CC0OO0Q0.ThrowIfCancellationRequested;
OQCCQQO0Q0.Enter;
try
if OQCOQQO0Q0 then
raise InvalidOperationException.Create(SReadingAfterCompleted);
OOCC0OO0Q0:=O0COQQO0Q0;
if not OOCC0OO0Q0 then
OQC0OOO0Q0(Result)
else begin
Result:=OOQCC0O0Q0;
if(O0CC0OO0Q0<>nil)and O0CC0OO0Q0.CanBeCanceled then begin
OQ00QQO0Q0:=O0CC0OO0Q0;
O0CC0OO0Q0.Register(OQ000OO0Q0);
end;
end;
finally
OQCCQQO0Q0.Leave;
end;
end;
procedure OCQCQQO0Q0.OQCC0OO0Q0(OCCC0OO0Q0:TThreadMethod);
begin
OQCCQQO0Q0.Enter;
try
if O0COQQO0Q0 then begin
OQO0QQO0Q0:=OCCC0OO0Q0;
OCCC0OO0Q0:=nil;
end;
finally
OQCCQQO0Q0.Leave;
end;
OQQOOOO0Q0(OCCC0OO0Q0);
end;
function OCQCQQO0Q0.O0000OO0Q0:O0CQ00O0Q0;
var
OO000OO0Q0:TScCancellationToken;
begin
OO000OO0Q0:=nil;
try
OQCCQQO0Q0.Enter;
try
if O0COQQO0Q0 then
raise InvalidOperationException.Create(SGetResultBeforeCompleted);
OO000OO0Q0:=OQ00QQO0Q0;
OQ00QQO0Q0:=nil;
OQC0OOO0Q0(Result);
finally
OQCCQQO0Q0.Leave;
end;
finally
if OO000OO0Q0<>nil then begin
OO000OO0Q0.Unregister(OQ000OO0Q0);
OO000OO0Q0.ThrowIfCancellationRequested;
end;
end;
end;
procedure OCQCQQO0Q0.OQC0OOO0Q0(out OCC0OOO0Q0:O0CQ00O0Q0);
var
O00OOOO0Q0:Exception;
OO0OOOO0Q0:OQOQQOO0Q0;
begin
OCC0OOO0Q0.OOCQ00O0Q0:=OO0O00O0Q0 in O0O0QQO0Q0;
Exclude(O0O0QQO0Q0,OO0O00O0Q0);
OCC0OOO0Q0.OQCQ00O0Q0:=OCCOQQO0Q0;
if OCC0OOO0Q0.OQCQ00O0Q0 then
if OOC0QQO0Q0<>nil then begin
O00OOOO0Q0:=OOC0QQO0Q0;
OOC0QQO0Q0:=nil;
raise O00OOOO0Q0;
end;
if OOOOQQO0Q0<>nil then begin
OO0OOOO0Q0:=OQOQQOO0Q0.Create(OOOOQQO0Q0,OQOOQQO0Q0,OCOOQQO0Q0,O0QOQQO0Q0);
OCC0OOO0Q0.OCCQ00O0Q0:=OO0OOOO0Q0;
end
else
OCC0OOO0Q0.OCCQ00O0Q0:=nil;
if OCC0OOO0Q0.OOCQ00O0Q0 then
OO0QOOO0Q0
else
O00QOOO0Q0;
end;
procedure OCQCQQO0Q0.OQ000OO0Q0;
begin
OQCCQQO0Q0.Enter;
try
Include(O0O0QQO0Q0,OO0O00O0Q0);
O0Q0QQO0Q0.SetEvent;
finally
OQCCQQO0Q0.Leave;
end;
OQ0OOOO0Q0;
end;
procedure OCQCQQO0Q0.OC000OO0Q0(O0O00OO0Q0:Exception);
begin
OQCCQQO0Q0.Enter;
try
if OQOQOOO0Q0 then
OQ0QOOO0Q0;
O0C0QQO0Q0:=O0O00OO0Q0;
Include(O0O0QQO0Q0,OQ0O00O0Q0);
Exclude(OOO0QQO0Q0,O00O00O0Q0);
OOQ0QQO0Q0.SetEvent;
finally
OQCCQQO0Q0.Leave;
end;
if OCCOQQO0Q0 then
O0QQOOO0Q0;
OQOOOOO0Q0;
O0OOOOO0Q0;
end;
procedure OCQCQQO0Q0.OOO00OO0Q0(OQO00OO0Q0:OOQCQQO0Q0);
begin
if not Assigned(OQO00OO0Q0)then
raise ArgumentException.Create('Event');
OQCCQQO0Q0.Enter;
try
if not OQCOQQO0Q0 then begin
OQQ0QQO0Q0:=OQO00OO0Q0;
OQO00OO0Q0:=nil;
end;
finally
OQCCQQO0Q0.Leave;
end;
if Assigned(OQO00OO0Q0)then
OQQOOOO0Q0(OQO00OO0Q0,nil);
end;
procedure OCQCQQO0Q0.OQ0OOOO0Q0;
var
OC0OOOO0Q0:TThreadMethod;
begin
if not Assigned(OQO0QQO0Q0)then
Exit;
OQCCQQO0Q0.Enter;
try
OC0OOOO0Q0:=OQO0QQO0Q0;
OQO0QQO0Q0:=nil;
finally
OQCCQQO0Q0.Leave;
end;
OQQOOOO0Q0(OC0OOOO0Q0);
end;
procedure OCQCQQO0Q0.O0OOOOO0Q0;
var
OOOOOOO0Q0:TThreadMethod;
begin
if not Assigned(OCO0QQO0Q0)then
Exit;
OQCCQQO0Q0.Enter;
try
OOOOOOO0Q0:=OCO0QQO0Q0;
OCO0QQO0Q0:=nil;
finally
OQCCQQO0Q0.Leave;
end;
OQQOOOO0Q0(OOOOOOO0Q0);
end;
procedure OCQCQQO0Q0.OQOOOOO0Q0;
var
OCOOOOO0Q0:OCOCQQO0Q0;
begin
if not Assigned(OQQ0QQO0Q0)then
Exit;
OQCCQQO0Q0.Enter;
try
OCOOOOO0Q0:=OQQ0QQO0Q0;
OQQ0QQO0Q0:=nil;
finally
OQCCQQO0Q0.Leave;
end;
try
OQQOOOO0Q0(OCOOOOO0Q0,O0C0QQO0Q0);
finally
FreeAndNil(O0C0QQO0Q0);
end;
end;
procedure OCQCQQO0Q0.O0QOOOO0Q0;
var
OOQOOOO0Q0:OCOCQQO0Q0;
begin
if not Assigned(OCQ0QQO0Q0)then
Exit;
OQCCQQO0Q0.Enter;
try
OOQOOOO0Q0:=OCQ0QQO0Q0;
OCQ0QQO0Q0:=nil;
finally
OQCCQQO0Q0.Leave;
end;
try
OQQOOOO0Q0(OOQOOOO0Q0,OOC0QQO0Q0);
finally
FreeAndNil(OOC0QQO0Q0);
end;
end;
procedure OCQCQQO0Q0.OQQOOOO0Q0(OCQOOOO0Q0:OCOCQQO0Q0;O0COOOO0Q0:Exception);
var
OOCOOOO0Q0:OQ0Q00O0Q0;
begin
Assert(Assigned(OCQOOOO0Q0));
if OOCCQQO0Q0=OCCQO0QOQ0 then
OCQOOOO0Q0(O0COOOO0Q0)
else begin
if OOCCQQO0Q0=OOCQO0QOQ0 then
OOCOCQO0Q0;
OOCOOOO0Q0:=OQ0Q00O0Q0.Create(Self,OCQOOOO0Q0,O0COOCOOQ0(O0COOOO0Q0));
OOCOOOO0Q0.OQQOCQO0Q0(OOCCQQO0Q0);
end;
end;
procedure OCQCQQO0Q0.OQQOOOO0Q0(OCQOOOO0Q0:TThreadMethod);
var
OQCOOOO0Q0:O0COO0O0Q0;
begin
if not Assigned(OCQOOOO0Q0)then
Exit;
if OOCCQQO0Q0=OCCQO0QOQ0 then
OCQOOOO0Q0()
else begin
if OOCCQQO0Q0=OOCQO0QOQ0 then
OOCOCQO0Q0;
OQCOOOO0Q0:=O0COO0O0Q0.Create(Self,OCQOOOO0Q0);
OQCOOOO0Q0.OQQOCQO0Q0(OOCCQQO0Q0);
end;
end;
constructor O0CO00O0Q0.Create(OCCO00O0Q0:OQ0000O0Q0);
begin
inherited Create;
if OCCO00O0Q0=nil then
raise ArgumentException.Create('PipeWriter');
OOCO00O0Q0:=OCCO00O0Q0;
end;
function O0CO00O0Q0.Read(var O00OO0O0Q0;OO0OO0O0Q0:Longint):Longint;
begin
{$IFDEF FPC}
Result:=0;
{$ENDIF}
raise Exception.Create('The stream is write-only');
end;
function O0CO00O0Q0.GetSize:Int64;
begin
Result:=0;
end;
function O0CO00O0Q0.Write(const OQOOO0O0Q0;OCOOO0O0Q0:Longint):Longint;
var
OQ0QC0O0Q0:OCC00OO0Q0;
OQCQ0OO0Q0:integer;
begin
Result:=0;
while OCOOO0O0Q0>0 do begin
OQ0QC0O0Q0:=OOCO00O0Q0.OOO000O0Q0;
OQCQ0OO0Q0:=Min(OCOOO0O0Q0,OQ0QC0O0Q0.OQ0O0OO0Q0);
OC0O0OO0Q0.OQCO0OO0Q0(PtrOffset(@OQOOO0O0Q0,Result),OQCQ0OO0Q0,OQ0QC0O0Q0);
Inc(Result,OQCQ0OO0Q0);
Dec(OCOOO0O0Q0,OQCQ0OO0Q0);
OOCO00O0Q0.OCQ000O0Q0(OQCQ0OO0Q0);
end;
end;
function O0CO00O0Q0.Seek(const O00OQOO0Q0:Int64;OOQOO0O0Q0:TSeekOrigin):Int64;
begin
Result:=0;
end;
constructor O0OQC0O0Q0.Create(OOQQC0O0Q0:OCQCQQO0Q0;OQQQC0O0Q0:O00C00O0Q0;OCQQC0O0Q0:OQ0000O0Q0);
begin
inherited Create;
OOOQC0O0Q0:=OOQQC0O0Q0;
OQOQC0O0Q0:=OQQQC0O0Q0;
OCOQC0O0Q0:=OCQQC0O0Q0;
end;
destructor O0OQC0O0Q0.Destroy;
begin
OOOQC0O0Q0.Free;
inherited;
end;
class function O0OQC0O0Q0.OOCQC0O0Q0(const OQCQC0O0Q0:O0QO00O0Q0):OC0CC0O0Q0;
var
OCCQC0O0Q0,O00CC0O0Q0:OCQCQQO0Q0;
begin
OCCQC0O0Q0:=OCQCQQO0Q0.Create(OQCQC0O0Q0);
O00CC0O0Q0:=OCQCQQO0Q0.Create(OQCQC0O0Q0);
Result.O0OCC0O0Q0:=O0OQC0O0Q0.Create(OCCQC0O0Q0,OCCQC0O0Q0.O0C00OO0Q0,O00CC0O0Q0.OOC00OO0Q0);
Result.OOOCC0O0Q0:=O0OQC0O0Q0.Create(O00CC0O0Q0,O00CC0O0Q0.O0C00OO0Q0,OCCQC0O0Q0.OOC00OO0Q0);
end;
initialization
O0CCC0O0Q0:=OCOQCOO0Q0.Create;
finalization
FreeAndNil(O0CCC0O0Q0);
end.
