//////////////////////////////////////////////////
//  SecureBridge Components
//  Copyright © 2007-2021 Devart. All right reserved.
//////////////////////////////////////////////////
{$I Tds.inc}
unit TdsSSLExtensionsUni;
interface
uses
{$IFDEF MSWINDOWS}
Windows,
{$ENDIF}
SysUtils,SyncObjs,Classes,
CRTypes,CRFunctions,CLRClasses,CRDECUtil,CRBigInteger,
{$IFNDEF UNIDACPRO}
TdsUtils,TdsSSLConsts,TdsBridge,TdsCertificateExts,
TdsSSLTypes,TdsSSLMessages;
{$ELSE}
TdsUtilsUni,TdsSSLConstsUni,TdsBridgeUni,TdsCertificateExtsUni,
TdsSSLTypesUni,TdsSSLMessagesUni;
{$ENDIF}
type
OCQOC0Q0Q0=class;
OQQ0Q0Q0Q0=class;
OCC0Q0Q0Q0=procedure(O00OQ0Q0Q0:TObject;OO0OQ0Q0Q0:OQCCQOQ0Q0;
OQ0OQ0Q0Q0:O00QQOQ0Q0)of object;
OC0OQ0Q0Q0=procedure(O0OOQ0Q0Q0:TObject;OOOOQ0Q0Q0:O00QQOQ0Q0;
OQOOQ0Q0Q0:OQCCQOQ0Q0;var OCOOQ0Q0Q0:boolean)of object;
O0QOQ0Q0Q0=class(TPersistent)
private
OOQOQ0Q0Q0:O0OQQQQ0Q0;
OQQOQ0Q0Q0:OO0QO0QOQ0;
OCQOQ0Q0Q0:TScSSLProtocols;
O0COQ0Q0Q0:OCOQOOQ0Q0;
OOCOQ0Q0Q0:O00COOQ0Q0;
OQCOQ0Q0Q0:OQOQ0QQ0Q0;
OCCOQ0Q0Q0:OOOQOQQ0Q0;
O00QOCO0Q0:OC0COOQ0Q0;
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OO0QOCO0Q0:TScCertificate;
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OQ0QOCO0Q0:OCCCQ00OQ0;
OC0QOCO0Q0:boolean;
O0OQOCO0Q0:boolean;
OOOQOCO0Q0:boolean;
OQOQOCO0Q0:boolean;
OCOQOCO0Q0:boolean;
O0QQOCO0Q0:string;
OOQQOCO0Q0:boolean;
OQQQOCO0Q0:boolean;
OCQQOCO0Q0:boolean;
O0CQOCO0Q0:boolean;
OOCQOCO0Q0:boolean;
OQCQOCO0Q0:integer;
OCCQOCO0Q0:integer;
O00COCO0Q0:OCQQOOQ0Q0;
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OO0COCO0Q0:OCQOC0Q0Q0;
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OQ0COCO0Q0:OCQOC0Q0Q0;
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OC0COCO0Q0:OQCCQOQ0Q0;
O0OCOCO0Q0:boolean;
OOOCOCO0Q0:integer;
OQOCOCO0Q0:OC0Q00OOQ0;
OCOCOCO0Q0:boolean;
O0QCOCO0Q0:integer;
OOQCOCO0Q0:integer;
OQQCOCO0Q0:TScKExNamedGroupTypes;
OCQCOCO0Q0:OCC000QOQ0;
O0CCOCO0Q0:OQ0O00QOQ0;
OOCCOCO0Q0:OQOO00QOQ0;
OQCCOCO0Q0:OCC0Q0Q0Q0;
OCCCOCO0Q0:OC0OQ0Q0Q0;
procedure O000OCO0Q0(const OO00OCO0Q0:O0OQQQQ0Q0);
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
public
constructor Create;
property O0O0OCO0Q0:OCOQOOQ0Q0 read O0COQ0Q0Q0 write O0COQ0Q0Q0;
property OOO0OCO0Q0:O0OQQQQ0Q0 read OOQOQ0Q0Q0 write O000OCO0Q0;
property OQO0OCO0Q0:OO0QO0QOQ0 read OQQOQ0Q0Q0 write OQQOQ0Q0Q0;
property OCO0OCO0Q0:TScSSLProtocols read OCQOQ0Q0Q0 write OCQOQ0Q0Q0;
property O0Q0OCO0Q0:O00COOQ0Q0 read OOCOQ0Q0Q0 write OOCOQ0Q0Q0;
property OOQ0OCO0Q0:OQOQ0QQ0Q0 read OQCOQ0Q0Q0 write OQCOQ0Q0Q0;
property OQQ0OCO0Q0:OOOQOQQ0Q0 read OCCOQ0Q0Q0 write OCCOQ0Q0Q0;
property OCQ0OCO0Q0:OC0COOQ0Q0 read O00QOCO0Q0 write O00QOCO0Q0;
property O0C0OCO0Q0:TScCertificate read OO0QOCO0Q0 write OO0QOCO0Q0;
property OOC0OCO0Q0:OCCCQ00OQ0 read OQ0QOCO0Q0 write OQ0QOCO0Q0;
property OQC0OCO0Q0:boolean read OC0QOCO0Q0 write OC0QOCO0Q0;
property OCC0OCO0Q0:boolean read O0OQOCO0Q0 write O0OQOCO0Q0;
property O00OOCO0Q0:boolean read OOOQOCO0Q0 write OOOQOCO0Q0;
property OO0OOCO0Q0:boolean read OQOQOCO0Q0 write OQOQOCO0Q0;
property OQ0OOCO0Q0:boolean read OCOQOCO0Q0 write OCOQOCO0Q0;
property OC0OOCO0Q0:string read O0QQOCO0Q0 write O0QQOCO0Q0;
property O0OOOCO0Q0:boolean read OOQQOCO0Q0 write OOQQOCO0Q0;
property OOOOOCO0Q0:integer read OCCQOCO0Q0 write OCCQOCO0Q0;
property OQOOOCO0Q0:OCQOC0Q0Q0 read OO0COCO0Q0 write OO0COCO0Q0;
property OCOOOCO0Q0:OCQOC0Q0Q0 read OQ0COCO0Q0 write OQ0COCO0Q0;
property O0QOOCO0Q0:boolean read OCQQOCO0Q0 write OCQQOCO0Q0;
property OOQOOCO0Q0:boolean read O0CQOCO0Q0 write O0CQOCO0Q0;
property OQQOOCO0Q0:OQCCQOQ0Q0 read OC0COCO0Q0 write OC0COCO0Q0;
property OCQOOCO0Q0:boolean read OQQQOCO0Q0 write OQQQOCO0Q0;
property O0COOCO0Q0:integer read OQCQOCO0Q0 write OQCQOCO0Q0;
property OOCOOCO0Q0:boolean read OOCQOCO0Q0 write OOCQOCO0Q0;
property OQCOOCO0Q0:OCQQOOQ0Q0 read O00COCO0Q0 write O00COCO0Q0;
property OCCOOCO0Q0:boolean read O0OCOCO0Q0 write O0OCOCO0Q0;
property O00Q0CO0Q0:integer read OOOCOCO0Q0 write OOOCOCO0Q0;
property OO0Q0CO0Q0:OC0Q00OOQ0 read OQOCOCO0Q0 write OQOCOCO0Q0;
property OQ0Q0CO0Q0:boolean read OCOCOCO0Q0 write OCOCOCO0Q0;
property OC0Q0CO0Q0:integer read O0QCOCO0Q0 write O0QCOCO0Q0;
property O0OQ0CO0Q0:integer read OOQCOCO0Q0 write OOQCOCO0Q0;
property OOOQ0CO0Q0:TScKExNamedGroupTypes read OQQCOCO0Q0 write OQQCOCO0Q0;
property OQOQ0CO0Q0:OCC000QOQ0 read OCQCOCO0Q0 write OCQCOCO0Q0;
property OCOQ0CO0Q0:OQ0O00QOQ0 read O0CCOCO0Q0 write O0CCOCO0Q0;
property O0QQ0CO0Q0:OQOO00QOQ0 read OOCCOCO0Q0 write OOCCOCO0Q0;
property OOQQ0CO0Q0:OCC0Q0Q0Q0 read OQCCOCO0Q0 write OQCCOCO0Q0;
property OQQQ0CO0Q0:OC0OQ0Q0Q0 read OCCCOCO0Q0 write OCCCOCO0Q0;
end;
OQQ0Q0Q0Q0=class(O00QQOQ0Q0)
private
OCQ0Q0Q0Q0:OCQOC0Q0Q0;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
public
constructor Create;override;
destructor Destroy;override;
property OQC0Q0Q0Q0:OCQOC0Q0Q0 read OCQ0Q0Q0Q0;
end;
OQ000CO0Q0=(
OCQQ0CO0Q0,
O0CQ0CO0Q0,OOCQ0CO0Q0,OQCQ0CO0Q0,
OCCQ0CO0Q0,
O00C0CO0Q0,OO0C0CO0Q0,OQ0C0CO0Q0,
OC0C0CO0Q0,O0OC0CO0Q0,
OOOC0CO0Q0,
OQOC0CO0Q0,OCOC0CO0Q0,
O0QC0CO0Q0,OOQC0CO0Q0,
OQQC0CO0Q0,
OCQC0CO0Q0,O0CC0CO0Q0,OOCC0CO0Q0,
OQCC0CO0Q0,OCCC0CO0Q0,O0000CO0Q0,
OO000CO0Q0
);
OC000CO0Q0=class(TPersistent)
protected
O0O00CO0Q0:OCOQOOQ0Q0;
function OOO00CO0Q0:word;virtual;
function OQO00CO0Q0:OQ000CO0Q0;virtual;abstract;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);virtual;abstract;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
public
constructor Create;virtual;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);virtual;abstract;
end;
OCQ00CO0Q0=class of OC000CO0Q0;
O0C00CO0Q0=class(OC000CO0Q0)
private
OOC00CO0Q0:word;
OQC00CO0Q0:TBytes;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OOO00CO0Q0:word;override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property OCC00CO0Q0:word read OOC00CO0Q0;
end;
O00O0CO0Q0=class(OC000CO0Q0)
private
OO0O0CO0Q0:boolean;
OQ0O0CO0Q0:TBytes;
OC0O0CO0Q0:TBytes;
O0OO0CO0Q0:TBytes;
OOOO0CO0Q0:TBytes;
OQOO0CO0Q0:boolean;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
procedure OOQO0CO0Q0;
procedure OQQO0CO0Q0;
procedure OCQO0CO0Q0(O0CO0CO0Q0:O00O0CO0Q0);
procedure OOCO0CO0Q0(const OQCO0CO0Q0:TBytes;OCCO0CO0Q0,O00QCCO0Q0:integer);
procedure OO0QCCO0Q0(const OQ0QCCO0Q0:TBytes;OC0QCCO0Q0,O0OQCCO0Q0:integer);
property OOOQCCO0Q0:boolean read OQOO0CO0Q0;
end;
OQOQCCO0Q0=class(OC000CO0Q0)
private
OCOQCCO0Q0:TStringList;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
destructor Destroy;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property O0CQCCO0Q0:TStringList read OCOQCCO0Q0;
end;
OO0CCCO0Q0=(OOCQCCO0Q0,OQCQCCO0Q0,OCCQCCO0Q0,O00CCCO0Q0);
OQ0CCCO0Q0=class(OC000CO0Q0)
private
OC0CCCO0Q0:OO0CCCO0Q0;
function O0OCCCO0Q0:integer;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property OOOCCCO0Q0:OO0CCCO0Q0 read OC0CCCO0Q0 write OC0CCCO0Q0;
property OQOCCCO0Q0:integer read O0OCCCO0Q0;
end;
OCOCCCO0Q0=class(OC000CO0Q0)
private
O0QCCCO0Q0:word;
procedure OOQCCCO0Q0(OQQCCCO0Q0:word);
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property O0CCCCO0Q0:word read O0QCCCO0Q0 write OOQCCCO0Q0;
end;
OOCCCCO0Q0=class(OC000CO0Q0)
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
end;
OQCCCCO0Q0=class(OC000CO0Q0)
private
OCCCCCO0Q0:TBytes;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property O000CCO0Q0:TBytes read OCCCCCO0Q0 write OCCCCCO0Q0;
end;
TTLSSignatureAndHashAlgorithm=record
Hash:OOOOCOQOQ0;
Signature:OOOQQQQ0Q0;
Padding:OQ0Q0OOOQ0;
KeyPadding:OQ0Q0OOOQ0;
end;
OO00CCO0Q0=class(OC000CO0Q0)
private
OQ00CCO0Q0:array of OOOCQQQ0Q0;
OC00CCO0Q0:integer;
function O0O0CCO0Q0(OOO0CCO0Q0:integer):OOOCQQQ0Q0;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
class function OOQ0CCO0Q0:OO00CCO0Q0;
procedure OQQ0CCO0Q0(OCQ0CCO0Q0:OOOOCOQOQ0;O0C0CCO0Q0:OOOQQQQ0Q0);overload;
procedure OQQ0CCO0Q0(OQC0CCO0Q0:OOOCQQQ0Q0);overload;
procedure OCC0CCO0Q0;
property O00OCCO0Q0:integer read OC00CCO0Q0;
property OO0OCCO0Q0[Index:integer]:OOOCQQQ0Q0 read O0O0CCO0Q0;
end;
OQ0OCCO0Q0=class(OO00CCO0Q0)
protected
function OQO00CO0Q0:OQ000CO0Q0;override;
end;
OC0OCCO0Q0=class(OC000CO0Q0)
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
end;
O0OOCCO0Q0=class(OC000CO0Q0)
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
end;
OOOOCCO0Q0=class(OC000CO0Q0)
private
OQOOCCO0Q0:TStringList;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
destructor Destroy;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property O0QOCCO0Q0:TStringList read OQOOCCO0Q0;
end;
OOQOCCO0Q0=class(OC000CO0Q0)
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
end;
OOCOCCO0Q0=(
OQQOCCO0Q0,OCQOCCO0Q0,O0COCCO0Q0);
TScECPointFormats=set of OOCOCCO0Q0;
OQCOCCO0Q0=class(OC000CO0Q0)
private
OCCOCCO0Q0:TScECPointFormats;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property OO0QQCO0Q0:TScECPointFormats read OCCOCCO0Q0 write OCCOCCO0Q0;
end;
OQ0QQCO0Q0=class(OC000CO0Q0)
private
OC0QQCO0Q0:array of OCCOQQQ0Q0;
O0OQQCO0Q0:integer;
function OOOQQCO0Q0(OQOQQCO0Q0:integer):OCCOQQQ0Q0;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
procedure OOQQQCO0Q0(const OQQQQCO0Q0:OOQOQOQOQ0);overload;
procedure OOQQQCO0Q0(const OCQQQCO0Q0:OCCCQQQ0Q0);overload;
procedure OOQQQCO0Q0(const O0CQQCO0Q0:OCCOQQQ0Q0);overload;
procedure OOCQQCO0Q0;
property OQCQQCO0Q0:integer read O0OQQCO0Q0;
property OCCQQCO0Q0[Index:integer]:OCCOQQQ0Q0 read OOOQQCO0Q0;
end;
O00CQCO0Q0=record
OO0CQCO0Q0:OCCOQQQ0Q0;
OQ0CQCO0Q0:O0CQOOC0Q0;
OC0CQCO0Q0:OOCOCO0OQ0;
O0OCQCO0Q0:TBigInteger;
OOOCQCO0Q0:TBigInteger;
end;
OQOCQCO0Q0=class(OC000CO0Q0)
private
OCOCQCO0Q0:array of O00CQCO0Q0;
O0QCQCO0Q0:integer;
OOQCQCO0Q0:boolean;
function OQQCQCO0Q0(OQOQQCO0Q0:integer):OCCOQQQ0Q0;
function OCQCQCO0Q0(O0CCQCO0Q0:integer):O0CQOOC0Q0;
function OOCCQCO0Q0(OQCCQCO0Q0:integer):OOCOCO0OQ0;
function OCCCQCO0Q0(O000QCO0Q0:integer):TBigInteger;
function OO00QCO0Q0(OQ00QCO0Q0:integer):TBigInteger;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
destructor Destroy;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
procedure OQC0QCO0Q0(const OQQQQCO0Q0:OOQOQOQOQ0);overload;
procedure OQC0QCO0Q0(const OCQQQCO0Q0:OCCCQQQ0Q0);overload;
procedure OQC0QCO0Q0(const O0CQQCO0Q0:OCCOQQQ0Q0);overload;
procedure OO0OQCO0Q0;
property OC0OQCO0Q0:boolean read OOQCQCO0Q0 write OOQCQCO0Q0;
property O0OOQCO0Q0:integer read O0QCQCO0Q0;
property OOOOQCO0Q0[Index:integer]:OCCOQQQ0Q0 read OQQCQCO0Q0;
property OQOOQCO0Q0[Index:integer]:O0CQOOC0Q0 read OCQCQCO0Q0;
property OCOOQCO0Q0[Index:integer]:OOCOCO0OQ0 read OOCCQCO0Q0;
property O0QOQCO0Q0[Index:integer]:TBigInteger read OCCCQCO0Q0;
property OOQOQCO0Q0[Index:integer]:TBigInteger read OO00QCO0Q0;
end;
O0COQCO0Q0=(OQQOQCO0Q0,OCQOQCO0Q0);
TScPskKeyExchangeModes=set of O0COQCO0Q0;
OOCOQCO0Q0=class(OC000CO0Q0)
private
OQCOQCO0Q0:TScPskKeyExchangeModes;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property O00QOQO0Q0:TScPskKeyExchangeModes read OQCOQCO0Q0 write OQCOQCO0Q0;
end;
OO0QOQO0Q0=class(OC000CO0Q0)
private
OQ0QOQO0Q0:O00CQOQ0Q0;
OC0QOQO0Q0:integer;
O0OQOQO0Q0:OOOOCOQOQ0;
function OOOQOQO0Q0:integer;
function OQOQOQO0Q0(OCOQOQO0Q0:integer):O00QQOQ0Q0;
function O0QQOQO0Q0(OOQQOQO0Q0:integer):TBytes;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
constructor Create;override;
destructor Destroy;override;
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
procedure OQ0COQO0Q0(OC0COQO0Q0:O00QQOQ0Q0);
procedure OOOCOQO0Q0;
property OQOCOQO0Q0:integer read OC0QOQO0Q0 write OC0QOQO0Q0;
property OCOCOQO0Q0:integer read OOOQOQO0Q0;
property O0QCOQO0Q0[Index:integer]:O00QQOQ0Q0 read OQOQOQO0Q0;
property OOQCOQO0Q0[Index:integer]:TBytes read O0QQOQO0Q0;
property OQQCOQO0Q0:OOOOCOQOQ0 read O0OQOQO0Q0 write O0OQOQO0Q0;
end;
OCQCOQO0Q0=class(OC000CO0Q0)
private
O0CCOQO0Q0:TBytes;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property OOCCOQO0Q0:TBytes read O0CCOQO0Q0 write O0CCOQO0Q0;
end;
OQCCOQO0Q0=class(OC000CO0Q0)
private
OCCCOQO0Q0:cardinal;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property OO00OQO0Q0:cardinal read OCCCOQO0Q0 write OCCCOQO0Q0;
end;
OQ00OQO0Q0=class(OC000CO0Q0)
private
OC00OQO0Q0:OOCCCQQ0Q0;
O0O0OQO0Q0:TScSSLProtocols;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property O0Q0OQO0Q0:OOCCCQQ0Q0 read OC00OQO0Q0 write OC00OQO0Q0;
property OOQ0OQO0Q0:TScSSLProtocols read O0O0OQO0Q0 write O0O0OQO0Q0;
end;
OQQ0OQO0Q0=class(OC000CO0Q0)
private
OCQ0OQO0Q0:TBytes;
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
property O0C0OQO0Q0:TBytes read OCQ0OQO0Q0 write OCQ0OQO0Q0;
end;
OOC0OQO0Q0=class(OC000CO0Q0)
protected
procedure AssignTo(O0C0Q0Q0Q0:TPersistent);override;
function OQO00CO0Q0:OQ000CO0Q0;override;
procedure OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);override;
public
procedure OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);override;
end;
OCQOC0Q0Q0=class(TCRObjectList)
private
function O0COC0Q0Q0(OOCOC0Q0Q0:integer):OC000CO0Q0;
procedure OQCOC0Q0Q0(OCCOC0Q0Q0:integer;O00QQ0Q0Q0:OC000CO0Q0);
public
function OO0QQ0Q0Q0(OQ0QQ0Q0Q0:OC000CO0Q0):integer;
procedure OOOQQ0Q0Q0(OQOQQ0Q0Q0:OCQOC0Q0Q0);
procedure OQQQQ0Q0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0;O0CQQ0Q0Q0:OCOQOOQ0Q0;OOCQQ0Q0Q0:OOCCCQQ0Q0=OQQCCQQ0Q0);
procedure O0OCQ0Q0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0;OQOCQ0Q0Q0:OCOQOOQ0Q0);
function OOCCQ0Q0Q0(OQCCQ0Q0Q0:OCQ00CO0Q0):OC000CO0Q0;
function O000Q0Q0Q0(OO00Q0Q0Q0:OCQ00CO0Q0):OC000CO0Q0;
procedure OQ00Q0Q0Q0(OC00Q0Q0Q0:OCQ00CO0Q0);
class function OQO0Q0Q0Q0(OCO0Q0Q0Q0:word):OCQ00CO0Q0;
property OOQ0Q0Q0Q0[Index:integer]:OC000CO0Q0 read O0COC0Q0Q0 write OQCOC0Q0Q0;default;
end;
const
OQC0OQO0Q0:array[OOOCQQQ0Q0]of TTLSSignatureAndHashAlgorithm=(
(Hash:OQC0COQOQ0;Signature:OCOQQOQOQ0;Padding:OOCOOOOOQ0;KeyPadding:OO0Q0OOOQ0),
(Hash:OO0OCOQOQ0;Signature:OCOQQOQOQ0;Padding:OOCOOOOOQ0;KeyPadding:OO0Q0OOOQ0),
(Hash:OCC0COQOQ0;Signature:OCOQQOQOQ0;Padding:OOCOOOOOQ0;KeyPadding:OO0Q0OOOQ0),
(Hash:OQC0COQOQ0;Signature:O0QQQOQOQ0;Padding:OO0Q0OOOQ0;KeyPadding:OO0Q0OOOQ0),
(Hash:OO0OCOQOQ0;Signature:O0QQQOQOQ0;Padding:OO0Q0OOOQ0;KeyPadding:OO0Q0OOOQ0),
(Hash:OCC0COQOQ0;Signature:O0QQQOQOQ0;Padding:OO0Q0OOOQ0;KeyPadding:OO0Q0OOOQ0),
(Hash:OQC0COQOQ0;Signature:OCOQQOQOQ0;Padding:O00Q0OOOQ0;KeyPadding:OOCOOOOOQ0),
(Hash:OO0OCOQOQ0;Signature:OCOQQOQOQ0;Padding:O00Q0OOOQ0;KeyPadding:OOCOOOOOQ0),
(Hash:OCC0COQOQ0;Signature:OCOQQOQOQ0;Padding:O00Q0OOOQ0;KeyPadding:OOCOOOOOQ0),
(Hash:OQC0COQOQ0;Signature:OCOQQOQOQ0;Padding:O00Q0OOOQ0;KeyPadding:O00Q0OOOQ0),
(Hash:OO0OCOQOQ0;Signature:OCOQQOQOQ0;Padding:O00Q0OOOQ0;KeyPadding:O00Q0OOOQ0),
(Hash:OCC0COQOQ0;Signature:OCOQQOQOQ0;Padding:O00Q0OOOQ0;KeyPadding:O00Q0OOOQ0),
(Hash:O0C0COQOQ0;Signature:O0QQQOQOQ0;Padding:OO0Q0OOOQ0;KeyPadding:OO0Q0OOOQ0),
(Hash:OOC0COQOQ0;Signature:OCOQQOQOQ0;Padding:OOCOOOOOQ0;KeyPadding:OO0Q0OOOQ0),
(Hash:OOC0COQOQ0;Signature:O0QQQOQOQ0;Padding:OO0Q0OOOQ0;KeyPadding:OO0Q0OOOQ0)
);
OCC0OQO0Q0:array[OQ000CO0Q0]of word=(
$FFFF,
$0000,$0001,$001C,
$0017,
$0023,$000D,$0005,
$0012,$0010,
$7550,
$000A,$000B,
$FF01,$0015,
$002B,
$002D,$0029,$002A,
$002C,$0032,$0033,
$0031
);
O00OOQO0Q0:array[OQ000CO0Q0]of OCQ00CO0Q0=(
O0C00CO0Q0,
OQOQCCO0Q0,OQ0CCCO0Q0,OCOCCCO0Q0,
OOCCCCO0Q0,
OQCCCCO0Q0,OO00CCO0Q0,OC0OCCO0Q0,
O0OOCCO0Q0,OOOOCCO0Q0,
OOQOCCO0Q0,
OQ0QQCO0Q0,OQCOCCO0Q0,
O00O0CO0Q0,OCQCOQO0Q0,
OQ00OQO0Q0,
OOCOQCO0Q0,OO0QOQO0Q0,OQCCOQO0Q0,
OQQ0OQO0Q0,OQ0OCCO0Q0,OQOCQCO0Q0,
OOC0OQO0Q0
);
implementation
uses
{$IFNDEF UNIDACPRO}
TdsCipherSuites,TdsAlgorithmSupport;
{$ELSE}
TdsCipherSuitesUni,TdsAlgorithmSupportUni;
{$ENDIF}
var
OO0OOQO0Q0:integer;
OQ0OOQO0Q0:integer;
constructor O0QOQ0Q0Q0.Create;
begin
inherited Create;
OCQOQ0Q0Q0:=[];
OQQOQ0Q0Q0:=OQCOQOQOQ0;
O0COQ0Q0Q0:=OOOQOOQ0Q0;
OOCOQ0Q0Q0:=nil;
OQCOQ0Q0Q0:=nil;
OCCOQ0Q0Q0:=nil;
O00QOCO0Q0:=nil;
OO0QOCO0Q0:=nil;
OQ0QOCO0Q0:=nil;
OC0QOCO0Q0:=False;
O0OQOCO0Q0:=False;
OOOQOCO0Q0:=False;
OQOQOCO0Q0:=False;
OCOQOCO0Q0:=False;
OOQQOCO0Q0:=False;
OQQQOCO0Q0:=False;
OCQQOCO0Q0:=False;
O0CQOCO0Q0:=False;
OOCQOCO0Q0:=False;
OQCQOCO0Q0:=1024;
O00COCO0Q0:=OOQQOOQ0Q0;
O0OCOCO0Q0:=False;
OCOCOCO0Q0:=False;
OOOCOCO0Q0:=0;
O0QCOCO0Q0:=OQOQO0Q0Q0;
OQQCOCO0Q0:=[
O000QQQ0Q0,
O0Q0QQQ0Q0,OOQ0QQQ0Q0,OQQ0QQQ0Q0,OCQ0QQQ0Q0,
O0OOQQQ0Q0,OOOOQQQ0Q0,OQOOQQQ0Q0,OCOOQQQ0Q0,
O0QOQQQ0Q0,OOQOQQQ0Q0,
OQQOQQQ0Q0,OCQOQQQ0Q0,O0COQQQ0Q0,
OOCOQQQ0Q0,OQCOQQQ0Q0
];
end;
procedure O0QOQ0Q0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if IsClass(O0C0Q0Q0Q0,O0QOQ0Q0Q0)then begin
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OOO0OCO0Q0:=OOO0OCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQQOQ0Q0Q0:=OQQOQ0Q0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OCQOQ0Q0Q0:=OCQOQ0Q0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O0COQ0Q0Q0:=O0COQ0Q0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OOCOQ0Q0Q0:=OOCOQ0Q0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQCOQ0Q0Q0:=OQCOQ0Q0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OCCOQ0Q0Q0:=OCCOQ0Q0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O00QOCO0Q0:=O00QOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OO0QOCO0Q0:=OO0QOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQ0QOCO0Q0:=OQ0QOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OC0QOCO0Q0:=OC0QOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O0OQOCO0Q0:=O0OQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OOOQOCO0Q0:=OOOQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQOQOCO0Q0:=OQOQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OCOQOCO0Q0:=OCOQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O0QQOCO0Q0:=O0QQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OOQQOCO0Q0:=OOQQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQQQOCO0Q0:=OQQQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OCQQOCO0Q0:=OCQQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O0CQOCO0Q0:=O0CQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OOCQOCO0Q0:=OOCQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQCQOCO0Q0:=OQCQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OCCQOCO0Q0:=OCCQOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O00COCO0Q0:=O00COCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OO0COCO0Q0:=OO0COCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQ0COCO0Q0:=OQ0COCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OC0COCO0Q0:=OC0COCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O0OCOCO0Q0:=O0OCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OOOCOCO0Q0:=OOOCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQOCOCO0Q0:=OQOCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OCOCOCO0Q0:=OCOCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O0QCOCO0Q0:=O0QCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OOQCOCO0Q0:=OOQCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQQCOCO0Q0:=OQQCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OCQCOCO0Q0:=OCQCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).O0CCOCO0Q0:=O0CCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OOCCOCO0Q0:=OOCCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OQCCOCO0Q0:=OQCCOCO0Q0;
O0QOQ0Q0Q0(O0C0Q0Q0Q0).OCCCOCO0Q0:=OCCCOCO0Q0;
end
else
inherited;
end;
procedure O0QOQ0Q0Q0.O000OCO0Q0(const OO00OCO0Q0:O0OQQQQ0Q0);
begin
SetLength(OOQOQ0Q0Q0,Length(OO00OCO0Q0));
if Length(OO00OCO0Q0)>0 then
Move(OO00OCO0Q0[0],OOQOQ0Q0Q0[0],Length(OO00OCO0Q0)*sizeof(OC0QQQQ0Q0));
end;
constructor OQQ0Q0Q0Q0.Create;
begin
inherited;
OCQ0Q0Q0Q0:=OCQOC0Q0Q0.Create;
end;
destructor OQQ0Q0Q0Q0.Destroy;
begin
OCQ0Q0Q0Q0.Free;
inherited;
end;
procedure OQQ0Q0Q0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if IsClass(O0C0Q0Q0Q0,OQQ0Q0Q0Q0)then
OQQ0Q0Q0Q0(O0C0Q0Q0Q0).OCQ0Q0Q0Q0.OOOQQ0Q0Q0(OCQ0Q0Q0Q0);
inherited;
end;
function OCQOC0Q0Q0.O0COC0Q0Q0(OOCOC0Q0Q0:integer):OC000CO0Q0;
begin
Result:=TObject(inherited Items[OOCOC0Q0Q0])as OC000CO0Q0;
end;
procedure OCQOC0Q0Q0.OQCOC0Q0Q0(OCCOC0Q0Q0:integer;O00QQ0Q0Q0:OC000CO0Q0);
begin
inherited Items[OCCOC0Q0Q0]:=O00QQ0Q0Q0;
end;
function OCQOC0Q0Q0.OO0QQ0Q0Q0(OQ0QQ0Q0Q0:OC000CO0Q0):integer;
var
OC0QQ0Q0Q0:OC000CO0Q0;
O0OQQ0Q0Q0:integer;
begin
for O0OQQ0Q0Q0:=0 to Count-1 do begin
OC0QQ0Q0Q0:=TObject(Items[O0OQQ0Q0Q0])as OC000CO0Q0;
if OQ0QQ0Q0Q0.OQO00CO0Q0=OCQQ0CO0Q0 then begin
if OQ0QQ0Q0Q0.OOO00CO0Q0=OC0QQ0Q0Q0.OOO00CO0Q0 then
raise EScError.CreateFmt(SExtensionClassDuplicated,[OQ0QQ0Q0Q0.ClassName],seExtensionClassDuplicated);
end
else
if OQ0QQ0Q0Q0.OQO00CO0Q0=OC0QQ0Q0Q0.OQO00CO0Q0 then
raise EScError.CreateFmt(SExtensionClassDuplicated,[OQ0QQ0Q0Q0.ClassName],seExtensionClassDuplicated);
end;
Result:=inherited Add(OQ0QQ0Q0Q0);
end;
procedure OCQOC0Q0Q0.OOOQQ0Q0Q0(OQOQQ0Q0Q0:OCQOC0Q0Q0);
var
OCOQQ0Q0Q0,O0QQQ0Q0Q0:OC000CO0Q0;
OOQQQ0Q0Q0:integer;
begin
Clear;
for OOQQQ0Q0Q0:=0 to OQOQQ0Q0Q0.Count-1 do begin
OCOQQ0Q0Q0:=TObject(OQOQQ0Q0Q0.Items[OOQQQ0Q0Q0])as OC000CO0Q0;
O0QQQ0Q0Q0:=OCQ00CO0Q0(OCOQQ0Q0Q0.ClassType).Create;
O0QQQ0Q0Q0.Assign(OCOQQ0Q0Q0);
OO0QQ0Q0Q0(O0QQQ0Q0Q0);
end;
end;
procedure OCQOC0Q0Q0.OQQQQ0Q0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0;
O0CQQ0Q0Q0:OCOQOOQ0Q0;OOCQQ0Q0Q0:OOCCCQQ0Q0=OQQCCQQ0Q0);
const
OQCQQ0Q0Q0=[OQQC0CO0Q0,O0000CO0Q0,O0CC0CO0Q0,OQCC0CO0Q0];
var
OCCQQ0Q0Q0:OC000CO0Q0;
O00CQ0Q0Q0:word;
OO0CQ0Q0Q0,OQ0CQ0Q0Q0:integer;
OC0CQ0Q0Q0:integer;
begin
if Count=0 then
Exit;
OO0CQ0Q0Q0:=OCQQQ0Q0Q0.OQ00C0Q0Q0;
OCQQQ0Q0Q0.OQCQC0Q0Q0(2);
for OC0CQ0Q0Q0:=0 to Count-1 do begin
OCCQQ0Q0Q0:=TObject(Items[OC0CQ0Q0Q0])as OC000CO0Q0;
OCCQQ0Q0Q0.O0O00CO0Q0:=O0CQQ0Q0Q0;
if OOCQQ0Q0Q0=OCQCCQQ0Q0 then begin
if OCQQQ0Q0Q0.OQCCC0Q0Q0=O0QQ0OQ0Q0 then begin
if not(OCCQQ0Q0Q0.OQO00CO0Q0 in OQCQQ0Q0Q0)then
continue;
end
else
if OCQQQ0Q0Q0.OQCCC0Q0Q0=OCQQ0OQ0Q0 then begin
if OCCQQ0Q0Q0.OQO00CO0Q0 in OQCQQ0Q0Q0 then
continue;
end;
end;
O00CQ0Q0Q0:=OCCQQ0Q0Q0.OOO00CO0Q0;
OCQQQ0Q0Q0.O00QC0Q0Q0(O00CQ0Q0Q0);
OQ0CQ0Q0Q0:=OCQQQ0Q0Q0.OQ00C0Q0Q0;
OCQQQ0Q0Q0.OQCQC0Q0Q0(2);
OCCQQ0Q0Q0.OCO00CO0Q0(OCQQQ0Q0Q0);
OCQQQ0Q0Q0.OQ0QC0Q0Q0(OCQQQ0Q0Q0.OQ00C0Q0Q0-OQ0CQ0Q0Q0-2,OQ0CQ0Q0Q0);
end;
OCQQQ0Q0Q0.OQ0QC0Q0Q0(OCQQQ0Q0Q0.OQ00C0Q0Q0-OO0CQ0Q0Q0-2,OO0CQ0Q0Q0);
end;
procedure OCQOC0Q0Q0.O0OCQ0Q0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0;OQOCQ0Q0Q0:OCOQOOQ0Q0);
var
OCOCQ0Q0Q0,O0QCQ0Q0Q0,OOQCQ0Q0Q0:integer;
OQQCQ0Q0Q0:word;
OCQCQ0Q0Q0:OCQ00CO0Q0;
O0CCQ0Q0Q0:OC000CO0Q0;
begin
if OOOCQ0Q0Q0.OOCCC0Q0Q0=0 then
Exit;
OCOCQ0Q0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
while OCOCQ0Q0Q0>0 do begin
OQQCQ0Q0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
O0QCQ0Q0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
Dec(OCOCQ0Q0Q0,O0QCQ0Q0Q0+4);
OCQCQ0Q0Q0:=OQO0Q0Q0Q0(OQQCQ0Q0Q0);
if OCQCQ0Q0Q0=nil then
OCQCQ0Q0Q0:=O0C00CO0Q0;
O0CCQ0Q0Q0:=OCQCQ0Q0Q0.Create;
try
O0CCQ0Q0Q0.O0O00CO0Q0:=OQOCQ0Q0Q0;
OOQCQ0Q0Q0:=OOOCQ0Q0Q0.OQ00C0Q0Q0;
OOOCQ0Q0Q0.OQ00C0Q0Q0:=OOOCQ0Q0Q0.OO00C0Q0Q0+O0QCQ0Q0Q0;
try
O0CCQ0Q0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0);
finally
OOOCQ0Q0Q0.OQ00C0Q0Q0:=OOQCQ0Q0Q0;
end;
if OCQCQ0Q0Q0=O0C00CO0Q0 then
O0C00CO0Q0(O0CCQ0Q0Q0).OOC00CO0Q0:=OQQCQ0Q0Q0;
OO0QQ0Q0Q0(O0CCQ0Q0Q0);
except
O0CCQ0Q0Q0.Free;
raise;
end;
end;
end;
function OCQOC0Q0Q0.OOCCQ0Q0Q0(OQCCQ0Q0Q0:OCQ00CO0Q0):OC000CO0Q0;
var
OCCCQ0Q0Q0:integer;
begin
for OCCCQ0Q0Q0:=0 to Count-1 do begin
Result:=TObject(Items[OCCCQ0Q0Q0])as OC000CO0Q0;
if Result is OQCCQ0Q0Q0 then
Exit;
end;
Result:=nil;
end;
function OCQOC0Q0Q0.O000Q0Q0Q0(OO00Q0Q0Q0:OCQ00CO0Q0):OC000CO0Q0;
begin
Result:=OOCCQ0Q0Q0(OO00Q0Q0Q0);
if Result=nil then begin
Result:=OO00Q0Q0Q0.Create;
OO0QQ0Q0Q0(Result);
end;
end;
procedure OCQOC0Q0Q0.OQ00Q0Q0Q0(OC00Q0Q0Q0:OCQ00CO0Q0);
var
O0O0Q0Q0Q0:OC000CO0Q0;
OOO0Q0Q0Q0:integer;
begin
for OOO0Q0Q0Q0:=0 to Count-1 do begin
O0O0Q0Q0Q0:=TObject(Items[OOO0Q0Q0Q0])as OC000CO0Q0;
if O0O0Q0Q0Q0 is OC00Q0Q0Q0 then begin
Delete(OOO0Q0Q0Q0);
Exit;
end;
end;
end;
class function OCQOC0Q0Q0.OQO0Q0Q0Q0(OCO0Q0Q0Q0:word):OCQ00CO0Q0;
var
O0Q0Q0Q0Q0:OQ000CO0Q0;
begin
for O0Q0Q0Q0Q0:=Low(OQ000CO0Q0)to High(OQ000CO0Q0)do
if OCC0OQO0Q0[O0Q0Q0Q0Q0]=OCO0Q0Q0Q0 then begin
Result:=O00OOQO0Q0[O0Q0Q0Q0Q0];
Exit;
end;
Result:=nil;
end;
constructor OC000CO0Q0.Create;
begin
inherited;
end;
procedure OC000CO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
inherited;
end;
function OC000CO0Q0.OOO00CO0Q0:word;
begin
Result:=OCC0OQO0Q0[OQO00CO0Q0];
end;
procedure O0C00CO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is O0C00CO0Q0 then begin
SetLength(O0C00CO0Q0(O0C0Q0Q0Q0).OQC00CO0Q0,Length(OQC00CO0Q0));
if Length(OQC00CO0Q0)>0 then
Move(OQC00CO0Q0[0],O0C00CO0Q0(O0C0Q0Q0Q0).OQC00CO0Q0[0],Length(OQC00CO0Q0));
end
else
inherited;
end;
function O0C00CO0Q0.OOO00CO0Q0:word;
begin
Result:=OOC00CO0Q0;
end;
function O0C00CO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OCQQ0CO0Q0;
end;
procedure O0C00CO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
OCQQQ0Q0Q0.OQC000Q0Q0(OQC00CO0Q0);
end;
procedure O0C00CO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
OQC00CO0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(OOOCQ0Q0Q0.OOCCC0Q0Q0);
end;
constructor O00O0CO0Q0.Create;
begin
inherited;
OO0O0CO0Q0:=False;
OQOO0CO0Q0:=False;
end;
procedure O00O0CO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is O00O0CO0Q0 then begin
O00O0CO0Q0(O0C0Q0Q0Q0).OO0O0CO0Q0:=OO0O0CO0Q0;
O00O0CO0Q0(O0C0Q0Q0Q0).OQ0O0CO0Q0:=OQ0O0CO0Q0;
O00O0CO0Q0(O0C0Q0Q0Q0).OC0O0CO0Q0:=OC0O0CO0Q0;
O00O0CO0Q0(O0C0Q0Q0Q0).O0OO0CO0Q0:=O0OO0CO0Q0;
O00O0CO0Q0(O0C0Q0Q0Q0).OOOO0CO0Q0:=OOOO0CO0Q0;
O00O0CO0Q0(O0C0Q0Q0Q0).OQOO0CO0Q0:=OQOO0CO0Q0;
end
else
inherited;
end;
function O00O0CO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=O0QC0CO0Q0;
end;
procedure O00O0CO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
if not OO0O0CO0Q0 then
OCQQQ0Q0Q0.OCQO00Q0Q0(0)
else begin
if O0O00CO0Q0=OOOQOOQ0Q0 then
OCQQQ0Q0Q0.OQ0O00Q0Q0(OQ0O0CO0Q0)
else begin
OCQQQ0Q0Q0.OCQO00Q0Q0(Length(OQ0O0CO0Q0)*2);
OCQQQ0Q0Q0.OQC000Q0Q0(OQ0O0CO0Q0);
OCQQQ0Q0Q0.OQC000Q0Q0(OC0O0CO0Q0);
end;
end;
end;
procedure O00O0CO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OCOO0CO0Q0,O0QO0CO0Q0:integer;
begin
if O0O00CO0Q0=OOOQOOQ0Q0 then begin
OCOO0CO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0 div 2;
O0OO0CO0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(OCOO0CO0Q0);
OOOO0CO0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(OCOO0CO0Q0);
end
else begin
O0QO0CO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
O0OO0CO0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(O0QO0CO0Q0);
end;
end;
procedure O00O0CO0Q0.OOQO0CO0Q0;
begin
SetLength(OQ0O0CO0Q0,0);
SetLength(OC0O0CO0Q0,0);
SetLength(O0OO0CO0Q0,0);
SetLength(OOOO0CO0Q0,0);
end;
procedure O00O0CO0Q0.OQQO0CO0Q0;
begin
OO0O0CO0Q0:=True;
end;
procedure O00O0CO0Q0.OCQO0CO0Q0(O0CO0CO0Q0:O00O0CO0Q0);
begin
O0OO0CO0Q0:=O0CO0CO0Q0.O0OO0CO0Q0;
OOOO0CO0Q0:=O0CO0CO0Q0.OOOO0CO0Q0;
if not OO0O0CO0Q0 then begin
if Length(O0OO0CO0Q0)>0 then
raise EScError.Create(seInvalidMessage);
OQOO0CO0Q0:=True;
end
else begin
if not OQOO0CO0Q0 then
raise EScError.Create(seRenegotiationDenied);
if Length(O0OO0CO0Q0)=0 then
raise EScError.Create(seInvalidMessage);
if Length(OQ0O0CO0Q0)<>Length(O0OO0CO0Q0)then
raise EScError.Create(seInvalidRenegotiationInfo);
if Length(OQ0O0CO0Q0)<>0 then
if MemCompare(@OQ0O0CO0Q0[0],@O0OO0CO0Q0[0],Length(OQ0O0CO0Q0))<>0 then
raise EScError.Create(seInvalidRenegotiationInfo);
if O0O00CO0Q0=OOOQOOQ0Q0 then begin
if Length(OC0O0CO0Q0)<>Length(OOOO0CO0Q0)then
raise EScError.Create(seInvalidRenegotiationInfo);
if Length(OC0O0CO0Q0)<>0 then
if MemCompare(@OC0O0CO0Q0[0],@OOOO0CO0Q0[0],Length(OC0O0CO0Q0))<>0 then
raise EScError.Create(seInvalidRenegotiationInfo);
end;
end;
end;
procedure O00O0CO0Q0.OOCO0CO0Q0(const OQCO0CO0Q0:TBytes;OCCO0CO0Q0,O00QCCO0Q0:integer);
begin
SetLength(OQ0O0CO0Q0,O00QCCO0Q0);
if O00QCCO0Q0>0 then
Move(OQCO0CO0Q0[OCCO0CO0Q0],OQ0O0CO0Q0[0],O00QCCO0Q0);
O0OO0CO0Q0:=nil;
end;
procedure O00O0CO0Q0.OO0QCCO0Q0(const OQ0QCCO0Q0:TBytes;OC0QCCO0Q0,O0OQCCO0Q0:integer);
begin
SetLength(OC0O0CO0Q0,O0OQCCO0Q0);
if O0OQCCO0Q0>0 then
Move(OQ0QCCO0Q0[OC0QCCO0Q0],OC0O0CO0Q0[0],O0OQCCO0Q0);
OOOO0CO0Q0:=nil;
end;
constructor OQOQCCO0Q0.Create;
begin
inherited;
OCOQCCO0Q0:=TStringList.Create;
end;
destructor OQOQCCO0Q0.Destroy;
begin
OCOQCCO0Q0.Free;
inherited;
end;
procedure OQOQCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OQOQCCO0Q0 then begin
OQOQCCO0Q0(O0C0Q0Q0Q0).OCOQCCO0Q0.Assign(OCOQCCO0Q0);
end
else
inherited;
end;
function OQOQCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=O0CQ0CO0Q0;
end;
procedure OQOQCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
var
O0QQCCO0Q0:TBytes;
OO0CQ0Q0Q0:integer;
OC0CQ0Q0Q0:integer;
begin
if O0O00CO0Q0=OOOQOOQ0Q0 then begin
SetLength(O0QQCCO0Q0,0);
if OCOQCCO0Q0.Count=0 then
OCOQCCO0Q0.Add('');
OO0CQ0Q0Q0:=OCQQQ0Q0Q0.OQ00C0Q0Q0;
OCQQQ0Q0Q0.OQCQC0Q0Q0(2);
for OC0CQ0Q0Q0:=0 to OCOQCCO0Q0.Count-1 do begin
O0QQCCO0Q0:=Encoding.UTF8.GetBytes(OCOQCCO0Q0[OC0CQ0Q0Q0]);
OCQQQ0Q0Q0.OCQO00Q0Q0(0);
OCQQQ0Q0Q0.OOOO00Q0Q0(O0QQCCO0Q0);
end;
OCQQQ0Q0Q0.OQ0QC0Q0Q0(OCQQQ0Q0Q0.OQ00C0Q0Q0-OO0CQ0Q0Q0-2,OO0CQ0Q0Q0);
end;
end;
procedure OQOQCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OQQQCCO0Q0,OCQQCCO0Q0:integer;
begin
OCOQCCO0Q0.Clear;
if OOOCQ0Q0Q0.OOCCC0Q0Q0=0 then
Exit;
OQQQCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
while OQQQCCO0Q0>0 do begin
if OOOCQ0Q0Q0.O00CC0Q0Q0<>0 then
raise EScError.Create(seWrongExtensionData);
OCQQCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
OCOQCCO0Q0.Add(Encoding.UTF8.GetString(OOOCQ0Q0Q0.OOOCC0Q0Q0(OCQQCCO0Q0)));
Dec(OQQQCCO0Q0,OCQQCCO0Q0+3);
end;
end;
procedure OQ0CCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OQ0CCCO0Q0 then begin
OQ0CCCO0Q0(O0C0Q0Q0Q0).OC0CCCO0Q0:=OC0CCCO0Q0;
end
else
inherited;
end;
function OQ0CCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OOCQ0CO0Q0;
end;
function OQ0CCCO0Q0.O0OCCCO0Q0:integer;
begin
case OC0CCCO0Q0 of
OOCQCCO0Q0:
Result:=1 shl 9;
OQCQCCO0Q0:
Result:=1 shl 10;
OCCQCCO0Q0:
Result:=1 shl 11;
O00CCCO0Q0:
Result:=1 shl 12;
else
Result:=1 shl 14;
end;
end;
procedure OQ0CCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
case OC0CCCO0Q0 of
OOCQCCO0Q0:
OCQQQ0Q0Q0.OCQO00Q0Q0(1);
OQCQCCO0Q0:
OCQQQ0Q0Q0.OCQO00Q0Q0(2);
OCCQCCO0Q0:
OCQQQ0Q0Q0.OCQO00Q0Q0(3);
O00CCCO0Q0:
OCQQQ0Q0Q0.OCQO00Q0Q0(4);
else
raise EScError.Create(seInvalidInputArgs);
end;
end;
procedure OQ0CCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
case OOOCQ0Q0Q0.O00CC0Q0Q0 of
1:
OC0CCCO0Q0:=OOCQCCO0Q0;
2:
OC0CCCO0Q0:=OQCQCCO0Q0;
3:
OC0CCCO0Q0:=OCCQCCO0Q0;
4:
OC0CCCO0Q0:=O00CCCO0Q0;
else
raise EScError.Create(seWrongExtensionData);
end;
end;
constructor OCOCCCO0Q0.Create;
begin
inherited;
O0QCCCO0Q0:=OOQC00Q0Q0;
end;
procedure OCOCCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OCOCCCO0Q0 then begin
OCOCCCO0Q0(O0C0Q0Q0Q0).O0QCCCO0Q0:=O0QCCCO0Q0;
end
else
inherited;
end;
function OCOCCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OQCQ0CO0Q0;
end;
procedure OCOCCCO0Q0.OOQCCCO0Q0(OQQCCCO0Q0:word);
begin
if(OQQCCCO0Q0<64)or(OQQCCCO0Q0>OOQC00Q0Q0)then
raise EScError.Create(seWrongExtensionData);
O0QCCCO0Q0:=OQQCCCO0Q0;
end;
procedure OCOCCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
OCQQQ0Q0Q0.O00QC0Q0Q0(O0QCCCO0Q0);
end;
procedure OCOCCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OCQCCCO0Q0:word;
begin
O0QCCCO0Q0:=0;
OCQCCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
OOQCCCO0Q0(OCQCCCO0Q0);
end;
procedure OOCCCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OOCCCCO0Q0 then begin
end
else
inherited;
end;
function OOCCCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OCCQ0CO0Q0;
end;
procedure OOCCCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
end;
procedure OOCCCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
if OOOCQ0Q0Q0.OOCCC0Q0Q0<>0 then
raise EScError.Create(seWrongExtensionData);
end;
procedure OQCCCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OQCCCCO0Q0 then begin
SetLength(OQCCCCO0Q0(O0C0Q0Q0Q0).OCCCCCO0Q0,Length(OCCCCCO0Q0));
if Length(OCCCCCO0Q0)>0 then
Move(OCCCCCO0Q0[0],OQCCCCO0Q0(O0C0Q0Q0Q0).OCCCCCO0Q0[0],Length(OCCCCCO0Q0));
end
else
inherited;
end;
function OQCCCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=O00C0CO0Q0;
end;
procedure OQCCCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
OCQQQ0Q0Q0.OQC000Q0Q0(OCCCCCO0Q0);
end;
procedure OQCCCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
OCCCCCO0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(OOOCQ0Q0Q0.OOCCC0Q0Q0);
end;
constructor OO00CCO0Q0.Create;
begin
inherited;
SetLength(OQ00CCO0Q0,OQ0OOQO0Q0);
OC00CCO0Q0:=0;
end;
procedure OO00CCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OO00CCO0Q0 then begin
OO00CCO0Q0(O0C0Q0Q0Q0).OC00CCO0Q0:=OC00CCO0Q0;
Move(OQ00CCO0Q0[0],OO00CCO0Q0(O0C0Q0Q0Q0).OQ00CCO0Q0[0],OQ0OOQO0Q0*sizeof(OOOCQQQ0Q0));
end
else
inherited;
end;
function OO00CCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OO0C0CO0Q0;
end;
procedure OO00CCO0Q0.OQQ0CCO0Q0(OCQ0CCO0Q0:OOOOCOQOQ0;O0C0CCO0Q0:OOOQQQQ0Q0);
var
OOC0CCO0Q0:OOOCQQQ0Q0;
begin
for OOC0CCO0Q0:=Low(OOOCQQQ0Q0)to High(OOOCQQQ0Q0)do
if(OCQ0CCO0Q0=OQC0OQO0Q0[OOC0CCO0Q0].Hash)and(OQC0OQO0Q0[OOC0CCO0Q0].Signature=O0C0CCO0Q0)then begin
OQQ0CCO0Q0(OOC0CCO0Q0);
Exit;
end;
raise EScError.Create(seInvalidSignatureSchemeAlgorithm);
end;
procedure OO00CCO0Q0.OQQ0CCO0Q0(OQC0CCO0Q0:OOOCQQQ0Q0);
var
O0OQQ0Q0Q0:integer;
begin
for O0OQQ0Q0Q0:=0 to OC00CCO0Q0-1 do begin
if OQ00CCO0Q0[O0OQQ0Q0Q0]=OQC0CCO0Q0 then
raise EScError.Create(seDuplicateKExNamedGroup);
end;
Assert(OC00CCO0Q0<Length(OQ00CCO0Q0));
OQ00CCO0Q0[OC00CCO0Q0]:=OQC0CCO0Q0;
Inc(OC00CCO0Q0);
end;
procedure OO00CCO0Q0.OCC0CCO0Q0;
begin
OC00CCO0Q0:=0;
end;
function OO00CCO0Q0.O0O0CCO0Q0(OOO0CCO0Q0:integer):OOOCQQQ0Q0;
begin
if(OOO0CCO0Q0<0)or(OOO0CCO0Q0>=OC00CCO0Q0)then
raise Exception.CreateFmt(SListIndexError,[OOO0CCO0Q0]);
Result:=OQ00CCO0Q0[OOO0CCO0Q0];
end;
procedure OO00CCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
var
OC0CQ0Q0Q0:integer;
begin
OCQQQ0Q0Q0.O00QC0Q0Q0(OC00CCO0Q0*2);
for OC0CQ0Q0Q0:=0 to OC00CCO0Q0-1 do
OCQQQ0Q0Q0.O00QC0Q0Q0(OQQQO0Q0Q0[OQ00CCO0Q0[OC0CQ0Q0Q0]]);
end;
procedure OO00CCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OQQQCCO0Q0:integer;
OQO0CCO0Q0:OOOCQQQ0Q0;
OCO0CCO0Q0:word;
O0Q0CCO0Q0:integer;
begin
OC00CCO0Q0:=0;
if OOOCQ0Q0Q0.OOCCC0Q0Q0=0 then
Exit;
OQQQCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0 div 2;
for O0Q0CCO0Q0:=0 to OQQQCCO0Q0-1 do begin
OCO0CCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
for OQO0CCO0Q0:=Low(OOOCQQQ0Q0)to High(OOOCQQQ0Q0)do begin
if OCO0CCO0Q0=OQQQO0Q0Q0[OQO0CCO0Q0]then begin
OQ00CCO0Q0[OC00CCO0Q0]:=OQO0CCO0Q0;
Inc(OC00CCO0Q0);
if OC00CCO0Q0=Length(OQ00CCO0Q0)then
Exit;
break;
end;
end;
end;
end;
class function OO00CCO0Q0.OOQ0CCO0Q0:OO00CCO0Q0;
begin
Result:=OO00CCO0Q0.Create;
Result.OQ00CCO0Q0[0]:=OQOQQQQ0Q0;
Result.OQ00CCO0Q0[1]:=OCOQQQQ0Q0;
Result.OQ00CCO0Q0[2]:=O0QQQQQ0Q0;
Result.OQ00CCO0Q0[3]:=OOQQQQQ0Q0;
Result.OQ00CCO0Q0[4]:=OQQQQQQ0Q0;
Result.OQ00CCO0Q0[5]:=OCQQQQQ0Q0;
Result.OQ00CCO0Q0[6]:=O0CQQQQ0Q0;
Result.OQ00CCO0Q0[7]:=OOCQQQQ0Q0;
Result.OQ00CCO0Q0[8]:=OQCQQQQ0Q0;
Result.OQ00CCO0Q0[9]:=OCCQQQQ0Q0;
Result.OQ00CCO0Q0[10]:=O00CQQQ0Q0;
Result.OQ00CCO0Q0[11]:=OO0CQQQ0Q0;
Result.OQ00CCO0Q0[12]:=OC0CQQQ0Q0;
Result.OQ00CCO0Q0[13]:=O0OCQQQ0Q0;
Result.OQ00CCO0Q0[14]:=OQ0CQQQ0Q0;
Result.OC00CCO0Q0:=15;
end;
function OQ0OCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OCCC0CO0Q0;
end;
procedure OC0OCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OC0OCCO0Q0 then begin
end
else
inherited;
end;
function OC0OCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OQ0C0CO0Q0;
end;
procedure OC0OCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
OCQQQ0Q0Q0.OCQO00Q0Q0(1);
OCQQQ0Q0Q0.OQQQC0Q0Q0(0);
end;
procedure OC0OCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
end;
procedure O0OOCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is O0OOCCO0Q0 then begin
end
else
inherited;
end;
function O0OOCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OC0C0CO0Q0;
end;
procedure O0OOCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
end;
procedure O0OOCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
end;
constructor OOOOCCO0Q0.Create;
begin
inherited;
OQOOCCO0Q0:=TStringList.Create;
end;
destructor OOOOCCO0Q0.Destroy;
begin
OQOOCCO0Q0.Free;
inherited;
end;
procedure OOOOCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OOOOCCO0Q0 then begin
OOOOCCO0Q0(O0C0Q0Q0Q0).OQOOCCO0Q0.Assign(OQOOCCO0Q0);
end
else
inherited;
end;
function OOOOCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=O0OC0CO0Q0;
end;
procedure OOOOCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
var
O0QQCCO0Q0:TBytes;
OO0CQ0Q0Q0:integer;
OC0CQ0Q0Q0:integer;
begin
SetLength(O0QQCCO0Q0,0);
OO0CQ0Q0Q0:=OCQQQ0Q0Q0.OQ00C0Q0Q0;
OCQQQ0Q0Q0.OQCQC0Q0Q0(2);
for OC0CQ0Q0Q0:=0 to OQOOCCO0Q0.Count-1 do begin
O0QQCCO0Q0:=Encoding.ASCII.GetBytes(OQOOCCO0Q0[OC0CQ0Q0Q0]);
OCQQQ0Q0Q0.OQ0O00Q0Q0(O0QQCCO0Q0);
end;
OCQQQ0Q0Q0.OQ0QC0Q0Q0(OCQQQ0Q0Q0.OQ00C0Q0Q0-OO0CQ0Q0Q0-2,OO0CQ0Q0Q0);
end;
procedure OOOOCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OQQQCCO0Q0,OCQQCCO0Q0:integer;
begin
OQOOCCO0Q0.Clear;
if OOOCQ0Q0Q0.OOCCC0Q0Q0=0 then
Exit;
OQQQCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
while OQQQCCO0Q0>0 do begin
OCQQCCO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
OQOOCCO0Q0.Add(Encoding.Default.GetString(OOOCQ0Q0Q0.OOOCC0Q0Q0(OCQQCCO0Q0)));
Dec(OQQQCCO0Q0,OCQQCCO0Q0+1);
end;
end;
procedure OOQOCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OOQOCCO0Q0 then begin
end
else
inherited;
end;
function OOQOCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OOOC0CO0Q0;
end;
procedure OOQOCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
end;
procedure OOQOCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
end;
constructor OQCOCCO0Q0.Create;
begin
inherited;
OCCOCCO0Q0:=[OQQOCCO0Q0];
end;
procedure OQCOCCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OQCOCCO0Q0 then begin
OQCOCCO0Q0(O0C0Q0Q0Q0).OCCOCCO0Q0:=OCCOCCO0Q0;
end
else
inherited;
end;
function OQCOCCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OCOC0CO0Q0;
end;
procedure OQCOCCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
const
O00QQCO0Q0:array[OOCOCCO0Q0]of byte=
(0,1,2);
begin
if OCCOCCO0Q0=[]then
OCCOCCO0Q0:=[OQQOCCO0Q0];
OCQQQ0Q0Q0.OCQO00Q0Q0(1);
OCQQQ0Q0Q0.OCQO00Q0Q0(O00QQCO0Q0[OQQOCCO0Q0]);
end;
procedure OQCOCCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OQQQCCO0Q0:integer;
O0Q0CCO0Q0:integer;
begin
OCCOCCO0Q0:=[];
if OOOCQ0Q0Q0.OOCCC0Q0Q0=0 then
Exit;
OQQQCCO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
for O0Q0CCO0Q0:=1 to OQQQCCO0Q0 do begin
case OOOCQ0Q0Q0.O00CC0Q0Q0 of
0:
Include(OCCOCCO0Q0,OQQOCCO0Q0);
1:
Include(OCCOCCO0Q0,OCQOCCO0Q0);
2:
Include(OCCOCCO0Q0,O0COCCO0Q0);
end;
end;
end;
constructor OQ0QQCO0Q0.Create;
begin
inherited;
SetLength(OC0QQCO0Q0,OO0OOQO0Q0);
O0OQQCO0Q0:=0;
end;
procedure OQ0QQCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OQ0QQCO0Q0 then begin
OQ0QQCO0Q0(O0C0Q0Q0Q0).O0OQQCO0Q0:=O0OQQCO0Q0;
Move(OC0QQCO0Q0[0],OQ0QQCO0Q0(O0C0Q0Q0Q0).OC0QQCO0Q0[0],OO0OOQO0Q0*sizeof(OCCOQQQ0Q0));
end
else
inherited;
end;
function OQ0QQCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OQOC0CO0Q0;
end;
procedure OQ0QQCO0Q0.OOQQQCO0Q0(const OQQQQCO0Q0:OOQOQOQOQ0);
var
O0OQQ0Q0Q0:integer;
begin
for O0OQQ0Q0Q0:=0 to O0OQQCO0Q0-1 do begin
if OC0QQCO0Q0[O0OQQ0Q0Q0]=OCCOQQQ0Q0(byte(OQQQQCO0Q0))then
raise EScError.Create(seDuplicateKExNamedGroup);
end;
Assert(O0OQQCO0Q0<Length(OC0QQCO0Q0));
OC0QQCO0Q0[O0OQQCO0Q0]:=OCCOQQQ0Q0(byte(OQQQQCO0Q0));
Inc(O0OQQCO0Q0);
end;
procedure OQ0QQCO0Q0.OOQQQCO0Q0(const OCQQQCO0Q0:OCCCQQQ0Q0);
var
O0CQQCO0Q0:OCCOQQQ0Q0;
O0OQQ0Q0Q0:integer;
begin
O0CQQCO0Q0:=OCCOQQQ0Q0(integer(OCQQQCO0Q0)+integer(High(OOQOQOQOQ0))+1);
for O0OQQ0Q0Q0:=0 to O0OQQCO0Q0-1 do begin
if OC0QQCO0Q0[O0OQQ0Q0Q0]=O0CQQCO0Q0 then
raise EScError.Create(seDuplicateKExNamedGroup);
end;
Assert(O0OQQCO0Q0<Length(OC0QQCO0Q0));
OC0QQCO0Q0[O0OQQCO0Q0]:=O0CQQCO0Q0;
Inc(O0OQQCO0Q0);
end;
procedure OQ0QQCO0Q0.OOQQQCO0Q0(const O0CQQCO0Q0:OCCOQQQ0Q0);
var
O0OQQ0Q0Q0:integer;
begin
for O0OQQ0Q0Q0:=0 to O0OQQCO0Q0-1 do begin
if OC0QQCO0Q0[O0OQQ0Q0Q0]=O0CQQCO0Q0 then
raise EScError.Create(seDuplicateKExNamedGroup);
end;
Assert(O0OQQCO0Q0<Length(OC0QQCO0Q0));
OC0QQCO0Q0[O0OQQCO0Q0]:=O0CQQCO0Q0;
Inc(O0OQQCO0Q0);
end;
procedure OQ0QQCO0Q0.OOCQQCO0Q0;
begin
O0OQQCO0Q0:=0;
end;
function OQ0QQCO0Q0.OOOQQCO0Q0(OQOQQCO0Q0:integer):OCCOQQQ0Q0;
begin
if(OQOQQCO0Q0<0)or(OQOQQCO0Q0>=O0OQQCO0Q0)then
raise Exception.CreateFmt(SListIndexError,[OQOQQCO0Q0]);
Result:=OC0QQCO0Q0[OQOQQCO0Q0];
end;
procedure OQ0QQCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
var
OC0CQ0Q0Q0:integer;
begin
OCQQQ0Q0Q0.O00QC0Q0Q0(O0OQQCO0Q0*2);
for OC0CQ0Q0Q0:=0 to O0OQQCO0Q0-1 do
OCQQQ0Q0Q0.O00QC0Q0Q0(O0OC00Q0Q0[OC0QQCO0Q0[OC0CQ0Q0Q0]]);
end;
procedure OQ0QQCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OCOQQCO0Q0:OCCOQQQ0Q0;
O0QQQCO0Q0:word;
OQQQCCO0Q0:integer;
O0Q0CCO0Q0:integer;
begin
O0OQQCO0Q0:=0;
if OOOCQ0Q0Q0.OOCCC0Q0Q0=0 then
Exit;
OQQQCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0 div 2;
for O0Q0CCO0Q0:=0 to OQQQCCO0Q0-1 do begin
O0QQQCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
for OCOQQCO0Q0:=Low(OCCOQQQ0Q0)to High(OCCOQQQ0Q0)do begin
if O0QQQCO0Q0=O0OC00Q0Q0[OCOQQCO0Q0]then begin
OC0QQCO0Q0[O0OQQCO0Q0]:=OCOQQCO0Q0;
Inc(O0OQQCO0Q0);
if O0OQQCO0Q0=Length(OC0QQCO0Q0)then
Exit;
break;
end;
end;
end;
end;
constructor OQOCQCO0Q0.Create;
begin
inherited;
SetLength(OCOCQCO0Q0,OO0OOQO0Q0);
O0QCQCO0Q0:=0;
end;
destructor OQOCQCO0Q0.Destroy;
begin
OO0OQCO0Q0;
inherited;
end;
procedure OQOCQCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
var
OC00QCO0Q0:integer;
begin
if O0C0Q0Q0Q0 is OQOCQCO0Q0 then begin
OQOCQCO0Q0(O0C0Q0Q0Q0).OO0OQCO0Q0;
OQOCQCO0Q0(O0C0Q0Q0Q0).O0QCQCO0Q0:=O0QCQCO0Q0;
for OC00QCO0Q0:=0 to O0QCQCO0Q0-1 do
OQOCQCO0Q0(O0C0Q0Q0Q0).OCOCQCO0Q0[OC00QCO0Q0].OO0CQCO0Q0:=OCOCQCO0Q0[OC00QCO0Q0].OO0CQCO0Q0;
end
else
inherited;
end;
function OQOCQCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=O0000CO0Q0;
end;
procedure OQOCQCO0Q0.OO0OQCO0Q0;
var
OQ0OQCO0Q0:integer;
begin
for OQ0OQCO0Q0:=0 to Length(OCOCQCO0Q0)-1 do begin
OCOCQCO0Q0[OQ0OQCO0Q0].OQ0CQCO0Q0.Free;
OCOCQCO0Q0[OQ0OQCO0Q0].OC0CQCO0Q0.Free;
OCOCQCO0Q0[OQ0OQCO0Q0].O0OCQCO0Q0.Free;
OCOCQCO0Q0[OQ0OQCO0Q0].OOOCQCO0Q0.Free;
end;
O0QCQCO0Q0:=0;
end;
procedure OQOCQCO0Q0.OQC0QCO0Q0(const OQQQQCO0Q0:OOQOQOQOQ0);
var
O0OQQ0Q0Q0:integer;
begin
for O0OQQ0Q0Q0:=0 to O0QCQCO0Q0-1 do begin
if OCOCQCO0Q0[O0OQQ0Q0Q0].OO0CQCO0Q0=OCCOQQQ0Q0(byte(OQQQQCO0Q0))then
raise EScError.Create(seDuplicateKExNamedGroup);
end;
Assert(O0QCQCO0Q0<Length(OCOCQCO0Q0));
OCOCQCO0Q0[O0QCQCO0Q0].OO0CQCO0Q0:=OCCOQQQ0Q0(byte(OQQQQCO0Q0));
OCOCQCO0Q0[O0QCQCO0Q0].OQ0CQCO0Q0:=O0CQOOC0Q0.Create(nil);
OCOCQCO0Q0[O0QCQCO0Q0].OQ0CQCO0Q0.OQ00OCQ0Q0(OQQQQCO0Q0);
Inc(O0QCQCO0Q0);
end;
procedure OQOCQCO0Q0.OQC0QCO0Q0(const OCQQQCO0Q0:OCCCQQQ0Q0);
var
O0CQQCO0Q0:OCCOQQQ0Q0;
OCC0QCO0Q0:TBytes;
O00OQCO0Q0:TBigInteger;
O0OQQ0Q0Q0:integer;
begin
O0CQQCO0Q0:=OCCOQQQ0Q0(integer(OCQQQCO0Q0)+integer(High(OOQOQOQOQ0))+1);
for O0OQQ0Q0Q0:=0 to O0QCQCO0Q0-1 do begin
if OCOCQCO0Q0[O0OQQ0Q0Q0].OO0CQCO0Q0=O0CQQCO0Q0 then
raise EScError.Create(seDuplicateKExNamedGroup);
end;
Assert(O0QCQCO0Q0<Length(OCOCQCO0Q0));
OCOCQCO0Q0[O0QCQCO0Q0].OO0CQCO0Q0:=O0CQQCO0Q0;
O00OQCO0Q0:=OCQQO0Q0Q0(OCQQQCO0Q0);
SetLength(OCC0QCO0Q0,O00OQCO0Q0.BitCount div(8*2));
OCCQ0QQ0Q0.Random(OCC0QCO0Q0,0,Length(OCC0QCO0Q0));
OCOCQCO0Q0[O0QCQCO0Q0].O0OCQCO0Q0:=TBigInteger.Create(OCC0QCO0Q0);
OCOCQCO0Q0[O0QCQCO0Q0].OOOCQCO0Q0:=OOCQO0Q0Q0.ModPow(OCOCQCO0Q0[O0QCQCO0Q0].O0OCQCO0Q0,O00OQCO0Q0);
Inc(O0QCQCO0Q0);
end;
procedure OQOCQCO0Q0.OQC0QCO0Q0(const O0CQQCO0Q0:OCCOQQQ0Q0);
var
OCQQQCO0Q0:OCCCQQQ0Q0;
OCC0QCO0Q0:TBytes;
O00OQCO0Q0:TBigInteger;
O0OQQ0Q0Q0:integer;
begin
for O0OQQ0Q0Q0:=0 to O0QCQCO0Q0-1 do begin
if OCOCQCO0Q0[O0OQQ0Q0Q0].OO0CQCO0Q0=O0CQQCO0Q0 then
raise EScError.Create(seDuplicateKExNamedGroup);
end;
Assert(O0QCQCO0Q0<Length(OCOCQCO0Q0));
OCOCQCO0Q0[O0QCQCO0Q0].OO0CQCO0Q0:=O0CQQCO0Q0;
if integer(O0CQQCO0Q0)<=integer(High(OOQOQOQOQ0))then begin
OCOCQCO0Q0[O0QCQCO0Q0].OQ0CQCO0Q0:=O0CQOOC0Q0.Create(nil);
OCOCQCO0Q0[O0QCQCO0Q0].OQ0CQCO0Q0.OQ00OCQ0Q0(OOQOQOQOQ0(byte(O0CQQCO0Q0)));
end
else begin
OCQQQCO0Q0:=OCCCQQQ0Q0(integer(O0CQQCO0Q0)-integer(High(OOQOQOQOQ0))-1);
O00OQCO0Q0:=OCQQO0Q0Q0(OCQQQCO0Q0);
SetLength(OCC0QCO0Q0,O00OQCO0Q0.BitCount div(8*2));
OCCQ0QQ0Q0.Random(OCC0QCO0Q0,0,Length(OCC0QCO0Q0));
OCOCQCO0Q0[O0QCQCO0Q0].O0OCQCO0Q0:=TBigInteger.Create(OCC0QCO0Q0);
OCOCQCO0Q0[O0QCQCO0Q0].OOOCQCO0Q0:=OOCQO0Q0Q0.ModPow(OCOCQCO0Q0[O0QCQCO0Q0].O0OCQCO0Q0,O00OQCO0Q0);
end;
Inc(O0QCQCO0Q0);
end;
function OQOCQCO0Q0.OQQCQCO0Q0(OQOQQCO0Q0:integer):OCCOQQQ0Q0;
begin
if(OQOQQCO0Q0<0)or(OQOQQCO0Q0>=O0QCQCO0Q0)then
raise Exception.CreateFmt(SListIndexError,[OQOQQCO0Q0]);
Result:=OCOCQCO0Q0[OQOQQCO0Q0].OO0CQCO0Q0;
end;
function OQOCQCO0Q0.OCQCQCO0Q0(O0CCQCO0Q0:integer):O0CQOOC0Q0;
begin
if(O0CCQCO0Q0<0)or(O0CCQCO0Q0>=O0QCQCO0Q0)then
raise Exception.CreateFmt(SListIndexError,[O0CCQCO0Q0]);
Result:=OCOCQCO0Q0[O0CCQCO0Q0].OQ0CQCO0Q0;
end;
function OQOCQCO0Q0.OOCCQCO0Q0(OQCCQCO0Q0:integer):OOCOCO0OQ0;
begin
if(OQCCQCO0Q0<0)or(OQCCQCO0Q0>=O0QCQCO0Q0)then
raise Exception.CreateFmt(SListIndexError,[OQCCQCO0Q0]);
Result:=OCOCQCO0Q0[OQCCQCO0Q0].OC0CQCO0Q0;
end;
function OQOCQCO0Q0.OCCCQCO0Q0(O000QCO0Q0:integer):TBigInteger;
begin
if(O000QCO0Q0<0)or(O000QCO0Q0>=O0QCQCO0Q0)then
raise Exception.CreateFmt(SListIndexError,[O000QCO0Q0]);
Result:=OCOCQCO0Q0[O000QCO0Q0].O0OCQCO0Q0;
end;
function OQOCQCO0Q0.OO00QCO0Q0(OQ00QCO0Q0:integer):TBigInteger;
begin
if(OQ00QCO0Q0<0)or(OQ00QCO0Q0>=O0QCQCO0Q0)then
raise Exception.CreateFmt(SListIndexError,[OQ00QCO0Q0]);
Result:=OCOCQCO0Q0[OQ00QCO0Q0].OOOCQCO0Q0;
end;
procedure OQOCQCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
var
O0O0QCO0Q0:TBytes;
OOO0QCO0Q0:array of TBytes;
OQO0QCO0Q0:TBigInteger;
OCO0QCO0Q0:OCCCQQQ0Q0;
O0Q0QCO0Q0:integer;
OC0CQ0Q0Q0:integer;
begin
if OCCQ0QQ0Q0=nil then
raise Exception.Create(SInternalError);
SetLength(OOO0QCO0Q0,O0QCQCO0Q0);
O0Q0QCO0Q0:=0;
if not OOQCQCO0Q0 then begin
for OC0CQ0Q0Q0:=0 to O0QCQCO0Q0-1 do begin
if integer(OCOCQCO0Q0[OC0CQ0Q0Q0].OO0CQCO0Q0)<=integer(High(OOQOQOQOQ0))then begin
if OCOCQCO0Q0[OC0CQ0Q0Q0].OQ0CQCO0Q0=nil then begin
OCOCQCO0Q0[OC0CQ0Q0Q0].OQ0CQCO0Q0:=O0CQOOC0Q0.Create(nil);
OCOCQCO0Q0[OC0CQ0Q0Q0].OQ0CQCO0Q0.OQ00OCQ0Q0(OOQOQOQOQ0(byte(OCOCQCO0Q0[OC0CQ0Q0Q0].OO0CQCO0Q0)));
end;
OOO0QCO0Q0[OC0CQ0Q0Q0]:=OCOCQCO0Q0[OC0CQ0Q0Q0].OQ0CQCO0Q0.OCQOOCQ0Q0.OOQQQO0OQ0.OCQ0CO0OQ0(OCOCQCO0Q0[OC0CQ0Q0Q0].OQ0CQCO0Q0.OCQOOCQ0Q0.OQQQQO0OQ0);
Inc(O0Q0QCO0Q0,Length(OOO0QCO0Q0[OC0CQ0Q0Q0]));
end
else begin
OCO0QCO0Q0:=OCCCQQQ0Q0(integer(OCOCQCO0Q0[OC0CQ0Q0Q0].OO0CQCO0Q0)-integer(High(OOQOQOQOQ0))-1);
OQO0QCO0Q0:=OCQQO0Q0Q0(OCO0QCO0Q0);
if OCOCQCO0Q0[OC0CQ0Q0Q0].O0OCQCO0Q0=nil then begin
SetLength(O0O0QCO0Q0,OQO0QCO0Q0.BitCount div(8*2));
OCCQ0QQ0Q0.Random(O0O0QCO0Q0,0,Length(O0O0QCO0Q0));
OCOCQCO0Q0[OC0CQ0Q0Q0].O0OCQCO0Q0:=TBigInteger.Create(O0O0QCO0Q0);
OCOCQCO0Q0[OC0CQ0Q0Q0].OOOCQCO0Q0:=OOCQO0Q0Q0.ModPow(OCOCQCO0Q0[OC0CQ0Q0Q0].O0OCQCO0Q0,OQO0QCO0Q0);
end;
OOO0QCO0Q0[OC0CQ0Q0Q0]:=OCOCQCO0Q0[OC0CQ0Q0Q0].OOOCQCO0Q0.GetBytes(OQO0QCO0Q0.BitCount shr 3);
Inc(O0Q0QCO0Q0,Length(OOO0QCO0Q0[OC0CQ0Q0Q0]));
end;
if O0O00CO0Q0=OQOQOOQ0Q0 then
Break;
end;
end;
if O0O00CO0Q0=OOOQOOQ0Q0 then
OCQQQ0Q0Q0.O00QC0Q0Q0((O0QCQCO0Q0*4)+O0Q0QCO0Q0);
for OC0CQ0Q0Q0:=0 to O0QCQCO0Q0-1 do begin
OCQQQ0Q0Q0.O00QC0Q0Q0(O0OC00Q0Q0[OCOCQCO0Q0[OC0CQ0Q0Q0].OO0CQCO0Q0]);
if not OOQCQCO0Q0 then
OCQQQ0Q0Q0.OOOO00Q0Q0(OOO0QCO0Q0[OC0CQ0Q0Q0]);
if O0O00CO0Q0=OQOQOOQ0Q0 then
Break;
end;
end;
procedure OQOCQCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OCOQQCO0Q0:OCCOQQQ0Q0;
O0QQQCO0Q0:word;
OQQ0QCO0Q0:OCCCQQQ0Q0;
OCQ0QCO0Q0:TBigInteger;
O0C0QCO0Q0:integer;
OOC0QCO0Q0:boolean;
O0Q0CCO0Q0,OQQQCCO0Q0:integer;
begin
OO0OQCO0Q0;
if OOOCQ0Q0Q0.OOCCC0Q0Q0=0 then
Exit;
if O0O00CO0Q0=OOOQOOQ0Q0 then
OQQQCCO0Q0:=OOOCQ0Q0Q0.OOCCC0Q0Q0
else
OQQQCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
O0QCQCO0Q0:=0;
while OQQQCCO0Q0>0 do begin
O0QQQCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
Dec(OQQQCCO0Q0,2);
OOC0QCO0Q0:=False;
for OCOQQCO0Q0:=Low(OCCOQQQ0Q0)to High(OCCOQQQ0Q0)do begin
if O0QQQCO0Q0=O0OC00Q0Q0[OCOQQCO0Q0]then begin
for O0Q0CCO0Q0:=0 to O0QCQCO0Q0-1 do begin
if OCOCQCO0Q0[O0Q0CCO0Q0].OO0CQCO0Q0=OCOQQCO0Q0 then
raise EScError.Create(seDuplicateKExNamedGroup);
end;
Assert(O0QCQCO0Q0<Length(OCOCQCO0Q0));
OCOCQCO0Q0[O0QCQCO0Q0].OO0CQCO0Q0:=OCOQQCO0Q0;
if OQQQCCO0Q0>2 then begin
O0C0QCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
Dec(OQQQCCO0Q0,2);
if O0C0QCO0Q0>OQQQCCO0Q0 then
raise EScError.Create(seWrongExtensionData);
if integer(OCOQQCO0Q0)<=integer(High(OOQOQOQOQ0))then begin
OCOCQCO0Q0[O0QCQCO0Q0].OQ0CQCO0Q0:=O0CQOOC0Q0.Create(nil);
OCOCQCO0Q0[O0QCQCO0Q0].OQ0CQCO0Q0.OQ00OCQ0Q0(OOQOQOQOQ0(byte(OCOQQCO0Q0)));
OCOCQCO0Q0[O0QCQCO0Q0].OC0CQCO0Q0:=OCOCQCO0Q0[O0QCQCO0Q0].OQ0CQCO0Q0.OCQOOCQ0Q0.OOQQQO0OQ0.OCO0CO0OQ0(OOOCQ0Q0Q0.OCCCC0Q0Q0,OOOCQ0Q0Q0.OO00C0Q0Q0,O0C0QCO0Q0);
OOOCQ0Q0Q0.OCQCC0Q0Q0(O0C0QCO0Q0);
if(OCOCQCO0Q0[O0QCQCO0Q0].OC0CQCO0Q0 is O00QQO0OQ0)and(O00QQO0OQ0(OCOCQCO0Q0[O0QCQCO0Q0].OC0CQCO0Q0).OC0QQO0OQ0.BitCount=0)then
raise EScError.Create(seWrongECPointFormat);
end
else begin
OQQ0QCO0Q0:=OCCCQQQ0Q0(integer(OCOQQCO0Q0)-integer(High(OOQOQOQOQ0))-1);
OCQ0QCO0Q0:=OCQQO0Q0Q0(OQQ0QCO0Q0);
if(OCQ0QCO0Q0.BitCount shr 3)<>O0C0QCO0Q0 then
raise EScError.Create(seWrongExtensionData);
OCOCQCO0Q0[O0QCQCO0Q0].OOOCQCO0Q0:=TBigInteger.Create(OOOCQ0Q0Q0.OCCCC0Q0Q0,OOOCQ0Q0Q0.OO00C0Q0Q0,O0C0QCO0Q0);
OOOCQ0Q0Q0.OCQCC0Q0Q0(O0C0QCO0Q0);
if(OCOCQCO0Q0[O0QCQCO0Q0].OOOCQCO0Q0.BitCount<=1)or OCOCQCO0Q0[O0QCQCO0Q0].OOOCQCO0Q0.GreaterOrEqual(OCQ0QCO0Q0)then
raise EScError.Create(seWrongExtensionData);
end;
Dec(OQQQCCO0Q0,O0C0QCO0Q0);
end;
Inc(O0QCQCO0Q0);
OOC0QCO0Q0:=True;
break;
end;
end;
if(O0O00CO0Q0=OOOQOOQ0Q0)and not OOC0QCO0Q0 then
raise EScError.Create(seInvalidEllipticCurveName);
end;
if(O0O00CO0Q0=OOOQOOQ0Q0)and(O0QCQCO0Q0<>1)then
raise EScError.Create(seInvalidEllipticCurveName);
end;
constructor OOCOQCO0Q0.Create;
begin
inherited;
OQCOQCO0Q0:=[OQQOQCO0Q0,OCQOQCO0Q0];
end;
procedure OOCOQCO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OOCOQCO0Q0 then begin
OOCOQCO0Q0(O0C0Q0Q0Q0).OQCOQCO0Q0:=OQCOQCO0Q0;
end
else
inherited;
end;
function OOCOQCO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OCQC0CO0Q0;
end;
procedure OOCOQCO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
const
OCCOQCO0Q0:array[O0COQCO0Q0]of byte=
(0,1);
begin
if(OQQOQCO0Q0 in OQCOQCO0Q0)and(OCQOQCO0Q0 in OQCOQCO0Q0)then begin
OCQQQ0Q0Q0.OCQO00Q0Q0(2);
OCQQQ0Q0Q0.OCQO00Q0Q0(OCCOQCO0Q0[OQQOQCO0Q0]);
OCQQQ0Q0Q0.OCQO00Q0Q0(OCCOQCO0Q0[OCQOQCO0Q0]);
end
else
if OQCOQCO0Q0=[OCQOQCO0Q0]then begin
OCQQQ0Q0Q0.OCQO00Q0Q0(1);
OCQQQ0Q0Q0.OCQO00Q0Q0(OCCOQCO0Q0[OCQOQCO0Q0]);
end
else begin
OCQQQ0Q0Q0.OCQO00Q0Q0(1);
OCQQQ0Q0Q0.OCQO00Q0Q0(OCCOQCO0Q0[OQQOQCO0Q0]);
end;
end;
procedure OOCOQCO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OQQQCCO0Q0:integer;
O0Q0CCO0Q0:integer;
begin
OQCOQCO0Q0:=[];
if OOOCQ0Q0Q0.OOCCC0Q0Q0=0 then
Exit;
OQQQCCO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
for O0Q0CCO0Q0:=1 to OQQQCCO0Q0 do begin
case OOOCQ0Q0Q0.O00CC0Q0Q0 of
0:
Include(OQCOQCO0Q0,OQQOQCO0Q0);
1:
Include(OQCOQCO0Q0,OCQOQCO0Q0);
end;
end;
end;
constructor OO0QOQO0Q0.Create;
begin
inherited;
O0OQOQO0Q0:=OQC0COQOQ0;
OQ0QOQO0Q0:=O00CQOQ0Q0.Create;
end;
destructor OO0QOQO0Q0.Destroy;
begin
OQ0QOQO0Q0.Free;
inherited;
end;
procedure OO0QOQO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OO0QOQO0Q0 then begin
OO0QOQO0Q0(O0C0Q0Q0Q0).OQ0QOQO0Q0.O0QCQOQ0Q0(OQ0QOQO0Q0);
OO0QOQO0Q0(O0C0Q0Q0Q0).OC0QOQO0Q0:=OC0QOQO0Q0;
OO0QOQO0Q0(O0C0Q0Q0Q0).O0OQOQO0Q0:=O0OQOQO0Q0;
end
else
inherited;
end;
function OO0QOQO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=O0CC0CO0Q0;
end;
function OO0QOQO0Q0.OOOQOQO0Q0:integer;
begin
Result:=OQ0QOQO0Q0.Count;
end;
procedure OO0QOQO0Q0.OQ0COQO0Q0(OC0COQO0Q0:O00QQOQ0Q0);
var
O0OCOQO0Q0:O00QQOQ0Q0;
begin
O0OCOQO0Q0:=OCCOCOQ0Q0(OC0COQO0Q0.ClassType).Create;
OQ0QOQO0Q0.OQOCQOQ0Q0(O0OCOQO0Q0);
O0OCOQO0Q0.Assign(OC0COQO0Q0);
end;
procedure OO0QOQO0Q0.OOOCOQO0Q0;
begin
OQ0QOQO0Q0.Clear;
end;
function OO0QOQO0Q0.OQOQOQO0Q0(OCOQOQO0Q0:integer):O00QQOQ0Q0;
begin
Result:=OQ0QOQO0Q0.OOCCQOQ0Q0[OCOQOQO0Q0];
end;
function OO0QOQO0Q0.O0QQOQO0Q0(OOQQOQO0Q0:integer):TBytes;
begin
Result:=OQ0QOQO0Q0.OOCCQOQ0Q0[OOQQOQO0Q0].OQCQQOQ0Q0;
end;
procedure OO0QOQO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
var
OQQQOQO0Q0:O00QQOQ0Q0;
OCQQOQO0Q0,O0CQOQO0Q0:cardinal;
OO0CQ0Q0Q0,OOCQOQO0Q0:integer;
OC0CQ0Q0Q0:integer;
begin
if O0O00CO0Q0=OOOQOOQ0Q0 then begin
OO0CQ0Q0Q0:=OCQQQ0Q0Q0.OQ00C0Q0Q0;
OCQQQ0Q0Q0.OQCQC0Q0Q0(2);
for OC0CQ0Q0Q0:=0 to OQ0QOQO0Q0.Count-1 do begin
OQQQOQO0Q0:=OQ0QOQO0Q0[OC0CQ0Q0Q0];
OCQQOQO0Q0:=OCO0OCOOQ0-OQQQOQO0Q0.OQQQQOQ0Q0;
if OCQQOQO0Q0>OQQQOQO0Q0.OCQQQOQ0Q0 then
raise EScError.Create(seSesionTicketTimeExpired);
O0CQOQO0Q0:=cardinal(OCQQOQO0Q0*1000+OQQQOQO0Q0.O0CQQOQ0Q0);
OCQQQ0Q0Q0.OOOO00Q0Q0(OQQQOQO0Q0.OQCQQOQ0Q0);
OCQQQ0Q0Q0.OQQQC0Q0Q0(O0CQOQO0Q0);
end;
OCQQQ0Q0Q0.OQ0QC0Q0Q0(OCQQQ0Q0Q0.OQ00C0Q0Q0-OO0CQ0Q0Q0-2,OO0CQ0Q0Q0);
OO0CQ0Q0Q0:=OCQQQ0Q0Q0.OQ00C0Q0Q0;
OCQQQ0Q0Q0.OQCQC0Q0Q0(2);
for OC0CQ0Q0Q0:=0 to OQ0QOQO0Q0.Count-1 do begin
OOCQOQO0Q0:=OOCQCC0OQ0.OC00CC0OQ0(O0OQOQO0Q0);
OCQQQ0Q0Q0.OCQO00Q0Q0(OOCQOQO0Q0);
OCQQQ0Q0Q0.OQCQC0Q0Q0(OOCQOQO0Q0);
end;
OCQQQ0Q0Q0.OQ0QC0Q0Q0(OCQQQ0Q0Q0.OQ00C0Q0Q0-OO0CQ0Q0Q0-2,OO0CQ0Q0Q0);
end
else begin
OCQQQ0Q0Q0.O00QC0Q0Q0(OC0QOQO0Q0);
end;
end;
procedure OO0QOQO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OCCQOQO0Q0:O00QQOQ0Q0;
OQQQCCO0Q0,O00COQO0Q0:integer;
OO0COQO0Q0:integer;
begin
if O0O00CO0Q0=OQOQOOQ0Q0 then begin
OQ0QOQO0Q0.Clear;
OQQQCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
while OQQQCCO0Q0>0 do begin
OCCQOQO0Q0:=OQQ0Q0Q0Q0.Create;
OQ0QOQO0Q0.OQOCQOQ0Q0(OCCQOQO0Q0);
O00COQO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
OCCQOQO0Q0.OQCQQOQ0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(O00COQO0Q0);
Dec(OQQQCCO0Q0,2+O00COQO0Q0);
OCCQOQO0Q0.OCQQQOQ0Q0:=OOOCQ0Q0Q0.OC0CC0Q0Q0;
Dec(OQQQCCO0Q0,4);
end;
OO0COQO0Q0:=0;
OQQQCCO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
while OQQQCCO0Q0>0 do begin
OCCQOQO0Q0:=OQ0QOQO0Q0[OO0COQO0Q0];
Inc(OO0COQO0Q0);
O00COQO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
OCCQOQO0Q0.OCCQQOQ0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(O00COQO0Q0);
Dec(OQQQCCO0Q0,1+O00COQO0Q0);
end;
end
else begin
OC0QOQO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
end;
end;
procedure OCQCOQO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OCQCOQO0Q0 then begin
OCQCOQO0Q0(O0C0Q0Q0Q0).O0CCOQO0Q0:=O0CCOQO0Q0;
end
else
inherited;
end;
function OCQCOQO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OOQC0CO0Q0;
end;
procedure OCQCOQO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
OCQQQ0Q0Q0.OQC000Q0Q0(O0CCOQO0Q0);
end;
procedure OCQCOQO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
O0CCOQO0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(OOOCQ0Q0Q0.OOCCC0Q0Q0);
end;
procedure OQCCOQO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OQCCOQO0Q0 then begin
OQCCOQO0Q0(O0C0Q0Q0Q0).OCCCOQO0Q0:=OCCCOQO0Q0;
end
else
inherited;
end;
function OQCCOQO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OOCC0CO0Q0;
end;
procedure OQCCOQO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
if OCCCOQO0Q0>0 then
OCQQQ0Q0Q0.OQQQC0Q0Q0(OCCCOQO0Q0);
end;
procedure OQCCOQO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
O000OQO0Q0:integer;
begin
O000OQO0Q0:=OOOCQ0Q0Q0.OOCCC0Q0Q0;
if O000OQO0Q0=4 then
OCCCOQO0Q0:=OOOCQ0Q0Q0.OC0CC0Q0Q0
else
if O000OQO0Q0=0 then
OCCCOQO0Q0:=0
else
raise EScError.Create(seWrongExtensionData);
end;
procedure OQ00OQO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OQ00OQO0Q0 then begin
OQ00OQO0Q0(O0C0Q0Q0Q0).O0O0OQO0Q0:=O0O0OQO0Q0;
OQ00OQO0Q0(O0C0Q0Q0Q0).OC00OQO0Q0:=OC00OQO0Q0;
end
else
inherited;
end;
function OQ00OQO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OQQC0CO0Q0;
end;
procedure OQ00OQO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
var
OO0CQ0Q0Q0:integer;
begin
if O0O00CO0Q0=OOOQOOQ0Q0 then begin
OO0CQ0Q0Q0:=OCQQQ0Q0Q0.OQ00C0Q0Q0;
OCQQQ0Q0Q0.OQCQC0Q0Q0(1);
if OCQCCQQ0Q0 in O0O0OQO0Q0 then begin
OCQQQ0Q0Q0.OCQO00Q0Q0(3);
OCQQQ0Q0Q0.OCQO00Q0Q0(4);
OCQQQ0Q0Q0.OCQO00Q0Q0(127);
OCQQQ0Q0Q0.OCQO00Q0Q0(28);
end;
if OQQCCQQ0Q0 in O0O0OQO0Q0 then begin
OCQQQ0Q0Q0.OCQO00Q0Q0(3);
OCQQQ0Q0Q0.OCQO00Q0Q0(3);
end;
OCQQQ0Q0Q0.OOCO00Q0Q0(OCQQQ0Q0Q0.OQ00C0Q0Q0-OO0CQ0Q0Q0-1,OO0CQ0Q0Q0);
end
else begin
case OC00OQO0Q0 of
OCQCCQQ0Q0:begin
OCQQQ0Q0Q0.OCQO00Q0Q0(3);
OCQQQ0Q0Q0.OCQO00Q0Q0(4);
end;
else begin
OCQQQ0Q0Q0.OCQO00Q0Q0(3);
OCQQQ0Q0Q0.OCQO00Q0Q0(4);
end;
end;
end;
end;
procedure OQ00OQO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
OOO0OQO0Q0:integer;
OQO0OQO0Q0,OCO0OQO0Q0:byte;
O0Q0CCO0Q0:integer;
begin
O0O0OQO0Q0:=[];
OC00OQO0Q0:=O0CCCQQ0Q0;
if O0O00CO0Q0=OOOQOOQ0Q0 then begin
OQO0OQO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
OCO0OQO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
if((OQO0OQO0Q0=3)and(OCO0OQO0Q0=4))or((OQO0OQO0Q0=127)and(OCO0OQO0Q0=28))then
OC00OQO0Q0:=OCQCCQQ0Q0
else
raise EScError.Create(seWrongExtensionData);
end
else begin
OOO0OQO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0 div 2;
for O0Q0CCO0Q0:=0 to OOO0OQO0Q0-1 do begin
OQO0OQO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
OCO0OQO0Q0:=OOOCQ0Q0Q0.O00CC0Q0Q0;
if OQO0OQO0Q0=3 then begin
if OCO0OQO0Q0=4 then
Include(O0O0OQO0Q0,OCQCCQQ0Q0)
else
if OCO0OQO0Q0=3 then
Include(O0O0OQO0Q0,OQQCCQQ0Q0)
else
if OCO0OQO0Q0=2 then
Include(O0O0OQO0Q0,OOQCCQQ0Q0)
else
if OCO0OQO0Q0=1 then
Include(O0O0OQO0Q0,O0QCCQQ0Q0);
end;
end;
end;
end;
procedure OQQ0OQO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OQQ0OQO0Q0 then begin
OQQ0OQO0Q0(O0C0Q0Q0Q0).OCQ0OQO0Q0:=OCQ0OQO0Q0;
end
else
inherited;
end;
function OQQ0OQO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OQCC0CO0Q0;
end;
procedure OQQ0OQO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
OCQQQ0Q0Q0.OOOO00Q0Q0(OCQ0OQO0Q0);
end;
procedure OQQ0OQO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
var
O0QO0CO0Q0:integer;
begin
O0QO0CO0Q0:=OOOCQ0Q0Q0.OO0CC0Q0Q0;
OCQ0OQO0Q0:=OOOCQ0Q0Q0.OOOCC0Q0Q0(O0QO0CO0Q0);
end;
procedure OOC0OQO0Q0.AssignTo(O0C0Q0Q0Q0:TPersistent);
begin
if O0C0Q0Q0Q0 is OOC0OQO0Q0 then begin
end
else
inherited;
end;
function OOC0OQO0Q0.OQO00CO0Q0:OQ000CO0Q0;
begin
Result:=OO000CO0Q0;
end;
procedure OOC0OQO0Q0.OCO00CO0Q0(OCQQQ0Q0Q0:OCQC00Q0Q0);
begin
end;
procedure OOC0OQO0Q0.OQQ00CO0Q0(OOOCQ0Q0Q0:OCQC00Q0Q0);
begin
if OOOCQ0Q0Q0.OOCCC0Q0Q0<>0 then
raise EScError.Create(seWrongExtensionData);
end;
initialization
OO0OOQO0Q0:=integer(High(OCCOQQQ0Q0))+1;
OQ0OOQO0Q0:=integer(High(OOOCQQQ0Q0))+1;
finalization
end.
