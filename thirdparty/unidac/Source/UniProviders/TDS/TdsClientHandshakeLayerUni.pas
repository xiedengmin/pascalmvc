//////////////////////////////////////////////////
//  SecureBridge Components
//  Copyright © 2007-2021 Devart. All right reserved.
//////////////////////////////////////////////////
{$I Tds.inc}
unit TdsClientHandshakeLayerUni;
interface
uses
Classes,SysUtils,
CLRClasses,CRTypes,CRFunctions,
{$IFNDEF UNIDACPRO}
TdsUtils,TdsSSLTypes,TdsCipherSuites,TdsBridge,TdsCertificateExts,
TdsSSLMessages,TdsLayers,TdsSSLExtensions;
{$ELSE}
TdsUtilsUni,TdsSSLTypesUni,TdsCipherSuitesUni,TdsBridgeUni,TdsCertificateExtsUni,
TdsSSLMessagesUni,TdsLayersUni,TdsSSLExtensionsUni;
{$ENDIF}
type
O0QC0CQCQ0=class(OOQQOC00Q0)
private
OOQC0CQCQ0:boolean;
OQQC0CQCQ0:boolean;
OCQC0CQCQ0:O0CQOOC0Q0;
O0CC0CQCQ0:O0QC0O0OQ0;
OOCC0CQCQ0:O0CQOOC0Q0;
OQCC0CQCQ0:OOCOCO0OQ0;
procedure OCCC0CQCQ0;
procedure OQO00CQCQ0(OCO00CQCQ0:O00QQOQ0Q0);
protected
procedure OQOQ0C00Q0;override;
procedure OCOC0C00Q0(OOQ00CQCQ0:OCQC00Q0Q0);override;
procedure OOQC0C00Q0(OQQ00CQCQ0:OQQC0OQ0Q0);override;
procedure OOCQ0C00Q0;override;
procedure OQOO0CQCQ0;
procedure OQ0QCCQCQ0(OC0QCCQCQ0:OCQC00Q0Q0);
procedure OC0CCCQCQ0;
procedure OQQCCCQCQ0;
procedure OOQ0CCQCQ0(OQQ0CCQCQ0:OCQC00Q0Q0);
procedure O00OCCQCQ0(OO0OCCQCQ0:OCQC00Q0Q0);
procedure OQOOCCQCQ0(OCOOCCQCQ0:OCQC00Q0Q0);
procedure OOQOCCQCQ0(OQQOCCQCQ0:OCQC00Q0Q0);
procedure OCQOCCQCQ0;
procedure O0COCCQCQ0(OOCOCCQCQ0:OCQC00Q0Q0);
procedure OCCOCCQCQ0;
procedure O00QQCQCQ0;
procedure OO0QQCQCQ0(OQ0QQCQCQ0:OCQC00Q0Q0);
procedure OC0QQCQCQ0;
procedure OQCQ0C00Q0;override;
procedure OOOQQCQCQ0(OQOQQCQCQ0:OCQC00Q0Q0);
end;
implementation
uses
{$IFDEF VER17P}
{$IFNDEF NEXTGEN}
Contnrs,Types,
{$ENDIF}
{$ENDIF}
CRDECUtil,CRBigInteger,CRHashAlgorithm,CRHash,CRHMAC,CRSymmetricAlgorithm,
{$IFNDEF UNIDACPRO}
TdsSSLConsts,TdsCertificateConsts;
{$ELSE}
TdsSSLConstsUni,TdsCertificateConstsUni;
{$ENDIF}
procedure O0QC0CQCQ0.OCOC0C00Q0(OOQ00CQCQ0:OCQC00Q0Q0);
begin
case OOQ00CQCQ0.OQCCC0Q0Q0 of
O0QQ0OQ0Q0:begin
if OCQCOC00Q0<>OCOQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
OQ0QCCQCQ0(OOQ00CQCQ0);
end;
OCQQ0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
if OCQCOC00Q0<>O0QQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
OOQ0CCQCQ0(OOQ00CQCQ0);
end;
OQCQ0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
if OO00OC00Q0 then begin
if not OCOQ0C00Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else
if OCQCOC00Q0<>OCQQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else
if(OCQCOC00Q0<>O0CQ0OQ0Q0)and(OCQCOC00Q0<>OOCQ0OQ0Q0)then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
OQOOCCQCQ0(OOQ00CQCQ0);
end;
O0CQ0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
if(OCQCOC00Q0<>OCQQ0OQ0Q0)and(OCQCOC00Q0<>OQCQ0OQ0Q0)then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else
if OCQCOC00Q0<>O0QQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
O00OOC00Q0(OOQ00CQCQ0);
end;
O00C0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
if OCQCOC00Q0<>O0CQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType)
end
else
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
OQQOOC00Q0(OOQ00CQCQ0);
end;
OOCQ0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType)
else
if OCQCOC00Q0<>O0CQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
O00OCCQCQ0(OOQ00CQCQ0);
end;
OCCQ0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType)
else
if(OCQCOC00Q0<>O0CQ0OQ0Q0)and(OCQCOC00Q0<>OOCQ0OQ0Q0)and(OCQCOC00Q0<>OQCQ0OQ0Q0)then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
OOQOCCQCQ0(OOQ00CQCQ0);
end;
OQ0C0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
if OQ00OC00Q0 then begin
if OCQCOC00Q0<>OCQQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else
if OCQCOC00Q0<>O00C0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else
if OCQCOC00Q0<>O0QC0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
O0COCCQCQ0(OOQ00CQCQ0);
end;
OQOQ0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType)
else
if OCQCOC00Q0<>OQ0C0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
OOOQQCQCQ0(OOQ00CQCQ0);
end;
OOQQ0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
if(OCQCOC00Q0<>OQ0C0OQ0Q0)and(OCQCOC00Q0<>OOQQ0OQ0Q0)then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else begin
if OQ00OC00Q0 then begin
if OCQCOC00Q0<>O0QQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else
if OCQCOC00Q0<>OCCQ0OQ0Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end;
OO0QQCQCQ0(OOQ00CQCQ0);
end;
OC0C0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
if not OO00OC00Q0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end
else
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
OQ0C0C00Q0(OOQ00CQCQ0);
end;
else
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType);
end;
end;
procedure O0QC0CQCQ0.OOQC0C00Q0(OQQ00CQCQ0:OQQC0OQ0Q0);
begin
case OQQ00CQCQ0 of
O0QQ0OQ0Q0:begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
OC000C00Q0;
if OOQC0CQCQ0 then begin
OC0CCCQCQ0;
OOCQ0C00Q0;
end
else
OQQCCCQCQ0;
end;
end;
OCCQ0OQ0Q0:
OCQOCCQCQ0;
OQ0C0OQ0Q0:
OCCOCCQCQ0;
OQOQ0OQ0Q0:
OQCQ0C00Q0;
OQCQ0OQ0Q0:begin
if OO00OC00Q0 then
OC0QQCQCQ0;
end;
OC0C0OQ0Q0:begin
if O0O0OC00Q0=OQCQCOQ0Q0 then
O00C0C00Q0(OOCQCOQ0Q0);
end;
end;
end;
procedure O0QC0CQCQ0.OQOQ0C00Q0;
begin
inherited;
FreeAndNil(OCQC0CQCQ0);
FreeAndNil(OOCC0CQCQ0);
FreeAndNil(OQCC0CQCQ0);
FreeAndNil(O0CC0CQCQ0.OOQC0O0OQ0);
FreeAndNil(O0CC0CQCQ0.OQQC0O0OQ0);
FreeAndNil(O0CC0CQCQ0.OCQC0O0OQ0);
FreeAndNil(O0CC0CQCQ0.O0CC0O0OQ0);
end;
procedure O0QC0CQCQ0.OQCQ0C00Q0;
var
O0OQQCQCQ0:O00O0CO0Q0;
begin
if O0OO0C00Q0 then
Exit;
O0OQQCQCQ0:=O00O0CO0Q0(O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(O00O0CO0Q0));
if O0OQQCQCQ0<>nil then
O0OQQCQCQ0.OQQO0CO0Q0;
OOCQ0C00Q0;
end;
procedure O0QC0CQCQ0.OOOQQCQCQ0(OQOQQCQCQ0:OCQC00Q0Q0);
var
OCOQQCQCQ0:O00O0CO0Q0;
begin
if OQOQQCQCQ0.OOCCC0Q0Q0<>0 then
raise EScError.Create(seInvalidMessage);
if O0OO0C00Q0 then
Exit;
OCOQQCQCQ0:=O00O0CO0Q0(O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(O00O0CO0Q0));
if((OCOQQCQCQ0<>nil)and not OCOQQCQCQ0.OOOQCCO0Q0)or
(OCOQQCQCQ0=nil)
then
raise EScError.Create(seRenegotiationDenied);
end;
procedure O0QC0CQCQ0.OCCC0CQCQ0;
var
O0000CQCQ0:OQCOCCO0Q0;
OO000CQCQ0:OQ0QQCO0Q0;
OQ000CQCQ0:OQOCQCO0Q0;
OC000CQCQ0:boolean;
O0O00CQCQ0:OC0QQQQ0Q0;
OOO00CQCQ0:integer;
begin
OC000CQCQ0:=False;
for OOO00CQCQ0:=0 to Length(O0QCOC00Q0.OOO0OCO0Q0)-1 do begin
O0O00CQCQ0:=O0QCOC00Q0.OOO0OCO0Q0[OOO00CQCQ0];
if(O0QCOC00Q0.OCO0OCO0Q0*OO0C00Q0Q0[O0O00CQCQ0].SupportedProtocols)<>[]then
if(O0O00CQCQ0 in OQOCOOQ0Q0)or
(O0O00CQCQ0 in[OO0QQQQ0Q0,OQ0QQQQ0Q0])
then begin
OC000CQCQ0:=True;
Break;
end;
end;
if OC000CQCQ0 then begin
O0000CQCQ0:=OQCOCCO0Q0(O0QCOC00Q0.OQOOOCO0Q0.O000Q0Q0Q0(OQCOCCO0Q0));
O0000CQCQ0.OO0QQCO0Q0:=[OQQOCCO0Q0];
OO000CQCQ0:=OQ0QQCO0Q0(O0QCOC00Q0.OQOOOCO0Q0.O000Q0Q0Q0(OQ0QQCO0Q0));
if OO000CQCQ0.OQCQQCO0Q0=0 then begin
OO000CQCQ0.OOQQQCO0Q0(OCCCQOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(OOQ0QOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(OCO0QOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(OQQ0QOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(OCOOQOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(O0QOQOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(OOOOQOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(OQOOQOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(OC0OQOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(O0OOQOQOQ0);
OO000CQCQ0.OOQQQCO0Q0(O0Q0QOQOQ0);
if OCQCCQQ0Q0 in O0QCOC00Q0.OCO0OCO0Q0 then begin
OO000CQCQ0.OOQQQCO0Q0(OQQCQQQ0Q0);
OO000CQCQ0.OOQQQCO0Q0(OCQCQQQ0Q0);
OO000CQCQ0.OOQQQCO0Q0(O0CCQQQ0Q0);
OO000CQCQ0.OOQQQCO0Q0(OOCCQQQ0Q0);
OO000CQCQ0.OOQQQCO0Q0(OQCCQQQ0Q0);
OQ000CQCQ0:=OQOCQCO0Q0(O0QCOC00Q0.OQOOOCO0Q0.O000Q0Q0Q0(OQOCQCO0Q0));
if OQ000CQCQ0.O0OOQCO0Q0=0 then
OQ000CQCQ0.OQC0QCO0Q0(OCCCQOQOQ0);
end;
end;
end
else begin
O0QCOC00Q0.OQOOOCO0Q0.OQ00Q0Q0Q0(OQCOCCO0Q0);
O0QCOC00Q0.OQOOOCO0Q0.OQ00Q0Q0Q0(OQ0QQCO0Q0);
end;
end;
procedure O0QC0CQCQ0.OQO00CQCQ0(OCO00CQCQ0:O00QQOQ0Q0);
var
O0Q00CQCQ0:OO0QOQO0Q0;
begin
if OCQCCQQ0Q0 in O0QCOC00Q0.OCO0OCO0Q0 then begin
O0QCOC00Q0.OQOOOCO0Q0.O000Q0Q0Q0(OOCOQCO0Q0);
O0Q00CQCQ0:=OO0QOQO0Q0(O0QCOC00Q0.OQOOOCO0Q0.O000Q0Q0Q0(OO0QOQO0Q0));
O0Q00CQCQ0.OQQCOQO0Q0:=OO0C00Q0Q0[OOCCOC00Q0.OOOOQOQ0Q0].HashAlgorithm;
O0Q00CQCQ0.OQ0COQO0Q0(OCO00CQCQ0);
end;
end;
procedure O0QC0CQCQ0.OOCQ0C00Q0;
var
OCQ00CQCQ0:OQ00OQO0Q0;
O0C00CQCQ0:O00QQOQ0Q0;
OOC00CQCQ0:OO0CCOQ0Q0;
OQC00CQCQ0:TCipherDefinition;
OCC00CQCQ0:TBytes;
O00O0CQCQ0,OO0O0CQCQ0:TBytes;
OQ0O0CQCQ0:TBytes;
OC0O0CQCQ0:cardinal;
O0OO0CQCQ0,OOOO0CQCQ0:integer;
begin
if O0QCOC00Q0.OQOOOCO0Q0=nil then
raise EScError.Create(seInvalidInputArgs);
OO00OC00Q0:=False;
OQQC0CQCQ0:=False;
OC00OC00Q0:=False;
if not O000OC00Q0 then
OCCC0CQCQ0;
if not O000OC00Q0 and OOCCOC00Q0.O0OOQOQ0Q0 then begin
OCOCOC00Q0.OO0COQ00Q0:=OOCCOC00Q0.OCQOQOQ0Q0;
O000OC00Q0:=True;
OQ00OC00Q0:=True;
end
else
OQ00OC00Q0:=False;
if O000OC00Q0 then begin
OOC00CQCQ0:=O0OCCOQ0Q0.OCCCCOQ0Q0(O0C00C00Q0);
SetLength(O00O0CQCQ0,2);
OC0OO0Q0Q0.OOQOO0Q0Q0(OOCCOC00Q0.OOOOQOQ0Q0,O00O0CQCQ0,0);
OO0O0CQCQ0:=OOO0COQ0Q0.O0Q0COQ0Q0(OOCCOC00Q0.OQOOQOQ0Q0);
end
else begin
OOC00CQCQ0:=O0OCCOQ0Q0.OCCCCOQ0Q0(O0OCCOQ0Q0.OC00COQ0Q0(O0QCOC00Q0.OCO0OCO0Q0));
SetLength(O00O0CQCQ0,Length(O0QCOC00Q0.OOO0OCO0Q0)*2);
OOOO0CQCQ0:=0;
for O0OO0CQCQ0:=0 to Length(O0QCOC00Q0.OOO0OCO0Q0)-1 do begin
OQC00CQCQ0:=OO0C00Q0Q0[O0QCOC00Q0.OOO0OCO0Q0[O0OO0CQCQ0]];
if(O0QCOC00Q0.OCO0OCO0Q0*OQC00CQCQ0.SupportedProtocols)<>[]then begin
OC0OO0Q0Q0.OOQOO0Q0Q0(O0QCOC00Q0.OOO0OCO0Q0[O0OO0CQCQ0],O00O0CQCQ0,OOOO0CQCQ0);
Inc(OOOO0CQCQ0,2);
end;
end;
SetLength(O00O0CQCQ0,OOOO0CQCQ0);
if OOOO0CQCQ0=0 then
raise EScError.Create(seInvalidCipherAlgorithm);
OO0O0CQCQ0:=OOO0COQ0Q0.O0Q0COQ0Q0(O0QCOC00Q0.OQO0OCO0Q0);
if O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(OQQ0OQO0Q0)<>nil then
raise EScError.Create(seCookiesInInitialClientHello);
end;
if not O000OC00Q0 and(OCQCCQQ0Q0 in O0QCOC00Q0.OCO0OCO0Q0)then begin
SetLength(OCC00CQCQ0,32);
OQOCOC00Q0.Random(OCC00CQCQ0,0,32);
OOCCOC00Q0.OQQOQOQ0Q0:=OCC00CQCQ0;
end;
if(not O000OC00Q0 and(OCQCCQQ0Q0 in O0QCOC00Q0.OCO0OCO0Q0))or(O000OC00Q0 and(O0C00C00Q0=OCQCCQQ0Q0))then begin
OCQ00CQCQ0:=OQ00OQO0Q0(O0QCOC00Q0.OQOOOCO0Q0.O000Q0Q0Q0(OQ00OQO0Q0));
OCQ00CQCQ0.OOQ0OQO0Q0:=[OCQCCQQ0Q0];
end;
if O000OC00Q0 and not OOQC0CQCQ0 and(OCQCCQQ0Q0 in O0QCOC00Q0.OCO0OCO0Q0)and
(OOCCOC00Q0.OQCOQOQ0Q0.Count>0)
then begin
O0C00CQCQ0:=OOCCOC00Q0.OQCOQOQ0Q0[0];
OC0O0CQCQ0:=OCO0OCOOQ0-O0C00CQCQ0.OQQQQOQ0Q0;
if OC0O0CQCQ0<O0C00CQCQ0.OCQQQOQ0Q0 then
OQO00CQCQ0(O0C00CQCQ0);
end
else
O0C00CQCQ0:=nil;
OQQCOC00Q0.OCQ000Q0Q0(OCOQ0OQ0Q0);
OQQCOC00Q0.OCQO00Q0Q0(OOC00CQCQ0.OQ0CCOQ0Q0);
OQQCOC00Q0.OCQO00Q0Q0(OOC00CQCQ0.OC0CCOQ0Q0);
OQ0O0CQCQ0:=OQO0OC00Q0;
Move(OQ0O0CQCQ0[0],O0CCOC00Q0[0],4);
OQOCOC00Q0.Random(O0CCOC00Q0,4,28);
OQQCOC00Q0.OQC000Q0Q0(O0CCOC00Q0,0,32);
OQQCOC00Q0.OQ0O00Q0Q0(OOCCOC00Q0.OQQOQOQ0Q0);
OQQCOC00Q0.OOOO00Q0Q0(O00O0CQCQ0);
OQQCOC00Q0.OQ0O00Q0Q0(OO0O0CQCQ0);
O0QCOC00Q0.OQOOOCO0Q0.OQQQQ0Q0Q0(OQQCOC00Q0,OOOQOOQ0Q0);
OQQCOC00Q0.OOC000Q0Q0;
if O0C00CQCQ0<>nil then
OCOCOC00Q0.OCQQOQ00Q0(OQQCOC00Q0,OOCCOC00Q0.OCQOQOQ0Q0,O0C00CQCQ0.OOCQQOQ0Q0);
OCOCOC00Q0.O0Q0CC00Q0(OQQCOC00Q0);
OOQCOC00Q0.O0QOQ0O0Q0(OQQCOC00Q0);
OCQCOC00Q0:=OCOQ0OQ0Q0;
end;
procedure O0QC0CQCQ0.OQ0QCCQCQ0(OC0QCCQCQ0:OCQC00Q0Q0);
var
O0OQCCQCQ0:OO0CCOQ0Q0;
OOOQCCQCQ0:OOCCCQQ0Q0;
OQOQCCQCQ0:integer;
OCOQCCQCQ0:TBytes;
O0QQCCQCQ0,OOQQCCQCQ0:OC000CO0Q0;
OQQQCCQCQ0:O00O0CO0Q0;
OCQQCCQCQ0,O0CQCCQCQ0,
OOCQCCQCQ0:boolean;
OQCQCCQCQ0:OQQ0OQO0Q0;
OCCQCCQCQ0:OC0QQQQ0Q0;
O00CCCQCQ0:boolean;
OO0CCCQCQ0:OO0QO0QOQ0;
OQ0CCCQCQ0:integer;
begin
if O0QCOC00Q0.OCOOOCO0Q0=nil then
raise EScError.Create(seInvalidInputArgs);
OOO0OC00Q0:=False;
O0OO0C00Q0:=True;
O0OQCCQCQ0.OQ0CCOQ0Q0:=OC0QCCQCQ0.O00CC0Q0Q0;
O0OQCCQCQ0.OC0CCOQ0Q0:=OC0QCCQCQ0.O00CC0Q0Q0;
OOOQCCQCQ0:=O0OCCOQ0Q0.O0CCCOQ0Q0(O0OQCCQCQ0);
if O0OQCCQCQ0.OQ0CCOQ0Q0<3 then
OOC00C00Q0(OO0O0OQ0Q0,seNotAgreeOnProtocol);
OC0QCCQCQ0.OCOCC0Q0Q0(O0CCOC00Q0,32,32);
if MemCompare(@O0CCOC00Q0[32],@OOQQO0Q0Q0[0],32)=0 then begin
if OOQC0CQCQ0 then
OOC00C00Q0(O0000OQ0Q0,seUnexpectedPacketType)
else
OOQC0CQCQ0:=True;
end
else
OOQC0CQCQ0:=False;
OQOQCCQCQ0:=OC0QCCQCQ0.O00CC0Q0Q0;
if OQOQCCQCQ0>32 then
raise EScError.Create(seInvalidMessage);
OCOQCCQCQ0:=OC0QCCQCQ0.OOOCC0Q0Q0(OQOQCCQCQ0);
OCCQCCQCQ0:=OC0OO0Q0Q0.O0OOO0Q0Q0(OC0QCCQCQ0.OO0CC0Q0Q0);
O00CCCQCQ0:=False;
for OQ0CCCQCQ0:=0 to Length(O0QCOC00Q0.OOO0OCO0Q0)-1 do begin
if OCCQCCQCQ0=O0QCOC00Q0.OOO0OCO0Q0[OQ0CCCQCQ0]then begin
O00CCCQCQ0:=True;
break;
end;
end;
if not O00CCCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seVerifyEncAlgFailed);
OO0CCCQCQ0:=OOO0COQ0Q0.OQO0COQ0Q0(OC0QCCQCQ0.O00CC0Q0Q0);
if(O0QCOC00Q0.OQO0OCO0Q0<>OCCOQOQOQ0)and(O0QCOC00Q0.OQO0OCO0Q0<>OO0CCCQCQ0)then
OOC00C00Q0(OCQ00OQ0Q0,seVerifyCompressAlgFailed);
if not O000OC00Q0 then begin
OOCCOC00Q0.OOOOQOQ0Q0:=OCCQCCQCQ0;
OOCCOC00Q0.OQOOQOQ0Q0:=OO0CCCQCQ0;
OOCCOC00Q0.OOQOQOQ0Q0:=O0QCOC00Q0.OCQOOCO0Q0;
end
else begin
if OOCCOC00Q0.OOOOQOQ0Q0<>OCCQCCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seVerifyEncAlgFailed);
if OOCCOC00Q0.OQOOQOQ0Q0<>OO0CCCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seVerifyCompressAlgFailed);
end;
OCQQCCQCQ0:=False;
OQQQCCQCQ0:=O00O0CO0Q0(O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(O00O0CO0Q0));
O0QCOC00Q0.OCOOOCO0Q0.Clear;
if OC0QCCQCQ0.OOCCC0Q0Q0>0 then begin
try
O0QCOC00Q0.OCOOOCO0Q0.O0OCQ0Q0Q0(OC0QCCQCQ0,OOOQOOQ0Q0);
except
on E:EScError do begin
if E.ErrorCode=seInvalidMessage then
OOC00C00Q0(OQC00OQ0Q0,seInvalidMessage)
else
OOC00C00Q0(OCQ00OQ0Q0,E.ErrorCode);
end
else
OOC00C00Q0(OQC00OQ0Q0,seInvalidMessage);
end;
O0CQCCQCQ0:=False;
OOCQCCQCQ0:=False;
for OQ0CCCQCQ0:=0 to O0QCOC00Q0.OCOOOCO0Q0.Count-1 do begin
OOQQCCQCQ0:=O0QCOC00Q0.OCOOOCO0Q0.OOQ0Q0Q0Q0[OQ0CCCQCQ0];
if OOQQCCQCQ0.ClassType=O0C00CO0Q0 then
raise EScError.CreateFmt(SUnknownExtensionClass,[IntToStr(O0C00CO0Q0(OOQQCCQCQ0).OCC00CO0Q0)],seUnknownExtensionClass)
else
if(OOQQCCQCQ0.ClassType=OO00CCO0Q0)or
(OOQQCCQCQ0.ClassType=OQ0OCCO0Q0)or
(OOQQCCQCQ0.ClassType=OOC0OQO0Q0)
then
raise EScError.CreateFmt(SUnsupportedExtension,[OOQQCCQCQ0.ClassName],seUnsupportedExtension)
else
if OOQQCCQCQ0.ClassType=OQQ0OQO0Q0 then begin
if OOQC0CQCQ0 then begin
OQCQCCQCQ0:=OQQ0OQO0Q0(O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(OQQ0OQO0Q0));
if OQCQCCQCQ0=nil then begin
OQCQCCQCQ0:=OQQ0OQO0Q0.Create;
OQCQCCQCQ0.Assign(OOQQCCQCQ0);
O0QCOC00Q0.OQOOOCO0Q0.OO0QQ0Q0Q0(OQCQCCQCQ0);
end
else
raise EScError.Create(seCookiesInInitialClientHello);
end
else
raise EScError.CreateFmt(SUnsupportedExtension,[OOQQCCQCQ0.ClassName],seUnsupportedExtension)
end
else begin
O0QQCCQCQ0:=O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(OCQ00CO0Q0(OOQQCCQCQ0.ClassType));
if O0QQCCQCQ0=nil then
raise EScError.CreateFmt(SUnsupportedExtension,[OOQQCCQCQ0.ClassName],seUnsupportedExtension);
if OOQQCCQCQ0.ClassType=OQ00OQO0Q0 then begin
if not(OOOQCCQCQ0 in[OQQCCQQ0Q0,OCQCCQQ0Q0])then
raise EScError.CreateFmt(SUnsupportedExtension,[IntToStr(OCC0OQO0Q0[OQQC0CO0Q0])],seUnsupportedExtension);
if OQ00OQO0Q0(OOQQCCQCQ0).O0Q0OQO0Q0<>OCQCCQQ0Q0 then
raise EScError.Create(seWrongExtensionData);
OOOQCCQCQ0:=OCQCCQQ0Q0;
end
else
if OOQQCCQCQ0.ClassType=OOCCCCO0Q0 then
OC00OC00Q0:=True
else
if OOQQCCQCQ0.ClassType=OQ0CCCO0Q0 then begin
if OOCQCCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seWrongExtensionData);
if OQ0CCCO0Q0(O0QQCCQCQ0).OOOCCCO0Q0<>OQ0CCCO0Q0(OOQQCCQCQ0).OOOCCCO0Q0 then
OOC00C00Q0(OCQ00OQ0Q0,seWrongExtensionData);
OOQCOC00Q0.OOOQOC00Q0:=OQ0CCCO0Q0(OOQQCCQCQ0).OQOCCCO0Q0;
O0CQCCQCQ0:=True;
end
else
if OOQQCCQCQ0.ClassType=OCOCCCO0Q0 then begin
if O0CQCCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seWrongExtensionData);
OOQCOC00Q0.OOOQOC00Q0:=OCOCCCO0Q0(OOQQCCQCQ0).O0CCCCO0Q0;
OOCQCCQCQ0:=True;
end
else
if OOQQCCQCQ0.ClassType=O00O0CO0Q0 then begin
OCQQCCQCQ0:=True;
Assert(OQQQCCQCQ0<>nil);
OQQQCCQCQ0.OCQO0CO0Q0(O00O0CO0Q0(OOQQCCQCQ0));
end;
end;
end;
end;
OOQ0OC00Q0(OOOQCCQCQ0);
if O0C00C00Q0=OCQCCQQ0Q0 then begin
if OCQQCCQCQ0 then
raise EScError.Create(seRenegotiationDenied);
if(Length(OOCCOC00Q0.OQQOQOQ0Q0)<>Length(OCOQCCQCQ0))or(CompareBuf(OOCCOC00Q0.OQQOQOQ0Q0,OCOQCCQCQ0,Length(OCOQCCQCQ0))<>0)then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalSessionIDParameter);
OQ00OC00Q0:=O0QCOC00Q0.OCOOOCO0Q0.OOCCQ0Q0Q0(OO0QOQO0Q0)<>nil;
if OOCCOC00Q0.O0OOQOQ0Q0 and not OQ00OC00Q0 then
O000OC00Q0:=False;
end
else begin
OOCCOC00Q0.OQQOQOQ0Q0:=OCOQCCQCQ0;
OOQC0CQCQ0:=False;
if O000OC00Q0 and(OOCCOC00Q0.O0COQOQ0Q0<>OC00OC00Q0)then
raise EScError.CreateFmt(SUnsupportedExtension,[OOCCCCO0Q0.ClassName],seUnsupportedExtension);
OOCCOC00Q0.O0COQOQ0Q0:=OC00OC00Q0;
if(OQQQCCQCQ0<>nil)and OQQQCCQCQ0.OOOQCCO0Q0 and
not OCQQCCQCQ0 then
raise EScError.Create(seRenegotiationDenied);
end;
if not O000OC00Q0 then
OOCCOC00Q0.OCOOQOQ0Q0:=O0C00C00Q0
else
if OOCCOC00Q0.OCOOQOQ0Q0<>O0C00C00Q0 then
OOC00C00Q0(OCQ00OQ0Q0,seNotAgreeOnProtocol);
if not OOQC0CQCQ0 then begin
if(OCQCCQQ0Q0 in O0QCOC00Q0.OCO0OCO0Q0)and(O0C00C00Q0<>OCQCCQQ0Q0)then begin
if MemCompare(@O0CCOC00Q0[32+24],@O0QQO0Q0Q0[0],8)=0 then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalRandomParameter);
if MemCompare(@O0CCOC00Q0[32+24],@OCOQO0Q0Q0[0],8)=0 then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalRandomParameter);
end
else
if(OQQCCQQ0Q0 in O0QCOC00Q0.OCO0OCO0Q0)and(O0C00C00Q0<>OQQCCQQ0Q0)and(O0C00C00Q0<>OCQCCQQ0Q0)then begin
if MemCompare(@O0CCOC00Q0[32+24],@OCOQO0Q0Q0[0],8)=0 then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalRandomParameter);
end;
end;
if not(O0C00C00Q0 in OO0C00Q0Q0[OOCCOC00Q0.OOOOQOQ0Q0].SupportedProtocols)then
raise EScError.Create(seInvalidCipherAlgorithm);
if(O0C00C00Q0=OCQCCQQ0Q0)and not O000OC00Q0 then begin
OCOCOC00Q0.OC0OCC00Q0;
OCOCOC00Q0.O0OOCC00Q0(nil);
if OOQC0CQCQ0 then
OCOCOC00Q0.OCC0CC00Q0;
end;
O000OC00Q0:=True;
end;
procedure O0QC0CQCQ0.OC0CCCQCQ0;
var
O0OCCCQCQ0:OQ0QQCO0Q0;
OOOCCCQCQ0,OQOCCCQCQ0:OQOCQCO0Q0;
OCOCCCQCQ0:OCCOQQQ0Q0;
O0QCCCQCQ0:boolean;
OOQCCCQCQ0:integer;
begin
OOOCCCQCQ0:=OQOCQCO0Q0(O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(OQOCQCO0Q0));
OQOCCCQCQ0:=OQOCQCO0Q0(O0QCOC00Q0.OCOOOCO0Q0.OOCCQ0Q0Q0(OQOCQCO0Q0));
if(OOOCCCQCQ0=nil)or(OQOCCCQCQ0=nil)or(OQOCCCQCQ0.O0OOQCO0Q0<>1)then
OOC00C00Q0(OCQ00OQ0Q0,seVerifyKeyExAlgFailed);
O0OCCCQCQ0:=OQ0QQCO0Q0(O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(OQ0QQCO0Q0));
if O0OCCCQCQ0=nil then
OOC00C00Q0(OCQ00OQ0Q0,seVerifyKeyExAlgFailed);
OCOCCCQCQ0:=OQOCCCQCQ0.OOOOQCO0Q0[0];
O0QCCCQCQ0:=False;
for OOQCCCQCQ0:=0 to O0OCCCQCQ0.OQCQQCO0Q0-1 do begin
if O0OCCCQCQ0.OCCQQCO0Q0[OOQCCCQCQ0]=OCOCCCQCQ0 then begin
O0QCCCQCQ0:=True;
Break;
end;
end;
if not O0QCCCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seVerifyKeyExAlgFailed);
for OOQCCCQCQ0:=0 to OOOCCCQCQ0.O0OOQCO0Q0-1 do begin
if OOOCCCQCQ0.OOOOQCO0Q0[OOQCCCQCQ0]=OCOCCCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seVerifyKeyExAlgFailed);
end;
O0OCCCQCQ0.OOCQQCO0Q0;
O0OCCCQCQ0.OOQQQCO0Q0(OCOCCCQCQ0);
OOOCCCQCQ0.OO0OQCO0Q0;
OOOCCCQCQ0.OQC0QCO0Q0(OCOCCCQCQ0);
end;
procedure O0QC0CQCQ0.OQQCCCQCQ0;
var
OCQCCCQCQ0,O0CCCCQCQ0:OQOCQCO0Q0;
OOCCCCQCQ0:OCCOQQQ0Q0;
OQCCCCQCQ0:OCCCQQQ0Q0;
OCCCCCQCQ0:O0CQOOC0Q0;
O000CCQCQ0,OO00CCQCQ0:OOCOCO0OQ0;
OQ00CCQCQ0,OC00CCQCQ0,O0O0CCQCQ0:TBigInteger;
OOO0CCQCQ0:TBytes;
OQO0CCQCQ0:TBigInteger;
OCO0CCQCQ0,O0Q0CCQCQ0:integer;
begin
OCQCCCQCQ0:=OQOCQCO0Q0(O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(OQOCQCO0Q0));
O0CCCCQCQ0:=OQOCQCO0Q0(O0QCOC00Q0.OCOOOCO0Q0.OOCCQ0Q0Q0(OQOCQCO0Q0));
if(OCQCCCQCQ0=nil)or(O0CCCCQCQ0=nil)or(O0CCCCQCQ0.O0OOQCO0Q0<>1)then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalKeyShareParameters);
OOCCCCQCQ0:=O0CCCCQCQ0.OOOOQCO0Q0[0];
OCO0CCQCQ0:=0;
while OCO0CCQCQ0<OCQCCCQCQ0.O0OOQCO0Q0 do begin
if OCQCCCQCQ0.OOOOQCO0Q0[OCO0CCQCQ0]=OOCCCCQCQ0 then
Break;
Inc(OCO0CCQCQ0);
end;
if OCO0CCQCQ0=OCQCCCQCQ0.O0OOQCO0Q0 then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalKeyShareParameters);
if integer(OOCCCCQCQ0)<=integer(High(OOQOQOQOQ0))then begin
OCCCCCQCQ0:=OCQCCCQCQ0.OQOOQCO0Q0[OCO0CCQCQ0];
O000CCQCQ0:=O0CCCCQCQ0.OCOOQCO0Q0[0];
if(OCCCCCQCQ0=nil)or(O000CCQCQ0=nil)then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalKeyShareParameters);
OO00CCQCQ0:=OCCCCCQCQ0.OCQOOCQ0Q0.OOQQQO0OQ0.O0O0CO0OQ0(O000CCQCQ0,OCCCCCQCQ0.OCQOOCQ0Q0.OCQQQO0OQ0);
try
if OO00CCQCQ0 is O00QQO0OQ0 then
OOO0CCQCQ0:=O00QQO0OQ0(OO00CCQCQ0).OO0QQO0OQ0.GetBytes(OCCCCCQCQ0.OCQOOCQ0Q0.OOQQQO0OQ0.OOOOCO0OQ0)
else
if OO00CCQCQ0 is OOOQQO0OQ0 then begin
SetLength(OOO0CCQCQ0,32);
Move(OOOQQO0OQ0(OO00CCQCQ0).OQOQQO0OQ0[0],OOO0CCQCQ0[0],32);
O0Q0CCQCQ0:=0;
while(O0Q0CCQCQ0<32)and(OOO0CCQCQ0[O0Q0CCQCQ0]=0)do
Inc(O0Q0CCQCQ0);
if O0Q0CCQCQ0=32 then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalKeyShareParameters);
end
else
Assert(False);
finally
OO00CCQCQ0.Free;
end;
end
else begin
OQCCCCQCQ0:=OCCCQQQ0Q0(integer(OOCCCCQCQ0)-integer(High(OOQOQOQOQ0))-1);
OC00CCQCQ0:=OCQCCCQCQ0.O0QOQCO0Q0[OCO0CCQCQ0];
OQ00CCQCQ0:=O0CCCCQCQ0.OOQOQCO0Q0[0];
if(OQ00CCQCQ0=nil)or(OC00CCQCQ0=nil)then
OOC00C00Q0(OCQ00OQ0Q0,seIllegalKeyShareParameters);
OQO0CCQCQ0:=OCQQO0Q0Q0(OQCCCCQCQ0);
if(OQ00CCQCQ0.BitCount<=1)or OQ00CCQCQ0.GreaterOrEqual(OQO0CCQCQ0)then
OOC00C00Q0(OCQ00OQ0Q0,seWrongExtensionData);
O0O0CCQCQ0:=OQ00CCQCQ0.ModPow(OC00CCQCQ0,OQO0CCQCQ0);
try
OOO0CCQCQ0:=O0O0CCQCQ0.GetBytes(OQO0CCQCQ0.BitCount shr 3);
finally
O0O0CCQCQ0.Free;
end;
end;
OCOCOC00Q0.OQOOCC00Q0(OOO0CCQCQ0);
FillChar(OOO0CCQCQ0[0],Length(OOO0CCQCQ0),0);
OOC0OC00Q0(OOQC0Q00Q0);
end;
procedure O0QC0CQCQ0.OOQ0CCQCQ0(OQQ0CCQCQ0:OCQC00Q0Q0);
var
OCQ0CCQCQ0,O0C0CCQCQ0:OC000CO0Q0;
OOC0CCQCQ0,OQC0CCQCQ0:boolean;
OCC0CCQCQ0:integer;
begin
try
O0QCOC00Q0.OCOOOCO0Q0.O0OCQ0Q0Q0(OQQ0CCQCQ0,OOOQOOQ0Q0);
except
OOC00C00Q0(OCQ00OQ0Q0,seWrongExtensionData);
end;
OOC0CCQCQ0:=False;
OQC0CCQCQ0:=False;
for OCC0CCQCQ0:=0 to O0QCOC00Q0.OCOOOCO0Q0.Count-1 do begin
O0C0CCQCQ0:=O0QCOC00Q0.OCOOOCO0Q0.OOQ0Q0Q0Q0[OCC0CCQCQ0];
if O0C0CCQCQ0.ClassType=O0C00CO0Q0 then
raise EScError.CreateFmt(SUnknownExtensionClass,[IntToStr(O0C00CO0Q0(O0C0CCQCQ0).OCC00CO0Q0)],seUnknownExtensionClass)
else begin
OCQ0CCQCQ0:=O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(OCQ00CO0Q0(O0C0CCQCQ0.ClassType));
if OCQ0CCQCQ0=nil then
raise EScError.CreateFmt(SUnsupportedExtension,[O0C0CCQCQ0.ClassName],seUnsupportedExtension);
if O0C0CCQCQ0.ClassType=OQ0CCCO0Q0 then begin
if OQC0CCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seWrongExtensionData);
if OQ0CCCO0Q0(OCQ0CCQCQ0).OOOCCCO0Q0<>OQ0CCCO0Q0(O0C0CCQCQ0).OOOCCCO0Q0 then
OOC00C00Q0(OCQ00OQ0Q0,seWrongExtensionData);
OOQCOC00Q0.OOOQOC00Q0:=OQ0CCCO0Q0(O0C0CCQCQ0).OQOCCCO0Q0;
OOC0CCQCQ0:=True;
end
else
if O0C0CCQCQ0.ClassType=OCOCCCO0Q0 then begin
if OOC0CCQCQ0 then
OOC00C00Q0(OCQ00OQ0Q0,seWrongExtensionData);
OOQCOC00Q0.OOOQOC00Q0:=OCOCCCO0Q0(O0C0CCQCQ0).O0CCCCO0Q0;
OQC0CCQCQ0:=True;
end;
end;
end;
end;
procedure O0QC0CQCQ0.O00OCCQCQ0(OO0OCCQCQ0:OCQC00Q0Q0);
var
OQ0OCCQCQ0:OC000O0OQ0;
OC0OCCQCQ0:OOQOQOQOQ0;
O0OOCCQCQ0:integer;
OOOOCCQCQ0:integer;
begin
if not(OOCCOC00Q0.OOOOQOQ0Q0 in OOOCOOQ0Q0)and not(OOCCOC00Q0.OOOOQOQ0Q0 in OQOCOOQ0Q0)then
raise EScError.Create(seErrorServerKeyExchangeNonExportable);
if OCCCOC00Q0=nil then
raise EScError.Create(seServerCertificateNotReceived);
if OOCCOC00Q0.OOOOQOQ0Q0 in OOOCOOQ0Q0 then begin
FreeAndNil(O0CC0CQCQ0.OOQC0O0OQ0);
FreeAndNil(O0CC0CQCQ0.OQQC0O0OQ0);
FreeAndNil(O0CC0CQCQ0.OCQC0O0OQ0);
O0OOCCQCQ0:=O0QCOC00Q0.O0COOCO0Q0 div 8;
OOOOCCQCQ0:=OO0OCCQCQ0.OO0CC0Q0Q0;
if OOOOCCQCQ0<O0OOCCQCQ0 then
raise EScError.Create(seErrorDiffieHelmanKeyLength);
O0CC0CQCQ0.OOQC0O0OQ0:=TBigInteger.Create(OO0OCCQCQ0.OCCCC0Q0Q0,OO0OCCQCQ0.OO00C0Q0Q0,OOOOCCQCQ0);
OO0OCCQCQ0.OCQCC0Q0Q0(OOOOCCQCQ0);
OOOOCCQCQ0:=OO0OCCQCQ0.OO0CC0Q0Q0;
O0CC0CQCQ0.OQQC0O0OQ0:=TBigInteger.Create(OO0OCCQCQ0.OCCCC0Q0Q0,OO0OCCQCQ0.OO00C0Q0Q0,OOOOCCQCQ0);
OO0OCCQCQ0.OCQCC0Q0Q0(OOOOCCQCQ0);
OOOOCCQCQ0:=OO0OCCQCQ0.OO0CC0Q0Q0;
if OOOOCCQCQ0<O0OOCCQCQ0 then
raise EScError.Create(seErrorDiffieHelmanKeyLength);
O0CC0CQCQ0.OCQC0O0OQ0:=TBigInteger.Create(OO0OCCQCQ0.OCCCC0Q0Q0,OO0OCCQCQ0.OO00C0Q0Q0,OOOOCCQCQ0);
OO0OCCQCQ0.OCQCC0Q0Q0(OOOOCCQCQ0);
end
else
if OOCCOC00Q0.OOOOQOQ0Q0 in OQOCOOQ0Q0 then begin
if OO0OCCQCQ0.O00CC0Q0Q0<>OC0C00Q0Q0[O0QCQQQ0Q0]then
raise EScError.Create(seECurveDomainTypeNotSupported);
OC0OCCQCQ0:=OC0OO0Q0Q0.OQOQ00Q0Q0(OO0OCCQCQ0.OO0CC0Q0Q0);
if OC0OCCQCQ0=OCCCQOQOQ0 then
OOOOCCQCQ0:=OQ0C00Q0Q0[OC0OCCQCQ0].Size
else
OOOOCCQCQ0:=OQ0C00Q0Q0[OC0OCCQCQ0].Size*2+1;
if OO0OCCQCQ0.O00CC0Q0Q0<>OOOOCCQCQ0 then
raise EScError.Create(seInvalidMessage);
if OO0OCCQCQ0.OOCCC0Q0Q0<OOOOCCQCQ0 then
raise EScError.Create(seInvalidMessage);
FreeAndNil(OOCC0CQCQ0);
OOCC0CQCQ0:=O0CQOOC0Q0.Create(nil);
OOCC0CQCQ0.OQ00OCQ0Q0(OC0OCCQCQ0);
OQCC0CQCQ0:=OOCC0CQCQ0.OCQOOCQ0Q0.OOQQQO0OQ0.OCO0CO0OQ0(OO0OCCQCQ0.OCCCC0Q0Q0,OO0OCCQCQ0.OO00C0Q0Q0,OOOOCCQCQ0);
OO0OCCQCQ0.OCQCC0Q0Q0(OOOOCCQCQ0);
end
else begin
FillChar(OQ0OCCQCQ0,SizeOf(OQ0OCCQCQ0),0);
OOOOCCQCQ0:=OO0OCCQCQ0.OO0CC0Q0Q0;
OQ0OCCQCQ0.OCQ00O0OQ0:=TBigInteger.Create(OO0OCCQCQ0.OCCCC0Q0Q0,OO0OCCQCQ0.OO00C0Q0Q0,OOOOCCQCQ0);
OO0OCCQCQ0.OCQCC0Q0Q0(OOOOCCQCQ0);
OOOOCCQCQ0:=OO0OCCQCQ0.OO0CC0Q0Q0;
OQ0OCCQCQ0.OQQ00O0OQ0:=TBigInteger.Create(OO0OCCQCQ0.OCCCC0Q0Q0,OO0OCCQCQ0.OO00C0Q0Q0,OOOOCCQCQ0);
OO0OCCQCQ0.OCQCC0Q0Q0(OOOOCCQCQ0);
FreeAndNil(OCQC0CQCQ0);
OCQC0CQCQ0:=O0CQOOC0Q0.Create(nil);
O00OOQQ0Q0.OQOOOQQ0Q0(OCQC0CQCQ0,OQ0OCCQCQ0);
if OCQC0CQCQ0.OCOOOCQ0Q0<1024 then
raise EScError.Create(seErrorServerKeyExchangePublicKey);
end;
OCOCOC00Q0.OOQ0QC00Q0(OO0OCCQCQ0,OCCCOC00Q0);
end;
procedure O0QC0CQCQ0.OQOO0CQCQ0;
var
OCOO0CQCQ0,O0QO0CQCQ0:TBytes;
OOQO0CQCQ0:integer;
OQQO0CQCQ0:TBytes;
OCQO0CQCQ0,O0CO0CQCQ0,OOCO0CQCQ0:TBigInteger;
OQCO0CQCQ0:OOCOCO0OQ0;
OCCO0CQCQ0:OO0CCOQ0Q0;
O00QCCQCQ0:O0CQOOC0Q0;
OO0QCCQCQ0:integer;
begin
SetLength(O0QO0CQCQ0,0);
OQQCOC00Q0.OCQ000Q0Q0(OO0C0OQ0Q0);
if OOCCOC00Q0.OOOOQOQ0Q0 in OOOCOOQ0Q0 then begin
OCQO0CQCQ0:=nil;
O0CO0CQCQ0:=nil;
OOCO0CQCQ0:=nil;
try
OOQO0CQCQ0:=(O0CC0CQCQ0.OOQC0O0OQ0.BitCount+7)shr 3;
if O0CC0CQCQ0.OOQC0O0OQ0.BitCount>=2048 then
SetLength(OCOO0CQCQ0,128)
else
SetLength(OCOO0CQCQ0,64);
repeat
OQOCOC00Q0.Random(OCOO0CQCQ0,0,Length(OCOO0CQCQ0));
if OCOO0CQCQ0[0]>$7F then
OCOO0CQCQ0[0]:=OCOO0CQCQ0[0]div 2;
if OCOO0CQCQ0[0]=0 then
OCOO0CQCQ0[0]:=1;
FreeAndNil(OCQO0CQCQ0);
OCQO0CQCQ0:=TBigInteger.Create(OCOO0CQCQ0);
FreeAndNil(O0CO0CQCQ0);
O0CO0CQCQ0:=O0CC0CQCQ0.OQQC0O0OQ0.ModPow(OCQO0CQCQ0,O0CC0CQCQ0.OOQC0O0OQ0);
FreeAndNil(OOCO0CQCQ0);
OOCO0CQCQ0:=O0CC0CQCQ0.OCQC0O0OQ0.ModPow(OCQO0CQCQ0,O0CC0CQCQ0.OOQC0O0OQ0);
OQQO0CQCQ0:=OOCO0CQCQ0.GetBytes;
until Length(OQQO0CQCQ0)=OOQO0CQCQ0;
O0QO0CQCQ0:=O0CO0CQCQ0.GetBytes(OOQO0CQCQ0);
OQQCOC00Q0.OOOO00Q0Q0(O0QO0CQCQ0);
finally
FillChar(OCOO0CQCQ0[0],Length(OCOO0CQCQ0),0);
OCQO0CQCQ0.Free;
O0CO0CQCQ0.Free;
OOCO0CQCQ0.Free;
end;
end
else
if OOCCOC00Q0.OOOOQOQ0Q0 in OQOCOOQ0Q0 then begin
Assert(OOCC0CQCQ0<>nil);
O0QO0CQCQ0:=OOCC0CQCQ0.OCQOOCQ0Q0.OOQQQO0OQ0.OCQ0CO0OQ0(OOCC0CQCQ0.OCQOOCQ0Q0.OQQQQO0OQ0);
OQQCOC00Q0.OQ0O00Q0Q0(O0QO0CQCQ0);
OQCO0CQCQ0:=nil;
try
OQCO0CQCQ0:=OOCC0CQCQ0.OCQOOCQ0Q0.OOQQQO0OQ0.O0O0CO0OQ0(OQCC0CQCQ0,OOCC0CQCQ0.OCQOOCQ0Q0.OCQQQO0OQ0);
if OQCO0CQCQ0 is O00QQO0OQ0 then
OQQO0CQCQ0:=O00QQO0OQ0(OQCO0CQCQ0).OO0QQO0OQ0.GetBytes(OOCC0CQCQ0.OCQOOCQ0Q0.OOQQQO0OQ0.OOOOCO0OQ0)
else
if OQCO0CQCQ0 is OOOQQO0OQ0 then begin
SetLength(OQQO0CQCQ0,32);
Move(OOOQQO0OQ0(OQCO0CQCQ0).OQOQQO0OQ0[0],OQQO0CQCQ0[0],32);
OO0QCCQCQ0:=0;
while(OO0QCCQCQ0<32)and(OQQO0CQCQ0[OO0QCCQCQ0]=0)do
Inc(OO0QCCQCQ0);
if OO0QCCQCQ0=32 then
raise EScError.Create(seIllegalKeyShareParameters);
end
else
Assert(False);
finally
OQCO0CQCQ0.Free;
end;
end
else begin
SetLength(OQQO0CQCQ0,48);
OQOCOC00Q0.Random(OQQO0CQCQ0,0,Length(OQQO0CQCQ0));
OCCO0CQCQ0:=O0OCCOQ0Q0.OCCCCOQ0Q0(O0OCCOQ0Q0.OC00COQ0Q0(O0QCOC00Q0.OCO0OCO0Q0));
OQQO0CQCQ0[0]:=OCCO0CQCQ0.OQ0CCOQ0Q0;
OQQO0CQCQ0[1]:=OCCO0CQCQ0.OC0CCOQ0Q0;
if OCQC0CQCQ0=nil then
if OCCCOC00Q0=nil then
raise EScError.Create(seServerCertificateNotReceived)
else
O00QCCQCQ0:=OCCCOC00Q0.Key
else
O00QCCQCQ0:=OCQC0CQCQ0;
O0QO0CQCQ0:=O00QCCQCQ0.O00OOCQ0Q0(OQQO0CQCQ0);
if O0C00C00Q0=O0CCCQQ0Q0 then
OQQCOC00Q0.OQC000Q0Q0(O0QO0CQCQ0)
else
OQQCOC00Q0.OOOO00Q0Q0(O0QO0CQCQ0);
end;
OQQCOC00Q0.OOC000Q0Q0;
OCOCOC00Q0.O0Q0CC00Q0(OQQCOC00Q0);
OOQCOC00Q0.O0QOQ0O0Q0(OQQCOC00Q0);
OCOCOC00Q0.O0COCC00Q0(OQQO0CQCQ0);
FillChar(OQQO0CQCQ0[0],Length(OQQO0CQCQ0),0);
end;
procedure O0QC0CQCQ0.OQOOCCQCQ0(OCOOCCQCQ0:OCQC00Q0Q0);
var
O0QOCCQCQ0:OC0Q00OOQ0;
begin
O0QOCCQCQ0:=OCOCOC00Q0.OCOQQC00Q0(OCOOCCQCQ0);
try
OQCCOC00Q0.Clear;
if(O0QOCCQCQ0<>nil)and Assigned(O0QCOC00Q0.O0Q0OCO0Q0)then
O0QCOC00Q0.O0Q0OCO0Q0(O0QOCCQCQ0,OQCCOC00Q0);
finally
O0QOCCQCQ0.Free;
end;
OQQC0CQCQ0:=not OQ00OC00Q0;
end;
procedure O0QC0CQCQ0.OOQOCCQCQ0(OQQOCCQCQ0:OCQC00Q0Q0);
begin
if OQQOCCQCQ0.OOCCC0Q0Q0<>0 then
raise EScError.Create(seInvalidMessage);
OQ00OC00Q0:=False;
end;
procedure O0QC0CQCQ0.OCQOCCQCQ0;
begin
if OQQC0CQCQ0 then
OOQQ0C00Q0(OQCCOC00Q0);
OQOO0CQCQ0;
if OQQC0CQCQ0 and(OQCCOC00Q0.Count>0)then
OCQQ0C00Q0(TScCertificate(OQCCOC00Q0[0]));
OC000C00Q0;
OCO00C00Q0;
if OOQCOC00Q0.OCOQOC00Q0.Mode=cmCBC then
if not O0QCOC00Q0.OCQOOCO0Q0 then
OOQCOC00Q0.OQQOQ0O0Q0(nil,0,OO0Q0OQ0Q0);
end;
procedure O0QC0CQCQ0.O0COCCQCQ0(OOCOCCQCQ0:OCQC00Q0Q0);
var
OQCOCCQCQ0:O00O0CO0Q0;
begin
OQCOCCQCQ0:=O00O0CO0Q0(O0QCOC00Q0.OQOOOCO0Q0.OOCCQ0Q0Q0(O00O0CO0Q0));
if OQCOCCQCQ0<>nil then
OQCOCCQCQ0.OO0QCCO0Q0(OOCOCCQCQ0.OCCCC0Q0Q0,OOCOCCQCQ0.OO00C0Q0Q0,OOCOCCQCQ0.OOCCC0Q0Q0);
OCOCOC00Q0.OCOOQC00Q0(OOCOCCQCQ0.OCCCC0Q0Q0,OOCOCCQCQ0.OO00C0Q0Q0,OOCOCCQCQ0.OOCCC0Q0Q0);
end;
procedure O0QC0CQCQ0.OCCOCCQCQ0;
begin
if O0C00C00Q0=OCQCCQQ0Q0 then begin
OCOCOC00Q0.O0QOCC00Q0;
if not OO00OC00Q0 then
O00QQCQCQ0;
OOC0OC00Q0(OOQC0Q00Q0);
end
else begin
if not OO00OC00Q0 then begin
OC000C00Q0;
OCO00C00Q0;
end;
O0OO0C00Q0:=False;
end;
OQOQ0C00Q0;
if OQQC0CQCQ0 or not OCOQ0C00Q0 then
OOOQ0C00Q0;
end;
procedure O0QC0CQCQ0.O00QQCQCQ0;
begin
if OQQC0CQCQ0 then begin
OOQQ0C00Q0(OQCCOC00Q0);
if OQCCOC00Q0.Count>0 then
OCQQ0C00Q0(TScCertificate(OQCCOC00Q0[0]));
end;
OCO00C00Q0;
O0OO0C00Q0:=False;
OCOCOC00Q0.OOQOCC00Q0;
end;
procedure O0QC0CQCQ0.OC0QQCQCQ0;
begin
O00QQCQCQ0;
OOOQ0C00Q0;
end;
procedure O0QC0CQCQ0.OO0QQCQCQ0(OQ0QQCQCQ0:OCQC00Q0Q0);
begin
if O0C00C00Q0<>OCQCCQQ0Q0 then begin
if O0QCOC00Q0.OCOOOCO0Q0.OOCCQ0Q0Q0(OQCCCCO0Q0)=nil then
raise EScError.Create(seSessionTicketDenied);
end;
OCOCOC00Q0.OCCOQC00Q0(OQ0QQCQCQ0,OOCCOC00Q0);
end;
end.
