//////////////////////////////////////////////////
//  Copyright © 1998-2021 Devart. All right reserved.
//  SMP Protocol
//////////////////////////////////////////////////
{$I Tds.inc}
unit TdsSMPProtocolUni;
interface
uses
{$IFDEF MSWINDOWS}
Windows,
{$ENDIF}
SyncObjs,Classes,SysUtils,Types,TypInfo,
CRTypes,CRFunctions;
resourcestring
SSessionEstablished='Session is established';
SSessionNotEstablished='Session is not established';
SSMIDNotValid='SMID is not valid';
SSIDNotValid='SID is not valid';
SHighWaterForSendNotValid='HighWaterForSend is not valid';
SLengthNotValid='Length is not valid';
SSequenceNotValid='Sequence number is not valid';
SFlagNotValid='Flag is not valid';
SSessionIdNotFound='Session ID is not found';
SInvalidDataCallbacks='Invalid data callback methods';
SNumberOfOpenSessionsExceeded='The number of open sessions for the connection is exceeded';
type
OC00OCQOQ0=function(O0O0OCQOQ0:Pointer;OOO0OCQOQ0,OQO0OCQOQ0:integer):integer of object;
OCO0OCQOQ0=function(O0Q0OCQOQ0:Pointer;OOQ0OCQOQ0,OQQ0OCQOQ0:integer):integer of object;
OCQ0OCQOQ0=class(Exception)
end;
O00OOCQOQ0=(O0C0OCQOQ0,OOC0OCQOQ0,OQC0OCQOQ0,OCC0OCQOQ0);
OO0OOCQOQ0=class;
OCCC0CQOQ0=packed record
O0000CQOQ0:byte;
OO000CQOQ0:byte;
OQ000CQOQ0:word;
OC000CQOQ0:cardinal;
O0O00CQOQ0:cardinal;
OOO00CQOQ0:cardinal;
end;
OQO00CQOQ0=^OCCC0CQOQ0;
OCO00CQOQ0=class
O0Q00CQOQ0:TBytes;
OOQ00CQOQ0:integer;
constructor Create(OCQ00CQOQ0:integer);
end;
O0C00CQOQ0=class
private
{$IFDEF AUTOREFCOUNT}[weak]{$ENDIF}
OOC00CQOQ0:OO0OOCQOQ0;
OQC00CQOQ0:cardinal;
OCC00CQOQ0:cardinal;
O00O0CQOQ0:cardinal;
OO0O0CQOQ0:cardinal;
OQ0O0CQOQ0:cardinal;
OC0O0CQOQ0:O00OOCQOQ0;
O0OO0CQOQ0:word;
OOOO0CQOQ0:TBytes;
OQOO0CQOQ0:TCRObjectList;
OCOO0CQOQ0:Pointer;
O0QO0CQOQ0:integer;
OOQO0CQOQ0:integer;
protected
procedure OQQO0CQOQ0(OCQO0CQOQ0:OQO00CQOQ0;O0CO0CQOQ0:byte;OOCO0CQOQ0:cardinal=0);
procedure OQCO0CQOQ0;
procedure O00QCCQOQ0(OO0QCCQOQ0:OQO00CQOQ0);
procedure OQ0QCCQOQ0(OC0QCCQOQ0:OQO00CQOQ0);
public
constructor Create(OCOQCCQOQ0:word;O0QQCCQOQ0:OO0OOCQOQ0);
destructor Destroy;override;
procedure OQQQCCQOQ0;
procedure O0CQCCQOQ0;
procedure OQCQCCQOQ0(OOOC0CQOQ0:TValueArr;OQOC0CQOQ0,OCOC0CQOQ0:integer);
function OCCQCCQOQ0(OCQC0CQOQ0:TValueArr;O0CC0CQOQ0,OOCC0CQOQ0:integer):integer;
property OO0CCCQOQ0:word read O0OO0CQOQ0;
property OQ0CCCQOQ0:O00OOCQOQ0 read OC0O0CQOQ0;
end;
OO0OOCQOQ0=class
private
OQ0OOCQOQ0:TCRObjectList;
OC0OOCQOQ0:TCriticalSection;
O0OOOCQOQ0:OC00OCQOQ0;
OOOOOCQOQ0:OCO0OCQOQ0;
function OQOOOCQOQ0(OCOOOCQOQ0:integer):O0C00CQOQ0;
protected
procedure OOQOOCQOQ0(OQQOOCQOQ0:Pointer;OCQOOCQOQ0:integer);
procedure O0COOCQOQ0(OOCOOCQOQ0:Pointer;OQCOOCQOQ0:integer);
procedure OO0Q0CQOQ0;
procedure O0OQ0CQOQ0(OOOQ0CQOQ0:O0C00CQOQ0);
public
constructor Create(OCOQ0CQOQ0:OC00OCQOQ0;O0QQ0CQOQ0:OCO0OCQOQ0);
destructor Destroy;override;
function OQQQ0CQOQ0:integer;
procedure OQCQ0CQOQ0;
procedure O00C0CQOQ0(OO0C0CQOQ0:integer);
procedure OC0C0CQOQ0(O0OC0CQOQ0:integer;OOOC0CQOQ0:Pointer;OQOC0CQOQ0,OCOC0CQOQ0:integer);
function OOQC0CQOQ0(OQQC0CQOQ0:integer;OCQC0CQOQ0:Pointer;O0CC0CQOQ0,OOCC0CQOQ0:integer):integer;
end;
implementation
const
OC0CCCQOQ0=$53;
O0OCCCQOQ0=16;
OOOCCCQOQ0=1;
OQOCCCQOQ0=2;
OCOCCCQOQ0=4;
O0QCCCQOQ0=8;
OOQCCCQOQ0=2;
constructor OCO00CQOQ0.Create(OCQ00CQOQ0:integer);
begin
inherited Create;
SetLength(O0Q00CQOQ0,OCQ00CQOQ0);
end;
constructor O0C00CQOQ0.Create(OCOQCCQOQ0:word;O0QQCCQOQ0:OO0OOCQOQ0);
begin
inherited Create;
OOC00CQOQ0:=O0QQCCQOQ0;
OQC00CQOQ0:=0;
OCC00CQOQ0:=4;
O00O0CQOQ0:=0;
OO0O0CQOQ0:=4;
OQ0O0CQOQ0:=4;
OC0O0CQOQ0:=OCC0OCQOQ0;
O0OO0CQOQ0:=OCOQCCQOQ0;
OQOO0CQOQ0:=TCRObjectList.Create;
end;
destructor O0C00CQOQ0.Destroy;
begin
OQOO0CQOQ0.Free;
inherited;
end;
procedure O0C00CQOQ0.OQQO0CQOQ0(OCQO0CQOQ0:OQO00CQOQ0;O0CO0CQOQ0:byte;OOCO0CQOQ0:cardinal=0);
begin
if O0CO0CQOQ0=O0QCCCQOQ0 then
Inc(OQC00CQOQ0);
OCQO0CQOQ0.O0000CQOQ0:=OC0CCCQOQ0;
OCQO0CQOQ0.OO000CQOQ0:=O0CO0CQOQ0;
OCQO0CQOQ0.OQ000CQOQ0:=O0OO0CQOQ0;
OCQO0CQOQ0.OC000CQOQ0:=O0OCCCQOQ0+OOCO0CQOQ0;
OCQO0CQOQ0.O0O00CQOQ0:=OQC00CQOQ0;
OCQO0CQOQ0.OOO00CQOQ0:=OO0O0CQOQ0;
OQ0O0CQOQ0:=OO0O0CQOQ0;
end;
procedure O0C00CQOQ0.OQQQCCQOQ0;
var
OCQQCCQOQ0:OCCC0CQOQ0;
begin
if OC0O0CQOQ0<>OCC0OCQOQ0 then
raise OCQ0OCQOQ0.Create(SSessionEstablished);
OQQO0CQOQ0(@OCQQCCQOQ0,OOOCCCQOQ0);
O00QCCQOQ0(@OCQQCCQOQ0);
OC0O0CQOQ0:=O0C0OCQOQ0;
end;
procedure O0C00CQOQ0.O0CQCCQOQ0;
var
OOCQCCQOQ0:OCCC0CQOQ0;
begin
if not(OC0O0CQOQ0 in[O0C0OCQOQ0,OOC0OCQOQ0])then
raise OCQ0OCQOQ0.Create(SSessionNotEstablished);
OQQO0CQOQ0(@OOCQCCQOQ0,OCOCCCQOQ0);
O00QCCQOQ0(@OOCQCCQOQ0);
if OC0O0CQOQ0=OOC0OCQOQ0 then
OC0O0CQOQ0:=OCC0OCQOQ0
else
OC0O0CQOQ0:=OQC0OCQOQ0;
SetLength(OOOO0CQOQ0,0);
end;
procedure O0C00CQOQ0.OQCO0CQOQ0;
var
OCCO0CQOQ0:OCCC0CQOQ0;
begin
if OC0O0CQOQ0<>O0C0OCQOQ0 then
Exit;
if(OO0O0CQOQ0-OQ0O0CQOQ0)>=OOQCCCQOQ0 then begin
OQQO0CQOQ0(@OCCO0CQOQ0,OQOCCCQOQ0);
O00QCCQOQ0(@OCCO0CQOQ0);
end;
end;
procedure O0C00CQOQ0.O00QCCQOQ0(OO0QCCQOQ0:OQO00CQOQ0);
begin
if OO0QCCQOQ0.OO000CQOQ0=O0QCCCQOQ0 then
while OO0QCCQOQ0.O0O00CQOQ0>OCC00CQOQ0 do begin
OOC00CQOQ0.OO0Q0CQOQ0;
if OC0O0CQOQ0<>O0C0OCQOQ0 then
raise OCQ0OCQOQ0.Create(SSessionNotEstablished);
end;
OOC00CQOQ0.OOQOOCQOQ0(OO0QCCQOQ0,OO0QCCQOQ0.OC000CQOQ0);
end;
procedure O0C00CQOQ0.OQCQCCQOQ0(OOOC0CQOQ0:TValueArr;OQOC0CQOQ0,OCOC0CQOQ0:integer);
begin
if OC0O0CQOQ0<>O0C0OCQOQ0 then
raise OCQ0OCQOQ0.Create(SSessionNotEstablished);
if OCOC0CQOQ0<=0 then
Exit;
if(O0OCCCQOQ0+OCOC0CQOQ0)>Length(OOOO0CQOQ0)then
SetLength(OOOO0CQOQ0,O0OCCCQOQ0+OCOC0CQOQ0);
OQQO0CQOQ0(@OOOO0CQOQ0[0],O0QCCCQOQ0,OCOC0CQOQ0);
Move(OOOC0CQOQ0[OQOC0CQOQ0],OOOO0CQOQ0[O0OCCCQOQ0],OCOC0CQOQ0);
O00QCCQOQ0(@OOOO0CQOQ0[0]);
end;
function O0C00CQOQ0.OCCQCCQOQ0(OCQC0CQOQ0:TValueArr;O0CC0CQOQ0,OOCC0CQOQ0:integer):integer;
var
O00CCCQOQ0:OCO00CQOQ0;
begin
if OQOO0CQOQ0.Count>0 then begin
O00CCCQOQ0:=OCO00CQOQ0(OQOO0CQOQ0[OQOO0CQOQ0.Count-1]);
Result:=Length(O00CCCQOQ0.O0Q00CQOQ0)-O00CCCQOQ0.OOQ00CQOQ0;
if Result>OOCC0CQOQ0 then begin
Result:=OOCC0CQOQ0;
Move(O00CCCQOQ0.O0Q00CQOQ0[O00CCCQOQ0.OOQ00CQOQ0],OCQC0CQOQ0[O0CC0CQOQ0],Result);
Inc(O00CCCQOQ0.OOQ00CQOQ0,Result);
end
else begin
Move(O00CCCQOQ0.O0Q00CQOQ0[O00CCCQOQ0.OOQ00CQOQ0],OCQC0CQOQ0[O0CC0CQOQ0],Result);
OQOO0CQOQ0.Delete(OQOO0CQOQ0.Count-1);
end;
end
else begin
OCOO0CQOQ0:=PtrOffset(OCQC0CQOQ0,O0CC0CQOQ0);
O0QO0CQOQ0:=OOCC0CQOQ0;
OOQO0CQOQ0:=0;
try
while(OC0O0CQOQ0=O0C0OCQOQ0)and(OOQO0CQOQ0=0)do
OOC00CQOQ0.OO0Q0CQOQ0;
Result:=OOQO0CQOQ0;
finally
OCOO0CQOQ0:=nil;
O0QO0CQOQ0:=0;
end;
end;
if Result>0 then begin
Inc(OO0O0CQOQ0);
OQCO0CQOQ0;
end;
end;
procedure O0C00CQOQ0.OQ0QCCQOQ0(OC0QCCQOQ0:OQO00CQOQ0);
var
O0OQCCQOQ0:OCO00CQOQ0;
OOOQCCQOQ0:cardinal;
begin
if OC0O0CQOQ0 in[OOC0OCQOQ0,OCC0OCQOQ0]then
raise OCQ0OCQOQ0.Create(SSessionNotEstablished);
if OC0QCCQOQ0.O0000CQOQ0<>OC0CCCQOQ0 then
raise OCQ0OCQOQ0.Create(SSMIDNotValid);
if OC0QCCQOQ0.OQ000CQOQ0<>O0OO0CQOQ0 then
raise OCQ0OCQOQ0.Create(SSIDNotValid);
if OC0QCCQOQ0.OOO00CQOQ0<OCC00CQOQ0 then
raise OCQ0OCQOQ0.Create(SHighWaterForSendNotValid);
OCC00CQOQ0:=OC0QCCQOQ0.OOO00CQOQ0;
case OC0QCCQOQ0.OO000CQOQ0 of
OQOCCCQOQ0:begin
if OC0QCCQOQ0.OC000CQOQ0<>O0OCCCQOQ0 then
raise OCQ0OCQOQ0.Create(SLengthNotValid);
if OC0QCCQOQ0.O0O00CQOQ0<>O00O0CQOQ0 then
raise OCQ0OCQOQ0.Create(SSequenceNotValid);
end;
OCOCCCQOQ0:begin
if OC0QCCQOQ0.OC000CQOQ0<>O0OCCCQOQ0 then
raise OCQ0OCQOQ0.Create(SLengthNotValid);
if OC0QCCQOQ0.O0O00CQOQ0<>O00O0CQOQ0 then
raise OCQ0OCQOQ0.Create(SSequenceNotValid);
if OC0O0CQOQ0=OQC0OCQOQ0 then
OC0O0CQOQ0:=OCC0OCQOQ0
else begin
OC0O0CQOQ0:=OOC0OCQOQ0;
O0CQCCQOQ0;
end;
end;
O0QCCCQOQ0:begin
if OC0QCCQOQ0.OC000CQOQ0<O0OCCCQOQ0 then
raise OCQ0OCQOQ0.Create(SLengthNotValid);
if(OC0QCCQOQ0.O0O00CQOQ0<>O00O0CQOQ0+1)or(OC0QCCQOQ0.O0O00CQOQ0>OO0O0CQOQ0)then
raise OCQ0OCQOQ0.Create(SSequenceNotValid);
Inc(O00O0CQOQ0);
OOOQCCQOQ0:=OC0QCCQOQ0.OC000CQOQ0-O0OCCCQOQ0;
if O0QO0CQOQ0>0 then begin
if cardinal(O0QO0CQOQ0)>OOOQCCQOQ0 then
OOQO0CQOQ0:=OOOQCCQOQ0
else
OOQO0CQOQ0:=O0QO0CQOQ0;
OOC00CQOQ0.O0COOCQOQ0(OCOO0CQOQ0,OOQO0CQOQ0);
Dec(OOOQCCQOQ0,cardinal(OOQO0CQOQ0));
end;
if OOOQCCQOQ0>0 then begin
O0OQCCQOQ0:=OCO00CQOQ0.Create(OOOQCCQOQ0);
OQOO0CQOQ0.Insert(0,O0OQCCQOQ0);
OOC00CQOQ0.O0COOCQOQ0(@O0OQCCQOQ0.O0Q00CQOQ0[0],OOOQCCQOQ0);
end;
end;
else
raise OCQ0OCQOQ0.Create(SFlagNotValid);
end;
end;
constructor OO0OOCQOQ0.Create(OCOQ0CQOQ0:OC00OCQOQ0;O0QQ0CQOQ0:OCO0OCQOQ0);
begin
inherited Create;
if not Assigned(OCOQ0CQOQ0)or not Assigned(O0QQ0CQOQ0)then
raise OCQ0OCQOQ0.Create(SInvalidDataCallbacks);
O0OOOCQOQ0:=OCOQ0CQOQ0;
OOOOOCQOQ0:=O0QQ0CQOQ0;
OC0OOCQOQ0:=TCriticalSection.Create;
OQ0OOCQOQ0:=TCRObjectList.Create;
end;
destructor OO0OOCQOQ0.Destroy;
begin
OQ0OOCQOQ0.Free;
OC0OOCQOQ0.Free;
inherited;
end;
function OO0OOCQOQ0.OQOOOCQOQ0(OCOOOCQOQ0:integer):O0C00CQOQ0;
var
O0QOOCQOQ0:integer;
begin
OC0OOCQOQ0.Enter;
try
for O0QOOCQOQ0:=0 to OQ0OOCQOQ0.Count-1 do begin
Result:=O0C00CQOQ0(OQ0OOCQOQ0[O0QOOCQOQ0]);
if Result.OO0CCCQOQ0=OCOOOCQOQ0 then
Exit;
end;
finally
OC0OOCQOQ0.Leave;
end;
raise OCQ0OCQOQ0.Create(SSessionIdNotFound);
end;
function OO0OOCQOQ0.OQQQ0CQOQ0:integer;
var
OCQQ0CQOQ0:O0C00CQOQ0;
O0CQ0CQOQ0:integer;
OOCQ0CQOQ0:integer;
begin
{$IFNDEF VER25P}
Result:=-1;
{$ENDIF}
OC0OOCQOQ0.Enter;
try
OOCQ0CQOQ0:=OQ0OOCQOQ0.Count;
if OOCQ0CQOQ0>=$FFFF then
raise OCQ0OCQOQ0.Create(SNumberOfOpenSessionsExceeded);
O0CQ0CQOQ0:=0;
while O0CQ0CQOQ0<OOCQ0CQOQ0 do begin
if O0C00CQOQ0(OQ0OOCQOQ0[O0CQ0CQOQ0]).OO0CCCQOQ0>O0CQ0CQOQ0 then
break;
Inc(O0CQ0CQOQ0);
end;
Result:=O0CQ0CQOQ0;
OCQQ0CQOQ0:=O0C00CQOQ0.Create(O0CQ0CQOQ0,Self);
try
OCQQ0CQOQ0.OQQQCCQOQ0;
except
OCQQ0CQOQ0.Free;
raise;
end;
OQ0OOCQOQ0.Insert(O0CQ0CQOQ0,OCQQ0CQOQ0);
finally
OC0OOCQOQ0.Leave;
end;
end;
procedure OO0OOCQOQ0.OQCQ0CQOQ0;
var
OCCQ0CQOQ0:integer;
begin
OC0OOCQOQ0.Enter;
try
try
for OCCQ0CQOQ0:=0 to OQ0OOCQOQ0.Count-1 do
O0C00CQOQ0(OQ0OOCQOQ0[OCCQ0CQOQ0]).O0CQCCQOQ0;
except
end;
OQ0OOCQOQ0.Clear;
finally
OC0OOCQOQ0.Leave;
end;
end;
procedure OO0OOCQOQ0.O00C0CQOQ0(OO0C0CQOQ0:integer);
var
OQ0C0CQOQ0:O0C00CQOQ0;
begin
OQ0C0CQOQ0:=OQOOOCQOQ0(OO0C0CQOQ0);
OQ0C0CQOQ0.O0CQCCQOQ0;
O0OQ0CQOQ0(OQ0C0CQOQ0);
end;
procedure OO0OOCQOQ0.O0OQ0CQOQ0(OOOQ0CQOQ0:O0C00CQOQ0);
begin
if OOOQ0CQOQ0.OQ0CCCQOQ0=OCC0OCQOQ0 then begin
OC0OOCQOQ0.Enter;
try
OQ0OOCQOQ0.Remove(OOOQ0CQOQ0);
finally
OC0OOCQOQ0.Leave;
end;
end;
end;
procedure OO0OOCQOQ0.OC0C0CQOQ0(O0OC0CQOQ0:integer;OOOC0CQOQ0:Pointer;OQOC0CQOQ0,OCOC0CQOQ0:integer);
var
O0QC0CQOQ0:O0C00CQOQ0;
begin
O0QC0CQOQ0:=OQOOOCQOQ0(O0OC0CQOQ0);
O0QC0CQOQ0.OQCQCCQOQ0(OOOC0CQOQ0,OQOC0CQOQ0,OCOC0CQOQ0);
end;
function OO0OOCQOQ0.OOQC0CQOQ0(OQQC0CQOQ0:integer;OCQC0CQOQ0:Pointer;O0CC0CQOQ0,OOCC0CQOQ0:integer):integer;
var
OQCC0CQOQ0:O0C00CQOQ0;
begin
OQCC0CQOQ0:=OQOOOCQOQ0(OQQC0CQOQ0);
Result:=OQCC0CQOQ0.OCCQCCQOQ0(OCQC0CQOQ0,O0CC0CQOQ0,OOCC0CQOQ0);
O0OQ0CQOQ0(OQCC0CQOQ0);
end;
procedure OO0OOCQOQ0.OO0Q0CQOQ0;
var
OQ0Q0CQOQ0:OCCC0CQOQ0;
OC0Q0CQOQ0:O0C00CQOQ0;
begin
O0COOCQOQ0(@OQ0Q0CQOQ0,O0OCCCQOQ0);
OC0Q0CQOQ0:=OQOOOCQOQ0(OQ0Q0CQOQ0.OQ000CQOQ0);
OC0Q0CQOQ0.OQ0QCCQOQ0(@OQ0Q0CQOQ0);
end;
procedure OO0OOCQOQ0.OOQOOCQOQ0(OQQOOCQOQ0:Pointer;OCQOOCQOQ0:integer);
begin
if O0OOOCQOQ0(OQQOOCQOQ0,0,OCQOOCQOQ0)<>OCQOOCQOQ0 then
raise OCQ0OCQOQ0.Create('Write error');
end;
procedure OO0OOCQOQ0.O0COOCQOQ0(OOCOOCQOQ0:Pointer;OQCOOCQOQ0:integer);
var
OCCOOCQOQ0:integer;
O00Q0CQOQ0:integer;
begin
OC0OOCQOQ0.Enter;
try
OCCOOCQOQ0:=0;
while OQCOOCQOQ0>0 do begin
O00Q0CQOQ0:=OOOOOCQOQ0(OOCOOCQOQ0,OCCOOCQOQ0,OQCOOCQOQ0);
if O00Q0CQOQ0<=0 then
raise OCQ0OCQOQ0.Create('Read error');
Inc(OCCOOCQOQ0,O00Q0CQOQ0);
Dec(OQCOOCQOQ0,O00Q0CQOQ0);
end;
finally
OC0OOCQOQ0.Leave;
end;
end;
end.
